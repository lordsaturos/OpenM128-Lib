Interrupt Vectors
    00000 940C 004A JMP	__text_start|__start

Program Code (text area)
__text_start|__start:
    0004A EFCF      LDI	R28,0xFF
    0004B E1D0      LDI	R29,0x10
    0004C BFCD      OUT	0x3D,R28
    0004D BFDE      OUT	0x3E,R29
    0004E 51C0      SUBI	R28,0x10
    0004F 40D0      SBCI	R29,0
    00050 EA0A      LDI	R16,0xAA
    00051 8308      ST	Y,R16
    00052 2400      CLR	R0
    00053 E0E8      LDI	R30,0x8
    00054 E0F1      LDI	R31,1
    00055 E011      LDI	R17,1
    00056 30EE      CPI	R30,0xE
    00057 07F1      CPC	R31,R17
    00058 F011      BEQ	0x005B
    00059 9201      ST	Z+,R0
    0005A CFFB      RJMP	0x0056
    0005B 8300      ST	Z,R16
    0005C E8EC      LDI	R30,0x8C
    0005D E0F0      LDI	R31,0
    0005E E0A0      LDI	R26,0
    0005F E0B1      LDI	R27,1
    00060 E010      LDI	R17,0
    00061 E000      LDI	R16,0
    00062 BF0B      OUT	0x3B,R16
    00063 39E4      CPI	R30,0x94
    00064 07F1      CPC	R31,R17
    00065 F021      BEQ	0x006A
    00066 95C8      LPM
    00067 9631      ADIW	R30,1
    00068 920D      ST	X+,R0
    00069 CFF9      RJMP	0x0063
    0006A 940E 0256 CALL	_main
_exit:
    0006C CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0006D 940E 029C CALL	push_arg4
    0006F 940E 0365 CALL	push_xgsetF03C
    00071 9728      SBIW	R28,0x8
    00072 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00073 24AA      CLR	R10
    00074 E081      LDI	R24,1
    00075 8388      ST	Y,R24
    00076 E080      LDI	R24,0
    00077 8389      STD	Y+1,R24
    00078 838A      STD	Y+2,R24
    00079 838B      STD	Y+3,R24
    0007A C03C      RJMP	0x00B7
(0120)     {
(0121)         y=dat/j;
    0007B 8028      LD	R2,Y
    0007C 8039      LDD	R3,Y+1
    0007D 804A      LDD	R4,Y+2
    0007E 805B      LDD	R5,Y+3
    0007F 8908      LDD	R16,Y+16
    00080 8919      LDD	R17,Y+17
    00081 892A      LDD	R18,Y+18
    00082 893B      LDD	R19,Y+19
    00083 925A      ST	-Y,R5
    00084 924A      ST	-Y,R4
    00085 923A      ST	-Y,R3
    00086 922A      ST	-Y,R2
    00087 940E 02A1 CALL	div32u
    00089 830C      STD	Y+4,R16
    0008A 831D      STD	Y+5,R17
    0008B 832E      STD	Y+6,R18
    0008C 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0008D E04A      LDI	R20,0xA
    0008E E050      LDI	R21,0
    0008F E060      LDI	R22,0
    00090 E070      LDI	R23,0
    00091 810C      LDD	R16,Y+4
    00092 811D      LDD	R17,Y+5
    00093 812E      LDD	R18,Y+6
    00094 813F      LDD	R19,Y+7
    00095 937A      ST	-Y,R23
    00096 936A      ST	-Y,R22
    00097 935A      ST	-Y,R21
    00098 934A      ST	-Y,R20
    00099 940E 02A3 CALL	mod32u
    0009B E088      LDI	R24,0x8
    0009C E091      LDI	R25,1
    0009D 2DEA      MOV	R30,R10
    0009E 27FF      CLR	R31
    0009F 0FE8      ADD	R30,R24
    000A0 1FF9      ADC	R31,R25
    000A1 8300      ST	Z,R16
(0123)         j*=10;
    000A2 8028      LD	R2,Y
    000A3 8039      LDD	R3,Y+1
    000A4 804A      LDD	R4,Y+2
    000A5 805B      LDD	R5,Y+3
    000A6 E04A      LDI	R20,0xA
    000A7 E050      LDI	R21,0
    000A8 E060      LDI	R22,0
    000A9 E070      LDI	R23,0
    000AA 925A      ST	-Y,R5
    000AB 924A      ST	-Y,R4
    000AC 923A      ST	-Y,R3
    000AD 922A      ST	-Y,R2
    000AE 018A      MOVW	R16,R20
    000AF 019B      MOVW	R18,R22
    000B0 940E 030B CALL	empy32s|empy32u
    000B2 8308      ST	Y,R16
    000B3 8319      STD	Y+1,R17
    000B4 832A      STD	Y+2,R18
    000B5 833B      STD	Y+3,R19
    000B6 94A3      INC	R10
    000B7 2C2C      MOV	R2,R12
    000B8 2433      CLR	R3
    000B9 FC27      SBRC	R2,7
    000BA 9430      COM	R3
    000BB 2C4A      MOV	R4,R10
    000BC 2455      CLR	R5
    000BD 1442      CP	R4,R2
    000BE 0453      CPC	R5,R3
    000BF F40C      BGE	0x00C1
    000C0 CFBA      RJMP	0x007B
    000C1 9628      ADIW	R28,0x8
    000C2 940E 036E CALL	pop_xgsetF03C
    000C4 9624      ADIW	R28,4
    000C5 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    000C6 EA84      LDI	R24,0xA4
    000C7 9380 0074 STS	0x74,R24
(0128) 	I2CWaitAck();
    000C9 9020 0074 LDS	R2,0x74
    000CB FE27      SBRS	R2,7
    000CC CFFC      RJMP	0x00C9
(0129) 	if( I2CChkAck()!=I2C_START ) 
    000CD 9180 0071 LDS	R24,0x71
    000CF 7F88      ANDI	R24,0xF8
    000D0 3088      CPI	R24,0x8
    000D1 F011      BEQ	0x00D4
(0130) 		return I2C_ERR;
    000D2 2700      CLR	R16
    000D3 C001      RJMP	0x00D5
(0131) 	return I2C_CRR;
    000D4 E001      LDI	R16,1
    000D5 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    000D6 EA84      LDI	R24,0xA4
    000D7 9380 0074 STS	0x74,R24
(0144) 	I2CWaitAck();
    000D9 9020 0074 LDS	R2,0x74
    000DB FE27      SBRS	R2,7
    000DC CFFC      RJMP	0x00D9
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    000DD 9180 0071 LDS	R24,0x71
    000DF 7F88      ANDI	R24,0xF8
    000E0 3180      CPI	R24,0x10
    000E1 F011      BEQ	0x00E4
(0146) 		return I2C_ERR;
    000E2 2700      CLR	R16
    000E3 C001      RJMP	0x00E5
(0147) 	return I2C_CRR;
    000E4 E001      LDI	R16,1
    000E5 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    000E6 9300 0073 STS	0x73,R16
    000E8 E884      LDI	R24,0x84
    000E9 9380 0074 STS	0x74,R24
(0160) 	I2CWaitAck();
    000EB 9020 0074 LDS	R2,0x74
    000ED FE27      SBRS	R2,7
    000EE CFFC      RJMP	0x00EB
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    000EF 9180 0071 LDS	R24,0x71
    000F1 7F88      ANDI	R24,0xF8
    000F2 3188      CPI	R24,0x18
    000F3 F011      BEQ	0x00F6
(0162) 		return I2C_ERR;
    000F4 2700      CLR	R16
    000F5 C001      RJMP	0x00F7
(0163) 	return I2C_CRR;		
    000F6 E001      LDI	R16,1
    000F7 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    000F8 92AA      ST	-Y,R10
    000F9 92BA      ST	-Y,R11
    000FA 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    000FB FEA0      SBRS	R10,0
    000FC C00E      RJMP	0x010B
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    000FD 2D0A      MOV	R16,R10
    000FE 9506      LSR	R16
    000FF 9506      LSR	R16
    00100 9506      LSR	R16
    00101 9506      LSR	R16
    00102 9506      LSR	R16
    00103 9506      LSR	R16
    00104 9506      LSR	R16
    00105 9506      LSR	R16
    00106 DFDF      RCALL	_I2C_SendWrDAdr
    00107 2300      TST	R16
    00108 F411      BNE	0x010B
(0177) 			return I2C_ERR;
    00109 2700      CLR	R16
    0010A C007      RJMP	0x0112
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    0010B 2D0A      MOV	R16,R10
    0010C DFD9      RCALL	_I2C_SendWrDAdr
    0010D 2300      TST	R16
    0010E F411      BNE	0x0111
(0179) 		return I2C_ERR;
    0010F 2700      CLR	R16
    00110 C001      RJMP	0x0112
(0180) 	return I2C_CRR;
    00111 E001      LDI	R16,1
    00112 90B9      LD	R11,Y+
    00113 90A9      LD	R10,Y+
    00114 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    00115 9300 0073 STS	0x73,R16
    00117 E884      LDI	R24,0x84
    00118 9380 0074 STS	0x74,R24
(0193) 	I2CWaitAck();
    0011A 9020 0074 LDS	R2,0x74
    0011C FE27      SBRS	R2,7
    0011D CFFC      RJMP	0x011A
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    0011E 9180 0071 LDS	R24,0x71
    00120 7F88      ANDI	R24,0xF8
    00121 3480      CPI	R24,0x40
    00122 F011      BEQ	0x0125
(0195) 		return I2C_ERR;
    00123 2700      CLR	R16
    00124 C001      RJMP	0x0126
(0196) 	return I2C_CRR;	
    00125 E001      LDI	R16,1
    00126 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    00127 92AA      ST	-Y,R10
    00128 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    00129 FEA0      SBRS	R10,0
    0012A C00E      RJMP	0x0139
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    0012B 2D0A      MOV	R16,R10
    0012C 9506      LSR	R16
    0012D 9506      LSR	R16
    0012E 9506      LSR	R16
    0012F 9506      LSR	R16
    00130 9506      LSR	R16
    00131 9506      LSR	R16
    00132 9506      LSR	R16
    00133 9506      LSR	R16
    00134 DFB1      RCALL	_I2C_SendWrDAdr
    00135 2300      TST	R16
    00136 F411      BNE	0x0139
(0210) 			return I2C_ERR;
    00137 2700      CLR	R16
    00138 C007      RJMP	0x0140
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    00139 2D0A      MOV	R16,R10
    0013A DFAB      RCALL	_I2C_SendWrDAdr
    0013B 2300      TST	R16
    0013C F411      BNE	0x013F
(0212) 		return I2C_ERR;
    0013D 2700      CLR	R16
    0013E C001      RJMP	0x0140
(0213) 	return I2C_CRR;
    0013F E001      LDI	R16,1
    00140 90A9      LD	R10,Y+
    00141 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    00142 9300 0073 STS	0x73,R16
    00144 E884      LDI	R24,0x84
    00145 9380 0074 STS	0x74,R24
(0226) 	I2CWaitAck();
    00147 9020 0074 LDS	R2,0x74
    00149 FE27      SBRS	R2,7
    0014A CFFC      RJMP	0x0147
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    0014B 9180 0071 LDS	R24,0x71
    0014D 7F88      ANDI	R24,0xF8
    0014E 3288      CPI	R24,0x28
    0014F F011      BEQ	0x0152
(0228) 		return I2C_ERR;
    00150 2700      CLR	R16
    00151 C001      RJMP	0x0153
(0229) 	return I2C_CRR;	
    00152 E001      LDI	R16,1
    00153 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    00154 E884      LDI	R24,0x84
    00155 9380 0074 STS	0x74,R24
(0242) 	I2CWaitAck();
    00157 9020 0074 LDS	R2,0x74
    00159 FE27      SBRS	R2,7
    0015A CFFC      RJMP	0x0157
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    0015B 9180 0071 LDS	R24,0x71
    0015D 7F88      ANDI	R24,0xF8
    0015E 3588      CPI	R24,0x58
    0015F F011      BEQ	0x0162
(0244) 		return I2C_ERR;
    00160 2700      CLR	R16
    00161 C005      RJMP	0x0167
(0245) 	*pRdDat=TWDR;
    00162 9020 0073 LDS	R2,0x73
    00164 01F8      MOVW	R30,R16
    00165 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    00166 E001      LDI	R16,1
    00167 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    00168 EC84      LDI	R24,0xC4
    00169 9380 0074 STS	0x74,R24
(0259) 	I2CWaitAck();
    0016B 9020 0074 LDS	R2,0x74
    0016D FE27      SBRS	R2,7
    0016E CFFC      RJMP	0x016B
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    0016F 9180 0071 LDS	R24,0x71
    00171 7F88      ANDI	R24,0xF8
    00172 3580      CPI	R24,0x50
    00173 F011      BEQ	0x0176
(0261) 		return I2C_ERR;
    00174 2700      CLR	R16
    00175 C005      RJMP	0x017B
(0262) 	*pRdDat=TWDR;
    00176 9020 0073 LDS	R2,0x73
    00178 01F8      MOVW	R30,R16
    00179 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    0017A E001      LDI	R16,1
    0017B 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    0017C 940E 035E CALL	push_xgset00FC
    0017E 2EC2      MOV	R12,R18
    0017F 0178      MOVW	R14,R16
    00180 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    00181 DF44      RCALL	_I2C_Start
    00182 2300      TST	R16
    00183 F411      BNE	0x0186
(0278) 		return I2C_ERR;
    00184 2700      CLR	R16
    00185 C018      RJMP	0x019E
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    00186 0187      MOVW	R16,R14
    00187 DF70      RCALL	_I2C_SendWrDAdr_
    00188 2300      TST	R16
    00189 F411      BNE	0x018C
(0281) 		return I2C_ERR;
    0018A 2700      CLR	R16
    0018B C012      RJMP	0x019E
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    0018C 2D0C      MOV	R16,R12
    0018D DFB4      RCALL	_I2C_SendDat
    0018E 2EC0      MOV	R12,R16
    0018F 2300      TST	R16
    00190 F411      BNE	0x0193
(0284) 		return I2C_ERR;
    00191 2700      CLR	R16
    00192 C00B      RJMP	0x019E
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    00193 2D0A      MOV	R16,R10
    00194 DFAD      RCALL	_I2C_SendDat
    00195 2EA0      MOV	R10,R16
    00196 2300      TST	R16
    00197 F411      BNE	0x019A
(0287) 		return I2C_ERR;
    00198 2700      CLR	R16
    00199 C004      RJMP	0x019E
(0288) 
(0289) 	I2C_Stop();
    0019A E984      LDI	R24,0x94
    0019B 9380 0074 STS	0x74,R24
(0290) 
(0291) 	return I2C_CRR;
    0019D E001      LDI	R16,1
    0019E 940C 033F JMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    001A0 940E 035C CALL	push_xgset30FC
    001A2 2EE2      MOV	R14,R18
    001A3 01A8      MOVW	R20,R16
    001A4 84C8      LDD	R12,Y+8
    001A5 84AA      LDD	R10,Y+10
    001A6 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    001A7 DF1E      RCALL	_I2C_Start
    001A8 2300      TST	R16
    001A9 F411      BNE	0x01AC
(0324) 		return I2C_ERR;
    001AA 2700      CLR	R16
    001AB C025      RJMP	0x01D1
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001AC 018A      MOVW	R16,R20
    001AD DF4A      RCALL	_I2C_SendWrDAdr_
    001AE 2300      TST	R16
    001AF F411      BNE	0x01B2
(0327) 		return I2C_ERR;
    001B0 2700      CLR	R16
    001B1 C01F      RJMP	0x01D1
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001B2 2D0E      MOV	R16,R14
    001B3 DF8E      RCALL	_I2C_SendDat
    001B4 2EE0      MOV	R14,R16
    001B5 2300      TST	R16
    001B6 F411      BNE	0x01B9
(0330) 		return I2C_ERR;
    001B7 2700      CLR	R16
    001B8 C018      RJMP	0x01D1
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    001B9 DF1C      RCALL	_I2C_Restart
    001BA 2EE0      MOV	R14,R16
    001BB 2300      TST	R16
    001BC F411      BNE	0x01BF
(0333) 		return I2C_ERR;
    001BD 2700      CLR	R16
    001BE C012      RJMP	0x01D1
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001BF 2D0C      MOV	R16,R12
    001C0 DF54      RCALL	_I2C_SendRdDAdr
    001C1 2EC0      MOV	R12,R16
    001C2 2300      TST	R16
    001C3 F411      BNE	0x01C6
(0336) 		return I2C_ERR;
    001C4 2700      CLR	R16
    001C5 C00B      RJMP	0x01D1
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    001C6 0185      MOVW	R16,R10
    001C7 DF8C      RCALL	_I2C_RcvNAckDat
    001C8 2EA0      MOV	R10,R16
    001C9 2300      TST	R16
    001CA F411      BNE	0x01CD
(0339) 		return I2C_ERR;
    001CB 2700      CLR	R16
    001CC C004      RJMP	0x01D1
(0340) 
(0341) 	I2C_Stop();
    001CD E984      LDI	R24,0x94
    001CE 9380 0074 STS	0x74,R24
(0342) 
(0343) 	return I2C_CRR;
    001D0 E001      LDI	R16,1
    001D1 940C 0346 JMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    001D3 940E 035A CALL	push_xgsetF0FC
    001D5 2EE2      MOV	R14,R18
    001D6 01B8      MOVW	R22,R16
    001D7 84CA      LDD	R12,Y+10
    001D8 84AC      LDD	R10,Y+12
    001D9 84BD      LDD	R11,Y+13
    001DA 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    001DB DEEA      RCALL	_I2C_Start
    001DC 2300      TST	R16
    001DD F411      BNE	0x01E0
(0363) 		return I2C_ERR;
    001DE 2700      CLR	R16
    001DF C039      RJMP	0x0219
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001E0 018B      MOVW	R16,R22
    001E1 DF16      RCALL	_I2C_SendWrDAdr_
    001E2 2300      TST	R16
    001E3 F411      BNE	0x01E6
(0366) 		return I2C_ERR;
    001E4 2700      CLR	R16
    001E5 C033      RJMP	0x0219
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001E6 2D0E      MOV	R16,R14
    001E7 DF5A      RCALL	_I2C_SendDat
    001E8 2EE0      MOV	R14,R16
    001E9 2300      TST	R16
    001EA F411      BNE	0x01ED
(0369) 		return I2C_ERR;
    001EB 2700      CLR	R16
    001EC C02C      RJMP	0x0219
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    001ED DEE8      RCALL	_I2C_Restart
    001EE 2EE0      MOV	R14,R16
    001EF 2300      TST	R16
    001F0 F411      BNE	0x01F3
(0372) 		return I2C_ERR;
    001F1 2700      CLR	R16
    001F2 C026      RJMP	0x0219
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001F3 2D0C      MOV	R16,R12
    001F4 DF20      RCALL	_I2C_SendRdDAdr
    001F5 2EC0      MOV	R12,R16
    001F6 2300      TST	R16
    001F7 F411      BNE	0x01FA
(0375) 		return I2C_ERR;
    001F8 2700      CLR	R16
    001F9 C01F      RJMP	0x0219
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    001FA 24CC      CLR	R12
    001FB C00B      RJMP	0x0207
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    001FC 2D0C      MOV	R16,R12
    001FD 2711      CLR	R17
    001FE 0D0A      ADD	R16,R10
    001FF 1D1B      ADC	R17,R11
    00200 DF67      RCALL	_I2C_RcvAckDat
    00201 2EE0      MOV	R14,R16
    00202 2300      TST	R16
    00203 F411      BNE	0x0206
(0379) 			return I2C_ERR;
    00204 2700      CLR	R16
    00205 C013      RJMP	0x0219
    00206 94C3      INC	R12
    00207 2F84      MOV	R24,R20
    00208 5081      SUBI	R24,1
    00209 16C8      CP	R12,R24
    0020A F388      BCS	0x01FC
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    0020B 2D0C      MOV	R16,R12
    0020C 2711      CLR	R17
    0020D 0D0A      ADD	R16,R10
    0020E 1D1B      ADC	R17,R11
    0020F DF44      RCALL	_I2C_RcvNAckDat
    00210 2EA0      MOV	R10,R16
    00211 2300      TST	R16
    00212 F411      BNE	0x0215
(0382) 			return I2C_ERR;
    00213 2700      CLR	R16
    00214 C004      RJMP	0x0219
(0383) 
(0384) 	I2C_Stop();
    00215 E984      LDI	R24,0x94
    00216 9380 0074 STS	0x74,R24
(0385) 	
(0386) 	return I2C_CRR;
    00218 E001      LDI	R16,1
    00219 940C 034F JMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    0021B 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    0021C C007      RJMP	0x0224
(0108)         for(j=0;j<70;j++)	
    0021D 2744      CLR	R20
    0021E C001      RJMP	0x0220
    0021F 9543      INC	R20
    00220 3446      CPI	R20,0x46
    00221 F3E8      BCS	0x021F
    00222 5001      SUBI	R16,1
    00223 4010      SBCI	R17,0
    00224 2422      CLR	R2
    00225 2433      CLR	R3
    00226 1620      CP	R2,R16
    00227 0631      CPC	R3,R17
    00228 F3A4      BLT	0x021D
    00229 9149      LD	R20,Y+
    0022A 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    0022B 934A      ST	-Y,R20
    0022C 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    0022D C013      RJMP	0x0241
(0123) 		for(i=0;i<52642;i++)
    0022E 2744      CLR	R20
    0022F 2755      CLR	R21
    00230 C002      RJMP	0x0233
    00231 5F4F      SUBI	R20,0xFF
    00232 4F5F      SBCI	R21,0xFF
    00233 EA82      LDI	R24,0xA2
    00234 EC9D      LDI	R25,0xCD
    00235 E0A0      LDI	R26,0
    00236 E0B0      LDI	R27,0
    00237 011A      MOVW	R2,R20
    00238 2444      CLR	R4
    00239 2455      CLR	R5
    0023A 1628      CP	R2,R24
    0023B 0639      CPC	R3,R25
    0023C 064A      CPC	R4,R26
    0023D 065B      CPC	R5,R27
    0023E F394      BLT	0x0231
    0023F 5001      SUBI	R16,1
    00240 4010      SBCI	R17,0
    00241 2422      CLR	R2
    00242 2433      CLR	R3
    00243 1620      CP	R2,R16
    00244 0631      CPC	R3,R17
    00245 F344      BLT	0x022E
    00246 9159      LD	R21,Y+
    00247 9149      LD	R20,Y+
    00248 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    00249 934A      ST	-Y,R20
    0024A 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    0024B 2744      CLR	R20
    0024C 2755      CLR	R21
    0024D C002      RJMP	0x0250
    0024E 5F4F      SUBI	R20,0xFF
    0024F 4F5F      SBCI	R21,0xFF
    00250 1740      CP	R20,R16
    00251 0751      CPC	R21,R17
    00252 F3D8      BCS	0x024E
    00253 9159      LD	R21,Y+
    00254 9149      LD	R20,Y+
    00255 9508      RET
_main:
  wrDat_               --> Y,+10
  wrDat                --> R20
  rdDat_               --> Y,+2
  i                    --> R20
    00256 9762      SBIW	R28,0x12
FILE: D:\DVK501_ICC\KERNEL~1\ATmega128\内核－EEPROM\EEPROM\EEPROM.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net	
(0003) 
(0004) 功能目的:   建立EEPROM操作示例程序
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 
(0008) 应用软件:   ICCAVR                                               
(0009) 
(0010) 版    本:   Version 1.0
(0011) 
(0012) 圆版时间:   2005-03-01
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ---------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 写入一些测试数据进EEPROM，再读出，使用PB口的LED做指示，观测是否与写入一致。
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：	
(0030) 将PB口的LED指示灯使能开关切换到"ON"状态。
(0031) ----------------------------------------------------------------------
(0032) 注意事项： 
(0033) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0034) （2）请详细阅读“使用必读”及相关资料。
(0035) 		
(0036) ----------------------------------------------------------------------
(0037) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0038) 
(0039) #include <iom128v.h>
(0040) #include "D:\ICC_H\CmmICC.H"
(0041) 
(0042) #define DISP_DDR   DDRB
(0043) #define DISP_PORT  PORTB
(0044) 
(0045) /*--------------------------------------------------------------------
(0046) 函数名称：
(0047) 函数功能：
(0048) 注意事项：
(0049) 提示说明：
(0050) 输    入：
(0051) 返    回：
(0052) --------------------------------------------------------------------*/
(0053) void main(void) 
(0054) {
(0055) 	uint8 i;
(0056) 	uint8 wrDat=0xAA;
    00257 EA4A      LDI	R20,0xAA
(0057) 	uint8 wrDat_[]={1,2,3,4,5,6,7,8},rdDat_[8];
    00258 E080      LDI	R24,0
    00259 E091      LDI	R25,1
    0025A 01FE      MOVW	R30,R28
    0025B 963A      ADIW	R30,0xA
    0025C E008      LDI	R16,0x8
    0025D E010      LDI	R17,0
    0025E 93FA      ST	-Y,R31
    0025F 93EA      ST	-Y,R30
    00260 939A      ST	-Y,R25
    00261 938A      ST	-Y,R24
    00262 940E 03A5 CALL	asgnblk
(0058) 	DISP_DDR=0xFF;
    00264 EF8F      LDI	R24,0xFF
    00265 BB87      OUT	0x17,R24
(0059) 	EEPROMwrite(0x01,wrDat);		//写入单个数据
    00266 2F24      MOV	R18,R20
    00267 E001      LDI	R16,1
    00268 E010      LDI	R17,0
    00269 940E 03C4 CALL	_EEPROMwrite
(0060) 	DISP_PORT=EEPROMread(0x01);		//读出用指示灯验证是否正确
    0026B E001      LDI	R16,1
    0026C E010      LDI	R17,0
    0026D 940E 03BD CALL	_EEPROMread
    0026F BB08      OUT	0x18,R16
(0061) 	delay50ms(40);				//有2S的观察时间
    00270 E208      LDI	R16,0x28
    00271 E010      LDI	R17,0
    00272 DFB8      RCALL	_delay50ms
(0062) 	EEPROMWriteBytes(1,wrDat_,8);	//写入数组						  
    00273 E088      LDI	R24,0x8
    00274 E090      LDI	R25,0
    00275 8399      STD	Y+1,R25
    00276 8388      ST	Y,R24
    00277 019E      MOVW	R18,R28
    00278 5F26      SUBI	R18,0xF6
    00279 4F3F      SBCI	R19,0xFF
    0027A E001      LDI	R16,1
    0027B E010      LDI	R17,0
    0027C 940E 03EE CALL	_EEPROMWriteBytes
(0063) 	EEPROMReadBytes(1,rdDat_,8);	
    0027E E088      LDI	R24,0x8
    0027F E090      LDI	R25,0
    00280 8399      STD	Y+1,R25
    00281 8388      ST	Y,R24
    00282 019E      MOVW	R18,R28
    00283 5F2E      SUBI	R18,0xFE
    00284 4F3F      SBCI	R19,0xFF
    00285 E001      LDI	R16,1
    00286 E010      LDI	R17,0
    00287 940E 03D3 CALL	_EEPROMReadBytes
(0064) 	for(i=0;i<7;i++)
    00289 2744      CLR	R20
    0028A C00C      RJMP	0x0297
(0065) 	{
(0066) 		delay50ms(40);			//有2S的观察时间
    0028B E208      LDI	R16,0x28
    0028C E010      LDI	R17,0
    0028D DF9D      RCALL	_delay50ms
(0067) 		DISP_PORT=rdDat_[i];		//读出用指示灯验证是否正确
    0028E 01CE      MOVW	R24,R28
    0028F 9602      ADIW	R24,2
    00290 2FE4      MOV	R30,R20
    00291 27FF      CLR	R31
    00292 0FE8      ADD	R30,R24
    00293 1FF9      ADC	R31,R25
    00294 8020      LD	R2,Z
    00295 BA28      OUT	0x18,R2
    00296 9543      INC	R20
    00297 3047      CPI	R20,7
    00298 F390      BCS	0x028B
(0068) 	} 			
(0069) 	while(1);
FILE: <library>
    00299 CFFF      RJMP	0x0299
    0029A 9662      ADIW	R28,0x12
    0029B 9508      RET
push_arg4:
    0029C 933A      ST	-Y,R19
    0029D 932A      ST	-Y,R18
push_arg2:
    0029E 931A      ST	-Y,R17
    0029F 930A      ST	-Y,R16
    002A0 9508      RET
div32u:
    002A1 94E8      BCLR	6
    002A2 C001      RJMP	0x02A4
mod32u:
    002A3 9468      BSET	6
    002A4 D030      RCALL	long_div_prolog
    002A5 24CC      CLR	R12
    002A6 C009      RJMP	0x02B0
div32s:
    002A7 94E8      BCLR	6
    002A8 C001      RJMP	0x02AA
mod32s:
    002A9 9468      BSET	6
    002AA D02A      RCALL	long_div_prolog
    002AB FD37      SBRC	R19,7
    002AC 940E 0377 CALL	neg32
    002AE FDB7      SBRC	R27,7
    002AF D052      RCALL	neg_R24_R27
    002B0 2477      CLR	R7
    002B1 2488      CLR	R8
    002B2 2499      CLR	R9
    002B3 24AA      CLR	R10
    002B4 24BB      CLR	R11
    002B5 D042      RCALL	tst_R16_R19
    002B6 F0C1      BEQ	0x02CF
    002B7 D045      RCALL	tst_R24_R27
    002B8 F0B1      BEQ	0x02CF
    002B9 E2E8      LDI	R30,0x28
    002BA 0F00      LSL	R16
    002BB 1F11      ROL	R17
    002BC 1F22      ROL	R18
    002BD 1F33      ROL	R19
    002BE 1C77      ROL	R7
    002BF 1C88      ROL	R8
    002C0 1C99      ROL	R9
    002C1 1CAA      ROL	R10
    002C2 1CBB      ROL	R11
    002C3 1688      CP	R8,R24
    002C4 0699      CPC	R9,R25
    002C5 06AA      CPC	R10,R26
    002C6 06BB      CPC	R11,R27
    002C7 F028      BCS	0x02CD
    002C8 1A88      SUB	R8,R24
    002C9 0A99      SBC	R9,R25
    002CA 0AAA      SBC	R10,R26
    002CB 0ABB      SBC	R11,R27
    002CC 9503      INC	R16
    002CD 95EA      DEC	R30
    002CE F759      BNE	0x02BA
    002CF F426      BRTC	0x02D4
    002D0 2D08      MOV	R16,R8
    002D1 2D19      MOV	R17,R9
    002D2 2D2A      MOV	R18,R10
    002D3 2D3B      MOV	R19,R11
    002D4 C013      RJMP	long_div_epilog
long_div_prolog:
    002D5 927A      ST	-Y,R7
    002D6 928A      ST	-Y,R8
    002D7 929A      ST	-Y,R9
    002D8 92AA      ST	-Y,R10
    002D9 92BA      ST	-Y,R11
    002DA 92CA      ST	-Y,R12
    002DB 93EA      ST	-Y,R30
    002DC 938A      ST	-Y,R24
    002DD 939A      ST	-Y,R25
    002DE 93AA      ST	-Y,R26
    002DF 93BA      ST	-Y,R27
    002E0 858B      LDD	R24,Y+11
    002E1 859C      LDD	R25,Y+12
    002E2 85AD      LDD	R26,Y+13
    002E3 85BE      LDD	R27,Y+14
    002E4 2EC3      MOV	R12,R19
    002E5 F00E      BRTS	0x02E7
    002E6 26CB      EOR	R12,R27
    002E7 9508      RET
long_div_epilog:
    002E8 FCC7      SBRC	R12,7
    002E9 940E 0377 CALL	neg32
    002EB 91B9      LD	R27,Y+
    002EC 91A9      LD	R26,Y+
    002ED 9199      LD	R25,Y+
    002EE 9189      LD	R24,Y+
    002EF 91E9      LD	R30,Y+
    002F0 90C9      LD	R12,Y+
    002F1 90B9      LD	R11,Y+
    002F2 90A9      LD	R10,Y+
    002F3 9099      LD	R9,Y+
    002F4 9089      LD	R8,Y+
    002F5 9079      LD	R7,Y+
    002F6 9624      ADIW	R28,4
    002F7 9508      RET
tst_R16_R19:
    002F8 2FE0      MOV	R30,R16
    002F9 2BE1      OR	R30,R17
    002FA 2BE2      OR	R30,R18
    002FB 2BE3      OR	R30,R19
    002FC 9508      RET
tst_R24_R27:
    002FD 2FE8      MOV	R30,R24
    002FE 2BE9      OR	R30,R25
    002FF 2BEA      OR	R30,R26
    00300 2BEB      OR	R30,R27
    00301 9508      RET
neg_R24_R27:
    00302 9580      COM	R24
    00303 9590      COM	R25
    00304 95A0      COM	R26
    00305 95B0      COM	R27
    00306 5F8F      SUBI	R24,0xFF
    00307 4F9F      SBCI	R25,0xFF
    00308 4FAF      SBCI	R26,0xFF
    00309 4FBF      SBCI	R27,0xFF
    0030A 9508      RET
empy32s|empy32u:
    0030B 940E 0380 CALL	long_prolog
    0030D 927A      ST	-Y,R7
    0030E 940E 0399 CALL	tstzero1
    00310 F159      BEQ	0x033C
    00311 2477      CLR	R7
    00312 940E 039F CALL	tstzero2
    00314 F419      BNE	0x0318
    00315 018C      MOVW	R16,R24
    00316 019D      MOVW	R18,R26
    00317 C024      RJMP	0x033C
    00318 920A      ST	-Y,R0
    00319 921A      ST	-Y,R1
    0031A 9F08      MUL	R16,R24
    0031B 2CB0      MOV	R11,R0
    0031C 2CA1      MOV	R10,R1
    0031D 9F28      MUL	R18,R24
    0031E 2C90      MOV	R9,R0
    0031F 2C81      MOV	R8,R1
    00320 9F18      MUL	R17,R24
    00321 0CA0      ADD	R10,R0
    00322 1C91      ADC	R9,R1
    00323 1C87      ADC	R8,R7
    00324 9F09      MUL	R16,R25
    00325 0CA0      ADD	R10,R0
    00326 1C91      ADC	R9,R1
    00327 1C87      ADC	R8,R7
    00328 9F19      MUL	R17,R25
    00329 0C90      ADD	R9,R0
    0032A 1C81      ADC	R8,R1
    0032B 9F0A      MUL	R16,R26
    0032C 0C90      ADD	R9,R0
    0032D 1C81      ADC	R8,R1
    0032E 9F38      MUL	R19,R24
    0032F 0C80      ADD	R8,R0
    00330 9F29      MUL	R18,R25
    00331 0C80      ADD	R8,R0
    00332 9F1A      MUL	R17,R26
    00333 0C80      ADD	R8,R0
    00334 9F0B      MUL	R16,R27
    00335 0C80      ADD	R8,R0
    00336 9019      LD	R1,Y+
    00337 9009      LD	R0,Y+
    00338 2D0B      MOV	R16,R11
    00339 2D1A      MOV	R17,R10
    0033A 2D29      MOV	R18,R9
    0033B 2D38      MOV	R19,R8
    0033C 9079      LD	R7,Y+
    0033D 940C 038E JMP	long_epilog
pop_xgset00FC:
    0033F 90A9      LD	R10,Y+
    00340 90B9      LD	R11,Y+
    00341 90C9      LD	R12,Y+
    00342 90D9      LD	R13,Y+
    00343 90E9      LD	R14,Y+
    00344 90F9      LD	R15,Y+
    00345 9508      RET
pop_xgset30FC:
    00346 90A9      LD	R10,Y+
    00347 90B9      LD	R11,Y+
    00348 90C9      LD	R12,Y+
    00349 90D9      LD	R13,Y+
    0034A 90E9      LD	R14,Y+
    0034B 90F9      LD	R15,Y+
    0034C 9149      LD	R20,Y+
    0034D 9159      LD	R21,Y+
    0034E 9508      RET
pop_xgsetF0FC:
    0034F 90A9      LD	R10,Y+
    00350 90B9      LD	R11,Y+
    00351 90C9      LD	R12,Y+
    00352 90D9      LD	R13,Y+
    00353 90E9      LD	R14,Y+
    00354 90F9      LD	R15,Y+
    00355 9149      LD	R20,Y+
    00356 9159      LD	R21,Y+
    00357 9169      LD	R22,Y+
    00358 9179      LD	R23,Y+
    00359 9508      RET
push_xgsetF0FC:
    0035A 937A      ST	-Y,R23
    0035B 936A      ST	-Y,R22
push_xgset30FC:
    0035C 935A      ST	-Y,R21
    0035D 934A      ST	-Y,R20
push_xgset00FC:
    0035E 92FA      ST	-Y,R15
    0035F 92EA      ST	-Y,R14
push_xgset003C:
    00360 92DA      ST	-Y,R13
    00361 92CA      ST	-Y,R12
    00362 92BA      ST	-Y,R11
    00363 92AA      ST	-Y,R10
    00364 9508      RET
push_xgsetF03C:
    00365 937A      ST	-Y,R23
    00366 936A      ST	-Y,R22
    00367 935A      ST	-Y,R21
    00368 934A      ST	-Y,R20
    00369 92DA      ST	-Y,R13
    0036A 92CA      ST	-Y,R12
    0036B 92BA      ST	-Y,R11
    0036C 92AA      ST	-Y,R10
    0036D 9508      RET
pop_xgsetF03C:
    0036E 90A9      LD	R10,Y+
    0036F 90B9      LD	R11,Y+
    00370 90C9      LD	R12,Y+
    00371 90D9      LD	R13,Y+
    00372 9149      LD	R20,Y+
    00373 9159      LD	R21,Y+
    00374 9169      LD	R22,Y+
    00375 9179      LD	R23,Y+
    00376 9508      RET
neg32:
    00377 9500      COM	R16
    00378 9510      COM	R17
    00379 9520      COM	R18
    0037A 9530      COM	R19
    0037B 5F0F      SUBI	R16,0xFF
    0037C 4F1F      SBCI	R17,0xFF
    0037D 4F2F      SBCI	R18,0xFF
    0037E 4F3F      SBCI	R19,0xFF
    0037F 9508      RET
long_prolog:
    00380 928A      ST	-Y,R8
    00381 929A      ST	-Y,R9
    00382 92AA      ST	-Y,R10
    00383 92BA      ST	-Y,R11
    00384 93EA      ST	-Y,R30
    00385 938A      ST	-Y,R24
    00386 939A      ST	-Y,R25
    00387 93AA      ST	-Y,R26
    00388 93BA      ST	-Y,R27
    00389 8589      LDD	R24,Y+9
    0038A 859A      LDD	R25,Y+10
    0038B 85AB      LDD	R26,Y+11
    0038C 85BC      LDD	R27,Y+12
    0038D 9508      RET
long_epilog:
    0038E 91B9      LD	R27,Y+
    0038F 91A9      LD	R26,Y+
    00390 9199      LD	R25,Y+
    00391 9189      LD	R24,Y+
    00392 91E9      LD	R30,Y+
    00393 90B9      LD	R11,Y+
    00394 90A9      LD	R10,Y+
    00395 9099      LD	R9,Y+
    00396 9089      LD	R8,Y+
    00397 9624      ADIW	R28,4
    00398 9508      RET
tstzero1:
    00399 27EE      CLR	R30
    0039A 2BE0      OR	R30,R16
    0039B 2BE1      OR	R30,R17
    0039C 2BE2      OR	R30,R18
    0039D 2BE3      OR	R30,R19
    0039E 9508      RET
tstzero2:
    0039F 27EE      CLR	R30
    003A0 2BE8      OR	R30,R24
    003A1 2BE9      OR	R30,R25
    003A2 2BEA      OR	R30,R26
    003A3 2BEB      OR	R30,R27
    003A4 9508      RET
asgnblk:
    003A5 93AA      ST	-Y,R26
    003A6 93BA      ST	-Y,R27
    003A7 93EA      ST	-Y,R30
    003A8 93FA      ST	-Y,R31
    003A9 920A      ST	-Y,R0
    003AA 81AF      LDD	R26,Y+7
    003AB 85B8      LDD	R27,Y+8
    003AC 81ED      LDD	R30,Y+5
    003AD 81FE      LDD	R31,Y+6
    003AE 3000      CPI	R16,0
    003AF 0701      CPC	R16,R17
    003B0 F029      BEQ	0x03B6
    003B1 9001      LD	R0,Z+
    003B2 920D      ST	X+,R0
    003B3 5001      SUBI	R16,1
    003B4 4010      SBCI	R17,0
    003B5 CFF8      RJMP	0x03AE
    003B6 9009      LD	R0,Y+
    003B7 91F9      LD	R31,Y+
    003B8 91E9      LD	R30,Y+
    003B9 91B9      LD	R27,Y+
    003BA 91A9      LD	R26,Y+
    003BB 9624      ADIW	R28,4
    003BC 9508      RET
_EEPROMread:
    003BD 99E1      SBIC	0x1C,1
    003BE CFFE      RJMP	_EEPROMread
    003BF BB1F      OUT	0x1F,R17
    003C0 BB0E      OUT	0x1E,R16
    003C1 9AE0      SBI	0x1C,0
    003C2 B30D      IN	R16,0x1D
    003C3 9508      RET
_EEPROMwrite:
    003C4 92AA      ST	-Y,R10
    003C5 99E1      SBIC	0x1C,1
    003C6 CFFE      RJMP	0x03C5
    003C7 BB1F      OUT	0x1F,R17
    003C8 BB0E      OUT	0x1E,R16
    003C9 BB2D      OUT	0x1D,R18
    003CA B6AF      IN	R10,0x3F
    003CB 94F8      BCLR	7
    003CC 9AE2      SBI	0x1C,2
    003CD 9AE1      SBI	0x1C,1
    003CE BEAF      OUT	0x3F,R10
    003CF 2700      CLR	R16
    003D0 2711      CLR	R17
    003D1 90A9      LD	R10,Y+
    003D2 9508      RET
_EEPROMReadBytes:
    003D3 940E 0365 CALL	push_xgsetF03C
    003D5 0169      MOVW	R12,R18
    003D6 01B8      MOVW	R22,R16
    003D7 84A8      LDD	R10,Y+8
    003D8 84B9      LDD	R11,Y+9
    003D9 01A6      MOVW	R20,R12
    003DA C009      RJMP	0x03E4
    003DB 018B      MOVW	R16,R22
    003DC 940E 03BD CALL	_EEPROMread
    003DE 01FA      MOVW	R30,R20
    003DF 8300      ST	Z,R16
    003E0 5F6F      SUBI	R22,0xFF
    003E1 4F7F      SBCI	R23,0xFF
    003E2 5F4F      SUBI	R20,0xFF
    003E3 4F5F      SBCI	R21,0xFF
    003E4 0115      MOVW	R2,R10
    003E5 01C1      MOVW	R24,R2
    003E6 9701      SBIW	R24,1
    003E7 015C      MOVW	R10,R24
    003E8 2022      TST	R2
    003E9 F789      BNE	0x03DB
    003EA 2033      TST	R3
    003EB F779      BNE	0x03DB
    003EC 940C 036E JMP	pop_xgsetF03C
_EEPROMWriteBytes:
    003EE 940E 0365 CALL	push_xgsetF03C
    003F0 0169      MOVW	R12,R18
    003F1 01B8      MOVW	R22,R16
    003F2 84A8      LDD	R10,Y+8
    003F3 84B9      LDD	R11,Y+9
    003F4 01A6      MOVW	R20,R12
    003F5 C009      RJMP	0x03FF
    003F6 01FA      MOVW	R30,R20
    003F7 8120      LD	R18,Z
    003F8 018B      MOVW	R16,R22
    003F9 940E 03C4 CALL	_EEPROMwrite
    003FB 5F6F      SUBI	R22,0xFF
    003FC 4F7F      SBCI	R23,0xFF
    003FD 5F4F      SUBI	R20,0xFF
    003FE 4F5F      SBCI	R21,0xFF
    003FF 0115      MOVW	R2,R10
    00400 01C1      MOVW	R24,R2
    00401 9701      SBIW	R24,1
    00402 015C      MOVW	R10,R24
    00403 2022      TST	R2
    00404 F789      BNE	0x03F6
    00405 2033      TST	R3
    00406 F779      BNE	0x03F6
    00407 940C 036E JMP	pop_xgsetF03C
