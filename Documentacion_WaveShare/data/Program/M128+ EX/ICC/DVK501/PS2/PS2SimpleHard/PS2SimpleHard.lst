__text_start:
__start:
    00BE EFCF      LDI	R28,0xFF
    00BF E1D0      LDI	R29,0x10
    00C0 BFCD      OUT	0x3D,R28
    00C1 BFDE      OUT	0x3E,R29
    00C2 51C0      SUBI	R28,0x10
    00C3 40D0      SBCI	R29,0
    00C4 EA0A      LDI	R16,0xAA
    00C5 8308      STD	Y+0,R16
    00C6 2400      CLR	R0
    00C7 E0E4      LDI	R30,4
    00C8 E0F1      LDI	R31,1
    00C9 E011      LDI	R17,1
    00CA 30EB      CPI	R30,0xB
    00CB 07F1      CPC	R31,R17
    00CC F011      BEQ	0x00CF
    00CD 9201      ST	R0,Z+
    00CE CFFB      RJMP	0x00CA
    00CF 8300      STD	Z+0,R16
    00D0 E7E8      LDI	R30,0x78
    00D1 E0F1      LDI	R31,1
    00D2 E0A0      LDI	R26,0
    00D3 E0B1      LDI	R27,1
    00D4 E011      LDI	R17,1
    00D5 37EC      CPI	R30,0x7C
    00D6 07F1      CPC	R31,R17
    00D7 F021      BEQ	0x00DC
    00D8 95C8      LPM
    00D9 9631      ADIW	R30,1
    00DA 920D      ST	R0,X+
    00DB CFF9      RJMP	0x00D5
    00DC 940E034C  CALL	_main
_exit:
    00DE CFFF      RJMP	_exit
_speaData:
  y                    --> Y+4
  j                    --> Y+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y+16
    00DF 940E035B  CALL	push_arg4
    00E1 940E0409  CALL	push_gset4
    00E3 9728      SBIW	R28,0x8
    00E4 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00E5 24AA      CLR	R10
    00E6 E041      LDI	R20,1
    00E7 E050      LDI	R21,0
    00E8 E060      LDI	R22,0
    00E9 E070      LDI	R23,0
    00EA 01FE      MOVW	R30,R28
    00EB 8340      STD	Z+0,R20
    00EC 8351      STD	Z+1,R21
    00ED 8362      STD	Z+2,R22
    00EE 8373      STD	Z+3,R23
    00EF C046      RJMP	0x0136
(0120)     {
(0121)         y=dat/j;
    00F0 01FE      MOVW	R30,R28
    00F1 8020      LDD	R2,Z+0
    00F2 8031      LDD	R3,Z+1
    00F3 8042      LDD	R4,Z+2
    00F4 8053      LDD	R5,Z+3
    00F5 01FE      MOVW	R30,R28
    00F6 8860      LDD	R6,Z+16
    00F7 8871      LDD	R7,Z+17
    00F8 8882      LDD	R8,Z+18
    00F9 8893      LDD	R9,Z+19
    00FA 925A      ST	R5,-Y
    00FB 924A      ST	R4,-Y
    00FC 923A      ST	R3,-Y
    00FD 922A      ST	R2,-Y
    00FE 0183      MOVW	R16,R6
    00FF 0194      MOVW	R18,R8
    0100 940E0360  CALL	div32u
    0102 01FE      MOVW	R30,R28
    0103 8304      STD	Z+4,R16
    0104 8315      STD	Z+5,R17
    0105 8326      STD	Z+6,R18
    0106 8337      STD	Z+7,R19
(0122)         dataElem[i]=y%10;
    0107 E04A      LDI	R20,0xA
    0108 E050      LDI	R21,0
    0109 E060      LDI	R22,0
    010A E070      LDI	R23,0
    010B 01FE      MOVW	R30,R28
    010C 8024      LDD	R2,Z+4
    010D 8035      LDD	R3,Z+5
    010E 8046      LDD	R4,Z+6
    010F 8057      LDD	R5,Z+7
    0110 937A      ST	R23,-Y
    0111 936A      ST	R22,-Y
    0112 935A      ST	R21,-Y
    0113 934A      ST	R20,-Y
    0114 0181      MOVW	R16,R2
    0115 0192      MOVW	R18,R4
    0116 940E0362  CALL	mod32u
    0118 E085      LDI	R24,5
    0119 E091      LDI	R25,1
    011A 2DEA      MOV	R30,R10
    011B 27FF      CLR	R31
    011C 0FE8      ADD	R30,R24
    011D 1FF9      ADC	R31,R25
    011E 8300      STD	Z+0,R16
(0123)         j*=10;
    011F 01FE      MOVW	R30,R28
    0120 8020      LDD	R2,Z+0
    0121 8031      LDD	R3,Z+1
    0122 8042      LDD	R4,Z+2
    0123 8053      LDD	R5,Z+3
    0124 E04A      LDI	R20,0xA
    0125 E050      LDI	R21,0
    0126 E060      LDI	R22,0
    0127 E070      LDI	R23,0
    0128 925A      ST	R5,-Y
    0129 924A      ST	R4,-Y
    012A 923A      ST	R3,-Y
    012B 922A      ST	R2,-Y
    012C 018A      MOVW	R16,R20
    012D 019B      MOVW	R18,R22
    012E 940E03D1  CALL	empy32u
    0130 01FE      MOVW	R30,R28
    0131 8300      STD	Z+0,R16
    0132 8311      STD	Z+1,R17
    0133 8322      STD	Z+2,R18
    0134 8333      STD	Z+3,R19
    0135 94A3      INC	R10
    0136 14AC      CP	R10,R12
    0137 F408      BCC	0x0139
    0138 CFB7      RJMP	0x00F0
    0139 9628      ADIW	R28,0x8
    013A 940E0404  CALL	pop_gset4
    013C 9624      ADIW	R28,4
    013D 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    013E EA84      LDI	R24,0xA4
    013F BF86      OUT	0x36,R24
(0128) 	I2CWaitAck();
    0140 B626      IN	R2,0x36
    0141 FE27      SBRS	R2,7
    0142 CFFD      RJMP	0x0140
(0129) 	if( I2CChkAck()!=I2C_START ) 
    0143 B181      IN	R24,0x01
    0144 7F88      ANDI	R24,0xF8
    0145 3088      CPI	R24,0x8
    0146 F011      BEQ	0x0149
(0130) 		return I2C_ERR;
    0147 2700      CLR	R16
    0148 C001      RJMP	0x014A
(0131) 	return I2C_CRR;
    0149 E001      LDI	R16,1
    014A 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    014B EA84      LDI	R24,0xA4
    014C BF86      OUT	0x36,R24
(0144) 	I2CWaitAck();
    014D B626      IN	R2,0x36
    014E FE27      SBRS	R2,7
    014F CFFD      RJMP	0x014D
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    0150 B181      IN	R24,0x01
    0151 7F88      ANDI	R24,0xF8
    0152 3180      CPI	R24,0x10
    0153 F011      BEQ	0x0156
(0146) 		return I2C_ERR;
    0154 2700      CLR	R16
    0155 C001      RJMP	0x0157
(0147) 	return I2C_CRR;
    0156 E001      LDI	R16,1
    0157 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    0158 B903      OUT	0x03,R16
    0159 E884      LDI	R24,0x84
    015A BF86      OUT	0x36,R24
(0160) 	I2CWaitAck();
    015B B626      IN	R2,0x36
    015C FE27      SBRS	R2,7
    015D CFFD      RJMP	0x015B
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    015E B181      IN	R24,0x01
    015F 7F88      ANDI	R24,0xF8
    0160 3188      CPI	R24,0x18
    0161 F011      BEQ	0x0164
(0162) 		return I2C_ERR;
    0162 2700      CLR	R16
    0163 C001      RJMP	0x0165
(0163) 	return I2C_CRR;		
    0164 E001      LDI	R16,1
    0165 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R20
    0166 940E040F  CALL	push_gset1
    0168 01A8      MOVW	R20,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    0169 FF40      SBRS	R20,0
    016A C00B      RJMP	0x0176
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    016B 2F04      MOV	R16,R20
    016C 2711      CLR	R17
    016D 2F01      MOV	R16,R17
    016E 2711      CLR	R17
    016F FD07      SBRC	R16,7
    0170 9510      COM	R17
    0171 DFE6      RCALL	_I2C_SendWrDAdr
    0172 2300      TST	R16
    0173 F411      BNE	0x0176
(0177) 			return I2C_ERR;
    0174 2700      CLR	R16
    0175 C007      RJMP	0x017D
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    0176 2F04      MOV	R16,R20
    0177 DFE0      RCALL	_I2C_SendWrDAdr
    0178 2300      TST	R16
    0179 F411      BNE	0x017C
(0179) 		return I2C_ERR;
    017A 2700      CLR	R16
    017B C001      RJMP	0x017D
(0180) 	return I2C_CRR;
    017C E001      LDI	R16,1
    017D 940E0412  CALL	pop_gset1
    017F 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    0180 B903      OUT	0x03,R16
    0181 E884      LDI	R24,0x84
    0182 BF86      OUT	0x36,R24
(0193) 	I2CWaitAck();
    0183 B626      IN	R2,0x36
    0184 FE27      SBRS	R2,7
    0185 CFFD      RJMP	0x0183
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    0186 B181      IN	R24,0x01
    0187 7F88      ANDI	R24,0xF8
    0188 3480      CPI	R24,0x40
    0189 F011      BEQ	0x018C
(0195) 		return I2C_ERR;
    018A 2700      CLR	R16
    018B C001      RJMP	0x018D
(0196) 	return I2C_CRR;	
    018C E001      LDI	R16,1
    018D 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R20
    018E 940E040F  CALL	push_gset1
    0190 2F40      MOV	R20,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    0191 FF40      SBRS	R20,0
    0192 C00B      RJMP	0x019E
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    0193 2F04      MOV	R16,R20
    0194 2711      CLR	R17
    0195 2F01      MOV	R16,R17
    0196 2711      CLR	R17
    0197 FD07      SBRC	R16,7
    0198 9510      COM	R17
    0199 DFBE      RCALL	_I2C_SendWrDAdr
    019A 2300      TST	R16
    019B F411      BNE	0x019E
(0210) 			return I2C_ERR;
    019C 2700      CLR	R16
    019D C007      RJMP	0x01A5
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    019E 2F04      MOV	R16,R20
    019F DFB8      RCALL	_I2C_SendWrDAdr
    01A0 2300      TST	R16
    01A1 F411      BNE	0x01A4
(0212) 		return I2C_ERR;
    01A2 2700      CLR	R16
    01A3 C001      RJMP	0x01A5
(0213) 	return I2C_CRR;
    01A4 E001      LDI	R16,1
    01A5 940E0412  CALL	pop_gset1
    01A7 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    01A8 B903      OUT	0x03,R16
    01A9 E884      LDI	R24,0x84
    01AA BF86      OUT	0x36,R24
(0226) 	I2CWaitAck();
    01AB B626      IN	R2,0x36
    01AC FE27      SBRS	R2,7
    01AD CFFD      RJMP	0x01AB
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    01AE B181      IN	R24,0x01
    01AF 7F88      ANDI	R24,0xF8
    01B0 3288      CPI	R24,0x28
    01B1 F011      BEQ	0x01B4
(0228) 		return I2C_ERR;
    01B2 2700      CLR	R16
    01B3 C001      RJMP	0x01B5
(0229) 	return I2C_CRR;	
    01B4 E001      LDI	R16,1
    01B5 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    01B6 E884      LDI	R24,0x84
    01B7 BF86      OUT	0x36,R24
(0242) 	I2CWaitAck();
    01B8 B626      IN	R2,0x36
    01B9 FE27      SBRS	R2,7
    01BA CFFD      RJMP	0x01B8
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    01BB B181      IN	R24,0x01
    01BC 7F88      ANDI	R24,0xF8
    01BD 3588      CPI	R24,0x58
    01BE F011      BEQ	0x01C1
(0244) 		return I2C_ERR;
    01BF 2700      CLR	R16
    01C0 C004      RJMP	0x01C5
(0245) 	*pRdDat=TWDR;
    01C1 B023      IN	R2,0x03
    01C2 01F8      MOVW	R30,R16
    01C3 8220      STD	Z+0,R2
(0246) 	return I2C_CRR;
    01C4 E001      LDI	R16,1
    01C5 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    01C6 EC84      LDI	R24,0xC4
    01C7 BF86      OUT	0x36,R24
(0259) 	I2CWaitAck();
    01C8 B626      IN	R2,0x36
    01C9 FE27      SBRS	R2,7
    01CA CFFD      RJMP	0x01C8
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    01CB B181      IN	R24,0x01
    01CC 7F88      ANDI	R24,0xF8
    01CD 3580      CPI	R24,0x50
    01CE F011      BEQ	0x01D1
(0261) 		return I2C_ERR;
    01CF 2700      CLR	R16
    01D0 C004      RJMP	0x01D5
(0262) 	*pRdDat=TWDR;
    01D1 B023      IN	R2,0x03
    01D2 01F8      MOVW	R30,R16
    01D3 8220      STD	Z+0,R2
(0263) 	return I2C_CRR;
    01D4 E001      LDI	R16,1
    01D5 9508      RET
_I2C_Write:
  dat                  --> Y+4
  wordAdr              --> R20
  wrDAdr               --> R22
    01D6 940E040D  CALL	push_gset2
    01D8 2F42      MOV	R20,R18
    01D9 01B8      MOVW	R22,R16
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    01DA DF63      RCALL	_I2C_Start
    01DB 2300      TST	R16
    01DC F411      BNE	0x01DF
(0278) 		return I2C_ERR;
    01DD 2700      CLR	R16
    01DE C015      RJMP	0x01F4
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    01DF 018B      MOVW	R16,R22
    01E0 DF85      RCALL	_I2C_SendWrDAdr_
    01E1 2300      TST	R16
    01E2 F411      BNE	0x01E5
(0281) 		return I2C_ERR;
    01E3 2700      CLR	R16
    01E4 C00F      RJMP	0x01F4
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    01E5 2F04      MOV	R16,R20
    01E6 DFC1      RCALL	_I2C_SendDat
    01E7 2300      TST	R16
    01E8 F411      BNE	0x01EB
(0284) 		return I2C_ERR;
    01E9 2700      CLR	R16
    01EA C009      RJMP	0x01F4
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    01EB 810C      LDD	R16,Y+4
    01EC DFBB      RCALL	_I2C_SendDat
    01ED 2300      TST	R16
    01EE F411      BNE	0x01F1
(0287) 		return I2C_ERR;
    01EF 2700      CLR	R16
    01F0 C003      RJMP	0x01F4
(0288) 
(0289) 	I2C_Stop();
    01F1 E984      LDI	R24,0x94
    01F2 BF86      OUT	0x36,R24
(0290) 
(0291) 	return I2C_CRR;
    01F3 E001      LDI	R16,1
    01F4 940E0401  CALL	pop_gset2
    01F6 9508      RET
_I2C_Read:
  pRdDat               --> Y+6
  rdDAdr               --> Y+4
  wordAdr              --> R20
  wrDAdr               --> R22
    01F7 940E040D  CALL	push_gset2
    01F9 2F42      MOV	R20,R18
    01FA 01B8      MOVW	R22,R16
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    01FB DF42      RCALL	_I2C_Start
    01FC 2300      TST	R16
    01FD F411      BNE	0x0200
(0324) 		return I2C_ERR;
    01FE 2700      CLR	R16
    01FF C021      RJMP	0x0221
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    0200 018B      MOVW	R16,R22
    0201 DF64      RCALL	_I2C_SendWrDAdr_
    0202 2300      TST	R16
    0203 F411      BNE	0x0206
(0327) 		return I2C_ERR;
    0204 2700      CLR	R16
    0205 C01B      RJMP	0x0221
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    0206 2F04      MOV	R16,R20
    0207 DFA0      RCALL	_I2C_SendDat
    0208 2300      TST	R16
    0209 F411      BNE	0x020C
(0330) 		return I2C_ERR;
    020A 2700      CLR	R16
    020B C015      RJMP	0x0221
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    020C DF3E      RCALL	_I2C_Restart
    020D 2300      TST	R16
    020E F411      BNE	0x0211
(0333) 		return I2C_ERR;
    020F 2700      CLR	R16
    0210 C010      RJMP	0x0221
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    0211 810C      LDD	R16,Y+4
    0212 DF6D      RCALL	_I2C_SendRdDAdr
    0213 2300      TST	R16
    0214 F411      BNE	0x0217
(0336) 		return I2C_ERR;
    0215 2700      CLR	R16
    0216 C00A      RJMP	0x0221
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    0217 810E      LDD	R16,Y+6
    0218 811F      LDD	R17,Y+7
    0219 DF9C      RCALL	_I2C_RcvNAckDat
    021A 2300      TST	R16
    021B F411      BNE	0x021E
(0339) 		return I2C_ERR;
    021C 2700      CLR	R16
    021D C003      RJMP	0x0221
(0340) 
(0341) 	I2C_Stop();
    021E E984      LDI	R24,0x94
    021F BF86      OUT	0x36,R24
(0342) 
(0343) 	return I2C_CRR;
    0220 E001      LDI	R16,1
    0221 940E0401  CALL	pop_gset2
    0223 9508      RET
_I2C_Read_:
  i                    --> R20
  num                  --> R22
  pRdDat               --> R10
  rdDAdr               --> Y+8
  wordAdr              --> R20
  wrDAdr               --> R12
    0224 940E0409  CALL	push_gset4
    0226 2F42      MOV	R20,R18
    0227 0168      MOVW	R12,R16
    0228 84AA      LDD	R10,Y+10
    0229 84BB      LDD	R11,Y+11
    022A 856C      LDD	R22,Y+12
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    022B DF12      RCALL	_I2C_Start
    022C 2300      TST	R16
    022D F411      BNE	0x0230
(0363) 		return I2C_ERR;
    022E 2700      CLR	R16
    022F C033      RJMP	0x0263
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    0230 0186      MOVW	R16,R12
    0231 DF34      RCALL	_I2C_SendWrDAdr_
    0232 2300      TST	R16
    0233 F411      BNE	0x0236
(0366) 		return I2C_ERR;
    0234 2700      CLR	R16
    0235 C02D      RJMP	0x0263
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    0236 2F04      MOV	R16,R20
    0237 DF70      RCALL	_I2C_SendDat
    0238 2300      TST	R16
    0239 F411      BNE	0x023C
(0369) 		return I2C_ERR;
    023A 2700      CLR	R16
    023B C027      RJMP	0x0263
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    023C DF0E      RCALL	_I2C_Restart
    023D 2300      TST	R16
    023E F411      BNE	0x0241
(0372) 		return I2C_ERR;
    023F 2700      CLR	R16
    0240 C022      RJMP	0x0263
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    0241 8508      LDD	R16,Y+8
    0242 DF3D      RCALL	_I2C_SendRdDAdr
    0243 2300      TST	R16
    0244 F411      BNE	0x0247
(0375) 		return I2C_ERR;
    0245 2700      CLR	R16
    0246 C01C      RJMP	0x0263
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    0247 2744      CLR	R20
    0248 C00A      RJMP	0x0253
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    0249 2F04      MOV	R16,R20
    024A 2711      CLR	R17
    024B 0D0A      ADD	R16,R10
    024C 1D1B      ADC	R17,R11
    024D DF78      RCALL	_I2C_RcvAckDat
    024E 2300      TST	R16
    024F F411      BNE	0x0252
(0379) 			return I2C_ERR;
    0250 2700      CLR	R16
    0251 C011      RJMP	0x0263
    0252 9543      INC	R20
    0253 2F86      MOV	R24,R22
    0254 5081      SUBI	R24,1
    0255 1748      CP	R20,R24
    0256 F390      BCS	0x0249
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    0257 2F04      MOV	R16,R20
    0258 2711      CLR	R17
    0259 0D0A      ADD	R16,R10
    025A 1D1B      ADC	R17,R11
    025B DF5A      RCALL	_I2C_RcvNAckDat
    025C 2300      TST	R16
    025D F411      BNE	0x0260
(0382) 			return I2C_ERR;
    025E 2700      CLR	R16
    025F C003      RJMP	0x0263
(0383) 
(0384) 	I2C_Stop();
    0260 E984      LDI	R24,0x94
    0261 BF86      OUT	0x36,R24
(0385) 	
(0386) 	return I2C_CRR;
    0262 E001      LDI	R16,1
    0263 940E0404  CALL	pop_gset4
    0265 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    0266 940E040F  CALL	push_gset1
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    0268 C007      RJMP	0x0270
(0108)         for(j=0;j<70;j++)	
    0269 2744      CLR	R20
    026A C001      RJMP	0x026C
    026B 9543      INC	R20
    026C 3446      CPI	R20,0x46
    026D F3E8      BCS	0x026B
    026E 5001      SUBI	R16,1
    026F 4010      SBCI	R17,0
    0270 2422      CLR	R2
    0271 2433      CLR	R3
    0272 1620      CP	R2,R16
    0273 0631      CPC	R3,R17
    0274 F3A4      BLT	0x0269
    0275 940E0412  CALL	pop_gset1
    0277 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    0278 940E040F  CALL	push_gset1
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    027A C00B      RJMP	0x0286
(0123) 		for(i=0;i<52642;i++)
    027B 2744      CLR	R20
    027C 2755      CLR	R21
    027D C002      RJMP	0x0280
    027E 5F4F      SUBI	R20,0xFF
    027F 4F5F      SBCI	R21,0xFF
    0280 3A42      CPI	R20,0xA2
    0281 ECED      LDI	R30,0xCD
    0282 075E      CPC	R21,R30
    0283 F3D0      BCS	0x027E
    0284 5001      SUBI	R16,1
    0285 4010      SBCI	R17,0
    0286 2422      CLR	R2
    0287 2433      CLR	R3
    0288 1620      CP	R2,R16
    0289 0631      CPC	R3,R17
    028A F384      BLT	0x027B
    028B 940E0412  CALL	pop_gset1
    028D 9508      RET
_int1_isr:
    028E 922A      ST	R2,-Y
    028F 923A      ST	R3,-Y
    0290 938A      ST	R24,-Y
    0291 939A      ST	R25,-Y
    0292 B62F      IN	R2,0x3F
    0293 922A      ST	R2,-Y
FILE: E:\ws吴敏师兄程序\DVK500\stk128+\PS2PC~1\PS2SimpleHard\PS2SimpleHard.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立操作PC键盘的示例程序（硬件中断读取PS/2接收到的数据）
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 按PC键盘，观察单片机读到的数据，使用PA/PB口的LED做指示。
(0028) ----------------------------------------------------------------------
(0029) ----------------------------------------------------------------------
(0030) 硬件连接：
(0031) 将PB口的与LED指示灯相连接，若要查看按住shift时的变化将PD口的与LED指示灯相连接
(0032) 
(0033)               DVK500 				 STK128+
(0034) 				VCC		---------	  VCC
(0035) 				GND		---------	  GND
(0036) 				DATA			      PD4		
(0037) 			    CLK			    	  PD3					
(0038) ----------------------------------------------------------------------
(0039) ----------------------------------------------------------------------
(0040) 注意事项： 
(0041) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0042) （2）请详细阅读：光盘根目录下的“产品资料\开发板实验板\SMK系列\SMK1632\说明资料”
(0043) ----------------------------------------------------------------------
(0044) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0045) 
(0046) #include <iom16v.h>
(0047) #include "D:\ICC_H\CmmICC.H"
(0048) #include "D:\ICC_H\PS2.H"
(0049) 
(0050) #define PRESS_DATA_DDR	DDRA
(0051) #define PRESS_DATA_PORT PORTA
(0052) #define SHIFT_DATA_DDR	DDRB
(0053) #define SHIFT_DATA_PORT PORTB
(0054) 
(0055) #define SET_SDA		sbi(PORTD,4)
(0056) #define CLR_SDA		cbi(PORTD,4)
(0057) #define GET_SDA		gbi(PIND,4)
(0058) #define OUT_SDA	 	sbi(DDRD,4)
(0059) #define IN_SDA 		cbi(DDRD,4)
(0060) 
(0061) #define SET_SCK		sbi(PORTD,3)
(0062) #define CLR_SCK		cbi(PORTD,3)
(0063) #define GET_SCK		gbi(PIND,3)
(0064) #define OUT_SCK 	sbi(DDRD,3)
(0065) #define IN_SCK 		cbi(DDRD,3)
(0066) 
(0067) bool rcvF = 0; 		//是否收到字符标志
(0068) uint8 keyVal; 		//键值
(0069) 
(0070) /*--------------------------------------------------------------------
(0071) 函数名称：
(0072) 函数功能：
(0073) 注意事项：
(0074) 提示说明：
(0075) 输    入：
(0076) 返    回：
(0077) --------------------------------------------------------------------*/
(0078) #pragma interrupt_handler int1_isr:3
(0079) void int1_isr(void)
(0080) {
(0081)     static uint8 rcvBits = 0;	//接收次数，中断次数
(0082) 	if((rcvBits>0) && (rcvBits<9))
    0294 2422      CLR	R2
    0295 90300101  LDS	R3,rcvBits
    0297 1423      CP	R2,R3
    0298 F470      BCC	0x02A7
    0299 2D83      MOV	R24,R3
    029A 3089      CPI	R24,0x9
    029B F458      BCC	0x02A7
(0083) 	{ 
(0084) 		keyVal=keyVal>>1; 	//数据是LSB格式
    029C 90200104  LDS	R2,keyVal
    029E 9426      LSR	R2
    029F 92200104  STS	keyVal,R2
(0085) 		//IN_SDA;			//当有对键盘有属性设置时，注意输入输出切换
(0086) 		//DELAY();
(0087) 		if(GET_SDA) 
    02A1 9B84      SBIS	0x10,4
    02A2 C004      RJMP	0x02A7
(0088) 	 		keyVal=keyVal|0x80; 
    02A3 2D82      MOV	R24,R2
    02A4 6880      ORI	R24,0x80
    02A5 93800104  STS	keyVal,R24
(0089) 	}
(0090) 	rcvBits++;
    02A7 91800101  LDS	R24,rcvBits
    02A9 5F8F      SUBI	R24,0xFF
    02AA 93800101  STS	rcvBits,R24
(0091) 	while(!GET_SCK); 		//等待PS/2CLK拉高
    02AC 9B83      SBIS	0x10,3
    02AD CFFE      RJMP	0x02AC
(0092) 
(0093) 	if(rcvBits>10)
    02AE E08A      LDI	R24,0xA
    02AF 90200101  LDS	R2,rcvBits
    02B1 1582      CP	R24,R2
    02B2 F430      BCC	0x02B9
(0094) 	{
(0095) 		rcvBits=0; 			//接收11次表示接收完一帧数据
    02B3 2422      CLR	R2
    02B4 92200101  STS	rcvBits,R2
(0096) 		rcvF=1; 			//标识有字符已经输入
    02B6 E081      LDI	R24,1
    02B7 93800100  STS	rcvF,R24
(0097) 	}
    02B9 9029      LD	R2,Y+
    02BA BE2F      OUT	0x3F,R2
    02BB 9199      LD	R25,Y+
    02BC 9189      LD	R24,Y+
    02BD 9039      LD	R3,Y+
    02BE 9029      LD	R2,Y+
    02BF 9518      RETI
_keyHandle:
  i                    --> R20
  val                  --> R16
    02C0 940E040F  CALL	push_gset1
(0098) }
(0099) /*--------------------------------------------------------------------
(0100) 函数名称：
(0101) 函数功能：
(0102) 注意事项：
(0103) 提示说明：
(0104) 输    入：
(0105) 返    回：
(0106) --------------------------------------------------------------------*/
(0107) void keyHandle(uint8 val) 
(0108) {
(0109) 	uint8 i;
(0110) 	static bool isUp=0;			//按键释放动作标志
(0111) 	static bool shift=0;		//shift键按下标志
(0112) 	rcvF = 0; 
    02C2 2422      CLR	R2
    02C3 92200100  STS	rcvF,R2
(0113) 	PRESS_DATA_PORT = val;		//状态指示
    02C5 BB0B      OUT	0x1B,R16
(0114) 	if(!isUp)
    02C6 90200102  LDS	R2,isUp
    02C8 2022      TST	R2
    02C9 F009      BEQ	0x02CB
    02CA C05B      RJMP	0x0326
(0115) 	{
(0116) 		switch(val)
    02CB 2F40      MOV	R20,R16
    02CC 2755      CLR	R21
    02CD 3549      CPI	R20,0x59
    02CE E0E0      LDI	R30,0
    02CF 075E      CPC	R21,R30
    02D0 F0B9      BEQ	0x02E8
    02D1 E589      LDI	R24,0x59
    02D2 E090      LDI	R25,0
    02D3 1784      CP	R24,R20
    02D4 0795      CPC	R25,R21
    02D5 F02C      BLT	0x02DB
    02D6 3142      CPI	R20,0x12
    02D7 E0E0      LDI	R30,0
    02D8 075E      CPC	R21,R30
    02D9 F051      BEQ	0x02E4
    02DA C011      RJMP	0x02EC
    02DB 3F40      CPI	R20,0xF0
    02DC E0E0      LDI	R30,0
    02DD 075E      CPC	R21,R30
    02DE F009      BEQ	0x02E0
    02DF C00C      RJMP	0x02EC
(0117) 		{
(0118) 			case 0xF0 :			// a relase action
(0119) 				isUp = 1;
    02E0 E081      LDI	R24,1
    02E1 93800102  STS	isUp,R24
(0120) 				break;
    02E3 C05B      RJMP	0x033F
(0121) 			case 0x12 :			// Left shift
(0122) 				shift = 1;
    02E4 E081      LDI	R24,1
    02E5 93800103  STS	shift,R24
(0123) 				break;
    02E7 C057      RJMP	0x033F
(0124) 			case 0x59 :			// Right shift
(0125) 				shift = 1;
    02E8 E081      LDI	R24,1
    02E9 93800103  STS	shift,R24
(0126) 				break;
    02EB C053      RJMP	0x033F
(0127) 			default:
(0128) 				if(!shift)		// If shift not pressed
    02EC 90200103  LDS	R2,shift
    02EE 2022      TST	R2
    02EF F4D9      BNE	0x030B
(0129) 				{ 
(0130) /*
(0131) 					for(i=0; unshifted[i][0]!=val && unshifted[i][0]; i++)
(0132) 						;
(0133) 					上述写法较为灵活，但KEIL非UNIXC标准，不能采用该写法
(0134) */
(0135) 					for(i=0; unshifted[i][0]!=val && i<59; i++)
    02F0 2744      CLR	R20
    02F1 C001      RJMP	0x02F3
    02F2 9543      INC	R20
    02F3 E082      LDI	R24,2
    02F4 9F84      MUL	R24,R20
    02F5 01F0      MOVW	R30,R0
    02F6 E88C      LDI	R24,0x8C
    02F7 E090      LDI	R25,0
    02F8 0FE8      ADD	R30,R24
    02F9 1FF9      ADC	R31,R25
    02FA 91E4      LPM	R30,0(Z)
    02FB 17E0      CP	R30,R16
    02FC F011      BEQ	0x02FF
    02FD 334B      CPI	R20,0x3B
    02FE F398      BCS	0x02F2
(0136) 						;
(0137) 					if(unshifted[i][0] == val) 
    02FF E082      LDI	R24,2
    0300 9F84      MUL	R24,R20
    0301 01F0      MOVW	R30,R0
    0302 E88C      LDI	R24,0x8C
    0303 E090      LDI	R25,0
    0304 0FE8      ADD	R30,R24
    0305 1FF9      ADC	R31,R25
    0306 91E4      LPM	R30,0(Z)
    0307 17E0      CP	R30,R16
    0308 F009      BEQ	0x030A
    0309 C035      RJMP	0x033F
(0138) 						;		//状态指示
(0139) 					
(0140) 				} 
    030A C034      RJMP	0x033F
(0141) 				else			// If shift pressed
(0142) 				{			
(0143) /*
(0144) 					for(i=0; unshifted[i][0]!=val && unshifted[i][0]; i++)
(0145) 						;
(0146) 					上述写法较为灵活，但KEIL非UNIXC标准，不能采用该写法
(0147) */
(0148) 					for(i=0; shifted[i][0]!=val && i<59; i++)
    030B 2744      CLR	R20
    030C C001      RJMP	0x030E
    030D 9543      INC	R20
    030E E082      LDI	R24,2
    030F 9F84      MUL	R24,R20
    0310 01F0      MOVW	R30,R0
    0311 E082      LDI	R24,2
    0312 E091      LDI	R25,1
    0313 0FE8      ADD	R30,R24
    0314 1FF9      ADC	R31,R25
    0315 91E4      LPM	R30,0(Z)
    0316 17E0      CP	R30,R16
    0317 F011      BEQ	0x031A
    0318 334B      CPI	R20,0x3B
    0319 F398      BCS	0x030D
(0149) 						;
(0150) 					if(shifted[i][0] == val) 
    031A E082      LDI	R24,2
    031B 9F84      MUL	R24,R20
    031C 01F0      MOVW	R30,R0
    031D E082      LDI	R24,2
    031E E091      LDI	R25,1
    031F 0FE8      ADD	R30,R24
    0320 1FF9      ADC	R31,R25
    0321 91E4      LPM	R30,0(Z)
    0322 17E0      CP	R30,R16
    0323 F4D9      BNE	0x033F
(0151) 						SHIFT_DATA_PORT = val;//状态指示
    0324 BB08      OUT	0x18,R16
(0152) 				}
(0153) 		}
(0154) 	}
    0325 C019      RJMP	0x033F
(0155) 	else 
(0156) 	{
(0157) 		isUp=0;					
    0326 2422      CLR	R2
    0327 92200102  STS	isUp,R2
(0158) 		switch(val)
    0329 2F40      MOV	R20,R16
    032A 2755      CLR	R21
    032B 3142      CPI	R20,0x12
    032C E0E0      LDI	R30,0
    032D 075E      CPC	R21,R30
    032E F049      BEQ	0x0338
    032F 3142      CPI	R20,0x12
    0330 E0E0      LDI	R30,0
    0331 075E      CPC	R21,R30
    0332 F064      BLT	0x033F
    0333 3549      CPI	R20,0x59
    0334 E0E0      LDI	R30,0
    0335 075E      CPC	R21,R30
    0336 F029      BEQ	0x033C
    0337 C007      RJMP	0x033F
(0159) 		{
(0160) 			case 0x12 :			// Left SHIFT
(0161) 				shift = 0;
    0338 2422      CLR	R2
    0339 92200103  STS	shift,R2
(0162) 				break;
    033B C003      RJMP	0x033F
(0163) 			case 0x59 :			// Right SHIFT
(0164) 				shift = 0;
    033C 2422      CLR	R2
    033D 92200103  STS	shift,R2
(0165) 				break;
(0166) 		}
(0167) 	}
    033F 940E0412  CALL	pop_gset1
    0341 9508      RET
(0168) }
(0169) /*--------------------------------------------------------------------
(0170) 函数名称：
(0171) 函数功能：
(0172) 注意事项：
(0173) 提示说明：
(0174) 输    入：
(0175) 返    回：
(0176) --------------------------------------------------------------------*/
(0177) void int1_init()
(0178) {
(0179)  	IN_SCK;						// set SCK_DDR (PD3/INT1) as input
_int1_init:
    0342 988B      CBI	0x11,3
(0180) 	SET_SCK;   					// set SCK_PORT as high level,avoid triggering
    0343 9A93      SBI	0x12,3
(0181) 	MCUCR |= 0b11110011;		// set PD3/INT1 as low level active
    0344 B785      IN	R24,0x35
    0345 6F83      ORI	R24,0xF3
    0346 BF85      OUT	0x35,R24
(0182) 	GICR  |= 0b10000000;		// enable global interrupt
    0347 B78B      IN	R24,0x3B
    0348 6880      ORI	R24,0x80
    0349 BF8B      OUT	0x3B,R24
(0183) 	SEI();	 	  				// enable external interrupt
    034A 9478      BSET	7
    034B 9508      RET
(0184) }
(0185) /*--------------------------------------------------------------------
(0186) 函数名称：
(0187) 函数功能：
(0188) 注意事项：
(0189) 提示说明：
(0190) 输    入：
(0191) 返    回：
(0192) --------------------------------------------------------------------*/
(0193) void main(void)
(0194) {
(0195)     PRESS_DATA_DDR = 0XFF;
_main:
    034C EF8F      LDI	R24,0xFF
    034D BB8A      OUT	0x1A,R24
(0196) 	SHIFT_DATA_DDR = 0XFF;
    034E BB87      OUT	0x17,R24
(0197) 	IN_SDA;
    034F 988C      CBI	0x11,4
(0198) 	int1_init();
    0350 DFF1      RCALL	_int1_init
    0351 C007      RJMP	0x0359
(0199) 	while(1)
(0200) 	{
(0201) 		if(rcvF)
    0352 90200100  LDS	R2,rcvF
    0354 2022      TST	R2
    0355 F019      BEQ	0x0359
(0202) 			keyHandle(keyVal);
FILE: <library>
    0356 91000104  LDS	R16,keyVal
    0358 DF67      RCALL	_keyHandle
    0359 CFF8      RJMP	0x0352
    035A 9508      RET
push_arg4:
    035B 933A      ST	R19,-Y
    035C 932A      ST	R18,-Y
push_arg2:
    035D 931A      ST	R17,-Y
    035E 930A      ST	R16,-Y
    035F 9508      RET
div32u:
    0360 94E8      BCLR	6
    0361 C001      RJMP	0x0363
mod32u:
    0362 9468      BSET	6
    0363 D02F      RCALL	long_div_prolog
    0364 24CC      CLR	R12
    0365 C008      RJMP	0x036E
div32s:
    0366 94E8      BCLR	6
    0367 C001      RJMP	0x0369
mod32s:
    0368 9468      BSET	6
    0369 D029      RCALL	long_div_prolog
    036A FD37      SBRC	R19,7
    036B D053      RCALL	neg_R16_R19
    036C FDB7      SBRC	R27,7
    036D D05A      RCALL	neg_R24_R27
    036E 2477      CLR	R7
    036F 2488      CLR	R8
    0370 2499      CLR	R9
    0371 24AA      CLR	R10
    0372 24BB      CLR	R11
    0373 D041      RCALL	tst_R16_R19
    0374 F0C1      BEQ	0x038D
    0375 D044      RCALL	tst_R24_R27
    0376 F0B1      BEQ	0x038D
    0377 E2E8      LDI	R30,0x28
    0378 0F00      LSL	R16
    0379 1F11      ROL	R17
    037A 1F22      ROL	R18
    037B 1F33      ROL	R19
    037C 1C77      ROL	R7
    037D 1C88      ROL	R8
    037E 1C99      ROL	R9
    037F 1CAA      ROL	R10
    0380 1CBB      ROL	R11
    0381 1688      CP	R8,R24
    0382 0699      CPC	R9,R25
    0383 06AA      CPC	R10,R26
    0384 06BB      CPC	R11,R27
    0385 F028      BCS	0x038B
    0386 1A88      SUB	R8,R24
    0387 0A99      SBC	R9,R25
    0388 0AAA      SBC	R10,R26
    0389 0ABB      SBC	R11,R27
    038A 9503      INC	R16
    038B 95EA      DEC	R30
    038C F759      BNE	0x0378
    038D F426      BRTC	0x0392
    038E 2D08      MOV	R16,R8
    038F 2D19      MOV	R17,R9
    0390 2D2A      MOV	R18,R10
    0391 2D3B      MOV	R19,R11
    0392 C013      RJMP	long_div_epilog
long_div_prolog:
    0393 927A      ST	R7,-Y
    0394 928A      ST	R8,-Y
    0395 929A      ST	R9,-Y
    0396 92AA      ST	R10,-Y
    0397 92BA      ST	R11,-Y
    0398 92CA      ST	R12,-Y
    0399 93EA      ST	R30,-Y
    039A 938A      ST	R24,-Y
    039B 939A      ST	R25,-Y
    039C 93AA      ST	R26,-Y
    039D 93BA      ST	R27,-Y
    039E 858B      LDD	R24,Y+11
    039F 859C      LDD	R25,Y+12
    03A0 85AD      LDD	R26,Y+13
    03A1 85BE      LDD	R27,Y+14
    03A2 2EC3      MOV	R12,R19
    03A3 F00E      BRTS	0x03A5
    03A4 26CB      EOR	R12,R27
    03A5 9508      RET
long_div_epilog:
    03A6 FCC7      SBRC	R12,7
    03A7 D017      RCALL	neg_R16_R19
    03A8 91B9      LD	R27,Y+
    03A9 91A9      LD	R26,Y+
    03AA 9199      LD	R25,Y+
    03AB 9189      LD	R24,Y+
    03AC 91E9      LD	R30,Y+
    03AD 90C9      LD	R12,Y+
    03AE 90B9      LD	R11,Y+
    03AF 90A9      LD	R10,Y+
    03B0 9099      LD	R9,Y+
    03B1 9089      LD	R8,Y+
    03B2 9079      LD	R7,Y+
    03B3 9624      ADIW	R28,4
    03B4 9508      RET
tst_R16_R19:
    03B5 2FE0      MOV	R30,R16
    03B6 2BE1      OR	R30,R17
    03B7 2BE2      OR	R30,R18
    03B8 2BE3      OR	R30,R19
    03B9 9508      RET
tst_R24_R27:
    03BA 2FE8      MOV	R30,R24
    03BB 2BE9      OR	R30,R25
    03BC 2BEA      OR	R30,R26
    03BD 2BEB      OR	R30,R27
    03BE 9508      RET
neg_R16_R19:
    03BF 9500      COM	R16
    03C0 9510      COM	R17
    03C1 9520      COM	R18
    03C2 9530      COM	R19
    03C3 5F0F      SUBI	R16,0xFF
    03C4 4F1F      SBCI	R17,0xFF
    03C5 4F2F      SBCI	R18,0xFF
    03C6 4F3F      SBCI	R19,0xFF
    03C7 9508      RET
neg_R24_R27:
    03C8 9580      COM	R24
    03C9 9590      COM	R25
    03CA 95A0      COM	R26
    03CB 95B0      COM	R27
    03CC 5F8F      SUBI	R24,0xFF
    03CD 4F9F      SBCI	R25,0xFF
    03CE 4FAF      SBCI	R26,0xFF
    03CF 4FBF      SBCI	R27,0xFF
    03D0 9508      RET
empy32u:
empy32s:
    03D1 940E0426  CALL	long_prolog
    03D3 927F      PUSH	R7
    03D4 940E043F  CALL	tstzero1
    03D6 F139      BEQ	0x03FE
    03D7 2477      CLR	R7
    03D8 940E0445  CALL	tstzero2
    03DA F419      BNE	0x03DE
    03DB 018C      MOVW	R16,R24
    03DC 019D      MOVW	R18,R26
    03DD C020      RJMP	0x03FE
    03DE 9F08      MUL	R16,R24
    03DF 2CB0      MOV	R11,R0
    03E0 2CA1      MOV	R10,R1
    03E1 9F28      MUL	R18,R24
    03E2 2C90      MOV	R9,R0
    03E3 2C81      MOV	R8,R1
    03E4 9F18      MUL	R17,R24
    03E5 0CA0      ADD	R10,R0
    03E6 1C91      ADC	R9,R1
    03E7 1C87      ADC	R8,R7
    03E8 9F09      MUL	R16,R25
    03E9 0CA0      ADD	R10,R0
    03EA 1C91      ADC	R9,R1
    03EB 1C87      ADC	R8,R7
    03EC 9F19      MUL	R17,R25
    03ED 0C90      ADD	R9,R0
    03EE 1C81      ADC	R8,R1
    03EF 9F0A      MUL	R16,R26
    03F0 0C90      ADD	R9,R0
    03F1 1C81      ADC	R8,R1
    03F2 9F38      MUL	R19,R24
    03F3 0C80      ADD	R8,R0
    03F4 9F29      MUL	R18,R25
    03F5 0C80      ADD	R8,R0
    03F6 9F1A      MUL	R17,R26
    03F7 0C80      ADD	R8,R0
    03F8 9F0B      MUL	R16,R27
    03F9 0C80      ADD	R8,R0
    03FA 2D0B      MOV	R16,R11
    03FB 2D1A      MOV	R17,R10
    03FC 2D29      MOV	R18,R9
    03FD 2D38      MOV	R19,R8
    03FE 907F      POP	R7
    03FF 940C0434  JMP	long_epilog
pop_gset2:
    0401 E0E2      LDI	R30,2
    0402 940C0413  JMP	pop
pop_gset4:
    0404 E0E8      LDI	R30,0x8
    0405 940C0413  JMP	pop
push_gset5:
    0407 92FA      ST	R15,-Y
    0408 92EA      ST	R14,-Y
push_gset4:
    0409 92DA      ST	R13,-Y
    040A 92CA      ST	R12,-Y
push_gset3:
    040B 92BA      ST	R11,-Y
    040C 92AA      ST	R10,-Y
push_gset2:
    040D 937A      ST	R23,-Y
    040E 936A      ST	R22,-Y
push_gset1:
    040F 935A      ST	R21,-Y
    0410 934A      ST	R20,-Y
    0411 9508      RET
pop_gset1:
    0412 E0E1      LDI	R30,1
pop:
    0413 9149      LD	R20,Y+
    0414 9159      LD	R21,Y+
    0415 FDE0      SBRC	R30,0
    0416 9508      RET
    0417 9169      LD	R22,Y+
    0418 9179      LD	R23,Y+
    0419 FDE1      SBRC	R30,1
    041A 9508      RET
    041B 90A9      LD	R10,Y+
    041C 90B9      LD	R11,Y+
    041D FDE2      SBRC	R30,2
    041E 9508      RET
    041F 90C9      LD	R12,Y+
    0420 90D9      LD	R13,Y+
    0421 FDE3      SBRC	R30,3
    0422 9508      RET
    0423 90E9      LD	R14,Y+
    0424 90F9      LD	R15,Y+
    0425 9508      RET
long_prolog:
    0426 928A      ST	R8,-Y
    0427 929A      ST	R9,-Y
    0428 92AA      ST	R10,-Y
    0429 92BA      ST	R11,-Y
    042A 93EA      ST	R30,-Y
    042B 938A      ST	R24,-Y
    042C 939A      ST	R25,-Y
    042D 93AA      ST	R26,-Y
    042E 93BA      ST	R27,-Y
    042F 8589      LDD	R24,Y+9
    0430 859A      LDD	R25,Y+10
    0431 85AB      LDD	R26,Y+11
    0432 85BC      LDD	R27,Y+12
    0433 9508      RET
long_epilog:
    0434 91B9      LD	R27,Y+
    0435 91A9      LD	R26,Y+
    0436 9199      LD	R25,Y+
    0437 9189      LD	R24,Y+
    0438 91E9      LD	R30,Y+
    0439 90B9      LD	R11,Y+
    043A 90A9      LD	R10,Y+
    043B 9099      LD	R9,Y+
    043C 9089      LD	R8,Y+
    043D 9624      ADIW	R28,4
    043E 9508      RET
tstzero1:
    043F 27EE      CLR	R30
    0440 2BE0      OR	R30,R16
    0441 2BE1      OR	R30,R17
    0442 2BE2      OR	R30,R18
    0443 2BE3      OR	R30,R19
    0444 9508      RET
tstzero2:
    0445 27EE      CLR	R30
    0446 2BE8      OR	R30,R24
    0447 2BE9      OR	R30,R25
    0448 2BEA      OR	R30,R26
    0449 2BEB      OR	R30,R27
    044A 9508      RET
