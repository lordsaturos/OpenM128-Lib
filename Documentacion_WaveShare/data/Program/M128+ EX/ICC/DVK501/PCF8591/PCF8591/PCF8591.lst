Interrupt Vectors
    00000 940C 0046 JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    00046 EFCF      LDI	R28,0xFF
    00047 E1D0      LDI	R29,0x10
    00048 BFCD      OUT	0x3D,R28
    00049 BFDE      OUT	0x3E,R29
    0004A 51C0      SUBI	R28,0x10
    0004B 40D0      SBCI	R29,0
    0004C EA0A      LDI	R16,0xAA
    0004D 8308      ST	Y,R16
    0004E 2400      CLR	R0
    0004F E0E0      LDI	R30,0
    00050 E0F1      LDI	R31,1
    00051 E011      LDI	R17,1
    00052 30E6      CPI	R30,6
    00053 07F1      CPC	R31,R17
    00054 F011      BEQ	0x0057
    00055 9201      ST	Z+,R0
    00056 CFFB      RJMP	0x0052
    00057 8300      ST	Z,R16
    00058 E8EC      LDI	R30,0x8C
    00059 E0F0      LDI	R31,0
    0005A E0A0      LDI	R26,0
    0005B E0B1      LDI	R27,1
    0005C E010      LDI	R17,0
    0005D E000      LDI	R16,0
    0005E BF0B      OUT	0x3B,R16
    0005F 38EC      CPI	R30,0x8C
    00060 07F1      CPC	R31,R17
    00061 F021      BEQ	0x0066
    00062 95C8      LPM
    00063 9631      ADIW	R30,1
    00064 920D      ST	X+,R0
    00065 CFF9      RJMP	0x005F
    00066 940E 0284 CALL	_main
_exit:
    00068 CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    00069 940E 029F CALL	push_arg4
    0006B 940E 0368 CALL	push_xgsetF03C
    0006D 9728      SBIW	R28,0x8
    0006E 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    0006F 24AA      CLR	R10
    00070 E081      LDI	R24,1
    00071 8388      ST	Y,R24
    00072 E080      LDI	R24,0
    00073 8389      STD	Y+1,R24
    00074 838A      STD	Y+2,R24
    00075 838B      STD	Y+3,R24
    00076 C03C      RJMP	0x00B3
(0120)     {
(0121)         y=dat/j;
    00077 8028      LD	R2,Y
    00078 8039      LDD	R3,Y+1
    00079 804A      LDD	R4,Y+2
    0007A 805B      LDD	R5,Y+3
    0007B 8908      LDD	R16,Y+16
    0007C 8919      LDD	R17,Y+17
    0007D 892A      LDD	R18,Y+18
    0007E 893B      LDD	R19,Y+19
    0007F 925A      ST	-Y,R5
    00080 924A      ST	-Y,R4
    00081 923A      ST	-Y,R3
    00082 922A      ST	-Y,R2
    00083 940E 02A4 CALL	div32u
    00085 830C      STD	Y+4,R16
    00086 831D      STD	Y+5,R17
    00087 832E      STD	Y+6,R18
    00088 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    00089 E04A      LDI	R20,0xA
    0008A E050      LDI	R21,0
    0008B E060      LDI	R22,0
    0008C E070      LDI	R23,0
    0008D 810C      LDD	R16,Y+4
    0008E 811D      LDD	R17,Y+5
    0008F 812E      LDD	R18,Y+6
    00090 813F      LDD	R19,Y+7
    00091 937A      ST	-Y,R23
    00092 936A      ST	-Y,R22
    00093 935A      ST	-Y,R21
    00094 934A      ST	-Y,R20
    00095 940E 02A6 CALL	mod32u
    00097 E080      LDI	R24,0
    00098 E091      LDI	R25,1
    00099 2DEA      MOV	R30,R10
    0009A 27FF      CLR	R31
    0009B 0FE8      ADD	R30,R24
    0009C 1FF9      ADC	R31,R25
    0009D 8300      ST	Z,R16
(0123)         j*=10;
    0009E 8028      LD	R2,Y
    0009F 8039      LDD	R3,Y+1
    000A0 804A      LDD	R4,Y+2
    000A1 805B      LDD	R5,Y+3
    000A2 E04A      LDI	R20,0xA
    000A3 E050      LDI	R21,0
    000A4 E060      LDI	R22,0
    000A5 E070      LDI	R23,0
    000A6 925A      ST	-Y,R5
    000A7 924A      ST	-Y,R4
    000A8 923A      ST	-Y,R3
    000A9 922A      ST	-Y,R2
    000AA 018A      MOVW	R16,R20
    000AB 019B      MOVW	R18,R22
    000AC 940E 030E CALL	empy32u|empy32s
    000AE 8308      ST	Y,R16
    000AF 8319      STD	Y+1,R17
    000B0 832A      STD	Y+2,R18
    000B1 833B      STD	Y+3,R19
    000B2 94A3      INC	R10
    000B3 2C2C      MOV	R2,R12
    000B4 2433      CLR	R3
    000B5 FC27      SBRC	R2,7
    000B6 9430      COM	R3
    000B7 2C4A      MOV	R4,R10
    000B8 2455      CLR	R5
    000B9 1442      CP	R4,R2
    000BA 0453      CPC	R5,R3
    000BB F40C      BGE	0x00BD
    000BC CFBA      RJMP	0x0077
    000BD 9628      ADIW	R28,0x8
    000BE 940E 0371 CALL	pop_xgsetF03C
    000C0 9624      ADIW	R28,4
    000C1 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    000C2 EA84      LDI	R24,0xA4
    000C3 9380 0074 STS	0x74,R24
(0128) 	I2CWaitAck();
    000C5 9020 0074 LDS	R2,0x74
    000C7 FE27      SBRS	R2,7
    000C8 CFFC      RJMP	0x00C5
(0129) 	if( I2CChkAck()!=I2C_START ) 
    000C9 9180 0071 LDS	R24,0x71
    000CB 7F88      ANDI	R24,0xF8
    000CC 3088      CPI	R24,0x8
    000CD F011      BEQ	0x00D0
(0130) 		return I2C_ERR;
    000CE 2700      CLR	R16
    000CF C001      RJMP	0x00D1
(0131) 	return I2C_CRR;
    000D0 E001      LDI	R16,1
    000D1 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    000D2 EA84      LDI	R24,0xA4
    000D3 9380 0074 STS	0x74,R24
(0144) 	I2CWaitAck();
    000D5 9020 0074 LDS	R2,0x74
    000D7 FE27      SBRS	R2,7
    000D8 CFFC      RJMP	0x00D5
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    000D9 9180 0071 LDS	R24,0x71
    000DB 7F88      ANDI	R24,0xF8
    000DC 3180      CPI	R24,0x10
    000DD F011      BEQ	0x00E0
(0146) 		return I2C_ERR;
    000DE 2700      CLR	R16
    000DF C001      RJMP	0x00E1
(0147) 	return I2C_CRR;
    000E0 E001      LDI	R16,1
    000E1 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    000E2 9300 0073 STS	0x73,R16
    000E4 E884      LDI	R24,0x84
    000E5 9380 0074 STS	0x74,R24
(0160) 	I2CWaitAck();
    000E7 9020 0074 LDS	R2,0x74
    000E9 FE27      SBRS	R2,7
    000EA CFFC      RJMP	0x00E7
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    000EB 9180 0071 LDS	R24,0x71
    000ED 7F88      ANDI	R24,0xF8
    000EE 3188      CPI	R24,0x18
    000EF F011      BEQ	0x00F2
(0162) 		return I2C_ERR;
    000F0 2700      CLR	R16
    000F1 C001      RJMP	0x00F3
(0163) 	return I2C_CRR;		
    000F2 E001      LDI	R16,1
    000F3 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    000F4 92AA      ST	-Y,R10
    000F5 92BA      ST	-Y,R11
    000F6 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    000F7 FEA0      SBRS	R10,0
    000F8 C00E      RJMP	0x0107
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    000F9 2D0A      MOV	R16,R10
    000FA 9506      LSR	R16
    000FB 9506      LSR	R16
    000FC 9506      LSR	R16
    000FD 9506      LSR	R16
    000FE 9506      LSR	R16
    000FF 9506      LSR	R16
    00100 9506      LSR	R16
    00101 9506      LSR	R16
    00102 DFDF      RCALL	_I2C_SendWrDAdr
    00103 2300      TST	R16
    00104 F411      BNE	0x0107
(0177) 			return I2C_ERR;
    00105 2700      CLR	R16
    00106 C007      RJMP	0x010E
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    00107 2D0A      MOV	R16,R10
    00108 DFD9      RCALL	_I2C_SendWrDAdr
    00109 2300      TST	R16
    0010A F411      BNE	0x010D
(0179) 		return I2C_ERR;
    0010B 2700      CLR	R16
    0010C C001      RJMP	0x010E
(0180) 	return I2C_CRR;
    0010D E001      LDI	R16,1
    0010E 90B9      LD	R11,Y+
    0010F 90A9      LD	R10,Y+
    00110 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    00111 9300 0073 STS	0x73,R16
    00113 E884      LDI	R24,0x84
    00114 9380 0074 STS	0x74,R24
(0193) 	I2CWaitAck();
    00116 9020 0074 LDS	R2,0x74
    00118 FE27      SBRS	R2,7
    00119 CFFC      RJMP	0x0116
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    0011A 9180 0071 LDS	R24,0x71
    0011C 7F88      ANDI	R24,0xF8
    0011D 3480      CPI	R24,0x40
    0011E F011      BEQ	0x0121
(0195) 		return I2C_ERR;
    0011F 2700      CLR	R16
    00120 C001      RJMP	0x0122
(0196) 	return I2C_CRR;	
    00121 E001      LDI	R16,1
    00122 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    00123 92AA      ST	-Y,R10
    00124 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    00125 FEA0      SBRS	R10,0
    00126 C00E      RJMP	0x0135
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    00127 2D0A      MOV	R16,R10
    00128 9506      LSR	R16
    00129 9506      LSR	R16
    0012A 9506      LSR	R16
    0012B 9506      LSR	R16
    0012C 9506      LSR	R16
    0012D 9506      LSR	R16
    0012E 9506      LSR	R16
    0012F 9506      LSR	R16
    00130 DFB1      RCALL	_I2C_SendWrDAdr
    00131 2300      TST	R16
    00132 F411      BNE	0x0135
(0210) 			return I2C_ERR;
    00133 2700      CLR	R16
    00134 C007      RJMP	0x013C
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    00135 2D0A      MOV	R16,R10
    00136 DFAB      RCALL	_I2C_SendWrDAdr
    00137 2300      TST	R16
    00138 F411      BNE	0x013B
(0212) 		return I2C_ERR;
    00139 2700      CLR	R16
    0013A C001      RJMP	0x013C
(0213) 	return I2C_CRR;
    0013B E001      LDI	R16,1
    0013C 90A9      LD	R10,Y+
    0013D 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    0013E 9300 0073 STS	0x73,R16
    00140 E884      LDI	R24,0x84
    00141 9380 0074 STS	0x74,R24
(0226) 	I2CWaitAck();
    00143 9020 0074 LDS	R2,0x74
    00145 FE27      SBRS	R2,7
    00146 CFFC      RJMP	0x0143
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    00147 9180 0071 LDS	R24,0x71
    00149 7F88      ANDI	R24,0xF8
    0014A 3288      CPI	R24,0x28
    0014B F011      BEQ	0x014E
(0228) 		return I2C_ERR;
    0014C 2700      CLR	R16
    0014D C001      RJMP	0x014F
(0229) 	return I2C_CRR;	
    0014E E001      LDI	R16,1
    0014F 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    00150 E884      LDI	R24,0x84
    00151 9380 0074 STS	0x74,R24
(0242) 	I2CWaitAck();
    00153 9020 0074 LDS	R2,0x74
    00155 FE27      SBRS	R2,7
    00156 CFFC      RJMP	0x0153
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    00157 9180 0071 LDS	R24,0x71
    00159 7F88      ANDI	R24,0xF8
    0015A 3588      CPI	R24,0x58
    0015B F011      BEQ	0x015E
(0244) 		return I2C_ERR;
    0015C 2700      CLR	R16
    0015D C005      RJMP	0x0163
(0245) 	*pRdDat=TWDR;
    0015E 9020 0073 LDS	R2,0x73
    00160 01F8      MOVW	R30,R16
    00161 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    00162 E001      LDI	R16,1
    00163 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    00164 EC84      LDI	R24,0xC4
    00165 9380 0074 STS	0x74,R24
(0259) 	I2CWaitAck();
    00167 9020 0074 LDS	R2,0x74
    00169 FE27      SBRS	R2,7
    0016A CFFC      RJMP	0x0167
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    0016B 9180 0071 LDS	R24,0x71
    0016D 7F88      ANDI	R24,0xF8
    0016E 3580      CPI	R24,0x50
    0016F F011      BEQ	0x0172
(0261) 		return I2C_ERR;
    00170 2700      CLR	R16
    00171 C005      RJMP	0x0177
(0262) 	*pRdDat=TWDR;
    00172 9020 0073 LDS	R2,0x73
    00174 01F8      MOVW	R30,R16
    00175 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    00176 E001      LDI	R16,1
    00177 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    00178 940E 0361 CALL	push_xgset00FC
    0017A 2EC2      MOV	R12,R18
    0017B 0178      MOVW	R14,R16
    0017C 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    0017D DF44      RCALL	_I2C_Start
    0017E 2300      TST	R16
    0017F F411      BNE	0x0182
(0278) 		return I2C_ERR;
    00180 2700      CLR	R16
    00181 C018      RJMP	0x019A
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    00182 0187      MOVW	R16,R14
    00183 DF70      RCALL	_I2C_SendWrDAdr_
    00184 2300      TST	R16
    00185 F411      BNE	0x0188
(0281) 		return I2C_ERR;
    00186 2700      CLR	R16
    00187 C012      RJMP	0x019A
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00188 2D0C      MOV	R16,R12
    00189 DFB4      RCALL	_I2C_SendDat
    0018A 2EC0      MOV	R12,R16
    0018B 2300      TST	R16
    0018C F411      BNE	0x018F
(0284) 		return I2C_ERR;
    0018D 2700      CLR	R16
    0018E C00B      RJMP	0x019A
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    0018F 2D0A      MOV	R16,R10
    00190 DFAD      RCALL	_I2C_SendDat
    00191 2EA0      MOV	R10,R16
    00192 2300      TST	R16
    00193 F411      BNE	0x0196
(0287) 		return I2C_ERR;
    00194 2700      CLR	R16
    00195 C004      RJMP	0x019A
(0288) 
(0289) 	I2C_Stop();
    00196 E984      LDI	R24,0x94
    00197 9380 0074 STS	0x74,R24
(0290) 
(0291) 	return I2C_CRR;
    00199 E001      LDI	R16,1
    0019A 940C 0342 JMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    0019C 940E 035F CALL	push_xgset30FC
    0019E 2EE2      MOV	R14,R18
    0019F 01A8      MOVW	R20,R16
    001A0 84C8      LDD	R12,Y+8
    001A1 84AA      LDD	R10,Y+10
    001A2 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    001A3 DF1E      RCALL	_I2C_Start
    001A4 2300      TST	R16
    001A5 F411      BNE	0x01A8
(0324) 		return I2C_ERR;
    001A6 2700      CLR	R16
    001A7 C025      RJMP	0x01CD
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001A8 018A      MOVW	R16,R20
    001A9 DF4A      RCALL	_I2C_SendWrDAdr_
    001AA 2300      TST	R16
    001AB F411      BNE	0x01AE
(0327) 		return I2C_ERR;
    001AC 2700      CLR	R16
    001AD C01F      RJMP	0x01CD
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001AE 2D0E      MOV	R16,R14
    001AF DF8E      RCALL	_I2C_SendDat
    001B0 2EE0      MOV	R14,R16
    001B1 2300      TST	R16
    001B2 F411      BNE	0x01B5
(0330) 		return I2C_ERR;
    001B3 2700      CLR	R16
    001B4 C018      RJMP	0x01CD
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    001B5 DF1C      RCALL	_I2C_Restart
    001B6 2EE0      MOV	R14,R16
    001B7 2300      TST	R16
    001B8 F411      BNE	0x01BB
(0333) 		return I2C_ERR;
    001B9 2700      CLR	R16
    001BA C012      RJMP	0x01CD
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001BB 2D0C      MOV	R16,R12
    001BC DF54      RCALL	_I2C_SendRdDAdr
    001BD 2EC0      MOV	R12,R16
    001BE 2300      TST	R16
    001BF F411      BNE	0x01C2
(0336) 		return I2C_ERR;
    001C0 2700      CLR	R16
    001C1 C00B      RJMP	0x01CD
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    001C2 0185      MOVW	R16,R10
    001C3 DF8C      RCALL	_I2C_RcvNAckDat
    001C4 2EA0      MOV	R10,R16
    001C5 2300      TST	R16
    001C6 F411      BNE	0x01C9
(0339) 		return I2C_ERR;
    001C7 2700      CLR	R16
    001C8 C004      RJMP	0x01CD
(0340) 
(0341) 	I2C_Stop();
    001C9 E984      LDI	R24,0x94
    001CA 9380 0074 STS	0x74,R24
(0342) 
(0343) 	return I2C_CRR;
    001CC E001      LDI	R16,1
    001CD 940C 0349 JMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    001CF 940E 035D CALL	push_xgsetF0FC
    001D1 2EE2      MOV	R14,R18
    001D2 01B8      MOVW	R22,R16
    001D3 84CA      LDD	R12,Y+10
    001D4 84AC      LDD	R10,Y+12
    001D5 84BD      LDD	R11,Y+13
    001D6 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    001D7 DEEA      RCALL	_I2C_Start
    001D8 2300      TST	R16
    001D9 F411      BNE	0x01DC
(0363) 		return I2C_ERR;
    001DA 2700      CLR	R16
    001DB C039      RJMP	0x0215
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001DC 018B      MOVW	R16,R22
    001DD DF16      RCALL	_I2C_SendWrDAdr_
    001DE 2300      TST	R16
    001DF F411      BNE	0x01E2
(0366) 		return I2C_ERR;
    001E0 2700      CLR	R16
    001E1 C033      RJMP	0x0215
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001E2 2D0E      MOV	R16,R14
    001E3 DF5A      RCALL	_I2C_SendDat
    001E4 2EE0      MOV	R14,R16
    001E5 2300      TST	R16
    001E6 F411      BNE	0x01E9
(0369) 		return I2C_ERR;
    001E7 2700      CLR	R16
    001E8 C02C      RJMP	0x0215
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    001E9 DEE8      RCALL	_I2C_Restart
    001EA 2EE0      MOV	R14,R16
    001EB 2300      TST	R16
    001EC F411      BNE	0x01EF
(0372) 		return I2C_ERR;
    001ED 2700      CLR	R16
    001EE C026      RJMP	0x0215
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001EF 2D0C      MOV	R16,R12
    001F0 DF20      RCALL	_I2C_SendRdDAdr
    001F1 2EC0      MOV	R12,R16
    001F2 2300      TST	R16
    001F3 F411      BNE	0x01F6
(0375) 		return I2C_ERR;
    001F4 2700      CLR	R16
    001F5 C01F      RJMP	0x0215
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    001F6 24CC      CLR	R12
    001F7 C00B      RJMP	0x0203
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    001F8 2D0C      MOV	R16,R12
    001F9 2711      CLR	R17
    001FA 0D0A      ADD	R16,R10
    001FB 1D1B      ADC	R17,R11
    001FC DF67      RCALL	_I2C_RcvAckDat
    001FD 2EE0      MOV	R14,R16
    001FE 2300      TST	R16
    001FF F411      BNE	0x0202
(0379) 			return I2C_ERR;
    00200 2700      CLR	R16
    00201 C013      RJMP	0x0215
    00202 94C3      INC	R12
    00203 2F84      MOV	R24,R20
    00204 5081      SUBI	R24,1
    00205 16C8      CP	R12,R24
    00206 F388      BCS	0x01F8
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    00207 2D0C      MOV	R16,R12
    00208 2711      CLR	R17
    00209 0D0A      ADD	R16,R10
    0020A 1D1B      ADC	R17,R11
    0020B DF44      RCALL	_I2C_RcvNAckDat
    0020C 2EA0      MOV	R10,R16
    0020D 2300      TST	R16
    0020E F411      BNE	0x0211
(0382) 			return I2C_ERR;
    0020F 2700      CLR	R16
    00210 C004      RJMP	0x0215
(0383) 
(0384) 	I2C_Stop();
    00211 E984      LDI	R24,0x94
    00212 9380 0074 STS	0x74,R24
(0385) 	
(0386) 	return I2C_CRR;
    00214 E001      LDI	R16,1
    00215 940C 0352 JMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    00217 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    00218 C007      RJMP	0x0220
(0108)         for(j=0;j<70;j++)	
    00219 2744      CLR	R20
    0021A C001      RJMP	0x021C
    0021B 9543      INC	R20
    0021C 3446      CPI	R20,0x46
    0021D F3E8      BCS	0x021B
    0021E 5001      SUBI	R16,1
    0021F 4010      SBCI	R17,0
    00220 2422      CLR	R2
    00221 2433      CLR	R3
    00222 1620      CP	R2,R16
    00223 0631      CPC	R3,R17
    00224 F3A4      BLT	0x0219
    00225 9149      LD	R20,Y+
    00226 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    00227 934A      ST	-Y,R20
    00228 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    00229 C013      RJMP	0x023D
(0123) 		for(i=0;i<52642;i++)
    0022A 2744      CLR	R20
    0022B 2755      CLR	R21
    0022C C002      RJMP	0x022F
    0022D 5F4F      SUBI	R20,0xFF
    0022E 4F5F      SBCI	R21,0xFF
    0022F EA82      LDI	R24,0xA2
    00230 EC9D      LDI	R25,0xCD
    00231 E0A0      LDI	R26,0
    00232 E0B0      LDI	R27,0
    00233 011A      MOVW	R2,R20
    00234 2444      CLR	R4
    00235 2455      CLR	R5
    00236 1628      CP	R2,R24
    00237 0639      CPC	R3,R25
    00238 064A      CPC	R4,R26
    00239 065B      CPC	R5,R27
    0023A F394      BLT	0x022D
    0023B 5001      SUBI	R16,1
    0023C 4010      SBCI	R17,0
    0023D 2422      CLR	R2
    0023E 2433      CLR	R3
    0023F 1620      CP	R2,R16
    00240 0631      CPC	R3,R17
    00241 F344      BLT	0x022A
    00242 9159      LD	R21,Y+
    00243 9149      LD	R20,Y+
    00244 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    00245 934A      ST	-Y,R20
    00246 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    00247 2744      CLR	R20
    00248 2755      CLR	R21
    00249 C002      RJMP	0x024C
    0024A 5F4F      SUBI	R20,0xFF
    0024B 4F5F      SBCI	R21,0xFF
    0024C 1740      CP	R20,R16
    0024D 0751      CPC	R21,R17
    0024E F3D8      BCS	0x024A
    0024F 9159      LD	R21,Y+
    00250 9149      LD	R20,Y+
    00251 9508      RET
_PCF8591_getAD:
  pRdDat               --> R14
  chan                 --> R10
  mode                 --> R12
    00252 940E 0361 CALL	push_xgset00FC
    00254 2EA2      MOV	R10,R18
    00255 2EC0      MOV	R12,R16
    00256 9724      SBIW	R28,4
    00257 84EA      LDD	R14,Y+10
    00258 84FB      LDD	R15,Y+11
FILE: D:\ICC_H\PCF8591.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net	
(0003) 
(0004) 目    的:   建立方便的PCF8591操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 	sbit I2C_SCL=P3^1;
(0028) 	sbit I2C_SDA=P3^0;
(0029) 	#define WR_DADR	0x90	//器件地址：A2 A1 A0 = 0 0 0
(0030) 	#define RD_DADR	0x91	//器件地址：A2 A1 A0 = 0 0 0
(0031) 
(0032) ----------------------------------------------------------------------
(0033) 待定参数说明：
(0034) 
(0035) ----------------------------------------------------------------------	
(0036) 对外变量说明：
(0037) 
(0038) ----------------------------------------------------------------------
(0039) 对外函数说明：
(0040) 
(0041) ----------------------------------------------------------------------
(0042) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0043) 
(0044) #ifndef PCF8591_H
(0045) #define PCF8591_H
(0046) 
(0047) #include "D:\ICC_H\CmmICC.H"
(0048) //sbit I2C_SCL=P3^1;
(0049) //sbit I2C_SDA=P3^0;
(0050) #include "D:\ICC_H\I2C.H"
(0051) 
(0052) //器件地址：A0 A1 A2 = 0 0 0
(0053) #ifndef WR_DADR 
(0054) 	#define WR_DADR		0x90	//write device-address 
(0055) #endif
(0056) #ifndef RD_DADR 
(0057) 	#define RD_DADR		0x91	//read device-address
(0058) #endif
(0059) 
(0060) #define MODE0 	0x00	//Channel0 = AIN0;
(0061) 						//Channel1 = AIN1;
(0062) 						//Channel2 = AIN2;
(0063) 						//Channel3 = AIN3;
(0064) #define MODE1 	0x10	//Channel0 = AIN3-AIN0;
(0065) 						//Channel1 = AIN3-AIN1
(0066) 						//Channel2 = AIN3-AIN2;
(0067) #define MODE2 	0x20	//Channel0 = AIN0;
(0068) 						//Channel1 = AIN1;
(0069) 						//Channel2 = AIN3-AIN2;
(0070) #define MODE3 	0x30	//Channel0 = AIN1-AIN0;
(0071) 						//Channel1 = AIN3-AIN2;
(0072) 
(0073) #define CHNL0 	0		//Using Channel0
(0074) #define CHNL1 	1		//Using Channel1
(0075) #define CHNL2 	2		//Using Channel2
(0076) #define CHNL3 	3		//Using Channel3
(0077) 
(0078) #define DAouputEn	0x40	//0x50 or 0x60 or 0x70 is also ok!
(0079) 
(0080) /*--------------------------------------------------------------------
(0081) 函数全称：
(0082) 函数功能：
(0083) 注意事项：
(0084) 提示说明：
(0085) 输    入：	
(0086) 返    回：00H~FFH
(0087) --------------------------------------------------------------------*/
(0088) void PCF8591_getAD(uint8 mode,uint8 chan,uint8 *pRdDat)
(0089) {
(0090) 	I2C_Read(WR_DADR,mode|chan,RD_DADR,pRdDat);
    00259 82FB      STD	Y+3,R15
    0025A 82EA      STD	Y+2,R14
    0025B E981      LDI	R24,0x91
    0025C 8388      ST	Y,R24
    0025D 2D2C      MOV	R18,R12
    0025E 292A      OR	R18,R10
    0025F E900      LDI	R16,0x90
    00260 E010      LDI	R17,0
    00261 DF3A      RCALL	_I2C_Read
    00262 9624      ADIW	R28,4
    00263 940C 0342 JMP	pop_xgset00FC
_PCF8591_setDA:
  val                  --> R10
    00265 92AA      ST	-Y,R10
    00266 2EA0      MOV	R10,R16
    00267 9721      SBIW	R28,1
(0091) }
(0092) /*--------------------------------------------------------------------
(0093) 函数全称：
(0094) 函数功能：
(0095) 注意事项：
(0096) 提示说明：
(0097) 输    入：00H~FFH	
(0098) 返    回：
(0099) --------------------------------------------------------------------*/
(0100) void PCF8591_setDA(uint8 val)
(0101) {
(0102) 	I2C_Write(WR_DADR,DAouputEn,val);
    00268 82A8      ST	Y,R10
    00269 E420      LDI	R18,0x40
    0026A E900      LDI	R16,0x90
    0026B E010      LDI	R17,0
    0026C DF0B      RCALL	_I2C_Write
    0026D 9621      ADIW	R28,1
    0026E 90A9      LD	R10,Y+
    0026F 9508      RET
FILE: E:\吴泽备份\DVK501光盘内容\M128_E~1\PCF859~1\PCF8591\PCF8591.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立使用PCF8591的示例程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 初始化、读取AD、输出DA，使用PA口的LED指示获取的AD数据，使用万用表测量DA的输出电压。
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：将PCF8591的A0、A1、A2使用短路帽短接至“－  ”。
(0030) 		  将PCF8591的IN0接可调电阻的AD1
(0031) 		  将PCF8591的OUT外接万用表的表笔(用电压档)
(0032)           	   STK128+     			STK128+
(0033) 			   PORTA	---------   LED0~7
(0034) 				
(0035) 		 	  DVK500				 STK128+
(0036) 				VCC		---------	  VCC
(0037) 				GND		---------	  GND
(0038) 				SCK	 	---------	  PD0(SCL)
(0039) 				SDA		---------	  PD1(SDA)
(0040) ----------------------------------------------------------------------
(0041) 注意事项： 
(0042) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0043) （2）请详细阅读“使用必读”及相关资料。
(0044) ----------------------------------------------------------------------
(0045) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0046) 
(0047) #include <iom128v.h>
(0048) 
(0049) #define WR_DADR		0x90	//write device-address
(0050) #define RD_DADR		0x91	//read device-address
(0051) #include "D:\ICC_H\PCF8591.H"
(0052) 
(0053) #define DISP_DDR	DDRA
(0054) #define DISP_PORT	PORTA
(0055) 
(0056) /*--------------------------------------------------------------------
(0057) 函数名称：
(0058) 函数功能：
(0059) 注意事项：
(0060) 提示说明：
(0061) 输    入：
(0062) 返    回：
(0063) --------------------------------------------------------------------*/
(0064) void errDisp()				
(0065) {
(0066)  	DISP_PORT = 0X55;
_errDisp:
    00270 E585      LDI	R24,0x55
    00271 BB8B      OUT	0x1B,R24
(0067) 	delay50ms(4);
    00272 E004      LDI	R16,4
    00273 E010      LDI	R17,0
    00274 DFB2      RCALL	_delay50ms
(0068) 	DISP_PORT = 0X00;
    00275 2422      CLR	R2
    00276 BA2B      OUT	0x1B,R2
(0069) 	delay50ms(4);
    00277 E004      LDI	R16,4
    00278 E010      LDI	R17,0
    00279 DFAD      RCALL	_delay50ms
(0070) 	DISP_PORT = 0XAA;
    0027A EA8A      LDI	R24,0xAA
    0027B BB8B      OUT	0x1B,R24
(0071) 	delay50ms(4);
    0027C E004      LDI	R16,4
    0027D E010      LDI	R17,0
    0027E DFA8      RCALL	_delay50ms
(0072) 	DISP_PORT = 0X00;
    0027F 2422      CLR	R2
    00280 BA2B      OUT	0x1B,R2
(0073) 	delay50ms(4);
    00281 E004      LDI	R16,4
    00282 E010      LDI	R17,0
    00283 CFA3      RJMP	_delay50ms
_main:
  DAval                --> R20
  pGetDat              --> Y,+2
    00284 9723      SBIW	R28,3
(0074) }  
(0075) /*--------------------------------------------------------------------
(0076) 函数名称：
(0077) 函数功能：
(0078) 注意事项：
(0079) 提示说明：
(0080) 输    入：
(0081) 返    回：
(0082) --------------------------------------------------------------------*/
(0083) void main()
(0084) {
(0085) 	unsigned char DAval=0;
    00285 2744      CLR	R20
(0086) 	unsigned char pGetDat;	
(0087)        TWBR = 0X12;
    00286 E182      LDI	R24,0x12
    00287 9380 0070 STS	0x70,R24
(0088) 	DISP_DDR = 0XFF;   	     	
    00289 EF8F      LDI	R24,0xFF
    0028A BB8A      OUT	0x1A,R24
    0028B C010      RJMP	0x029C
(0089) 	while(1)
(0090) 	{
(0091) 		PCF8591_getAD(MODE0,CHNL0,&pGetDat);
    0028C 01CE      MOVW	R24,R28
    0028D 9602      ADIW	R24,2
    0028E 8399      STD	Y+1,R25
    0028F 8388      ST	Y,R24
    00290 2722      CLR	R18
    00291 2700      CLR	R16
    00292 DFBF      RCALL	_PCF8591_getAD
(0092) 		DISP_PORT = pGetDat;
    00293 802A      LDD	R2,Y+2
    00294 BA2B      OUT	0x1B,R2
(0093) 		PCF8591_setDA(DAval++);
    00295 2E24      MOV	R2,R20
    00296 5F4F      SUBI	R20,0xFF
    00297 2D02      MOV	R16,R2
    00298 DFCC      RCALL	_PCF8591_setDA
(0094) 		delay50ms(1);
FILE: <library>
    00299 E001      LDI	R16,1
    0029A E010      LDI	R17,0
    0029B DF8B      RCALL	_delay50ms
    0029C CFEF      RJMP	0x028C
    0029D 9623      ADIW	R28,3
    0029E 9508      RET
push_arg4:
    0029F 933A      ST	-Y,R19
    002A0 932A      ST	-Y,R18
push_arg2:
    002A1 931A      ST	-Y,R17
    002A2 930A      ST	-Y,R16
    002A3 9508      RET
div32u:
    002A4 94E8      BCLR	6
    002A5 C001      RJMP	0x02A7
mod32u:
    002A6 9468      BSET	6
    002A7 D030      RCALL	long_div_prolog
    002A8 24CC      CLR	R12
    002A9 C009      RJMP	0x02B3
div32s:
    002AA 94E8      BCLR	6
    002AB C001      RJMP	0x02AD
mod32s:
    002AC 9468      BSET	6
    002AD D02A      RCALL	long_div_prolog
    002AE FD37      SBRC	R19,7
    002AF 940E 037A CALL	neg32
    002B1 FDB7      SBRC	R27,7
    002B2 D052      RCALL	neg_R24_R27
    002B3 2477      CLR	R7
    002B4 2488      CLR	R8
    002B5 2499      CLR	R9
    002B6 24AA      CLR	R10
    002B7 24BB      CLR	R11
    002B8 D042      RCALL	tst_R16_R19
    002B9 F0C1      BEQ	0x02D2
    002BA D045      RCALL	tst_R24_R27
    002BB F0B1      BEQ	0x02D2
    002BC E2E8      LDI	R30,0x28
    002BD 0F00      LSL	R16
    002BE 1F11      ROL	R17
    002BF 1F22      ROL	R18
    002C0 1F33      ROL	R19
    002C1 1C77      ROL	R7
    002C2 1C88      ROL	R8
    002C3 1C99      ROL	R9
    002C4 1CAA      ROL	R10
    002C5 1CBB      ROL	R11
    002C6 1688      CP	R8,R24
    002C7 0699      CPC	R9,R25
    002C8 06AA      CPC	R10,R26
    002C9 06BB      CPC	R11,R27
    002CA F028      BCS	0x02D0
    002CB 1A88      SUB	R8,R24
    002CC 0A99      SBC	R9,R25
    002CD 0AAA      SBC	R10,R26
    002CE 0ABB      SBC	R11,R27
    002CF 9503      INC	R16
    002D0 95EA      DEC	R30
    002D1 F759      BNE	0x02BD
    002D2 F426      BRTC	0x02D7
    002D3 2D08      MOV	R16,R8
    002D4 2D19      MOV	R17,R9
    002D5 2D2A      MOV	R18,R10
    002D6 2D3B      MOV	R19,R11
    002D7 C013      RJMP	long_div_epilog
long_div_prolog:
    002D8 927A      ST	-Y,R7
    002D9 928A      ST	-Y,R8
    002DA 929A      ST	-Y,R9
    002DB 92AA      ST	-Y,R10
    002DC 92BA      ST	-Y,R11
    002DD 92CA      ST	-Y,R12
    002DE 93EA      ST	-Y,R30
    002DF 938A      ST	-Y,R24
    002E0 939A      ST	-Y,R25
    002E1 93AA      ST	-Y,R26
    002E2 93BA      ST	-Y,R27
    002E3 858B      LDD	R24,Y+11
    002E4 859C      LDD	R25,Y+12
    002E5 85AD      LDD	R26,Y+13
    002E6 85BE      LDD	R27,Y+14
    002E7 2EC3      MOV	R12,R19
    002E8 F00E      BRTS	0x02EA
    002E9 26CB      EOR	R12,R27
    002EA 9508      RET
long_div_epilog:
    002EB FCC7      SBRC	R12,7
    002EC 940E 037A CALL	neg32
    002EE 91B9      LD	R27,Y+
    002EF 91A9      LD	R26,Y+
    002F0 9199      LD	R25,Y+
    002F1 9189      LD	R24,Y+
    002F2 91E9      LD	R30,Y+
    002F3 90C9      LD	R12,Y+
    002F4 90B9      LD	R11,Y+
    002F5 90A9      LD	R10,Y+
    002F6 9099      LD	R9,Y+
    002F7 9089      LD	R8,Y+
    002F8 9079      LD	R7,Y+
    002F9 9624      ADIW	R28,4
    002FA 9508      RET
tst_R16_R19:
    002FB 2FE0      MOV	R30,R16
    002FC 2BE1      OR	R30,R17
    002FD 2BE2      OR	R30,R18
    002FE 2BE3      OR	R30,R19
    002FF 9508      RET
tst_R24_R27:
    00300 2FE8      MOV	R30,R24
    00301 2BE9      OR	R30,R25
    00302 2BEA      OR	R30,R26
    00303 2BEB      OR	R30,R27
    00304 9508      RET
neg_R24_R27:
    00305 9580      COM	R24
    00306 9590      COM	R25
    00307 95A0      COM	R26
    00308 95B0      COM	R27
    00309 5F8F      SUBI	R24,0xFF
    0030A 4F9F      SBCI	R25,0xFF
    0030B 4FAF      SBCI	R26,0xFF
    0030C 4FBF      SBCI	R27,0xFF
    0030D 9508      RET
empy32u|empy32s:
    0030E 940E 0383 CALL	long_prolog
    00310 927A      ST	-Y,R7
    00311 940E 039C CALL	tstzero1
    00313 F159      BEQ	0x033F
    00314 2477      CLR	R7
    00315 940E 03A2 CALL	tstzero2
    00317 F419      BNE	0x031B
    00318 018C      MOVW	R16,R24
    00319 019D      MOVW	R18,R26
    0031A C024      RJMP	0x033F
    0031B 920A      ST	-Y,R0
    0031C 921A      ST	-Y,R1
    0031D 9F08      MUL	R16,R24
    0031E 2CB0      MOV	R11,R0
    0031F 2CA1      MOV	R10,R1
    00320 9F28      MUL	R18,R24
    00321 2C90      MOV	R9,R0
    00322 2C81      MOV	R8,R1
    00323 9F18      MUL	R17,R24
    00324 0CA0      ADD	R10,R0
    00325 1C91      ADC	R9,R1
    00326 1C87      ADC	R8,R7
    00327 9F09      MUL	R16,R25
    00328 0CA0      ADD	R10,R0
    00329 1C91      ADC	R9,R1
    0032A 1C87      ADC	R8,R7
    0032B 9F19      MUL	R17,R25
    0032C 0C90      ADD	R9,R0
    0032D 1C81      ADC	R8,R1
    0032E 9F0A      MUL	R16,R26
    0032F 0C90      ADD	R9,R0
    00330 1C81      ADC	R8,R1
    00331 9F38      MUL	R19,R24
    00332 0C80      ADD	R8,R0
    00333 9F29      MUL	R18,R25
    00334 0C80      ADD	R8,R0
    00335 9F1A      MUL	R17,R26
    00336 0C80      ADD	R8,R0
    00337 9F0B      MUL	R16,R27
    00338 0C80      ADD	R8,R0
    00339 9019      LD	R1,Y+
    0033A 9009      LD	R0,Y+
    0033B 2D0B      MOV	R16,R11
    0033C 2D1A      MOV	R17,R10
    0033D 2D29      MOV	R18,R9
    0033E 2D38      MOV	R19,R8
    0033F 9079      LD	R7,Y+
    00340 940C 0391 JMP	long_epilog
pop_xgset00FC:
    00342 90A9      LD	R10,Y+
    00343 90B9      LD	R11,Y+
    00344 90C9      LD	R12,Y+
    00345 90D9      LD	R13,Y+
    00346 90E9      LD	R14,Y+
    00347 90F9      LD	R15,Y+
    00348 9508      RET
pop_xgset30FC:
    00349 90A9      LD	R10,Y+
    0034A 90B9      LD	R11,Y+
    0034B 90C9      LD	R12,Y+
    0034C 90D9      LD	R13,Y+
    0034D 90E9      LD	R14,Y+
    0034E 90F9      LD	R15,Y+
    0034F 9149      LD	R20,Y+
    00350 9159      LD	R21,Y+
    00351 9508      RET
pop_xgsetF0FC:
    00352 90A9      LD	R10,Y+
    00353 90B9      LD	R11,Y+
    00354 90C9      LD	R12,Y+
    00355 90D9      LD	R13,Y+
    00356 90E9      LD	R14,Y+
    00357 90F9      LD	R15,Y+
    00358 9149      LD	R20,Y+
    00359 9159      LD	R21,Y+
    0035A 9169      LD	R22,Y+
    0035B 9179      LD	R23,Y+
    0035C 9508      RET
push_xgsetF0FC:
    0035D 937A      ST	-Y,R23
    0035E 936A      ST	-Y,R22
push_xgset30FC:
    0035F 935A      ST	-Y,R21
    00360 934A      ST	-Y,R20
push_xgset00FC:
    00361 92FA      ST	-Y,R15
    00362 92EA      ST	-Y,R14
push_xgset003C:
    00363 92DA      ST	-Y,R13
    00364 92CA      ST	-Y,R12
    00365 92BA      ST	-Y,R11
    00366 92AA      ST	-Y,R10
    00367 9508      RET
push_xgsetF03C:
    00368 937A      ST	-Y,R23
    00369 936A      ST	-Y,R22
    0036A 935A      ST	-Y,R21
    0036B 934A      ST	-Y,R20
    0036C 92DA      ST	-Y,R13
    0036D 92CA      ST	-Y,R12
    0036E 92BA      ST	-Y,R11
    0036F 92AA      ST	-Y,R10
    00370 9508      RET
pop_xgsetF03C:
    00371 90A9      LD	R10,Y+
    00372 90B9      LD	R11,Y+
    00373 90C9      LD	R12,Y+
    00374 90D9      LD	R13,Y+
    00375 9149      LD	R20,Y+
    00376 9159      LD	R21,Y+
    00377 9169      LD	R22,Y+
    00378 9179      LD	R23,Y+
    00379 9508      RET
neg32:
    0037A 9500      COM	R16
    0037B 9510      COM	R17
    0037C 9520      COM	R18
    0037D 9530      COM	R19
    0037E 5F0F      SUBI	R16,0xFF
    0037F 4F1F      SBCI	R17,0xFF
    00380 4F2F      SBCI	R18,0xFF
    00381 4F3F      SBCI	R19,0xFF
    00382 9508      RET
long_prolog:
    00383 928A      ST	-Y,R8
    00384 929A      ST	-Y,R9
    00385 92AA      ST	-Y,R10
    00386 92BA      ST	-Y,R11
    00387 93EA      ST	-Y,R30
    00388 938A      ST	-Y,R24
    00389 939A      ST	-Y,R25
    0038A 93AA      ST	-Y,R26
    0038B 93BA      ST	-Y,R27
    0038C 8589      LDD	R24,Y+9
    0038D 859A      LDD	R25,Y+10
    0038E 85AB      LDD	R26,Y+11
    0038F 85BC      LDD	R27,Y+12
    00390 9508      RET
long_epilog:
    00391 91B9      LD	R27,Y+
    00392 91A9      LD	R26,Y+
    00393 9199      LD	R25,Y+
    00394 9189      LD	R24,Y+
    00395 91E9      LD	R30,Y+
    00396 90B9      LD	R11,Y+
    00397 90A9      LD	R10,Y+
    00398 9099      LD	R9,Y+
    00399 9089      LD	R8,Y+
    0039A 9624      ADIW	R28,4
    0039B 9508      RET
tstzero1:
    0039C 27EE      CLR	R30
    0039D 2BE0      OR	R30,R16
    0039E 2BE1      OR	R30,R17
    0039F 2BE2      OR	R30,R18
    003A0 2BE3      OR	R30,R19
    003A1 9508      RET
tstzero2:
    003A2 27EE      CLR	R30
    003A3 2BE8      OR	R30,R24
    003A4 2BE9      OR	R30,R25
    003A5 2BEA      OR	R30,R26
    003A6 2BEB      OR	R30,R27
    003A7 9508      RET
