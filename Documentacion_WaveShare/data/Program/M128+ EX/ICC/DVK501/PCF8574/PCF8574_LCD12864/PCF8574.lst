Interrupt Vectors
    00000 940C 0067 JMP	__text_start|__start

Program Code (text area)
__text_start|__start:
    00067 EFCF      LDI	R28,0xFF
    00068 E1D0      LDI	R29,0x10
    00069 BFCD      OUT	0x3D,R28
    0006A BFDE      OUT	0x3E,R29
    0006B 51C0      SUBI	R28,0x10
    0006C 40D0      SBCI	R29,0
    0006D EA0A      LDI	R16,0xAA
    0006E 8308      ST	Y,R16
    0006F 2400      CLR	R0
    00070 E4E2      LDI	R30,0x42
    00071 E0F1      LDI	R31,1
    00072 E011      LDI	R17,1
    00073 34E8      CPI	R30,0x48
    00074 07F1      CPC	R31,R17
    00075 F011      BEQ	0x0078
    00076 9201      ST	Z+,R0
    00077 CFFB      RJMP	0x0073
    00078 8300      ST	Z,R16
    00079 E8EC      LDI	R30,0x8C
    0007A E0F0      LDI	R31,0
    0007B E0A0      LDI	R26,0
    0007C E0B1      LDI	R27,1
    0007D E010      LDI	R17,0
    0007E E000      LDI	R16,0
    0007F BF0B      OUT	0x3B,R16
    00080 3CEE      CPI	R30,0xCE
    00081 07F1      CPC	R31,R17
    00082 F021      BEQ	0x0087
    00083 95C8      LPM
    00084 9631      ADIW	R30,1
    00085 920D      ST	X+,R0
    00086 CFF9      RJMP	0x0080
    00087 940E 046E CALL	_main
_exit:
    00089 CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0008A 940E 04C9 CALL	push_arg4
    0008C 940E 05AE CALL	push_xgsetF03C
    0008E 9728      SBIW	R28,0x8
    0008F 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00090 24AA      CLR	R10
    00091 E081      LDI	R24,1
    00092 8388      ST	Y,R24
    00093 E080      LDI	R24,0
    00094 8389      STD	Y+1,R24
    00095 838A      STD	Y+2,R24
    00096 838B      STD	Y+3,R24
    00097 C03C      RJMP	0x00D4
(0120)     {
(0121)         y=dat/j;
    00098 8028      LD	R2,Y
    00099 8039      LDD	R3,Y+1
    0009A 804A      LDD	R4,Y+2
    0009B 805B      LDD	R5,Y+3
    0009C 8908      LDD	R16,Y+16
    0009D 8919      LDD	R17,Y+17
    0009E 892A      LDD	R18,Y+18
    0009F 893B      LDD	R19,Y+19
    000A0 925A      ST	-Y,R5
    000A1 924A      ST	-Y,R4
    000A2 923A      ST	-Y,R3
    000A3 922A      ST	-Y,R2
    000A4 940E 04CE CALL	div32u
    000A6 830C      STD	Y+4,R16
    000A7 831D      STD	Y+5,R17
    000A8 832E      STD	Y+6,R18
    000A9 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    000AA E04A      LDI	R20,0xA
    000AB E050      LDI	R21,0
    000AC E060      LDI	R22,0
    000AD E070      LDI	R23,0
    000AE 810C      LDD	R16,Y+4
    000AF 811D      LDD	R17,Y+5
    000B0 812E      LDD	R18,Y+6
    000B1 813F      LDD	R19,Y+7
    000B2 937A      ST	-Y,R23
    000B3 936A      ST	-Y,R22
    000B4 935A      ST	-Y,R21
    000B5 934A      ST	-Y,R20
    000B6 940E 04D0 CALL	mod32u
    000B8 E482      LDI	R24,0x42
    000B9 E091      LDI	R25,1
    000BA 2DEA      MOV	R30,R10
    000BB 27FF      CLR	R31
    000BC 0FE8      ADD	R30,R24
    000BD 1FF9      ADC	R31,R25
    000BE 8300      ST	Z,R16
(0123)         j*=10;
    000BF 8028      LD	R2,Y
    000C0 8039      LDD	R3,Y+1
    000C1 804A      LDD	R4,Y+2
    000C2 805B      LDD	R5,Y+3
    000C3 E04A      LDI	R20,0xA
    000C4 E050      LDI	R21,0
    000C5 E060      LDI	R22,0
    000C6 E070      LDI	R23,0
    000C7 925A      ST	-Y,R5
    000C8 924A      ST	-Y,R4
    000C9 923A      ST	-Y,R3
    000CA 922A      ST	-Y,R2
    000CB 018A      MOVW	R16,R20
    000CC 019B      MOVW	R18,R22
    000CD 940E 0538 CALL	empy32u|empy32s
    000CF 8308      ST	Y,R16
    000D0 8319      STD	Y+1,R17
    000D1 832A      STD	Y+2,R18
    000D2 833B      STD	Y+3,R19
    000D3 94A3      INC	R10
    000D4 2C2C      MOV	R2,R12
    000D5 2433      CLR	R3
    000D6 FC27      SBRC	R2,7
    000D7 9430      COM	R3
    000D8 2C4A      MOV	R4,R10
    000D9 2455      CLR	R5
    000DA 1442      CP	R4,R2
    000DB 0453      CPC	R5,R3
    000DC F40C      BGE	0x00DE
    000DD CFBA      RJMP	0x0098
    000DE 9628      ADIW	R28,0x8
    000DF 940E 05B7 CALL	pop_xgsetF03C
    000E1 9624      ADIW	R28,4
    000E2 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    000E3 EA84      LDI	R24,0xA4
    000E4 9380 0074 STS	0x74,R24
(0128) 	I2CWaitAck();
    000E6 9020 0074 LDS	R2,0x74
    000E8 FE27      SBRS	R2,7
    000E9 CFFC      RJMP	0x00E6
(0129) 	if( I2CChkAck()!=I2C_START ) 
    000EA 9180 0071 LDS	R24,0x71
    000EC 7F88      ANDI	R24,0xF8
    000ED 3088      CPI	R24,0x8
    000EE F011      BEQ	0x00F1
(0130) 		return I2C_ERR;
    000EF 2700      CLR	R16
    000F0 C001      RJMP	0x00F2
(0131) 	return I2C_CRR;
    000F1 E001      LDI	R16,1
    000F2 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    000F3 EA84      LDI	R24,0xA4
    000F4 9380 0074 STS	0x74,R24
(0144) 	I2CWaitAck();
    000F6 9020 0074 LDS	R2,0x74
    000F8 FE27      SBRS	R2,7
    000F9 CFFC      RJMP	0x00F6
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    000FA 9180 0071 LDS	R24,0x71
    000FC 7F88      ANDI	R24,0xF8
    000FD 3180      CPI	R24,0x10
    000FE F011      BEQ	0x0101
(0146) 		return I2C_ERR;
    000FF 2700      CLR	R16
    00100 C001      RJMP	0x0102
(0147) 	return I2C_CRR;
    00101 E001      LDI	R16,1
    00102 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    00103 9300 0073 STS	0x73,R16
    00105 E884      LDI	R24,0x84
    00106 9380 0074 STS	0x74,R24
(0160) 	I2CWaitAck();
    00108 9020 0074 LDS	R2,0x74
    0010A FE27      SBRS	R2,7
    0010B CFFC      RJMP	0x0108
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    0010C 9180 0071 LDS	R24,0x71
    0010E 7F88      ANDI	R24,0xF8
    0010F 3188      CPI	R24,0x18
    00110 F011      BEQ	0x0113
(0162) 		return I2C_ERR;
    00111 2700      CLR	R16
    00112 C001      RJMP	0x0114
(0163) 	return I2C_CRR;		
    00113 E001      LDI	R16,1
    00114 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    00115 92AA      ST	-Y,R10
    00116 92BA      ST	-Y,R11
    00117 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    00118 FEA0      SBRS	R10,0
    00119 C00E      RJMP	0x0128
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    0011A 2D0A      MOV	R16,R10
    0011B 9506      LSR	R16
    0011C 9506      LSR	R16
    0011D 9506      LSR	R16
    0011E 9506      LSR	R16
    0011F 9506      LSR	R16
    00120 9506      LSR	R16
    00121 9506      LSR	R16
    00122 9506      LSR	R16
    00123 DFDF      RCALL	_I2C_SendWrDAdr
    00124 2300      TST	R16
    00125 F411      BNE	0x0128
(0177) 			return I2C_ERR;
    00126 2700      CLR	R16
    00127 C007      RJMP	0x012F
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    00128 2D0A      MOV	R16,R10
    00129 DFD9      RCALL	_I2C_SendWrDAdr
    0012A 2300      TST	R16
    0012B F411      BNE	0x012E
(0179) 		return I2C_ERR;
    0012C 2700      CLR	R16
    0012D C001      RJMP	0x012F
(0180) 	return I2C_CRR;
    0012E E001      LDI	R16,1
    0012F 90B9      LD	R11,Y+
    00130 90A9      LD	R10,Y+
    00131 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    00132 9300 0073 STS	0x73,R16
    00134 E884      LDI	R24,0x84
    00135 9380 0074 STS	0x74,R24
(0193) 	I2CWaitAck();
    00137 9020 0074 LDS	R2,0x74
    00139 FE27      SBRS	R2,7
    0013A CFFC      RJMP	0x0137
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    0013B 9180 0071 LDS	R24,0x71
    0013D 7F88      ANDI	R24,0xF8
    0013E 3480      CPI	R24,0x40
    0013F F011      BEQ	0x0142
(0195) 		return I2C_ERR;
    00140 2700      CLR	R16
    00141 C001      RJMP	0x0143
(0196) 	return I2C_CRR;	
    00142 E001      LDI	R16,1
    00143 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    00144 92AA      ST	-Y,R10
    00145 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    00146 FEA0      SBRS	R10,0
    00147 C00E      RJMP	0x0156
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    00148 2D0A      MOV	R16,R10
    00149 9506      LSR	R16
    0014A 9506      LSR	R16
    0014B 9506      LSR	R16
    0014C 9506      LSR	R16
    0014D 9506      LSR	R16
    0014E 9506      LSR	R16
    0014F 9506      LSR	R16
    00150 9506      LSR	R16
    00151 DFB1      RCALL	_I2C_SendWrDAdr
    00152 2300      TST	R16
    00153 F411      BNE	0x0156
(0210) 			return I2C_ERR;
    00154 2700      CLR	R16
    00155 C007      RJMP	0x015D
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    00156 2D0A      MOV	R16,R10
    00157 DFAB      RCALL	_I2C_SendWrDAdr
    00158 2300      TST	R16
    00159 F411      BNE	0x015C
(0212) 		return I2C_ERR;
    0015A 2700      CLR	R16
    0015B C001      RJMP	0x015D
(0213) 	return I2C_CRR;
    0015C E001      LDI	R16,1
    0015D 90A9      LD	R10,Y+
    0015E 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    0015F 9300 0073 STS	0x73,R16
    00161 E884      LDI	R24,0x84
    00162 9380 0074 STS	0x74,R24
(0226) 	I2CWaitAck();
    00164 9020 0074 LDS	R2,0x74
    00166 FE27      SBRS	R2,7
    00167 CFFC      RJMP	0x0164
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    00168 9180 0071 LDS	R24,0x71
    0016A 7F88      ANDI	R24,0xF8
    0016B 3288      CPI	R24,0x28
    0016C F011      BEQ	0x016F
(0228) 		return I2C_ERR;
    0016D 2700      CLR	R16
    0016E C001      RJMP	0x0170
(0229) 	return I2C_CRR;	
    0016F E001      LDI	R16,1
    00170 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    00171 E884      LDI	R24,0x84
    00172 9380 0074 STS	0x74,R24
(0242) 	I2CWaitAck();
    00174 9020 0074 LDS	R2,0x74
    00176 FE27      SBRS	R2,7
    00177 CFFC      RJMP	0x0174
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    00178 9180 0071 LDS	R24,0x71
    0017A 7F88      ANDI	R24,0xF8
    0017B 3588      CPI	R24,0x58
    0017C F011      BEQ	0x017F
(0244) 		return I2C_ERR;
    0017D 2700      CLR	R16
    0017E C005      RJMP	0x0184
(0245) 	*pRdDat=TWDR;
    0017F 9020 0073 LDS	R2,0x73
    00181 01F8      MOVW	R30,R16
    00182 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    00183 E001      LDI	R16,1
    00184 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    00185 EC84      LDI	R24,0xC4
    00186 9380 0074 STS	0x74,R24
(0259) 	I2CWaitAck();
    00188 9020 0074 LDS	R2,0x74
    0018A FE27      SBRS	R2,7
    0018B CFFC      RJMP	0x0188
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    0018C 9180 0071 LDS	R24,0x71
    0018E 7F88      ANDI	R24,0xF8
    0018F 3580      CPI	R24,0x50
    00190 F011      BEQ	0x0193
(0261) 		return I2C_ERR;
    00191 2700      CLR	R16
    00192 C005      RJMP	0x0198
(0262) 	*pRdDat=TWDR;
    00193 9020 0073 LDS	R2,0x73
    00195 01F8      MOVW	R30,R16
    00196 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    00197 E001      LDI	R16,1
    00198 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    00199 940E 058B CALL	push_xgset00FC
    0019B 2EC2      MOV	R12,R18
    0019C 0178      MOVW	R14,R16
    0019D 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    0019E DF44      RCALL	_I2C_Start
    0019F 2300      TST	R16
    001A0 F411      BNE	0x01A3
(0278) 		return I2C_ERR;
    001A1 2700      CLR	R16
    001A2 C018      RJMP	0x01BB
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001A3 0187      MOVW	R16,R14
    001A4 DF70      RCALL	_I2C_SendWrDAdr_
    001A5 2300      TST	R16
    001A6 F411      BNE	0x01A9
(0281) 		return I2C_ERR;
    001A7 2700      CLR	R16
    001A8 C012      RJMP	0x01BB
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001A9 2D0C      MOV	R16,R12
    001AA DFB4      RCALL	_I2C_SendDat
    001AB 2EC0      MOV	R12,R16
    001AC 2300      TST	R16
    001AD F411      BNE	0x01B0
(0284) 		return I2C_ERR;
    001AE 2700      CLR	R16
    001AF C00B      RJMP	0x01BB
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    001B0 2D0A      MOV	R16,R10
    001B1 DFAD      RCALL	_I2C_SendDat
    001B2 2EA0      MOV	R10,R16
    001B3 2300      TST	R16
    001B4 F411      BNE	0x01B7
(0287) 		return I2C_ERR;
    001B5 2700      CLR	R16
    001B6 C004      RJMP	0x01BB
(0288) 
(0289) 	I2C_Stop();
    001B7 E984      LDI	R24,0x94
    001B8 9380 0074 STS	0x74,R24
(0290) 
(0291) 	return I2C_CRR;
    001BA E001      LDI	R16,1
    001BB 940C 056C JMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    001BD 940E 0589 CALL	push_xgset30FC
    001BF 2EE2      MOV	R14,R18
    001C0 01A8      MOVW	R20,R16
    001C1 84C8      LDD	R12,Y+8
    001C2 84AA      LDD	R10,Y+10
    001C3 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    001C4 DF1E      RCALL	_I2C_Start
    001C5 2300      TST	R16
    001C6 F411      BNE	0x01C9
(0324) 		return I2C_ERR;
    001C7 2700      CLR	R16
    001C8 C025      RJMP	0x01EE
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001C9 018A      MOVW	R16,R20
    001CA DF4A      RCALL	_I2C_SendWrDAdr_
    001CB 2300      TST	R16
    001CC F411      BNE	0x01CF
(0327) 		return I2C_ERR;
    001CD 2700      CLR	R16
    001CE C01F      RJMP	0x01EE
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001CF 2D0E      MOV	R16,R14
    001D0 DF8E      RCALL	_I2C_SendDat
    001D1 2EE0      MOV	R14,R16
    001D2 2300      TST	R16
    001D3 F411      BNE	0x01D6
(0330) 		return I2C_ERR;
    001D4 2700      CLR	R16
    001D5 C018      RJMP	0x01EE
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    001D6 DF1C      RCALL	_I2C_Restart
    001D7 2EE0      MOV	R14,R16
    001D8 2300      TST	R16
    001D9 F411      BNE	0x01DC
(0333) 		return I2C_ERR;
    001DA 2700      CLR	R16
    001DB C012      RJMP	0x01EE
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001DC 2D0C      MOV	R16,R12
    001DD DF54      RCALL	_I2C_SendRdDAdr
    001DE 2EC0      MOV	R12,R16
    001DF 2300      TST	R16
    001E0 F411      BNE	0x01E3
(0336) 		return I2C_ERR;
    001E1 2700      CLR	R16
    001E2 C00B      RJMP	0x01EE
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    001E3 0185      MOVW	R16,R10
    001E4 DF8C      RCALL	_I2C_RcvNAckDat
    001E5 2EA0      MOV	R10,R16
    001E6 2300      TST	R16
    001E7 F411      BNE	0x01EA
(0339) 		return I2C_ERR;
    001E8 2700      CLR	R16
    001E9 C004      RJMP	0x01EE
(0340) 
(0341) 	I2C_Stop();
    001EA E984      LDI	R24,0x94
    001EB 9380 0074 STS	0x74,R24
(0342) 
(0343) 	return I2C_CRR;
    001ED E001      LDI	R16,1
    001EE 940C 0573 JMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    001F0 940E 0587 CALL	push_xgsetF0FC
    001F2 2EE2      MOV	R14,R18
    001F3 01B8      MOVW	R22,R16
    001F4 84CA      LDD	R12,Y+10
    001F5 84AC      LDD	R10,Y+12
    001F6 84BD      LDD	R11,Y+13
    001F7 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    001F8 DEEA      RCALL	_I2C_Start
    001F9 2300      TST	R16
    001FA F411      BNE	0x01FD
(0363) 		return I2C_ERR;
    001FB 2700      CLR	R16
    001FC C039      RJMP	0x0236
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001FD 018B      MOVW	R16,R22
    001FE DF16      RCALL	_I2C_SendWrDAdr_
    001FF 2300      TST	R16
    00200 F411      BNE	0x0203
(0366) 		return I2C_ERR;
    00201 2700      CLR	R16
    00202 C033      RJMP	0x0236
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00203 2D0E      MOV	R16,R14
    00204 DF5A      RCALL	_I2C_SendDat
    00205 2EE0      MOV	R14,R16
    00206 2300      TST	R16
    00207 F411      BNE	0x020A
(0369) 		return I2C_ERR;
    00208 2700      CLR	R16
    00209 C02C      RJMP	0x0236
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    0020A DEE8      RCALL	_I2C_Restart
    0020B 2EE0      MOV	R14,R16
    0020C 2300      TST	R16
    0020D F411      BNE	0x0210
(0372) 		return I2C_ERR;
    0020E 2700      CLR	R16
    0020F C026      RJMP	0x0236
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    00210 2D0C      MOV	R16,R12
    00211 DF20      RCALL	_I2C_SendRdDAdr
    00212 2EC0      MOV	R12,R16
    00213 2300      TST	R16
    00214 F411      BNE	0x0217
(0375) 		return I2C_ERR;
    00215 2700      CLR	R16
    00216 C01F      RJMP	0x0236
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    00217 24CC      CLR	R12
    00218 C00B      RJMP	0x0224
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    00219 2D0C      MOV	R16,R12
    0021A 2711      CLR	R17
    0021B 0D0A      ADD	R16,R10
    0021C 1D1B      ADC	R17,R11
    0021D DF67      RCALL	_I2C_RcvAckDat
    0021E 2EE0      MOV	R14,R16
    0021F 2300      TST	R16
    00220 F411      BNE	0x0223
(0379) 			return I2C_ERR;
    00221 2700      CLR	R16
    00222 C013      RJMP	0x0236
    00223 94C3      INC	R12
    00224 2F84      MOV	R24,R20
    00225 5081      SUBI	R24,1
    00226 16C8      CP	R12,R24
    00227 F388      BCS	0x0219
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    00228 2D0C      MOV	R16,R12
    00229 2711      CLR	R17
    0022A 0D0A      ADD	R16,R10
    0022B 1D1B      ADC	R17,R11
    0022C DF44      RCALL	_I2C_RcvNAckDat
    0022D 2EA0      MOV	R10,R16
    0022E 2300      TST	R16
    0022F F411      BNE	0x0232
(0382) 			return I2C_ERR;
    00230 2700      CLR	R16
    00231 C004      RJMP	0x0236
(0383) 
(0384) 	I2C_Stop();
    00232 E984      LDI	R24,0x94
    00233 9380 0074 STS	0x74,R24
(0385) 	
(0386) 	return I2C_CRR;
    00235 E001      LDI	R16,1
    00236 940C 057C JMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    00238 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    00239 C007      RJMP	0x0241
(0108)         for(j=0;j<70;j++)	
    0023A 2744      CLR	R20
    0023B C001      RJMP	0x023D
    0023C 9543      INC	R20
    0023D 3446      CPI	R20,0x46
    0023E F3E8      BCS	0x023C
    0023F 5001      SUBI	R16,1
    00240 4010      SBCI	R17,0
    00241 2422      CLR	R2
    00242 2433      CLR	R3
    00243 1620      CP	R2,R16
    00244 0631      CPC	R3,R17
    00245 F3A4      BLT	0x023A
    00246 9149      LD	R20,Y+
    00247 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    00248 934A      ST	-Y,R20
    00249 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    0024A C013      RJMP	0x025E
(0123) 		for(i=0;i<52642;i++)
    0024B 2744      CLR	R20
    0024C 2755      CLR	R21
    0024D C002      RJMP	0x0250
    0024E 5F4F      SUBI	R20,0xFF
    0024F 4F5F      SBCI	R21,0xFF
    00250 EA82      LDI	R24,0xA2
    00251 EC9D      LDI	R25,0xCD
    00252 E0A0      LDI	R26,0
    00253 E0B0      LDI	R27,0
    00254 011A      MOVW	R2,R20
    00255 2444      CLR	R4
    00256 2455      CLR	R5
    00257 1628      CP	R2,R24
    00258 0639      CPC	R3,R25
    00259 064A      CPC	R4,R26
    0025A 065B      CPC	R5,R27
    0025B F394      BLT	0x024E
    0025C 5001      SUBI	R16,1
    0025D 4010      SBCI	R17,0
    0025E 2422      CLR	R2
    0025F 2433      CLR	R3
    00260 1620      CP	R2,R16
    00261 0631      CPC	R3,R17
    00262 F344      BLT	0x024B
    00263 9159      LD	R21,Y+
    00264 9149      LD	R20,Y+
    00265 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    00266 934A      ST	-Y,R20
    00267 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    00268 2744      CLR	R20
    00269 2755      CLR	R21
    0026A C002      RJMP	0x026D
    0026B 5F4F      SUBI	R20,0xFF
    0026C 4F5F      SBCI	R21,0xFF
    0026D 1740      CP	R20,R16
    0026E 0751      CPC	R21,R17
    0026F F3D8      BCS	0x026B
    00270 9159      LD	R21,Y+
    00271 9149      LD	R20,Y+
    00272 9508      RET
FILE: D:\ICC_H\LCD12864_ST7920_.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 	                                                        
(0004) 目    的:   建立LCD12864_ST7920的串模式操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 	                                                                
(0008) 应用软件:   ICCAVR                                               
(0009) 	                                                                
(0010) 版    本:   Version 1.0
(0011) 	                                                                
(0012) 圆版时间:   2005-09-06
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) 
(0026) 
(0027) ----------------------------------------------------------------------
(0028) 入口参数说明：
(0029) mega128接口
(0030) 		 	  DVK500				 STK128+
(0031) 				CS		---------	  VCC
(0032) 				PSB	    ---------	  GND
(0033) 				SID		---------	  PB2
(0034) 				CLK		---------	  PB1	
(0035) 
(0036) ----------------------------------------------------------------------
(0037) 待定参数说明：
(0038) 	
(0039) 
(0040) ----------------------------------------------------------------------	
(0041) 对外变量说明：
(0042) 
(0043) ----------------------------------------------------------------------
(0044) 对外函数说明：
(0045) 
(0046) ----------------------------------------------------------------------
(0047) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0048) 
(0049) 
(0050) /*--------------------------------------------------------------------
(0051) 
(0052) --------------------------------------------------------------------*/
(0053) 
(0054) #ifndef LCD12864_ST7920_H
(0055) #define LCD12864_ST7920_H
(0056) 
(0057) #include "D:\ICC_H\CmmIcc.h"
(0058) 
(0059) void SPI_init()
(0060) {
(0061) 	DDRB |= 0x0F;
_SPI_init:
    00273 B387      IN	R24,0x17
    00274 608F      ORI	R24,0xF
    00275 BB87      OUT	0x17,R24
(0062) 	SPCR = 0x50;	//setup SPI
    00276 E580      LDI	R24,0x50
    00277 B98D      OUT	0x0D,R24
(0063) 	SPSR = 0x01;	//setup SPI
    00278 E081      LDI	R24,1
    00279 B98E      OUT	0x0E,R24
(0064) 	SEI();			
    0027A 9478      BSET	7
    0027B 9508      RET
(0065) }
(0066) 
(0067) void lcd_wrByte(uint8 data)
(0068) {  
(0069) 	SPDR = data;        
_lcd_wrByte:
  data                 --> R16
    0027C B90F      OUT	0x0F,R16
(0070) 	while ((SPSR & 0x80) == 0);  
    0027D 9B77      SBIS	0x0E,7
    0027E CFFE      RJMP	0x027D
    0027F 9508      RET
_lcd_wrCmd:
  LC                   --> R10
  HC                   --> R12
    00280 92AA      ST	-Y,R10
    00281 92CA      ST	-Y,R12
    00282 2EA2      MOV	R10,R18
    00283 2EC0      MOV	R12,R16
(0071) }
(0072) 
(0073) void lcd_wrCmd(uint8 HC,uint8 LC)
(0074) {
(0075) 	lcd_wrByte(0xF8);
    00284 EF08      LDI	R16,0xF8
    00285 DFF6      RCALL	_lcd_wrByte
(0076) 	lcd_wrByte(HC);		//传输高四位
    00286 2D0C      MOV	R16,R12
    00287 DFF4      RCALL	_lcd_wrByte
(0077) 	lcd_wrByte(LC);		//传输低四位
    00288 2D0A      MOV	R16,R10
    00289 DFF2      RCALL	_lcd_wrByte
    0028A 90C9      LD	R12,Y+
    0028B 90A9      LD	R10,Y+
    0028C 9508      RET
_lcd_wrDat:
  LD                   --> R10
  HD                   --> R12
    0028D 92AA      ST	-Y,R10
    0028E 92CA      ST	-Y,R12
    0028F 2EA2      MOV	R10,R18
    00290 2EC0      MOV	R12,R16
(0078) }
(0079) 
(0080) void lcd_wrDat(uint8 HD,uint8 LD)
(0081) {
(0082) 	lcd_wrByte(0xFA);
    00291 EF0A      LDI	R16,0xFA
    00292 DFE9      RCALL	_lcd_wrByte
(0083) 	lcd_wrByte(HD);		//传输高四位
    00293 2D0C      MOV	R16,R12
    00294 DFE7      RCALL	_lcd_wrByte
(0084) 	lcd_wrByte(LD);		//传输低四位
    00295 2D0A      MOV	R16,R10
    00296 DFE5      RCALL	_lcd_wrByte
    00297 90C9      LD	R12,Y+
    00298 90A9      LD	R10,Y+
    00299 9508      RET
_lcd_set_xy:
  adr                  --> R20
  y                    --> R22
  x                    --> R10
    0029A 940E 0592 CALL	push_xgsetF00C
    0029C 2F62      MOV	R22,R18
    0029D 2EA0      MOV	R10,R16
(0085) } 
(0086) 
(0087) /*
(0088) x表示在第几行显示，y表示在第几列显示
(0089) */
(0090) void lcd_set_xy(uint8 x,uint8 y) 
(0091) {
(0092) 	uint8 adr;
(0093) 
(0094) 	switch(x)
    0029E 24BB      CLR	R11
    0029F 01C5      MOVW	R24,R10
    002A0 3081      CPI	R24,1
    002A1 E0E0      LDI	R30,0
    002A2 079E      CPC	R25,R30
    002A3 F069      BEQ	0x02B1
    002A4 3082      CPI	R24,2
    002A5 E0E0      LDI	R30,0
    002A6 079E      CPC	R25,R30
    002A7 F061      BEQ	0x02B4
    002A8 3083      CPI	R24,3
    002A9 E0E0      LDI	R30,0
    002AA 079E      CPC	R25,R30
    002AB F059      BEQ	0x02B7
    002AC 3084      CPI	R24,4
    002AD E0E0      LDI	R30,0
    002AE 079E      CPC	R25,R30
    002AF F051      BEQ	0x02BA
    002B0 C00B      RJMP	0x02BC
(0095) 	{
(0096) 	case 1: adr = 0x7F + y;
    002B1 2F46      MOV	R20,R22
    002B2 5841      SUBI	R20,0x81
(0097) 		break;		//在第1行y列显示
    002B3 C008      RJMP	0x02BC
(0098) 	case 2: adr = 0x8F + y;
    002B4 2F46      MOV	R20,R22
    002B5 5741      SUBI	R20,0x71
(0099) 		break;		//在第2行y列显示
    002B6 C005      RJMP	0x02BC
(0100) 	case 3: adr = 0x87 + y;
    002B7 2F46      MOV	R20,R22
    002B8 5749      SUBI	R20,0x79
(0101) 		break;		//在第3行y列显示
    002B9 C002      RJMP	0x02BC
(0102) 	case 4: adr = 0x97 + y;
    002BA 2F46      MOV	R20,R22
    002BB 5649      SUBI	R20,0x69
(0103) 		break;		//在第4行y列显示
(0104) 	default:	;
(0105) 	}
(0106) 	lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
    002BC 2F24      MOV	R18,R20
    002BD 702F      ANDI	R18,0xF
    002BE 702F      ANDI	R18,0xF
    002BF 9522      SWAP	R18
    002C0 2F04      MOV	R16,R20
    002C1 7F00      ANDI	R16,0xF0
    002C2 DFBD      RCALL	_lcd_wrCmd
    002C3 940C 0599 JMP	pop_xgsetF00C
_lcd_putc:
  ch                   --> R20
  y                    --> R12
  x                    --> R10
    002C5 940E 05A0 CALL	push_xgset303C
    002C7 2EC2      MOV	R12,R18
    002C8 2EA0      MOV	R10,R16
    002C9 814E      LDD	R20,Y+6
(0107) }
(0108) 
(0109) void lcd_putc(uint8 x,uint8 y,uint8 ch)
(0110) {
(0111) 	lcd_set_xy(x,y);
    002CA 2D2C      MOV	R18,R12
    002CB 2D0A      MOV	R16,R10
    002CC DFCD      RCALL	_lcd_set_xy
(0112) 	delay50us(20); 
    002CD E104      LDI	R16,0x14
    002CE E010      LDI	R17,0
    002CF DF68      RCALL	_delay50us
(0113) 	lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
    002D0 2F24      MOV	R18,R20
    002D1 702F      ANDI	R18,0xF
    002D2 702F      ANDI	R18,0xF
    002D3 9522      SWAP	R18
    002D4 2F04      MOV	R16,R20
    002D5 7F00      ANDI	R16,0xF0
    002D6 DFB6      RCALL	_lcd_wrDat
    002D7 940C 05A7 JMP	pop_xgset303C
_lcd_putd0:
  i                    --> R20
  length               --> R20
  dat                  --> Y,+7
  y                    --> R12
  x                    --> R10
    002D9 940E 05A0 CALL	push_xgset303C
    002DB 2EC2      MOV	R12,R18
    002DC 2EA0      MOV	R10,R16
    002DD 9721      SBIW	R28,1
    002DE 854B      LDD	R20,Y+11
(0114) }
(0115) 
(0116) void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
(0117) {
(0118) 	sint8 i;
(0119) 
(0120) 	speaData(dat,length);
    002DF 8348      ST	Y,R20
    002E0 810F      LDD	R16,Y+7
    002E1 8518      LDD	R17,Y+8
    002E2 8529      LDD	R18,Y+9
    002E3 853A      LDD	R19,Y+10
    002E4 DDA5      RCALL	_speaData
(0121) 	lcd_set_xy(x,y);
    002E5 2D2C      MOV	R18,R12
    002E6 2D0A      MOV	R16,R10
    002E7 DFB2      RCALL	_lcd_set_xy
(0122) 	delay50us(40);
    002E8 E208      LDI	R16,0x28
    002E9 E010      LDI	R17,0
    002EA DF4D      RCALL	_delay50us
(0123) 	for(i=length-1;i>=0;i--)
    002EB 5041      SUBI	R20,1
    002EC C01E      RJMP	0x030B
(0124) 	{
(0125) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    002ED E482      LDI	R24,0x42
    002EE E091      LDI	R25,1
    002EF 2FE4      MOV	R30,R20
    002F0 27FF      CLR	R31
    002F1 FDE7      SBRC	R30,7
    002F2 95F0      COM	R31
    002F3 0FE8      ADD	R30,R24
    002F4 1FF9      ADC	R31,R25
    002F5 8180      LD	R24,Z
    002F6 2799      CLR	R25
    002F7 96C0      ADIW	R24,0x30
    002F8 019C      MOVW	R18,R24
    002F9 702F      ANDI	R18,0xF
    002FA 7030      ANDI	R19,0
    002FB 0F22      LSL	R18
    002FC 1F33      ROL	R19
    002FD 0F22      LSL	R18
    002FE 1F33      ROL	R19
    002FF 0F22      LSL	R18
    00300 1F33      ROL	R19
    00301 0F22      LSL	R18
    00302 1F33      ROL	R19
    00303 018C      MOVW	R16,R24
    00304 7F00      ANDI	R16,0xF0
    00305 7010      ANDI	R17,0
    00306 DF86      RCALL	_lcd_wrDat
(0126) 		delay50us(40); 
    00307 E208      LDI	R16,0x28
    00308 E010      LDI	R17,0
    00309 DF2E      RCALL	_delay50us
    0030A 954A      DEC	R20
    0030B 3040      CPI	R20,0
    0030C F704      BGE	0x02ED
    0030D 9621      ADIW	R28,1
    0030E 940C 05A7 JMP	pop_xgset303C
_lcd_putd:
  effectLen            --> R22
  i                    --> R20
  length               --> R10
  dat                  --> Y,+11
  y                    --> R14
  x                    --> R12
    00310 940E 0587 CALL	push_xgsetF0FC
    00312 2EE2      MOV	R14,R18
    00313 2EC0      MOV	R12,R16
    00314 9721      SBIW	R28,1
    00315 84AF      LDD	R10,Y+15
(0127) 	}
(0128) }
(0129) 
(0130) void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
(0131) {
(0132) 	sint8 i;
(0133) 	sint8 effectLen;
(0134) 
(0135) 	if(dat>999999)
    00316 E38F      LDI	R24,0x3F
    00317 E492      LDI	R25,0x42
    00318 E0AF      LDI	R26,0xF
    00319 E0B0      LDI	R27,0
    0031A 842B      LDD	R2,Y+11
    0031B 843C      LDD	R3,Y+12
    0031C 844D      LDD	R4,Y+13
    0031D 845E      LDD	R5,Y+14
    0031E 1582      CP	R24,R2
    0031F 0593      CPC	R25,R3
    00320 05A4      CPC	R26,R4
    00321 05B5      CPC	R27,R5
    00322 F410      BCC	0x0325
(0136) 		effectLen=7;
    00323 E067      LDI	R22,7
    00324 C04C      RJMP	0x0371
(0137) 	else if(dat>99999)
    00325 E98F      LDI	R24,0x9F
    00326 E896      LDI	R25,0x86
    00327 E0A1      LDI	R26,1
    00328 E0B0      LDI	R27,0
    00329 842B      LDD	R2,Y+11
    0032A 843C      LDD	R3,Y+12
    0032B 844D      LDD	R4,Y+13
    0032C 845E      LDD	R5,Y+14
    0032D 1582      CP	R24,R2
    0032E 0593      CPC	R25,R3
    0032F 05A4      CPC	R26,R4
    00330 05B5      CPC	R27,R5
    00331 F410      BCC	0x0334
(0138) 		effectLen=6;
    00332 E066      LDI	R22,6
    00333 C03D      RJMP	0x0371
(0139) 	else if(dat>9999)
    00334 E08F      LDI	R24,0xF
    00335 E297      LDI	R25,0x27
    00336 E0A0      LDI	R26,0
    00337 E0B0      LDI	R27,0
    00338 842B      LDD	R2,Y+11
    00339 843C      LDD	R3,Y+12
    0033A 844D      LDD	R4,Y+13
    0033B 845E      LDD	R5,Y+14
    0033C 1582      CP	R24,R2
    0033D 0593      CPC	R25,R3
    0033E 05A4      CPC	R26,R4
    0033F 05B5      CPC	R27,R5
    00340 F410      BCC	0x0343
(0140) 		effectLen=5;
    00341 E065      LDI	R22,5
    00342 C02E      RJMP	0x0371
(0141) 	else if(dat>999)
    00343 EE87      LDI	R24,0xE7
    00344 E093      LDI	R25,3
    00345 E0A0      LDI	R26,0
    00346 E0B0      LDI	R27,0
    00347 842B      LDD	R2,Y+11
    00348 843C      LDD	R3,Y+12
    00349 844D      LDD	R4,Y+13
    0034A 845E      LDD	R5,Y+14
    0034B 1582      CP	R24,R2
    0034C 0593      CPC	R25,R3
    0034D 05A4      CPC	R26,R4
    0034E 05B5      CPC	R27,R5
    0034F F410      BCC	0x0352
(0142) 		effectLen=4;
    00350 E064      LDI	R22,4
    00351 C01F      RJMP	0x0371
(0143) 	else if(dat>99)
    00352 E683      LDI	R24,0x63
    00353 E090      LDI	R25,0
    00354 E0A0      LDI	R26,0
    00355 E0B0      LDI	R27,0
    00356 842B      LDD	R2,Y+11
    00357 843C      LDD	R3,Y+12
    00358 844D      LDD	R4,Y+13
    00359 845E      LDD	R5,Y+14
    0035A 1582      CP	R24,R2
    0035B 0593      CPC	R25,R3
    0035C 05A4      CPC	R26,R4
    0035D 05B5      CPC	R27,R5
    0035E F410      BCC	0x0361
(0144) 		effectLen=3;
    0035F E063      LDI	R22,3
    00360 C010      RJMP	0x0371
(0145) 	else if(dat>9)
    00361 E089      LDI	R24,0x9
    00362 E090      LDI	R25,0
    00363 E0A0      LDI	R26,0
    00364 E0B0      LDI	R27,0
    00365 842B      LDD	R2,Y+11
    00366 843C      LDD	R3,Y+12
    00367 844D      LDD	R4,Y+13
    00368 845E      LDD	R5,Y+14
    00369 1582      CP	R24,R2
    0036A 0593      CPC	R25,R3
    0036B 05A4      CPC	R26,R4
    0036C 05B5      CPC	R27,R5
    0036D F410      BCC	0x0370
(0146) 		effectLen=2;
    0036E E062      LDI	R22,2
    0036F C001      RJMP	0x0371
(0147) 	else
(0148) 		effectLen=1;
    00370 E061      LDI	R22,1
(0149) 	speaData(dat,effectLen);
    00371 8368      ST	Y,R22
    00372 850B      LDD	R16,Y+11
    00373 851C      LDD	R17,Y+12
    00374 852D      LDD	R18,Y+13
    00375 853E      LDD	R19,Y+14
    00376 DD13      RCALL	_speaData
(0150) 
(0151) 	lcd_set_xy(x,y);
    00377 2D2E      MOV	R18,R14
    00378 2D0C      MOV	R16,R12
    00379 DF20      RCALL	_lcd_set_xy
(0152) 	delay50us(40); 
    0037A E208      LDI	R16,0x28
    0037B E010      LDI	R17,0
    0037C DEBB      RCALL	_delay50us
(0153) 	if(length>effectLen)
    0037D 2E26      MOV	R2,R22
    0037E 2433      CLR	R3
    0037F FC27      SBRC	R2,7
    00380 9430      COM	R3
    00381 2C4A      MOV	R4,R10
    00382 2455      CLR	R5
    00383 1424      CP	R2,R4
    00384 0435      CPC	R3,R5
    00385 F46C      BGE	0x0393
(0154) 	{
(0155) 		for(i=length-effectLen-1;i>=0;i--)
    00386 2D44      MOV	R20,R4
    00387 1B46      SUB	R20,R22
    00388 5041      SUBI	R20,1
    00389 C007      RJMP	0x0391
(0156) 		{
(0157) 			lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
    0038A 2722      CLR	R18
    0038B E200      LDI	R16,0x20
    0038C DF00      RCALL	_lcd_wrDat
(0158) 			delay50us(40); 
    0038D E208      LDI	R16,0x28
    0038E E010      LDI	R17,0
    0038F DEA8      RCALL	_delay50us
    00390 954A      DEC	R20
    00391 3040      CPI	R20,0
    00392 F7BC      BGE	0x038A
(0159) 		}
(0160) 	}
(0161) 	for(i=effectLen-1;i>=0;i--)
    00393 2F46      MOV	R20,R22
    00394 5041      SUBI	R20,1
    00395 C01E      RJMP	0x03B4
(0162) 	{
(0163) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    00396 E482      LDI	R24,0x42
    00397 E091      LDI	R25,1
    00398 2FE4      MOV	R30,R20
    00399 27FF      CLR	R31
    0039A FDE7      SBRC	R30,7
    0039B 95F0      COM	R31
    0039C 0FE8      ADD	R30,R24
    0039D 1FF9      ADC	R31,R25
    0039E 8180      LD	R24,Z
    0039F 2799      CLR	R25
    003A0 96C0      ADIW	R24,0x30
    003A1 019C      MOVW	R18,R24
    003A2 702F      ANDI	R18,0xF
    003A3 7030      ANDI	R19,0
    003A4 0F22      LSL	R18
    003A5 1F33      ROL	R19
    003A6 0F22      LSL	R18
    003A7 1F33      ROL	R19
    003A8 0F22      LSL	R18
    003A9 1F33      ROL	R19
    003AA 0F22      LSL	R18
    003AB 1F33      ROL	R19
    003AC 018C      MOVW	R16,R24
    003AD 7F00      ANDI	R16,0xF0
    003AE 7010      ANDI	R17,0
    003AF DEDD      RCALL	_lcd_wrDat
(0164) 		delay50us(40);
    003B0 E208      LDI	R16,0x28
    003B1 E010      LDI	R17,0
    003B2 DE85      RCALL	_delay50us
    003B3 954A      DEC	R20
    003B4 3040      CPI	R20,0
    003B5 F704      BGE	0x0396
    003B6 9621      ADIW	R28,1
    003B7 940C 057C JMP	pop_xgsetF0FC
_lcd_puts:
  str                  --> R20
  y                    --> R12
  x                    --> R10
    003B9 940E 05A0 CALL	push_xgset303C
    003BB 2EC2      MOV	R12,R18
    003BC 2EA0      MOV	R10,R16
    003BD 814E      LDD	R20,Y+6
    003BE 815F      LDD	R21,Y+7
(0165) 	}
(0166) }
(0167) 
(0168) void lcd_puts(uint8 x,uint8 y,uint8 *str)
(0169) { 
(0170) 	lcd_set_xy(x,y);
    003BF 2D2C      MOV	R18,R12
    003C0 2D0A      MOV	R16,R10
    003C1 DED8      RCALL	_lcd_set_xy
(0171) 	delay50us(20);   
    003C2 E104      LDI	R16,0x14
    003C3 E010      LDI	R17,0
    003C4 DE73      RCALL	_delay50us
    003C5 C00F      RJMP	0x03D5
(0172) 	while(*str)
(0173) 	{
(0174) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    003C6 01FA      MOVW	R30,R20
    003C7 8020      LD	R2,Z
    003C8 2433      CLR	R3
    003C9 2D22      MOV	R18,R2
    003CA 702F      ANDI	R18,0xF
    003CB 702F      ANDI	R18,0xF
    003CC 9522      SWAP	R18
    003CD 2D02      MOV	R16,R2
    003CE 7F00      ANDI	R16,0xF0
    003CF DEBD      RCALL	_lcd_wrDat
(0175) 		str++;
    003D0 5F4F      SUBI	R20,0xFF
    003D1 4F5F      SBCI	R21,0xFF
(0176) 		delay50us(20);
    003D2 E104      LDI	R16,0x14
    003D3 E010      LDI	R17,0
    003D4 DE63      RCALL	_delay50us
    003D5 01FA      MOVW	R30,R20
    003D6 8020      LD	R2,Z
    003D7 2022      TST	R2
    003D8 F769      BNE	0x03C6
    003D9 940C 05A7 JMP	pop_xgset303C
_lcd_puts_:
  dlyMs                --> R10
  str                  --> R20
  y                    --> R14
  x                    --> R12
    003DB 940E 0589 CALL	push_xgset30FC
    003DD 2EE2      MOV	R14,R18
    003DE 2EC0      MOV	R12,R16
    003DF 8548      LDD	R20,Y+8
    003E0 8559      LDD	R21,Y+9
    003E1 84AA      LDD	R10,Y+10
(0177) 	} 
(0178) }
(0179) 
(0180) void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
(0181) { 
(0182) 	lcd_set_xy(x,y);
    003E2 2D2E      MOV	R18,R14
    003E3 2D0C      MOV	R16,R12
    003E4 DEB5      RCALL	_lcd_set_xy
(0183) 	delay50us(20);   
    003E5 E104      LDI	R16,0x14
    003E6 E010      LDI	R17,0
    003E7 DE50      RCALL	_delay50us
    003E8 C00F      RJMP	0x03F8
(0184) 	while(*str)
(0185) 	{
(0186) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    003E9 01FA      MOVW	R30,R20
    003EA 8020      LD	R2,Z
    003EB 2433      CLR	R3
    003EC 2D22      MOV	R18,R2
    003ED 702F      ANDI	R18,0xF
    003EE 702F      ANDI	R18,0xF
    003EF 9522      SWAP	R18
    003F0 2D02      MOV	R16,R2
    003F1 7F00      ANDI	R16,0xF0
    003F2 DE9A      RCALL	_lcd_wrDat
(0187) 		str++;
    003F3 5F4F      SUBI	R20,0xFF
    003F4 4F5F      SBCI	R21,0xFF
(0188) 		delay50ms(dlyMs);
    003F5 2D0A      MOV	R16,R10
    003F6 2711      CLR	R17
    003F7 DE50      RCALL	_delay50ms
    003F8 01FA      MOVW	R30,R20
    003F9 8020      LD	R2,Z
    003FA 2022      TST	R2
    003FB F769      BNE	0x03E9
    003FC 940C 0573 JMP	pop_xgset30FC
(0189) 	} 
(0190) }
(0191) 
(0192) void lcd_clr()
(0193) {
(0194) 	lcd_wrCmd(0x00,0x10);
_lcd_clr:
    003FE E120      LDI	R18,0x10
    003FF 2700      CLR	R16
    00400 DE7F      RCALL	_lcd_wrCmd
(0195) 	delay50us(200);
    00401 EC08      LDI	R16,0xC8
    00402 E010      LDI	R17,0
    00403 CE34      RJMP	_delay50us
(0196) }
(0197) 
(0198) void lcd_init(void)
(0199) {
(0200) 	SPI_init();	
_lcd_init:
    00404 DE6E      RCALL	_SPI_init
(0201) 	//OUT_LCD_CS;		//若LCD_CS
(0202) 	//SET_LCD_CS;		
(0203) 	delay50ms(1);
    00405 E001      LDI	R16,1
    00406 E010      LDI	R17,0
    00407 DE40      RCALL	_delay50ms
(0204) 	lcd_wrCmd(0x30,0x30);	//使用8位控制界面,使用基本指令集
    00408 E320      LDI	R18,0x30
    00409 E300      LDI	R16,0x30
    0040A DE75      RCALL	_lcd_wrCmd
(0205) 	//lcd_wrCmd(0x00,0xF0);	//整体显示ON
(0206) 	lcd_wrCmd(0x00,0xC0);	//整体显示ON
    0040B EC20      LDI	R18,0xC0
    0040C 2700      CLR	R16
    0040D DE72      RCALL	_lcd_wrCmd
(0207) 	lcd_wrCmd(0x00,0x10);	//清屏
    0040E E120      LDI	R18,0x10
    0040F 2700      CLR	R16
    00410 DE6F      RCALL	_lcd_wrCmd
(0208) 	//lcd_wrCmd(0x10,0x00);	//光标
(0209) 	lcd_wrCmd(0x00,0x60);
    00411 E620      LDI	R18,0x60
    00412 2700      CLR	R16
    00413 DE6C      RCALL	_lcd_wrCmd
(0210) 	//lcd_wrCmd(0x00,0x70);	//显示右移
(0211) 	delay50ms(1);		//不可省去！！！
    00414 E001      LDI	R16,1
    00415 E010      LDI	R17,0
    00416 CE31      RJMP	_delay50ms
_Write_PCF8574:
  data                 --> R10
    00417 92AA      ST	-Y,R10
    00418 2EA0      MOV	R10,R16
FILE: D:\ICC_H\PCF8574.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net	
(0003) 
(0004) 目    的:   建立方便的PCF8574操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) ----------------------------------------------------------------------
(0025) 
(0026) ----------------------------------------------------------------------
(0027) 待定参数说明：
(0028) 
(0029) ----------------------------------------------------------------------	
(0030) 对外变量说明：
(0031) 
(0032) ----------------------------------------------------------------------
(0033) 对外函数说明：
(0034) 
(0035) ----------------------------------------------------------------------
(0036) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0037) #ifndef PCF8574_H
(0038) #define PCF8574_H
(0039) #include "D:\ICC_H\CmmICC.H"
(0040) #include "D:\ICC_H\I2C.H"
(0041) 
(0042) //==============================
(0043) //函数名：  Write_PCF8574
(0044) //==============================
(0045) void Write_PCF8574(unsigned char data)
(0046) {
(0047) 	if( I2C_Start()==0 )
    00419 DCC9      RCALL	_I2C_Start
    0041A 2300      TST	R16
    0041B F409      BNE	0x041D
(0048) 		return ;	
    0041C C012      RJMP	0x042F
(0049) 	if( I2C_SendWrDAdr_(0x40)==0 )
    0041D E400      LDI	R16,0x40
    0041E E010      LDI	R17,0
    0041F DCF5      RCALL	_I2C_SendWrDAdr_
    00420 2300      TST	R16
    00421 F409      BNE	0x0423
(0050) 		return ;
    00422 C00C      RJMP	0x042F
(0051) 	if( I2C_SendDat(data)==0 )
    00423 2D0A      MOV	R16,R10
    00424 DD3A      RCALL	_I2C_SendDat
    00425 2EA0      MOV	R10,R16
    00426 2300      TST	R16
    00427 F409      BNE	0x0429
(0052) 		return ;
    00428 C006      RJMP	0x042F
(0053) 	I2C_Stop();
    00429 E984      LDI	R24,0x94
    0042A 9380 0074 STS	0x74,R24
(0054) 	delay50ms(1);					
    0042C E001      LDI	R16,1
    0042D E010      LDI	R17,0
    0042E DE19      RCALL	_delay50ms
    0042F 90A9      LD	R10,Y+
    00430 9508      RET
_Read_PCF8574:
    00431 92AA      ST	-Y,R10
(0055) }
(0056) //===============================
(0057) //函数名：  Read_PCF8574
(0058) //===============================
(0059) unsigned char Read_PCF8574(void)
(0060) {
(0061) 	if( I2C_Start()==0 )
    00432 DCB0      RCALL	_I2C_Start
    00433 2300      TST	R16
    00434 F411      BNE	0x0437
(0062) 		return 0;	
    00435 2700      CLR	R16
    00436 C027      RJMP	0x045E
(0063) 	if( I2C_SendWrDAdr_(0x40)==0 )
    00437 E400      LDI	R16,0x40
    00438 E010      LDI	R17,0
    00439 DCDB      RCALL	_I2C_SendWrDAdr_
    0043A 2300      TST	R16
    0043B F411      BNE	0x043E
(0064) 		return 0;
    0043C 2700      CLR	R16
    0043D C020      RJMP	0x045E
(0065) 	if( I2C_Restart()==I2C_ERR )
    0043E DCB4      RCALL	_I2C_Restart
    0043F 2EA0      MOV	R10,R16
    00440 2300      TST	R16
    00441 F411      BNE	0x0444
(0066) 		return I2C_ERR;
    00442 2700      CLR	R16
    00443 C01A      RJMP	0x045E
(0067) 	if( I2C_SendRdDAdr(0x41)==I2C_ERR )
    00444 E401      LDI	R16,0x41
    00445 DCEC      RCALL	_I2C_SendRdDAdr
    00446 2EA0      MOV	R10,R16
    00447 2300      TST	R16
    00448 F411      BNE	0x044B
(0068) 		return I2C_ERR;
    00449 2700      CLR	R16
    0044A C013      RJMP	0x045E
(0069) 	I2CRcvNckByte();I2CWaitAck();
    0044B E884      LDI	R24,0x84
    0044C 9380 0074 STS	0x74,R24
    0044E 9020 0074 LDS	R2,0x74
    00450 FE27      SBRS	R2,7
    00451 CFFC      RJMP	0x044E
(0070) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    00452 9180 0071 LDS	R24,0x71
    00454 7F88      ANDI	R24,0xF8
    00455 3588      CPI	R24,0x58
    00456 F011      BEQ	0x0459
(0071) 		return I2C_ERR;
    00457 2700      CLR	R16
    00458 C005      RJMP	0x045E
(0072) 	I2C_Stop();
    00459 E984      LDI	R24,0x94
    0045A 9380 0074 STS	0x74,R24
(0073) 	return TWDR;
    0045C 9100 0073 LDS	R16,0x73
    0045E 90A9      LD	R10,Y+
    0045F 9508      RET
FILE: E:\吴泽备份\DVK501光盘内容\M128_E~1\PCF857~1\PCF8574_LCD12864\PCF8574.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                            
(0004) 项目名称:   PCF8574示例程序
(0005) 		
(0006) 目标系统:   “DVK501” && “M128 EX+”
(0007) 
(0008) 应用软件:   ICCAVR 6.31A                                             
(0009) 		                                                                
(0010) 版    本:   V1.0 
(0011)                                                         
(0012) 圆版时间:   2009-7-1
(0013) 
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 		
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 先把写数据并显示在LED0~7上显示，然后把读P0~P7的数据用LCD12864显示
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：将PCF8574的A0、A1、A2使用短路帽短接至“－”。
(0030) 		 	  DVK501				 STK128+
(0031) 				VCC		---------	  VCC
(0032) 				GND		---------	  GND
(0033) 				SCK	       ---------	  PD0(SCL)
(0034) 				SDA		---------	  PD1(SDA)
(0035) 		 
(0036) 		 	  DVK500				 STK128+
(0037) 				CS		---------	  VCC
(0038) 				PSB	    ---------	  GND
(0039) 				SID		---------	  PB2
(0040) 				CLK		---------	  PB1
(0041) 
(0042)    读操作时DVK501     			STK128+
(0043) 			   P0~P7	---------   VCC/GND(不要悬空)
(0044) ----------------------------------------------------------------------
(0045) 注意事项： 
(0046) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0047) （2）请详细阅读“使用必读”及相关资料。
(0048) ----------------------------------------------------------------------
(0049) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0050) #include <iom128v.h>
(0051) #include <macros.h>
(0052) #include "D:\ICC_H\CmmICC.H"
(0053) #include "D:\ICC_H\LCD12864_ST7920_.H"
(0054) #include "D:\ICC_H\PCF8574.H"
(0055) void port_init(void)
(0056) {
(0057)     PORTA = 0x00;
_port_init:
    00460 2422      CLR	R2
    00461 BA2B      OUT	0x1B,R2
(0058)     DDRA  = 0xFF;
    00462 EF8F      LDI	R24,0xFF
    00463 BB8A      OUT	0x1A,R24
(0059)     PORTB = 0x01;
    00464 E081      LDI	R24,1
    00465 BB88      OUT	0x18,R24
(0060)     DDRB  = 0xFE;
    00466 EF8E      LDI	R24,0xFE
    00467 BB87      OUT	0x17,R24
(0061)     PORTC = 0x00; 
    00468 BA25      OUT	0x15,R2
(0062)     DDRC  = 0x00;
    00469 BA24      OUT	0x14,R2
(0063)     PORTD = 0x00;
    0046A BA22      OUT	0x12,R2
(0064)     DDRD  = 0xFF;
    0046B EF8F      LDI	R24,0xFF
    0046C BB81      OUT	0x11,R24
    0046D 9508      RET
_main:
  tmp                  --> R10
  NO                   --> R20
    0046E 9725      SBIW	R28,5
(0065) }
(0066) void main(void)
(0067) {
(0068) 	unsigned char NO;
(0069) 	char tmp;
(0070) 	port_init();
    0046F DFF0      RCALL	_port_init
(0071) 
(0072) 	lcd_init();
    00470 DF93      RCALL	_lcd_init
(0073) 	lcd_clr();
    00471 DF8C      RCALL	_lcd_clr
(0074) 	lcd_puts(1,1,"PCF8574-LCD12864");
    00472 E381      LDI	R24,0x31
    00473 E091      LDI	R25,1
    00474 8399      STD	Y+1,R25
    00475 8388      ST	Y,R24
    00476 E021      LDI	R18,1
    00477 E001      LDI	R16,1
    00478 DF40      RCALL	_lcd_puts
(0075) 	lcd_puts(2,1,"扩展芯片测试");
    00479 E284      LDI	R24,0x24
    0047A E091      LDI	R25,1
    0047B 8399      STD	Y+1,R25
    0047C 8388      ST	Y,R24
    0047D E021      LDI	R18,1
    0047E E002      LDI	R16,2
    0047F DF39      RCALL	_lcd_puts
(0076) 	lcd_puts(3,1,"I2C 输出信号");
    00480 E187      LDI	R24,0x17
    00481 E091      LDI	R25,1
    00482 8399      STD	Y+1,R25
    00483 8388      ST	Y,R24
    00484 E021      LDI	R18,1
    00485 E003      LDI	R16,3
    00486 DF32      RCALL	_lcd_puts
(0077) 	lcd_puts(4,1,"IO:");
    00487 E183      LDI	R24,0x13
    00488 E091      LDI	R25,1
    00489 8399      STD	Y+1,R25
    0048A 8388      ST	Y,R24
    0048B E021      LDI	R18,1
    0048C E004      LDI	R16,4
    0048D DF2B      RCALL	_lcd_puts
(0078) 	
(0079) 	for(NO=0;NO<10;NO++)		//写数据
    0048E 2744      CLR	R20
    0048F C013      RJMP	0x04A3
(0080) 	{
(0081) 		Write_PCF8574(NO);
    00490 2F04      MOV	R16,R20
    00491 DF85      RCALL	_Write_PCF8574
(0082) 		delay50ms(10);
    00492 E00A      LDI	R16,0xA
    00493 E010      LDI	R17,0
    00494 DDB3      RCALL	_delay50ms
(0083) 		lcd_putd(4,3,NO,2);
    00495 E082      LDI	R24,2
    00496 838C      STD	Y+4,R24
    00497 2E24      MOV	R2,R20
    00498 2433      CLR	R3
    00499 2444      CLR	R4
    0049A 2455      CLR	R5
    0049B 8228      ST	Y,R2
    0049C 8239      STD	Y+1,R3
    0049D 824A      STD	Y+2,R4
    0049E 825B      STD	Y+3,R5
    0049F E023      LDI	R18,3
    004A0 E004      LDI	R16,4
    004A1 DE6E      RCALL	_lcd_putd
    004A2 9543      INC	R20
    004A3 304A      CPI	R20,0xA
    004A4 F358      BCS	0x0490
(0084) 		
(0085) 	}
(0086) 	lcd_puts(3,1,"I2C 读取信号");
    004A5 E086      LDI	R24,6
    004A6 E091      LDI	R25,1
    004A7 8399      STD	Y+1,R25
    004A8 8388      ST	Y,R24
    004A9 E021      LDI	R18,1
    004AA E003      LDI	R16,3
    004AB DF0D      RCALL	_lcd_puts
    004AC C019      RJMP	0x04C6
(0087) 	while(1)
(0088) 	{
(0089) 		tmp=Read_PCF8574();	//读数据(通过LCD显示出来)
    004AD DF83      RCALL	_Read_PCF8574
    004AE 2EA0      MOV	R10,R16
(0090) 		lcd_puts(4,3,"     ");
    004AF E080      LDI	R24,0
    004B0 E091      LDI	R25,1
    004B1 8399      STD	Y+1,R25
    004B2 8388      ST	Y,R24
    004B3 E023      LDI	R18,3
    004B4 E004      LDI	R16,4
    004B5 DF03      RCALL	_lcd_puts
(0091) 		lcd_putd(4,3,tmp,2);
    004B6 E082      LDI	R24,2
    004B7 838C      STD	Y+4,R24
    004B8 2C2A      MOV	R2,R10
    004B9 2433      CLR	R3
    004BA 2444      CLR	R4
    004BB 2455      CLR	R5
    004BC 8228      ST	Y,R2
    004BD 8239      STD	Y+1,R3
    004BE 824A      STD	Y+2,R4
    004BF 825B      STD	Y+3,R5
    004C0 E023      LDI	R18,3
    004C1 E004      LDI	R16,4
    004C2 DE4D      RCALL	_lcd_putd
(0092) 		delay50ms(5);
FILE: <library>
    004C3 E005      LDI	R16,5
    004C4 E010      LDI	R17,0
    004C5 DD82      RCALL	_delay50ms
    004C6 CFE6      RJMP	0x04AD
    004C7 9625      ADIW	R28,5
    004C8 9508      RET
push_arg4:
    004C9 933A      ST	-Y,R19
    004CA 932A      ST	-Y,R18
push_arg2:
    004CB 931A      ST	-Y,R17
    004CC 930A      ST	-Y,R16
    004CD 9508      RET
div32u:
    004CE 94E8      BCLR	6
    004CF C001      RJMP	0x04D1
mod32u:
    004D0 9468      BSET	6
    004D1 D030      RCALL	long_div_prolog
    004D2 24CC      CLR	R12
    004D3 C009      RJMP	0x04DD
div32s:
    004D4 94E8      BCLR	6
    004D5 C001      RJMP	0x04D7
mod32s:
    004D6 9468      BSET	6
    004D7 D02A      RCALL	long_div_prolog
    004D8 FD37      SBRC	R19,7
    004D9 940E 05C0 CALL	neg32
    004DB FDB7      SBRC	R27,7
    004DC D052      RCALL	neg_R24_R27
    004DD 2477      CLR	R7
    004DE 2488      CLR	R8
    004DF 2499      CLR	R9
    004E0 24AA      CLR	R10
    004E1 24BB      CLR	R11
    004E2 D042      RCALL	tst_R16_R19
    004E3 F0C1      BEQ	0x04FC
    004E4 D045      RCALL	tst_R24_R27
    004E5 F0B1      BEQ	0x04FC
    004E6 E2E8      LDI	R30,0x28
    004E7 0F00      LSL	R16
    004E8 1F11      ROL	R17
    004E9 1F22      ROL	R18
    004EA 1F33      ROL	R19
    004EB 1C77      ROL	R7
    004EC 1C88      ROL	R8
    004ED 1C99      ROL	R9
    004EE 1CAA      ROL	R10
    004EF 1CBB      ROL	R11
    004F0 1688      CP	R8,R24
    004F1 0699      CPC	R9,R25
    004F2 06AA      CPC	R10,R26
    004F3 06BB      CPC	R11,R27
    004F4 F028      BCS	0x04FA
    004F5 1A88      SUB	R8,R24
    004F6 0A99      SBC	R9,R25
    004F7 0AAA      SBC	R10,R26
    004F8 0ABB      SBC	R11,R27
    004F9 9503      INC	R16
    004FA 95EA      DEC	R30
    004FB F759      BNE	0x04E7
    004FC F426      BRTC	0x0501
    004FD 2D08      MOV	R16,R8
    004FE 2D19      MOV	R17,R9
    004FF 2D2A      MOV	R18,R10
    00500 2D3B      MOV	R19,R11
    00501 C013      RJMP	long_div_epilog
long_div_prolog:
    00502 927A      ST	-Y,R7
    00503 928A      ST	-Y,R8
    00504 929A      ST	-Y,R9
    00505 92AA      ST	-Y,R10
    00506 92BA      ST	-Y,R11
    00507 92CA      ST	-Y,R12
    00508 93EA      ST	-Y,R30
    00509 938A      ST	-Y,R24
    0050A 939A      ST	-Y,R25
    0050B 93AA      ST	-Y,R26
    0050C 93BA      ST	-Y,R27
    0050D 858B      LDD	R24,Y+11
    0050E 859C      LDD	R25,Y+12
    0050F 85AD      LDD	R26,Y+13
    00510 85BE      LDD	R27,Y+14
    00511 2EC3      MOV	R12,R19
    00512 F00E      BRTS	0x0514
    00513 26CB      EOR	R12,R27
    00514 9508      RET
long_div_epilog:
    00515 FCC7      SBRC	R12,7
    00516 940E 05C0 CALL	neg32
    00518 91B9      LD	R27,Y+
    00519 91A9      LD	R26,Y+
    0051A 9199      LD	R25,Y+
    0051B 9189      LD	R24,Y+
    0051C 91E9      LD	R30,Y+
    0051D 90C9      LD	R12,Y+
    0051E 90B9      LD	R11,Y+
    0051F 90A9      LD	R10,Y+
    00520 9099      LD	R9,Y+
    00521 9089      LD	R8,Y+
    00522 9079      LD	R7,Y+
    00523 9624      ADIW	R28,4
    00524 9508      RET
tst_R16_R19:
    00525 2FE0      MOV	R30,R16
    00526 2BE1      OR	R30,R17
    00527 2BE2      OR	R30,R18
    00528 2BE3      OR	R30,R19
    00529 9508      RET
tst_R24_R27:
    0052A 2FE8      MOV	R30,R24
    0052B 2BE9      OR	R30,R25
    0052C 2BEA      OR	R30,R26
    0052D 2BEB      OR	R30,R27
    0052E 9508      RET
neg_R24_R27:
    0052F 9580      COM	R24
    00530 9590      COM	R25
    00531 95A0      COM	R26
    00532 95B0      COM	R27
    00533 5F8F      SUBI	R24,0xFF
    00534 4F9F      SBCI	R25,0xFF
    00535 4FAF      SBCI	R26,0xFF
    00536 4FBF      SBCI	R27,0xFF
    00537 9508      RET
empy32u|empy32s:
    00538 940E 05C9 CALL	long_prolog
    0053A 927A      ST	-Y,R7
    0053B 940E 05E2 CALL	tstzero1
    0053D F159      BEQ	0x0569
    0053E 2477      CLR	R7
    0053F 940E 05E8 CALL	tstzero2
    00541 F419      BNE	0x0545
    00542 018C      MOVW	R16,R24
    00543 019D      MOVW	R18,R26
    00544 C024      RJMP	0x0569
    00545 920A      ST	-Y,R0
    00546 921A      ST	-Y,R1
    00547 9F08      MUL	R16,R24
    00548 2CB0      MOV	R11,R0
    00549 2CA1      MOV	R10,R1
    0054A 9F28      MUL	R18,R24
    0054B 2C90      MOV	R9,R0
    0054C 2C81      MOV	R8,R1
    0054D 9F18      MUL	R17,R24
    0054E 0CA0      ADD	R10,R0
    0054F 1C91      ADC	R9,R1
    00550 1C87      ADC	R8,R7
    00551 9F09      MUL	R16,R25
    00552 0CA0      ADD	R10,R0
    00553 1C91      ADC	R9,R1
    00554 1C87      ADC	R8,R7
    00555 9F19      MUL	R17,R25
    00556 0C90      ADD	R9,R0
    00557 1C81      ADC	R8,R1
    00558 9F0A      MUL	R16,R26
    00559 0C90      ADD	R9,R0
    0055A 1C81      ADC	R8,R1
    0055B 9F38      MUL	R19,R24
    0055C 0C80      ADD	R8,R0
    0055D 9F29      MUL	R18,R25
    0055E 0C80      ADD	R8,R0
    0055F 9F1A      MUL	R17,R26
    00560 0C80      ADD	R8,R0
    00561 9F0B      MUL	R16,R27
    00562 0C80      ADD	R8,R0
    00563 9019      LD	R1,Y+
    00564 9009      LD	R0,Y+
    00565 2D0B      MOV	R16,R11
    00566 2D1A      MOV	R17,R10
    00567 2D29      MOV	R18,R9
    00568 2D38      MOV	R19,R8
    00569 9079      LD	R7,Y+
    0056A 940C 05D7 JMP	long_epilog
pop_xgset00FC:
    0056C 90A9      LD	R10,Y+
    0056D 90B9      LD	R11,Y+
    0056E 90C9      LD	R12,Y+
    0056F 90D9      LD	R13,Y+
    00570 90E9      LD	R14,Y+
    00571 90F9      LD	R15,Y+
    00572 9508      RET
pop_xgset30FC:
    00573 90A9      LD	R10,Y+
    00574 90B9      LD	R11,Y+
    00575 90C9      LD	R12,Y+
    00576 90D9      LD	R13,Y+
    00577 90E9      LD	R14,Y+
    00578 90F9      LD	R15,Y+
    00579 9149      LD	R20,Y+
    0057A 9159      LD	R21,Y+
    0057B 9508      RET
pop_xgsetF0FC:
    0057C 90A9      LD	R10,Y+
    0057D 90B9      LD	R11,Y+
    0057E 90C9      LD	R12,Y+
    0057F 90D9      LD	R13,Y+
    00580 90E9      LD	R14,Y+
    00581 90F9      LD	R15,Y+
    00582 9149      LD	R20,Y+
    00583 9159      LD	R21,Y+
    00584 9169      LD	R22,Y+
    00585 9179      LD	R23,Y+
    00586 9508      RET
push_xgsetF0FC:
    00587 937A      ST	-Y,R23
    00588 936A      ST	-Y,R22
push_xgset30FC:
    00589 935A      ST	-Y,R21
    0058A 934A      ST	-Y,R20
push_xgset00FC:
    0058B 92FA      ST	-Y,R15
    0058C 92EA      ST	-Y,R14
push_xgset003C:
    0058D 92DA      ST	-Y,R13
    0058E 92CA      ST	-Y,R12
    0058F 92BA      ST	-Y,R11
    00590 92AA      ST	-Y,R10
    00591 9508      RET
push_xgsetF00C:
    00592 937A      ST	-Y,R23
    00593 936A      ST	-Y,R22
    00594 935A      ST	-Y,R21
    00595 934A      ST	-Y,R20
    00596 92BA      ST	-Y,R11
    00597 92AA      ST	-Y,R10
    00598 9508      RET
pop_xgsetF00C:
    00599 90A9      LD	R10,Y+
    0059A 90B9      LD	R11,Y+
    0059B 9149      LD	R20,Y+
    0059C 9159      LD	R21,Y+
    0059D 9169      LD	R22,Y+
    0059E 9179      LD	R23,Y+
    0059F 9508      RET
push_xgset303C:
    005A0 935A      ST	-Y,R21
    005A1 934A      ST	-Y,R20
    005A2 92DA      ST	-Y,R13
    005A3 92CA      ST	-Y,R12
    005A4 92BA      ST	-Y,R11
    005A5 92AA      ST	-Y,R10
    005A6 9508      RET
pop_xgset303C:
    005A7 90A9      LD	R10,Y+
    005A8 90B9      LD	R11,Y+
    005A9 90C9      LD	R12,Y+
    005AA 90D9      LD	R13,Y+
    005AB 9149      LD	R20,Y+
    005AC 9159      LD	R21,Y+
    005AD 9508      RET
push_xgsetF03C:
    005AE 937A      ST	-Y,R23
    005AF 936A      ST	-Y,R22
    005B0 935A      ST	-Y,R21
    005B1 934A      ST	-Y,R20
    005B2 92DA      ST	-Y,R13
    005B3 92CA      ST	-Y,R12
    005B4 92BA      ST	-Y,R11
    005B5 92AA      ST	-Y,R10
    005B6 9508      RET
pop_xgsetF03C:
    005B7 90A9      LD	R10,Y+
    005B8 90B9      LD	R11,Y+
    005B9 90C9      LD	R12,Y+
    005BA 90D9      LD	R13,Y+
    005BB 9149      LD	R20,Y+
    005BC 9159      LD	R21,Y+
    005BD 9169      LD	R22,Y+
    005BE 9179      LD	R23,Y+
    005BF 9508      RET
neg32:
    005C0 9500      COM	R16
    005C1 9510      COM	R17
    005C2 9520      COM	R18
    005C3 9530      COM	R19
    005C4 5F0F      SUBI	R16,0xFF
    005C5 4F1F      SBCI	R17,0xFF
    005C6 4F2F      SBCI	R18,0xFF
    005C7 4F3F      SBCI	R19,0xFF
    005C8 9508      RET
long_prolog:
    005C9 928A      ST	-Y,R8
    005CA 929A      ST	-Y,R9
    005CB 92AA      ST	-Y,R10
    005CC 92BA      ST	-Y,R11
    005CD 93EA      ST	-Y,R30
    005CE 938A      ST	-Y,R24
    005CF 939A      ST	-Y,R25
    005D0 93AA      ST	-Y,R26
    005D1 93BA      ST	-Y,R27
    005D2 8589      LDD	R24,Y+9
    005D3 859A      LDD	R25,Y+10
    005D4 85AB      LDD	R26,Y+11
    005D5 85BC      LDD	R27,Y+12
    005D6 9508      RET
long_epilog:
    005D7 91B9      LD	R27,Y+
    005D8 91A9      LD	R26,Y+
    005D9 9199      LD	R25,Y+
    005DA 9189      LD	R24,Y+
    005DB 91E9      LD	R30,Y+
    005DC 90B9      LD	R11,Y+
    005DD 90A9      LD	R10,Y+
    005DE 9099      LD	R9,Y+
    005DF 9089      LD	R8,Y+
    005E0 9624      ADIW	R28,4
    005E1 9508      RET
tstzero1:
    005E2 27EE      CLR	R30
    005E3 2BE0      OR	R30,R16
    005E4 2BE1      OR	R30,R17
    005E5 2BE2      OR	R30,R18
    005E6 2BE3      OR	R30,R19
    005E7 9508      RET
tstzero2:
    005E8 27EE      CLR	R30
    005E9 2BE8      OR	R30,R24
    005EA 2BE9      OR	R30,R25
    005EB 2BEA      OR	R30,R26
    005EC 2BEB      OR	R30,R27
    005ED 9508      RET
