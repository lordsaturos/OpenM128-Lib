Interrupt Vectors
    00000 940C 005A JMP	__text_start|__start

Program Code (text area)
__text_start|__start:
    0005A EFCF      LDI	R28,0xFF
    0005B E1D0      LDI	R29,0x10
    0005C BFCD      OUT	0x3D,R28
    0005D BFDE      OUT	0x3E,R29
    0005E 51C0      SUBI	R28,0x10
    0005F 40D0      SBCI	R29,0
    00060 EA0A      LDI	R16,0xAA
    00061 8308      ST	Y,R16
    00062 2400      CLR	R0
    00063 E2E7      LDI	R30,0x27
    00064 E0F1      LDI	R31,1
    00065 E011      LDI	R17,1
    00066 32ED      CPI	R30,0x2D
    00067 07F1      CPC	R31,R17
    00068 F011      BEQ	0x006B
    00069 9201      ST	Z+,R0
    0006A CFFB      RJMP	0x0066
    0006B 8300      ST	Z,R16
    0006C E8EC      LDI	R30,0x8C
    0006D E0F0      LDI	R31,0
    0006E E0A0      LDI	R26,0
    0006F E0B1      LDI	R27,1
    00070 E010      LDI	R17,0
    00071 E000      LDI	R16,0
    00072 BF0B      OUT	0x3B,R16
    00073 3BE3      CPI	R30,0xB3
    00074 07F1      CPC	R31,R17
    00075 F021      BEQ	0x007A
    00076 95C8      LPM
    00077 9631      ADIW	R30,1
    00078 920D      ST	X+,R0
    00079 CFF9      RJMP	0x0073
    0007A 940E 04E9 CALL	_main
_exit:
    0007C CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0007D 940E 0566 CALL	push_arg4
    0007F 940E 0663 CALL	push_xgsetF03C
    00081 9728      SBIW	R28,0x8
    00082 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00083 24AA      CLR	R10
    00084 E081      LDI	R24,1
    00085 8388      ST	Y,R24
    00086 E080      LDI	R24,0
    00087 8389      STD	Y+1,R24
    00088 838A      STD	Y+2,R24
    00089 838B      STD	Y+3,R24
    0008A C03C      RJMP	0x00C7
(0120)     {
(0121)         y=dat/j;
    0008B 8028      LD	R2,Y
    0008C 8039      LDD	R3,Y+1
    0008D 804A      LDD	R4,Y+2
    0008E 805B      LDD	R5,Y+3
    0008F 8908      LDD	R16,Y+16
    00090 8919      LDD	R17,Y+17
    00091 892A      LDD	R18,Y+18
    00092 893B      LDD	R19,Y+19
    00093 925A      ST	-Y,R5
    00094 924A      ST	-Y,R4
    00095 923A      ST	-Y,R3
    00096 922A      ST	-Y,R2
    00097 940E 056B CALL	div32u
    00099 830C      STD	Y+4,R16
    0009A 831D      STD	Y+5,R17
    0009B 832E      STD	Y+6,R18
    0009C 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0009D E04A      LDI	R20,0xA
    0009E E050      LDI	R21,0
    0009F E060      LDI	R22,0
    000A0 E070      LDI	R23,0
    000A1 810C      LDD	R16,Y+4
    000A2 811D      LDD	R17,Y+5
    000A3 812E      LDD	R18,Y+6
    000A4 813F      LDD	R19,Y+7
    000A5 937A      ST	-Y,R23
    000A6 936A      ST	-Y,R22
    000A7 935A      ST	-Y,R21
    000A8 934A      ST	-Y,R20
    000A9 940E 056D CALL	mod32u
    000AB E287      LDI	R24,0x27
    000AC E091      LDI	R25,1
    000AD 2DEA      MOV	R30,R10
    000AE 27FF      CLR	R31
    000AF 0FE8      ADD	R30,R24
    000B0 1FF9      ADC	R31,R25
    000B1 8300      ST	Z,R16
(0123)         j*=10;
    000B2 8028      LD	R2,Y
    000B3 8039      LDD	R3,Y+1
    000B4 804A      LDD	R4,Y+2
    000B5 805B      LDD	R5,Y+3
    000B6 E04A      LDI	R20,0xA
    000B7 E050      LDI	R21,0
    000B8 E060      LDI	R22,0
    000B9 E070      LDI	R23,0
    000BA 925A      ST	-Y,R5
    000BB 924A      ST	-Y,R4
    000BC 923A      ST	-Y,R3
    000BD 922A      ST	-Y,R2
    000BE 018A      MOVW	R16,R20
    000BF 019B      MOVW	R18,R22
    000C0 940E 05ED CALL	empy32u|empy32s
    000C2 8308      ST	Y,R16
    000C3 8319      STD	Y+1,R17
    000C4 832A      STD	Y+2,R18
    000C5 833B      STD	Y+3,R19
    000C6 94A3      INC	R10
    000C7 2C2C      MOV	R2,R12
    000C8 2433      CLR	R3
    000C9 FC27      SBRC	R2,7
    000CA 9430      COM	R3
    000CB 2C4A      MOV	R4,R10
    000CC 2455      CLR	R5
    000CD 1442      CP	R4,R2
    000CE 0453      CPC	R5,R3
    000CF F40C      BGE	0x00D1
    000D0 CFBA      RJMP	0x008B
    000D1 9628      ADIW	R28,0x8
    000D2 940E 066C CALL	pop_xgsetF03C
    000D4 9624      ADIW	R28,4
    000D5 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    000D6 EA84      LDI	R24,0xA4
    000D7 9380 0074 STS	0x74,R24
(0128) 	I2CWaitAck();
    000D9 9020 0074 LDS	R2,0x74
    000DB FE27      SBRS	R2,7
    000DC CFFC      RJMP	0x00D9
(0129) 	if( I2CChkAck()!=I2C_START ) 
    000DD 9180 0071 LDS	R24,0x71
    000DF 7F88      ANDI	R24,0xF8
    000E0 3088      CPI	R24,0x8
    000E1 F011      BEQ	0x00E4
(0130) 		return I2C_ERR;
    000E2 2700      CLR	R16
    000E3 C001      RJMP	0x00E5
(0131) 	return I2C_CRR;
    000E4 E001      LDI	R16,1
    000E5 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    000E6 EA84      LDI	R24,0xA4
    000E7 9380 0074 STS	0x74,R24
(0144) 	I2CWaitAck();
    000E9 9020 0074 LDS	R2,0x74
    000EB FE27      SBRS	R2,7
    000EC CFFC      RJMP	0x00E9
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    000ED 9180 0071 LDS	R24,0x71
    000EF 7F88      ANDI	R24,0xF8
    000F0 3180      CPI	R24,0x10
    000F1 F011      BEQ	0x00F4
(0146) 		return I2C_ERR;
    000F2 2700      CLR	R16
    000F3 C001      RJMP	0x00F5
(0147) 	return I2C_CRR;
    000F4 E001      LDI	R16,1
    000F5 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    000F6 9300 0073 STS	0x73,R16
    000F8 E884      LDI	R24,0x84
    000F9 9380 0074 STS	0x74,R24
(0160) 	I2CWaitAck();
    000FB 9020 0074 LDS	R2,0x74
    000FD FE27      SBRS	R2,7
    000FE CFFC      RJMP	0x00FB
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    000FF 9180 0071 LDS	R24,0x71
    00101 7F88      ANDI	R24,0xF8
    00102 3188      CPI	R24,0x18
    00103 F011      BEQ	0x0106
(0162) 		return I2C_ERR;
    00104 2700      CLR	R16
    00105 C001      RJMP	0x0107
(0163) 	return I2C_CRR;		
    00106 E001      LDI	R16,1
    00107 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    00108 92AA      ST	-Y,R10
    00109 92BA      ST	-Y,R11
    0010A 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    0010B FEA0      SBRS	R10,0
    0010C C00E      RJMP	0x011B
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    0010D 2D0A      MOV	R16,R10
    0010E 9506      LSR	R16
    0010F 9506      LSR	R16
    00110 9506      LSR	R16
    00111 9506      LSR	R16
    00112 9506      LSR	R16
    00113 9506      LSR	R16
    00114 9506      LSR	R16
    00115 9506      LSR	R16
    00116 DFDF      RCALL	_I2C_SendWrDAdr
    00117 2300      TST	R16
    00118 F411      BNE	0x011B
(0177) 			return I2C_ERR;
    00119 2700      CLR	R16
    0011A C007      RJMP	0x0122
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    0011B 2D0A      MOV	R16,R10
    0011C DFD9      RCALL	_I2C_SendWrDAdr
    0011D 2300      TST	R16
    0011E F411      BNE	0x0121
(0179) 		return I2C_ERR;
    0011F 2700      CLR	R16
    00120 C001      RJMP	0x0122
(0180) 	return I2C_CRR;
    00121 E001      LDI	R16,1
    00122 90B9      LD	R11,Y+
    00123 90A9      LD	R10,Y+
    00124 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    00125 9300 0073 STS	0x73,R16
    00127 E884      LDI	R24,0x84
    00128 9380 0074 STS	0x74,R24
(0193) 	I2CWaitAck();
    0012A 9020 0074 LDS	R2,0x74
    0012C FE27      SBRS	R2,7
    0012D CFFC      RJMP	0x012A
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    0012E 9180 0071 LDS	R24,0x71
    00130 7F88      ANDI	R24,0xF8
    00131 3480      CPI	R24,0x40
    00132 F011      BEQ	0x0135
(0195) 		return I2C_ERR;
    00133 2700      CLR	R16
    00134 C001      RJMP	0x0136
(0196) 	return I2C_CRR;	
    00135 E001      LDI	R16,1
    00136 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    00137 92AA      ST	-Y,R10
    00138 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    00139 FEA0      SBRS	R10,0
    0013A C00E      RJMP	0x0149
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    0013B 2D0A      MOV	R16,R10
    0013C 9506      LSR	R16
    0013D 9506      LSR	R16
    0013E 9506      LSR	R16
    0013F 9506      LSR	R16
    00140 9506      LSR	R16
    00141 9506      LSR	R16
    00142 9506      LSR	R16
    00143 9506      LSR	R16
    00144 DFB1      RCALL	_I2C_SendWrDAdr
    00145 2300      TST	R16
    00146 F411      BNE	0x0149
(0210) 			return I2C_ERR;
    00147 2700      CLR	R16
    00148 C007      RJMP	0x0150
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    00149 2D0A      MOV	R16,R10
    0014A DFAB      RCALL	_I2C_SendWrDAdr
    0014B 2300      TST	R16
    0014C F411      BNE	0x014F
(0212) 		return I2C_ERR;
    0014D 2700      CLR	R16
    0014E C001      RJMP	0x0150
(0213) 	return I2C_CRR;
    0014F E001      LDI	R16,1
    00150 90A9      LD	R10,Y+
    00151 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    00152 9300 0073 STS	0x73,R16
    00154 E884      LDI	R24,0x84
    00155 9380 0074 STS	0x74,R24
(0226) 	I2CWaitAck();
    00157 9020 0074 LDS	R2,0x74
    00159 FE27      SBRS	R2,7
    0015A CFFC      RJMP	0x0157
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    0015B 9180 0071 LDS	R24,0x71
    0015D 7F88      ANDI	R24,0xF8
    0015E 3288      CPI	R24,0x28
    0015F F011      BEQ	0x0162
(0228) 		return I2C_ERR;
    00160 2700      CLR	R16
    00161 C001      RJMP	0x0163
(0229) 	return I2C_CRR;	
    00162 E001      LDI	R16,1
    00163 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    00164 E884      LDI	R24,0x84
    00165 9380 0074 STS	0x74,R24
(0242) 	I2CWaitAck();
    00167 9020 0074 LDS	R2,0x74
    00169 FE27      SBRS	R2,7
    0016A CFFC      RJMP	0x0167
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    0016B 9180 0071 LDS	R24,0x71
    0016D 7F88      ANDI	R24,0xF8
    0016E 3588      CPI	R24,0x58
    0016F F011      BEQ	0x0172
(0244) 		return I2C_ERR;
    00170 2700      CLR	R16
    00171 C005      RJMP	0x0177
(0245) 	*pRdDat=TWDR;
    00172 9020 0073 LDS	R2,0x73
    00174 01F8      MOVW	R30,R16
    00175 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    00176 E001      LDI	R16,1
    00177 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    00178 EC84      LDI	R24,0xC4
    00179 9380 0074 STS	0x74,R24
(0259) 	I2CWaitAck();
    0017B 9020 0074 LDS	R2,0x74
    0017D FE27      SBRS	R2,7
    0017E CFFC      RJMP	0x017B
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    0017F 9180 0071 LDS	R24,0x71
    00181 7F88      ANDI	R24,0xF8
    00182 3580      CPI	R24,0x50
    00183 F011      BEQ	0x0186
(0261) 		return I2C_ERR;
    00184 2700      CLR	R16
    00185 C005      RJMP	0x018B
(0262) 	*pRdDat=TWDR;
    00186 9020 0073 LDS	R2,0x73
    00188 01F8      MOVW	R30,R16
    00189 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    0018A E001      LDI	R16,1
    0018B 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    0018C 940E 0640 CALL	push_xgset00FC
    0018E 2EC2      MOV	R12,R18
    0018F 0178      MOVW	R14,R16
    00190 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    00191 DF44      RCALL	_I2C_Start
    00192 2300      TST	R16
    00193 F411      BNE	0x0196
(0278) 		return I2C_ERR;
    00194 2700      CLR	R16
    00195 C018      RJMP	0x01AE
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    00196 0187      MOVW	R16,R14
    00197 DF70      RCALL	_I2C_SendWrDAdr_
    00198 2300      TST	R16
    00199 F411      BNE	0x019C
(0281) 		return I2C_ERR;
    0019A 2700      CLR	R16
    0019B C012      RJMP	0x01AE
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    0019C 2D0C      MOV	R16,R12
    0019D DFB4      RCALL	_I2C_SendDat
    0019E 2EC0      MOV	R12,R16
    0019F 2300      TST	R16
    001A0 F411      BNE	0x01A3
(0284) 		return I2C_ERR;
    001A1 2700      CLR	R16
    001A2 C00B      RJMP	0x01AE
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    001A3 2D0A      MOV	R16,R10
    001A4 DFAD      RCALL	_I2C_SendDat
    001A5 2EA0      MOV	R10,R16
    001A6 2300      TST	R16
    001A7 F411      BNE	0x01AA
(0287) 		return I2C_ERR;
    001A8 2700      CLR	R16
    001A9 C004      RJMP	0x01AE
(0288) 
(0289) 	I2C_Stop();
    001AA E984      LDI	R24,0x94
    001AB 9380 0074 STS	0x74,R24
(0290) 
(0291) 	return I2C_CRR;
    001AD E001      LDI	R16,1
    001AE 940C 0621 JMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    001B0 940E 063E CALL	push_xgset30FC
    001B2 2EE2      MOV	R14,R18
    001B3 01A8      MOVW	R20,R16
    001B4 84C8      LDD	R12,Y+8
    001B5 84AA      LDD	R10,Y+10
    001B6 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    001B7 DF1E      RCALL	_I2C_Start
    001B8 2300      TST	R16
    001B9 F411      BNE	0x01BC
(0324) 		return I2C_ERR;
    001BA 2700      CLR	R16
    001BB C025      RJMP	0x01E1
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001BC 018A      MOVW	R16,R20
    001BD DF4A      RCALL	_I2C_SendWrDAdr_
    001BE 2300      TST	R16
    001BF F411      BNE	0x01C2
(0327) 		return I2C_ERR;
    001C0 2700      CLR	R16
    001C1 C01F      RJMP	0x01E1
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001C2 2D0E      MOV	R16,R14
    001C3 DF8E      RCALL	_I2C_SendDat
    001C4 2EE0      MOV	R14,R16
    001C5 2300      TST	R16
    001C6 F411      BNE	0x01C9
(0330) 		return I2C_ERR;
    001C7 2700      CLR	R16
    001C8 C018      RJMP	0x01E1
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    001C9 DF1C      RCALL	_I2C_Restart
    001CA 2EE0      MOV	R14,R16
    001CB 2300      TST	R16
    001CC F411      BNE	0x01CF
(0333) 		return I2C_ERR;
    001CD 2700      CLR	R16
    001CE C012      RJMP	0x01E1
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001CF 2D0C      MOV	R16,R12
    001D0 DF54      RCALL	_I2C_SendRdDAdr
    001D1 2EC0      MOV	R12,R16
    001D2 2300      TST	R16
    001D3 F411      BNE	0x01D6
(0336) 		return I2C_ERR;
    001D4 2700      CLR	R16
    001D5 C00B      RJMP	0x01E1
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    001D6 0185      MOVW	R16,R10
    001D7 DF8C      RCALL	_I2C_RcvNAckDat
    001D8 2EA0      MOV	R10,R16
    001D9 2300      TST	R16
    001DA F411      BNE	0x01DD
(0339) 		return I2C_ERR;
    001DB 2700      CLR	R16
    001DC C004      RJMP	0x01E1
(0340) 
(0341) 	I2C_Stop();
    001DD E984      LDI	R24,0x94
    001DE 9380 0074 STS	0x74,R24
(0342) 
(0343) 	return I2C_CRR;
    001E0 E001      LDI	R16,1
    001E1 940C 0628 JMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    001E3 940E 063C CALL	push_xgsetF0FC
    001E5 2EE2      MOV	R14,R18
    001E6 01B8      MOVW	R22,R16
    001E7 84CA      LDD	R12,Y+10
    001E8 84AC      LDD	R10,Y+12
    001E9 84BD      LDD	R11,Y+13
    001EA 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    001EB DEEA      RCALL	_I2C_Start
    001EC 2300      TST	R16
    001ED F411      BNE	0x01F0
(0363) 		return I2C_ERR;
    001EE 2700      CLR	R16
    001EF C039      RJMP	0x0229
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001F0 018B      MOVW	R16,R22
    001F1 DF16      RCALL	_I2C_SendWrDAdr_
    001F2 2300      TST	R16
    001F3 F411      BNE	0x01F6
(0366) 		return I2C_ERR;
    001F4 2700      CLR	R16
    001F5 C033      RJMP	0x0229
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001F6 2D0E      MOV	R16,R14
    001F7 DF5A      RCALL	_I2C_SendDat
    001F8 2EE0      MOV	R14,R16
    001F9 2300      TST	R16
    001FA F411      BNE	0x01FD
(0369) 		return I2C_ERR;
    001FB 2700      CLR	R16
    001FC C02C      RJMP	0x0229
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    001FD DEE8      RCALL	_I2C_Restart
    001FE 2EE0      MOV	R14,R16
    001FF 2300      TST	R16
    00200 F411      BNE	0x0203
(0372) 		return I2C_ERR;
    00201 2700      CLR	R16
    00202 C026      RJMP	0x0229
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    00203 2D0C      MOV	R16,R12
    00204 DF20      RCALL	_I2C_SendRdDAdr
    00205 2EC0      MOV	R12,R16
    00206 2300      TST	R16
    00207 F411      BNE	0x020A
(0375) 		return I2C_ERR;
    00208 2700      CLR	R16
    00209 C01F      RJMP	0x0229
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    0020A 24CC      CLR	R12
    0020B C00B      RJMP	0x0217
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    0020C 2D0C      MOV	R16,R12
    0020D 2711      CLR	R17
    0020E 0D0A      ADD	R16,R10
    0020F 1D1B      ADC	R17,R11
    00210 DF67      RCALL	_I2C_RcvAckDat
    00211 2EE0      MOV	R14,R16
    00212 2300      TST	R16
    00213 F411      BNE	0x0216
(0379) 			return I2C_ERR;
    00214 2700      CLR	R16
    00215 C013      RJMP	0x0229
    00216 94C3      INC	R12
    00217 2F84      MOV	R24,R20
    00218 5081      SUBI	R24,1
    00219 16C8      CP	R12,R24
    0021A F388      BCS	0x020C
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    0021B 2D0C      MOV	R16,R12
    0021C 2711      CLR	R17
    0021D 0D0A      ADD	R16,R10
    0021E 1D1B      ADC	R17,R11
    0021F DF44      RCALL	_I2C_RcvNAckDat
    00220 2EA0      MOV	R10,R16
    00221 2300      TST	R16
    00222 F411      BNE	0x0225
(0382) 			return I2C_ERR;
    00223 2700      CLR	R16
    00224 C004      RJMP	0x0229
(0383) 
(0384) 	I2C_Stop();
    00225 E984      LDI	R24,0x94
    00226 9380 0074 STS	0x74,R24
(0385) 	
(0386) 	return I2C_CRR;
    00228 E001      LDI	R16,1
    00229 940C 0631 JMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    0022B 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    0022C C007      RJMP	0x0234
(0108)         for(j=0;j<70;j++)	
    0022D 2744      CLR	R20
    0022E C001      RJMP	0x0230
    0022F 9543      INC	R20
    00230 3446      CPI	R20,0x46
    00231 F3E8      BCS	0x022F
    00232 5001      SUBI	R16,1
    00233 4010      SBCI	R17,0
    00234 2422      CLR	R2
    00235 2433      CLR	R3
    00236 1620      CP	R2,R16
    00237 0631      CPC	R3,R17
    00238 F3A4      BLT	0x022D
    00239 9149      LD	R20,Y+
    0023A 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    0023B 934A      ST	-Y,R20
    0023C 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    0023D C013      RJMP	0x0251
(0123) 		for(i=0;i<52642;i++)
    0023E 2744      CLR	R20
    0023F 2755      CLR	R21
    00240 C002      RJMP	0x0243
    00241 5F4F      SUBI	R20,0xFF
    00242 4F5F      SBCI	R21,0xFF
    00243 EA82      LDI	R24,0xA2
    00244 EC9D      LDI	R25,0xCD
    00245 E0A0      LDI	R26,0
    00246 E0B0      LDI	R27,0
    00247 011A      MOVW	R2,R20
    00248 2444      CLR	R4
    00249 2455      CLR	R5
    0024A 1628      CP	R2,R24
    0024B 0639      CPC	R3,R25
    0024C 064A      CPC	R4,R26
    0024D 065B      CPC	R5,R27
    0024E F394      BLT	0x0241
    0024F 5001      SUBI	R16,1
    00250 4010      SBCI	R17,0
    00251 2422      CLR	R2
    00252 2433      CLR	R3
    00253 1620      CP	R2,R16
    00254 0631      CPC	R3,R17
    00255 F344      BLT	0x023E
    00256 9159      LD	R21,Y+
    00257 9149      LD	R20,Y+
    00258 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    00259 934A      ST	-Y,R20
    0025A 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    0025B 2744      CLR	R20
    0025C 2755      CLR	R21
    0025D C002      RJMP	0x0260
    0025E 5F4F      SUBI	R20,0xFF
    0025F 4F5F      SBCI	R21,0xFF
    00260 1740      CP	R20,R16
    00261 0751      CPC	R21,R17
    00262 F3D8      BCS	0x025E
    00263 9159      LD	R21,Y+
    00264 9149      LD	R20,Y+
    00265 9508      RET
FILE: D:\ICC_H\LCD12864_ST7920_.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 	                                                        
(0004) 目    的:   建立LCD12864_ST7920的串模式操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 	                                                                
(0008) 应用软件:   ICCAVR                                               
(0009) 	                                                                
(0010) 版    本:   Version 1.0
(0011) 	                                                                
(0012) 圆版时间:   2005-09-06
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) 
(0026) 
(0027) ----------------------------------------------------------------------
(0028) 入口参数说明：
(0029) mega128接口
(0030) 		 	  DVK500				 STK128+
(0031) 				CS		---------	  VCC
(0032) 				PSB	    ---------	  GND
(0033) 				SID		---------	  PB2
(0034) 				CLK		---------	  PB1	
(0035) 
(0036) ----------------------------------------------------------------------
(0037) 待定参数说明：
(0038) 	
(0039) 
(0040) ----------------------------------------------------------------------	
(0041) 对外变量说明：
(0042) 
(0043) ----------------------------------------------------------------------
(0044) 对外函数说明：
(0045) 
(0046) ----------------------------------------------------------------------
(0047) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0048) 
(0049) 
(0050) /*--------------------------------------------------------------------
(0051) 
(0052) --------------------------------------------------------------------*/
(0053) 
(0054) #ifndef LCD12864_ST7920_H
(0055) #define LCD12864_ST7920_H
(0056) 
(0057) #include "D:\ICC_H\CmmIcc.h"
(0058) 
(0059) void SPI_init()
(0060) {
(0061) 	DDRB |= 0x0F;
_SPI_init:
    00266 B387      IN	R24,0x17
    00267 608F      ORI	R24,0xF
    00268 BB87      OUT	0x17,R24
(0062) 	SPCR = 0x50;	//setup SPI
    00269 E580      LDI	R24,0x50
    0026A B98D      OUT	0x0D,R24
(0063) 	SPSR = 0x01;	//setup SPI
    0026B E081      LDI	R24,1
    0026C B98E      OUT	0x0E,R24
(0064) 	SEI();			
    0026D 9478      BSET	7
    0026E 9508      RET
(0065) }
(0066) 
(0067) void lcd_wrByte(uint8 data)
(0068) {  
(0069) 	SPDR = data;        
_lcd_wrByte:
  data                 --> R16
    0026F B90F      OUT	0x0F,R16
(0070) 	while ((SPSR & 0x80) == 0);  
    00270 9B77      SBIS	0x0E,7
    00271 CFFE      RJMP	0x0270
    00272 9508      RET
_lcd_wrCmd:
  LC                   --> R10
  HC                   --> R12
    00273 92AA      ST	-Y,R10
    00274 92CA      ST	-Y,R12
    00275 2EA2      MOV	R10,R18
    00276 2EC0      MOV	R12,R16
(0071) }
(0072) 
(0073) void lcd_wrCmd(uint8 HC,uint8 LC)
(0074) {
(0075) 	lcd_wrByte(0xF8);
    00277 EF08      LDI	R16,0xF8
    00278 DFF6      RCALL	_lcd_wrByte
(0076) 	lcd_wrByte(HC);		//传输高四位
    00279 2D0C      MOV	R16,R12
    0027A DFF4      RCALL	_lcd_wrByte
(0077) 	lcd_wrByte(LC);		//传输低四位
    0027B 2D0A      MOV	R16,R10
    0027C DFF2      RCALL	_lcd_wrByte
    0027D 90C9      LD	R12,Y+
    0027E 90A9      LD	R10,Y+
    0027F 9508      RET
_lcd_wrDat:
  LD                   --> R10
  HD                   --> R12
    00280 92AA      ST	-Y,R10
    00281 92CA      ST	-Y,R12
    00282 2EA2      MOV	R10,R18
    00283 2EC0      MOV	R12,R16
(0078) }
(0079) 
(0080) void lcd_wrDat(uint8 HD,uint8 LD)
(0081) {
(0082) 	lcd_wrByte(0xFA);
    00284 EF0A      LDI	R16,0xFA
    00285 DFE9      RCALL	_lcd_wrByte
(0083) 	lcd_wrByte(HD);		//传输高四位
    00286 2D0C      MOV	R16,R12
    00287 DFE7      RCALL	_lcd_wrByte
(0084) 	lcd_wrByte(LD);		//传输低四位
    00288 2D0A      MOV	R16,R10
    00289 DFE5      RCALL	_lcd_wrByte
    0028A 90C9      LD	R12,Y+
    0028B 90A9      LD	R10,Y+
    0028C 9508      RET
_lcd_set_xy:
  adr                  --> R20
  y                    --> R22
  x                    --> R10
    0028D 940E 0647 CALL	push_xgsetF00C
    0028F 2F62      MOV	R22,R18
    00290 2EA0      MOV	R10,R16
(0085) } 
(0086) 
(0087) /*
(0088) x表示在第几行显示，y表示在第几列显示
(0089) */
(0090) void lcd_set_xy(uint8 x,uint8 y) 
(0091) {
(0092) 	uint8 adr;
(0093) 
(0094) 	switch(x)
    00291 24BB      CLR	R11
    00292 01C5      MOVW	R24,R10
    00293 3081      CPI	R24,1
    00294 E0E0      LDI	R30,0
    00295 079E      CPC	R25,R30
    00296 F069      BEQ	0x02A4
    00297 3082      CPI	R24,2
    00298 E0E0      LDI	R30,0
    00299 079E      CPC	R25,R30
    0029A F061      BEQ	0x02A7
    0029B 3083      CPI	R24,3
    0029C E0E0      LDI	R30,0
    0029D 079E      CPC	R25,R30
    0029E F059      BEQ	0x02AA
    0029F 3084      CPI	R24,4
    002A0 E0E0      LDI	R30,0
    002A1 079E      CPC	R25,R30
    002A2 F051      BEQ	0x02AD
    002A3 C00B      RJMP	0x02AF
(0095) 	{
(0096) 	case 1: adr = 0x7F + y;
    002A4 2F46      MOV	R20,R22
    002A5 5841      SUBI	R20,0x81
(0097) 		break;		//在第1行y列显示
    002A6 C008      RJMP	0x02AF
(0098) 	case 2: adr = 0x8F + y;
    002A7 2F46      MOV	R20,R22
    002A8 5741      SUBI	R20,0x71
(0099) 		break;		//在第2行y列显示
    002A9 C005      RJMP	0x02AF
(0100) 	case 3: adr = 0x87 + y;
    002AA 2F46      MOV	R20,R22
    002AB 5749      SUBI	R20,0x79
(0101) 		break;		//在第3行y列显示
    002AC C002      RJMP	0x02AF
(0102) 	case 4: adr = 0x97 + y;
    002AD 2F46      MOV	R20,R22
    002AE 5649      SUBI	R20,0x69
(0103) 		break;		//在第4行y列显示
(0104) 	default:	;
(0105) 	}
(0106) 	lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
    002AF 2F24      MOV	R18,R20
    002B0 702F      ANDI	R18,0xF
    002B1 702F      ANDI	R18,0xF
    002B2 9522      SWAP	R18
    002B3 2F04      MOV	R16,R20
    002B4 7F00      ANDI	R16,0xF0
    002B5 DFBD      RCALL	_lcd_wrCmd
    002B6 940C 064E JMP	pop_xgsetF00C
_lcd_putc:
  ch                   --> R20
  y                    --> R12
  x                    --> R10
    002B8 940E 0655 CALL	push_xgset303C
    002BA 2EC2      MOV	R12,R18
    002BB 2EA0      MOV	R10,R16
    002BC 814E      LDD	R20,Y+6
(0107) }
(0108) 
(0109) void lcd_putc(uint8 x,uint8 y,uint8 ch)
(0110) {
(0111) 	lcd_set_xy(x,y);
    002BD 2D2C      MOV	R18,R12
    002BE 2D0A      MOV	R16,R10
    002BF DFCD      RCALL	_lcd_set_xy
(0112) 	delay50us(20); 
    002C0 E104      LDI	R16,0x14
    002C1 E010      LDI	R17,0
    002C2 DF68      RCALL	_delay50us
(0113) 	lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
    002C3 2F24      MOV	R18,R20
    002C4 702F      ANDI	R18,0xF
    002C5 702F      ANDI	R18,0xF
    002C6 9522      SWAP	R18
    002C7 2F04      MOV	R16,R20
    002C8 7F00      ANDI	R16,0xF0
    002C9 DFB6      RCALL	_lcd_wrDat
    002CA 940C 065C JMP	pop_xgset303C
_lcd_putd0:
  i                    --> R20
  length               --> R20
  dat                  --> Y,+7
  y                    --> R12
  x                    --> R10
    002CC 940E 0655 CALL	push_xgset303C
    002CE 2EC2      MOV	R12,R18
    002CF 2EA0      MOV	R10,R16
    002D0 9721      SBIW	R28,1
    002D1 854B      LDD	R20,Y+11
(0114) }
(0115) 
(0116) void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
(0117) {
(0118) 	sint8 i;
(0119) 
(0120) 	speaData(dat,length);
    002D2 8348      ST	Y,R20
    002D3 810F      LDD	R16,Y+7
    002D4 8518      LDD	R17,Y+8
    002D5 8529      LDD	R18,Y+9
    002D6 853A      LDD	R19,Y+10
    002D7 DDA5      RCALL	_speaData
(0121) 	lcd_set_xy(x,y);
    002D8 2D2C      MOV	R18,R12
    002D9 2D0A      MOV	R16,R10
    002DA DFB2      RCALL	_lcd_set_xy
(0122) 	delay50us(40);
    002DB E208      LDI	R16,0x28
    002DC E010      LDI	R17,0
    002DD DF4D      RCALL	_delay50us
(0123) 	for(i=length-1;i>=0;i--)
    002DE 5041      SUBI	R20,1
    002DF C01E      RJMP	0x02FE
(0124) 	{
(0125) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    002E0 E287      LDI	R24,0x27
    002E1 E091      LDI	R25,1
    002E2 2FE4      MOV	R30,R20
    002E3 27FF      CLR	R31
    002E4 FDE7      SBRC	R30,7
    002E5 95F0      COM	R31
    002E6 0FE8      ADD	R30,R24
    002E7 1FF9      ADC	R31,R25
    002E8 8180      LD	R24,Z
    002E9 2799      CLR	R25
    002EA 96C0      ADIW	R24,0x30
    002EB 019C      MOVW	R18,R24
    002EC 702F      ANDI	R18,0xF
    002ED 7030      ANDI	R19,0
    002EE 0F22      LSL	R18
    002EF 1F33      ROL	R19
    002F0 0F22      LSL	R18
    002F1 1F33      ROL	R19
    002F2 0F22      LSL	R18
    002F3 1F33      ROL	R19
    002F4 0F22      LSL	R18
    002F5 1F33      ROL	R19
    002F6 018C      MOVW	R16,R24
    002F7 7F00      ANDI	R16,0xF0
    002F8 7010      ANDI	R17,0
    002F9 DF86      RCALL	_lcd_wrDat
(0126) 		delay50us(40); 
    002FA E208      LDI	R16,0x28
    002FB E010      LDI	R17,0
    002FC DF2E      RCALL	_delay50us
    002FD 954A      DEC	R20
    002FE 3040      CPI	R20,0
    002FF F704      BGE	0x02E0
    00300 9621      ADIW	R28,1
    00301 940C 065C JMP	pop_xgset303C
_lcd_putd:
  effectLen            --> R22
  i                    --> R20
  length               --> R10
  dat                  --> Y,+11
  y                    --> R14
  x                    --> R12
    00303 940E 063C CALL	push_xgsetF0FC
    00305 2EE2      MOV	R14,R18
    00306 2EC0      MOV	R12,R16
    00307 9721      SBIW	R28,1
    00308 84AF      LDD	R10,Y+15
(0127) 	}
(0128) }
(0129) 
(0130) void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
(0131) {
(0132) 	sint8 i;
(0133) 	sint8 effectLen;
(0134) 
(0135) 	if(dat>999999)
    00309 E38F      LDI	R24,0x3F
    0030A E492      LDI	R25,0x42
    0030B E0AF      LDI	R26,0xF
    0030C E0B0      LDI	R27,0
    0030D 842B      LDD	R2,Y+11
    0030E 843C      LDD	R3,Y+12
    0030F 844D      LDD	R4,Y+13
    00310 845E      LDD	R5,Y+14
    00311 1582      CP	R24,R2
    00312 0593      CPC	R25,R3
    00313 05A4      CPC	R26,R4
    00314 05B5      CPC	R27,R5
    00315 F410      BCC	0x0318
(0136) 		effectLen=7;
    00316 E067      LDI	R22,7
    00317 C04C      RJMP	0x0364
(0137) 	else if(dat>99999)
    00318 E98F      LDI	R24,0x9F
    00319 E896      LDI	R25,0x86
    0031A E0A1      LDI	R26,1
    0031B E0B0      LDI	R27,0
    0031C 842B      LDD	R2,Y+11
    0031D 843C      LDD	R3,Y+12
    0031E 844D      LDD	R4,Y+13
    0031F 845E      LDD	R5,Y+14
    00320 1582      CP	R24,R2
    00321 0593      CPC	R25,R3
    00322 05A4      CPC	R26,R4
    00323 05B5      CPC	R27,R5
    00324 F410      BCC	0x0327
(0138) 		effectLen=6;
    00325 E066      LDI	R22,6
    00326 C03D      RJMP	0x0364
(0139) 	else if(dat>9999)
    00327 E08F      LDI	R24,0xF
    00328 E297      LDI	R25,0x27
    00329 E0A0      LDI	R26,0
    0032A E0B0      LDI	R27,0
    0032B 842B      LDD	R2,Y+11
    0032C 843C      LDD	R3,Y+12
    0032D 844D      LDD	R4,Y+13
    0032E 845E      LDD	R5,Y+14
    0032F 1582      CP	R24,R2
    00330 0593      CPC	R25,R3
    00331 05A4      CPC	R26,R4
    00332 05B5      CPC	R27,R5
    00333 F410      BCC	0x0336
(0140) 		effectLen=5;
    00334 E065      LDI	R22,5
    00335 C02E      RJMP	0x0364
(0141) 	else if(dat>999)
    00336 EE87      LDI	R24,0xE7
    00337 E093      LDI	R25,3
    00338 E0A0      LDI	R26,0
    00339 E0B0      LDI	R27,0
    0033A 842B      LDD	R2,Y+11
    0033B 843C      LDD	R3,Y+12
    0033C 844D      LDD	R4,Y+13
    0033D 845E      LDD	R5,Y+14
    0033E 1582      CP	R24,R2
    0033F 0593      CPC	R25,R3
    00340 05A4      CPC	R26,R4
    00341 05B5      CPC	R27,R5
    00342 F410      BCC	0x0345
(0142) 		effectLen=4;
    00343 E064      LDI	R22,4
    00344 C01F      RJMP	0x0364
(0143) 	else if(dat>99)
    00345 E683      LDI	R24,0x63
    00346 E090      LDI	R25,0
    00347 E0A0      LDI	R26,0
    00348 E0B0      LDI	R27,0
    00349 842B      LDD	R2,Y+11
    0034A 843C      LDD	R3,Y+12
    0034B 844D      LDD	R4,Y+13
    0034C 845E      LDD	R5,Y+14
    0034D 1582      CP	R24,R2
    0034E 0593      CPC	R25,R3
    0034F 05A4      CPC	R26,R4
    00350 05B5      CPC	R27,R5
    00351 F410      BCC	0x0354
(0144) 		effectLen=3;
    00352 E063      LDI	R22,3
    00353 C010      RJMP	0x0364
(0145) 	else if(dat>9)
    00354 E089      LDI	R24,0x9
    00355 E090      LDI	R25,0
    00356 E0A0      LDI	R26,0
    00357 E0B0      LDI	R27,0
    00358 842B      LDD	R2,Y+11
    00359 843C      LDD	R3,Y+12
    0035A 844D      LDD	R4,Y+13
    0035B 845E      LDD	R5,Y+14
    0035C 1582      CP	R24,R2
    0035D 0593      CPC	R25,R3
    0035E 05A4      CPC	R26,R4
    0035F 05B5      CPC	R27,R5
    00360 F410      BCC	0x0363
(0146) 		effectLen=2;
    00361 E062      LDI	R22,2
    00362 C001      RJMP	0x0364
(0147) 	else
(0148) 		effectLen=1;
    00363 E061      LDI	R22,1
(0149) 	speaData(dat,effectLen);
    00364 8368      ST	Y,R22
    00365 850B      LDD	R16,Y+11
    00366 851C      LDD	R17,Y+12
    00367 852D      LDD	R18,Y+13
    00368 853E      LDD	R19,Y+14
    00369 DD13      RCALL	_speaData
(0150) 
(0151) 	lcd_set_xy(x,y);
    0036A 2D2E      MOV	R18,R14
    0036B 2D0C      MOV	R16,R12
    0036C DF20      RCALL	_lcd_set_xy
(0152) 	delay50us(40); 
    0036D E208      LDI	R16,0x28
    0036E E010      LDI	R17,0
    0036F DEBB      RCALL	_delay50us
(0153) 	if(length>effectLen)
    00370 2E26      MOV	R2,R22
    00371 2433      CLR	R3
    00372 FC27      SBRC	R2,7
    00373 9430      COM	R3
    00374 2C4A      MOV	R4,R10
    00375 2455      CLR	R5
    00376 1424      CP	R2,R4
    00377 0435      CPC	R3,R5
    00378 F46C      BGE	0x0386
(0154) 	{
(0155) 		for(i=length-effectLen-1;i>=0;i--)
    00379 2D44      MOV	R20,R4
    0037A 1B46      SUB	R20,R22
    0037B 5041      SUBI	R20,1
    0037C C007      RJMP	0x0384
(0156) 		{
(0157) 			lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
    0037D 2722      CLR	R18
    0037E E200      LDI	R16,0x20
    0037F DF00      RCALL	_lcd_wrDat
(0158) 			delay50us(40); 
    00380 E208      LDI	R16,0x28
    00381 E010      LDI	R17,0
    00382 DEA8      RCALL	_delay50us
    00383 954A      DEC	R20
    00384 3040      CPI	R20,0
    00385 F7BC      BGE	0x037D
(0159) 		}
(0160) 	}
(0161) 	for(i=effectLen-1;i>=0;i--)
    00386 2F46      MOV	R20,R22
    00387 5041      SUBI	R20,1
    00388 C01E      RJMP	0x03A7
(0162) 	{
(0163) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    00389 E287      LDI	R24,0x27
    0038A E091      LDI	R25,1
    0038B 2FE4      MOV	R30,R20
    0038C 27FF      CLR	R31
    0038D FDE7      SBRC	R30,7
    0038E 95F0      COM	R31
    0038F 0FE8      ADD	R30,R24
    00390 1FF9      ADC	R31,R25
    00391 8180      LD	R24,Z
    00392 2799      CLR	R25
    00393 96C0      ADIW	R24,0x30
    00394 019C      MOVW	R18,R24
    00395 702F      ANDI	R18,0xF
    00396 7030      ANDI	R19,0
    00397 0F22      LSL	R18
    00398 1F33      ROL	R19
    00399 0F22      LSL	R18
    0039A 1F33      ROL	R19
    0039B 0F22      LSL	R18
    0039C 1F33      ROL	R19
    0039D 0F22      LSL	R18
    0039E 1F33      ROL	R19
    0039F 018C      MOVW	R16,R24
    003A0 7F00      ANDI	R16,0xF0
    003A1 7010      ANDI	R17,0
    003A2 DEDD      RCALL	_lcd_wrDat
(0164) 		delay50us(40);
    003A3 E208      LDI	R16,0x28
    003A4 E010      LDI	R17,0
    003A5 DE85      RCALL	_delay50us
    003A6 954A      DEC	R20
    003A7 3040      CPI	R20,0
    003A8 F704      BGE	0x0389
    003A9 9621      ADIW	R28,1
    003AA 940C 0631 JMP	pop_xgsetF0FC
_lcd_puts:
  str                  --> R20
  y                    --> R12
  x                    --> R10
    003AC 940E 0655 CALL	push_xgset303C
    003AE 2EC2      MOV	R12,R18
    003AF 2EA0      MOV	R10,R16
    003B0 814E      LDD	R20,Y+6
    003B1 815F      LDD	R21,Y+7
(0165) 	}
(0166) }
(0167) 
(0168) void lcd_puts(uint8 x,uint8 y,uint8 *str)
(0169) { 
(0170) 	lcd_set_xy(x,y);
    003B2 2D2C      MOV	R18,R12
    003B3 2D0A      MOV	R16,R10
    003B4 DED8      RCALL	_lcd_set_xy
(0171) 	delay50us(20);   
    003B5 E104      LDI	R16,0x14
    003B6 E010      LDI	R17,0
    003B7 DE73      RCALL	_delay50us
    003B8 C00F      RJMP	0x03C8
(0172) 	while(*str)
(0173) 	{
(0174) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    003B9 01FA      MOVW	R30,R20
    003BA 8020      LD	R2,Z
    003BB 2433      CLR	R3
    003BC 2D22      MOV	R18,R2
    003BD 702F      ANDI	R18,0xF
    003BE 702F      ANDI	R18,0xF
    003BF 9522      SWAP	R18
    003C0 2D02      MOV	R16,R2
    003C1 7F00      ANDI	R16,0xF0
    003C2 DEBD      RCALL	_lcd_wrDat
(0175) 		str++;
    003C3 5F4F      SUBI	R20,0xFF
    003C4 4F5F      SBCI	R21,0xFF
(0176) 		delay50us(20);
    003C5 E104      LDI	R16,0x14
    003C6 E010      LDI	R17,0
    003C7 DE63      RCALL	_delay50us
    003C8 01FA      MOVW	R30,R20
    003C9 8020      LD	R2,Z
    003CA 2022      TST	R2
    003CB F769      BNE	0x03B9
    003CC 940C 065C JMP	pop_xgset303C
_lcd_puts_:
  dlyMs                --> R10
  str                  --> R20
  y                    --> R14
  x                    --> R12
    003CE 940E 063E CALL	push_xgset30FC
    003D0 2EE2      MOV	R14,R18
    003D1 2EC0      MOV	R12,R16
    003D2 8548      LDD	R20,Y+8
    003D3 8559      LDD	R21,Y+9
    003D4 84AA      LDD	R10,Y+10
(0177) 	} 
(0178) }
(0179) 
(0180) void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
(0181) { 
(0182) 	lcd_set_xy(x,y);
    003D5 2D2E      MOV	R18,R14
    003D6 2D0C      MOV	R16,R12
    003D7 DEB5      RCALL	_lcd_set_xy
(0183) 	delay50us(20);   
    003D8 E104      LDI	R16,0x14
    003D9 E010      LDI	R17,0
    003DA DE50      RCALL	_delay50us
    003DB C00F      RJMP	0x03EB
(0184) 	while(*str)
(0185) 	{
(0186) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    003DC 01FA      MOVW	R30,R20
    003DD 8020      LD	R2,Z
    003DE 2433      CLR	R3
    003DF 2D22      MOV	R18,R2
    003E0 702F      ANDI	R18,0xF
    003E1 702F      ANDI	R18,0xF
    003E2 9522      SWAP	R18
    003E3 2D02      MOV	R16,R2
    003E4 7F00      ANDI	R16,0xF0
    003E5 DE9A      RCALL	_lcd_wrDat
(0187) 		str++;
    003E6 5F4F      SUBI	R20,0xFF
    003E7 4F5F      SBCI	R21,0xFF
(0188) 		delay50ms(dlyMs);
    003E8 2D0A      MOV	R16,R10
    003E9 2711      CLR	R17
    003EA DE50      RCALL	_delay50ms
    003EB 01FA      MOVW	R30,R20
    003EC 8020      LD	R2,Z
    003ED 2022      TST	R2
    003EE F769      BNE	0x03DC
    003EF 940C 0628 JMP	pop_xgset30FC
(0189) 	} 
(0190) }
(0191) 
(0192) void lcd_clr()
(0193) {
(0194) 	lcd_wrCmd(0x00,0x10);
_lcd_clr:
    003F1 E120      LDI	R18,0x10
    003F2 2700      CLR	R16
    003F3 DE7F      RCALL	_lcd_wrCmd
(0195) 	delay50us(200);
    003F4 EC08      LDI	R16,0xC8
    003F5 E010      LDI	R17,0
    003F6 CE34      RJMP	_delay50us
(0196) }
(0197) 
(0198) void lcd_init(void)
(0199) {
(0200) 	SPI_init();	
_lcd_init:
    003F7 DE6E      RCALL	_SPI_init
(0201) 	//OUT_LCD_CS;		//若LCD_CS
(0202) 	//SET_LCD_CS;		
(0203) 	delay50ms(1);
    003F8 E001      LDI	R16,1
    003F9 E010      LDI	R17,0
    003FA DE40      RCALL	_delay50ms
(0204) 	lcd_wrCmd(0x30,0x30);	//使用8位控制界面,使用基本指令集
    003FB E320      LDI	R18,0x30
    003FC E300      LDI	R16,0x30
    003FD DE75      RCALL	_lcd_wrCmd
(0205) 	//lcd_wrCmd(0x00,0xF0);	//整体显示ON
(0206) 	lcd_wrCmd(0x00,0xC0);	//整体显示ON
    003FE EC20      LDI	R18,0xC0
    003FF 2700      CLR	R16
    00400 DE72      RCALL	_lcd_wrCmd
(0207) 	lcd_wrCmd(0x00,0x10);	//清屏
    00401 E120      LDI	R18,0x10
    00402 2700      CLR	R16
    00403 DE6F      RCALL	_lcd_wrCmd
(0208) 	//lcd_wrCmd(0x10,0x00);	//光标
(0209) 	lcd_wrCmd(0x00,0x60);
    00404 E620      LDI	R18,0x60
    00405 2700      CLR	R16
    00406 DE6C      RCALL	_lcd_wrCmd
(0210) 	//lcd_wrCmd(0x00,0x70);	//显示右移
(0211) 	delay50ms(1);		//不可省去！！！
    00407 E001      LDI	R16,1
    00408 E010      LDI	R17,0
    00409 CE31      RJMP	_delay50ms
_WriteAByte:
  dat                  --> R12
  wordAdr              --> R10
    0040A 92AA      ST	-Y,R10
    0040B 92CA      ST	-Y,R12
    0040C 2EC2      MOV	R12,R18
    0040D 2EA0      MOV	R10,R16
    0040E 9721      SBIW	R28,1
FILE: D:\ICC_H\PCF8563.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立PCF8563操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 	//#define WR_DADR	0xA2	//器件地址：A2 A1 A0 = 0 0 0
(0028) 	//#define RD_DADR	0xA3	//器件地址：A2 A1 A0 = 0 0 0
(0029) 
(0030) ----------------------------------------------------------------------
(0031) 待定参数说明：
(0032) 
(0033) ----------------------------------------------------------------------	
(0034) 对外变量说明：
(0035) 
(0036) ----------------------------------------------------------------------
(0037) 对外函数说明：
(0038) 
(0039) ----------------------------------------------------------------------
(0040) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0041) 
(0042) #ifndef PCF8563_H
(0043) #define PCF8563_H
(0044) 
(0045) #include "D:\ICC_H\CmmICC.H"
(0046) #include "D:\ICC_H\I2C.H"
(0047) 
(0048) //器件地址：A0 A1 A2 = 0 0 0
(0049) #ifndef WR_DADR 
(0050) 	#define WR_DADR		0xA2	//write device-address 
(0051) #endif
(0052) #ifndef RD_DADR 
(0053) 	#define RD_DADR		0xA3	//read device-address
(0054) #endif
(0055) 
(0056) #define CTRL_BUF1		0x00
(0057) #define CTRL_BUF2		0x01
(0058) 
(0059) #define SECOND_DATA_BUF	0x02
(0060) #define MINUTE_DATA_BUF	0x03
(0061) #define HOUR_DATA_BUF	0x04
(0062) 
(0063) #define DAY_DATA_BUF	0x05
(0064) #define WEEK_DATA_BUF	0x06
(0065) #define MONTH_DATA_BUF	0x07
(0066) #define YEAR_DATA_BUF	0x08
(0067) 
(0068) #define MINUTE_AE_BUF	0x09
(0069) #define HOUR_AE_BUF		0x0A
(0070) #define DAY_AE_BUF		0x0B
(0071) #define WEEK_AE_BUF		0x0C
(0072) 
(0073) #define CLK_FRQ_BUF		0x0D
(0074) #define TIMER_CTRL_BUF	0x0E
(0075) #define COUNT_VAL_BUF	0x0F
(0076) 
(0077) #define PCF8563_ERR		0
(0078) #define PCF8563_CRR		1
(0079) 
(0080) /*--------------------------------------------------------------------
(0081) 函数名称：
(0082) 函数功能：写 1个 Byte 到相应的寄存器
(0083) 注意事项：
(0084) 提示说明：
(0085) 输    入：
(0086) 返    回：
(0087) --------------------------------------------------------------------*/
(0088) bool WriteAByte(uint8 wordAdr,uint8 dat)
(0089) {
(0090) 	if( I2C_Write(WR_DADR,wordAdr,dat)==I2C_ERR )
    0040F 82C8      ST	Y,R12
    00410 2D2A      MOV	R18,R10
    00411 EA02      LDI	R16,0xA2
    00412 E010      LDI	R17,0
    00413 DD78      RCALL	_I2C_Write
    00414 2300      TST	R16
    00415 F411      BNE	0x0418
(0091) 		return I2C_ERR;
    00416 2700      CLR	R16
    00417 C001      RJMP	0x0419
(0092) 	return I2C_CRR;
    00418 E001      LDI	R16,1
    00419 9621      ADIW	R28,1
    0041A 90C9      LD	R12,Y+
    0041B 90A9      LD	R10,Y+
    0041C 9508      RET
_ReadNByte:
  num                  --> R14
  pRdDat               --> R12
  wordAdr              --> R10
    0041D 940E 0640 CALL	push_xgset00FC
    0041F 0169      MOVW	R12,R18
    00420 2EA0      MOV	R10,R16
    00421 9725      SBIW	R28,5
    00422 84EB      LDD	R14,Y+11
(0093) }
(0094) /*--------------------------------------------------------------------
(0095) 函数名称：
(0096) 函数功能：写 N个 Byte 到相应的寄存器
(0097) 注意事项：
(0098) 提示说明：
(0099) 输    入：
(0100) 返    回：
(0101) --------------------------------------------------------------------*/
(0102) //void WriteNByte(uint8 wordAdr,uint8 num,uint8 *pWrDat)
(0103) //{
(0104) //
(0105) //}
(0106) /*--------------------------------------------------------------------
(0107) 函数名称：
(0108) 函数功能：读 1个 Byte 到相应的寄存器
(0109) 注意事项：
(0110) 提示说明：
(0111) 输    入：
(0112) 返    回：
(0113) --------------------------------------------------------------------*/
(0114) //void ReadAByte(uint8 wordAdr,uint8 *pRdDat) 
(0115) //{  
(0116) //	I2C_Start();
(0117) //
(0118) //	I2C_SendByte(WR_DADR); 			
(0119) //	I2C_WaitAck();
(0120) //
(0121) //	I2C_SendByte(wordAdr); 			
(0122) //	I2C_WaitAck();
(0123) //
(0124) //	I2C_Start();
(0125) //
(0126) //	I2C_SendByte(RD_DADR);			
(0127) //	I2C_WaitAck();
(0128) //
(0129) //	I2C_RcvByte(pRdDat);
(0130) //	I2C_SendNoAck();
(0131) //
(0132) //	I2C_Stop();
(0133) //}
(0134) /*--------------------------------------------------------------------
(0135) 函数名称：
(0136) 函数功能：读 N个 Byte 到相应的寄存器
(0137) 注意事项：
(0138) 提示说明：
(0139) 输    入：
(0140) 返    回：
(0141) --------------------------------------------------------------------*/
(0142) bool ReadNByte(uint8 wordAdr,uint8 *pRdDat,uint8 num)
(0143) {  
(0144) 	if( I2C_Read_(WR_DADR,wordAdr,RD_DADR,pRdDat,num)==I2C_ERR )
    00423 82EC      STD	Y+4,R14
    00424 82DB      STD	Y+3,R13
    00425 82CA      STD	Y+2,R12
    00426 EA83      LDI	R24,0xA3
    00427 8388      ST	Y,R24
    00428 2D2A      MOV	R18,R10
    00429 EA02      LDI	R16,0xA2
    0042A E010      LDI	R17,0
    0042B DDB7      RCALL	_I2C_Read_
    0042C 2300      TST	R16
    0042D F411      BNE	0x0430
(0145) 		return I2C_ERR;
    0042E 2700      CLR	R16
    0042F C001      RJMP	0x0431
(0146) 	return I2C_CRR;
    00430 E001      LDI	R16,1
    00431 9625      ADIW	R28,5
    00432 940C 0621 JMP	pop_xgset00FC
_PCF8563_getTime:
  buf                  --> R20
    00434 940E 0647 CALL	push_xgsetF00C
    00436 01A8      MOVW	R20,R16
    00437 9721      SBIW	R28,1
(0147) }
(0148) /*--------------------------------------------------------------------
(0149) 函数名称：
(0150) 函数功能：获取PCF8563的时间
(0151) 注意事项：
(0152) 提示说明：
(0153) 输    入：
(0154) 返    回：
(0155) --------------------------------------------------------------------*/
(0156) void PCF8563_getTime(uint8 *buf)
(0157) {
(0158) ReadAgain:    
(0159) 	ReadNByte(SECOND_DATA_BUF,buf,3);
    00438 E083      LDI	R24,3
    00439 8388      ST	Y,R24
    0043A 019A      MOVW	R18,R20
    0043B E002      LDI	R16,2
    0043C DFE0      RCALL	_ReadNByte
(0160) 	buf[0]=buf[0]&0x7f;		//get second data
    0043D 01FA      MOVW	R30,R20
    0043E 8180      LD	R24,Z
    0043F 778F      ANDI	R24,0x7F
    00440 8380      ST	Z,R24
(0161) 	if(buf[0]==0)
    00441 8020      LD	R2,Z
    00442 2022      TST	R2
    00443 F409      BNE	0x0445
(0162) 		goto ReadAgain;		//if "second==0"，read again for avoid mistake
    00444 CFF3      RJMP	0x0438
(0163) 	buf[1]=buf[1]&0x7f;		//get minute data
    00445 01CA      MOVW	R24,R20
    00446 9601      ADIW	R24,1
    00447 01FC      MOVW	R30,R24
    00448 8180      LD	R24,Z
    00449 778F      ANDI	R24,0x7F
    0044A 8380      ST	Z,R24
(0164) 	buf[2]=buf[2]&0x3f;		//get hour data
    0044B 01CA      MOVW	R24,R20
    0044C 9602      ADIW	R24,2
    0044D 01FC      MOVW	R30,R24
    0044E 8180      LD	R24,Z
    0044F 738F      ANDI	R24,0x3F
    00450 8380      ST	Z,R24
(0165) 
(0166) 	buf[0]=changeHexToInt(buf[0]);
    00451 01FA      MOVW	R30,R20
    00452 80A0      LD	R10,Z
    00453 24BB      CLR	R11
    00454 E110      LDI	R17,0x10
    00455 2D0A      MOV	R16,R10
    00456 940E 05D5 CALL	mod8u
    00458 2E20      MOV	R2,R16
    00459 2D1A      MOV	R17,R10
    0045A 9512      SWAP	R17
    0045B 701F      ANDI	R17,0xF
    0045C E00A      LDI	R16,0xA
    0045D 0301      MULSU	R16,R17
    0045E 2C30      MOV	R3,R0
    0045F 0C32      ADD	R3,R2
    00460 01FA      MOVW	R30,R20
    00461 8230      ST	Z,R3
(0167) 	buf[1]=changeHexToInt(buf[1]);
    00462 01BF      MOVW	R22,R30
    00463 5F6F      SUBI	R22,0xFF
    00464 4F7F      SBCI	R23,0xFF
    00465 01FB      MOVW	R30,R22
    00466 80A0      LD	R10,Z
    00467 24BB      CLR	R11
    00468 E110      LDI	R17,0x10
    00469 2D0A      MOV	R16,R10
    0046A 940E 05D5 CALL	mod8u
    0046C 2E20      MOV	R2,R16
    0046D 2D1A      MOV	R17,R10
    0046E 9512      SWAP	R17
    0046F 701F      ANDI	R17,0xF
    00470 E00A      LDI	R16,0xA
    00471 0301      MULSU	R16,R17
    00472 2C30      MOV	R3,R0
    00473 0C32      ADD	R3,R2
    00474 01FB      MOVW	R30,R22
    00475 8230      ST	Z,R3
(0168) 	buf[2]=changeHexToInt(buf[2]);
    00476 5F4E      SUBI	R20,0xFE
    00477 4F5F      SBCI	R21,0xFF
    00478 01FA      MOVW	R30,R20
    00479 80A0      LD	R10,Z
    0047A 24BB      CLR	R11
    0047B E110      LDI	R17,0x10
    0047C 2D0A      MOV	R16,R10
    0047D 940E 05D5 CALL	mod8u
    0047F 2E20      MOV	R2,R16
    00480 2D1A      MOV	R17,R10
    00481 9512      SWAP	R17
    00482 701F      ANDI	R17,0xF
    00483 E00A      LDI	R16,0xA
    00484 0301      MULSU	R16,R17
    00485 2C30      MOV	R3,R0
    00486 0C32      ADD	R3,R2
    00487 01FA      MOVW	R30,R20
    00488 8230      ST	Z,R3
    00489 9621      ADIW	R28,1
    0048A 940C 064E JMP	pop_xgsetF00C
_PCF8563_setTime:
  second               --> R10
  minute               --> R12
  hour                 --> R14
    0048C 940E 0640 CALL	push_xgset00FC
    0048E 2EC2      MOV	R12,R18
    0048F 2EE0      MOV	R14,R16
    00490 80AE      LDD	R10,Y+6
(0169) }
(0170) /*--------------------------------------------------------------------
(0171) 函数名称：
(0172) 函数功能：设置PCF8563的时间
(0173) 注意事项：
(0174) 提示说明：
(0175) 输    入：
(0176) 返    回：
(0177) --------------------------------------------------------------------*/
(0178) void PCF8563_setTime(uint8 hour,uint8 minute,uint8 second)
(0179) {
(0180) 	hour=changeIntToHex(hour);		//将数据的Dex格式转换为Hex格式
    00491 E01A      LDI	R17,0xA
    00492 2D0E      MOV	R16,R14
    00493 940E 05D5 CALL	mod8u
    00495 2E20      MOV	R2,R16
    00496 E01A      LDI	R17,0xA
    00497 2D0E      MOV	R16,R14
    00498 940E 05D7 CALL	div8u
    0049A 2F80      MOV	R24,R16
    0049B 708F      ANDI	R24,0xF
    0049C 9582      SWAP	R24
    0049D 2EE8      MOV	R14,R24
    0049E 0CE2      ADD	R14,R2
(0181) 	minute=changeIntToHex(minute);
    0049F E01A      LDI	R17,0xA
    004A0 2D0C      MOV	R16,R12
    004A1 940E 05D5 CALL	mod8u
    004A3 2E20      MOV	R2,R16
    004A4 E01A      LDI	R17,0xA
    004A5 2D0C      MOV	R16,R12
    004A6 940E 05D7 CALL	div8u
    004A8 2F80      MOV	R24,R16
    004A9 708F      ANDI	R24,0xF
    004AA 9582      SWAP	R24
    004AB 2EC8      MOV	R12,R24
    004AC 0CC2      ADD	R12,R2
(0182) 	second=changeIntToHex(second);
    004AD E01A      LDI	R17,0xA
    004AE 2D0A      MOV	R16,R10
    004AF 940E 05D5 CALL	mod8u
    004B1 2E20      MOV	R2,R16
    004B2 E01A      LDI	R17,0xA
    004B3 2D0A      MOV	R16,R10
    004B4 940E 05D7 CALL	div8u
    004B6 2F80      MOV	R24,R16
    004B7 708F      ANDI	R24,0xF
    004B8 9582      SWAP	R24
    004B9 2EA8      MOV	R10,R24
    004BA 0CA2      ADD	R10,R2
(0183) 
(0184) 	WriteAByte(HOUR_DATA_BUF,hour);
    004BB 2D2E      MOV	R18,R14
    004BC E004      LDI	R16,4
    004BD DF4C      RCALL	_WriteAByte
(0185) 	WriteAByte(MINUTE_DATA_BUF,minute);
    004BE 2D2C      MOV	R18,R12
    004BF E003      LDI	R16,3
    004C0 DF49      RCALL	_WriteAByte
(0186) 	WriteAByte(SECOND_DATA_BUF,second);
    004C1 2D2A      MOV	R18,R10
    004C2 E002      LDI	R16,2
    004C3 DF46      RCALL	_WriteAByte
    004C4 940C 0621 JMP	pop_xgset00FC
(0187) }
(0188) /*--------------------------------------------------------------------
(0189) 函数名称：
(0190) 函数功能：获取PCF8563的日期
(0191) 注意事项：
(0192) 提示说明：
(0193) 输    入：
(0194) 返    回：
(0195) --------------------------------------------------------------------*/
(0196) //void PCF8563_getDate()
(0197) //{
(0198) //
(0199) //}
(0200) /*--------------------------------------------------------------------
(0201) 函数名称：
(0202) 函数功能：设置PCF8563的日期
(0203) 注意事项：
(0204) 提示说明：
(0205) 输    入：
(0206) 返    回：
(0207) --------------------------------------------------------------------*/
(0208) //void PCF8563_setDate()
(0209) //{
(0210) //
(0211) //}
(0212) /*--------------------------------------------------------------------
(0213) 函数名称：
(0214) 函数功能：初始化PCF8563
(0215) 注意事项：
(0216) 提示说明：
(0217) 输    入：
(0218) 返    回：
(0219) --------------------------------------------------------------------*/
(0220) void PCF8563_init()
(0221) {
(0222) 	WriteAByte(CTRL_BUF1,0x00);			//basic setting
_PCF8563_init:
    004C6 2722      CLR	R18
    004C7 2700      CLR	R16
    004C8 DF41      RCALL	_WriteAByte
(0223) 	WriteAByte(CTRL_BUF2,0x12);			//alarm enable
    004C9 E122      LDI	R18,0x12
    004CA E001      LDI	R16,1
    004CB CF3E      RJMP	_WriteAByte
FILE: E:\吴泽备份\DVK501光盘内容\M128_E~1\PCF856~1\PCF8563_LCD12864\PCF8563.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                            
(0004) 项目名称:   PCF8563示例程序
(0005) 		
(0006) 目标系统:   “DVK501” && “M128 EX+”
(0007) 
(0008) 应用软件:   ICCAVR 6.31A                                             
(0009) 		                                                                
(0010) 版    本:   V1.0 
(0011)                                                         
(0012) 圆版时间:   2009-7-1
(0013) 
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 		
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 使用DVK501的LCD12864显示屏查看PCF8563反馈的时间
(0028) ----------------------------------------------------------------------
(0029) 硬件连接： 
(0030) 		 	  DVK501				 M128 EX+
(0031) 				B1	    ---------	  SDA
(0032)   				B2	    ---------	  SCL
(0033) 				
(0034) 				CS		---------	  VCC
(0035) 				PSB	    ---------	  GND
(0036) 				SID		---------	  PB2
(0037) 				CLK		---------	  PB1
(0038) ----------------------------------------------------------------------
(0039) 注意事项：
(0040) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0041) （2）请详细阅读“使用必读”及相关资料。
(0042) ----------------------------------------------------------------------
(0043) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0044) 
(0045) #include <iom128v.h>
(0046) #include "D:\ICC_H\LCD12864_ST7920_.H"
(0047) 
(0048) #define WR_DADR		0xA2
(0049) #define RD_DADR		0xA3
(0050) #include "D:\ICC_H\PCF8563.H"
(0051) 
(0052) #define DISP_DDR	DDRA
(0053) #define DISP_PORT	PORTA
(0054) 
(0055) /*--------------------------------------------------------------------
(0056) 函数全称：
(0057) 函数功能：
(0058) 注意事项：
(0059) 提示说明：
(0060) 输    入：
(0061) 返    回：
(0062) --------------------------------------------------------------------*/
(0063) void errDisp()	  	   	//错误显示
(0064) {
(0065)  	DISP_PORT = 0XAA;
_errDisp:
    004CC EA8A      LDI	R24,0xAA
    004CD BB8B      OUT	0x1B,R24
(0066) 	delay50ms(2);
    004CE E002      LDI	R16,2
    004CF E010      LDI	R17,0
    004D0 DD6A      RCALL	_delay50ms
(0067) 	DISP_PORT = 0X00;
    004D1 2422      CLR	R2
    004D2 BA2B      OUT	0x1B,R2
(0068) 	delay50ms(2);
    004D3 E002      LDI	R16,2
    004D4 E010      LDI	R17,0
    004D5 DD65      RCALL	_delay50ms
(0069)  	DISP_PORT = 0X55;
    004D6 E585      LDI	R24,0x55
    004D7 BB8B      OUT	0x1B,R24
(0070) 	delay50ms(2);
    004D8 E002      LDI	R16,2
    004D9 E010      LDI	R17,0
    004DA DD60      RCALL	_delay50ms
(0071) 	DISP_PORT = 0X00;
    004DB 2422      CLR	R2
    004DC BA2B      OUT	0x1B,R2
(0072) 	delay50ms(2);
    004DD E002      LDI	R16,2
    004DE E010      LDI	R17,0
    004DF CD5B      RJMP	_delay50ms
(0073) }
(0074) /*--------------------------------------------------------------------
(0075) 函数全称：
(0076) 函数功能：
(0077) 注意事项：
(0078) 提示说明：假设系统时钟为16M，则TWI波特率=CLK/(16+2*(TWBR)*4)=400K
(0079) 输    入：
(0080) 返    回：
(0081) --------------------------------------------------------------------*/
(0082) void twi_init()	 	 	//TWI(I2C)初始化
(0083) {
(0084) 	TWBR = 0X03;		//设置TWI波特率  
_twi_init:
    004E0 E083      LDI	R24,3
    004E1 9380 0070 STS	0x70,R24
(0085) 	TWSR &= 0XFC;		//设置TWI预分频 为 1
    004E3 9180 0071 LDS	R24,0x71
    004E5 7F8C      ANDI	R24,0xFC
    004E6 9380 0071 STS	0x71,R24
    004E8 9508      RET
_main:
  time_tmp             --> R10
  time                 --> Y,+5
    004E9 9728      SBIW	R28,0x8
(0086) }
(0087) /*--------------------------------------------------------------------
(0088) 函数全称：
(0089) 函数功能：
(0090) 注意事项：
(0091) 提示说明：
(0092) 输    入：
(0093) 返    回：
(0094) --------------------------------------------------------------------*/
(0095) void main()
(0096) {
(0097) 	uint8 time[3],time_tmp;
(0098) 	
(0099) 	DDRF=0xFF;
    004EA EF8F      LDI	R24,0xFF
    004EB 9380 0061 STS	0x61,R24
(0100) 	PORTF|=0x01;
    004ED 9180 0062 LDS	R24,0x62
    004EF 6081      ORI	R24,1
    004F0 9380 0062 STS	0x62,R24
(0101) 
(0102) 	PCF8563_init();
    004F2 DFD3      RCALL	_PCF8563_init
(0103) 	PCF8563_setTime(1,2,3);	
    004F3 E083      LDI	R24,3
    004F4 8388      ST	Y,R24
    004F5 E022      LDI	R18,2
    004F6 E001      LDI	R16,1
    004F7 DF94      RCALL	_PCF8563_setTime
(0104) 	
(0105) 	lcd_init();
    004F8 DEFE      RCALL	_lcd_init
(0106) 	lcd_clr();
    004F9 DEF7      RCALL	_lcd_clr
(0107) 	lcd_puts(1,1,"PCF8563-LCD12864");
    004FA E186      LDI	R24,0x16
    004FB E091      LDI	R25,1
    004FC 8399      STD	Y+1,R25
    004FD 8388      ST	Y,R24
    004FE E021      LDI	R18,1
    004FF E001      LDI	R16,1
    00500 DEAB      RCALL	_lcd_puts
(0108) 	lcd_puts(2,1,"时间芯片测试");
    00501 E089      LDI	R24,0x9
    00502 E091      LDI	R25,1
    00503 8399      STD	Y+1,R25
    00504 8388      ST	Y,R24
    00505 E021      LDI	R18,1
    00506 E002      LDI	R16,2
    00507 DEA4      RCALL	_lcd_puts
(0109) 	lcd_puts(3,1,"时间:");
    00508 E083      LDI	R24,3
    00509 E091      LDI	R25,1
    0050A 8399      STD	Y+1,R25
    0050B 8388      ST	Y,R24
    0050C E021      LDI	R18,1
    0050D E003      LDI	R16,3
    0050E DE9D      RCALL	_lcd_puts
    0050F C053      RJMP	0x0563
(0110) 
(0111) 	while(1)
(0112) 	{
(0113) 	 		PCF8563_getTime(time);
    00510 018E      MOVW	R16,R28
    00511 5F0B      SUBI	R16,0xFB
    00512 4F1F      SBCI	R17,0xFF
    00513 DF20      RCALL	_PCF8563_getTime
(0114) 			
(0115) 			if(time[0]!=time_tmp)
    00514 802D      LDD	R2,Y+5
    00515 142A      CP	R2,R10
    00516 F409      BNE	0x0518
    00517 C048      RJMP	0x0560
(0116) 			{
(0117) 			 	
(0118) 				if(time[0]==0) lcd_puts(4,6,"0 ");
    00518 2022      TST	R2
    00519 F439      BNE	0x0521
    0051A E080      LDI	R24,0
    0051B E091      LDI	R25,1
    0051C 8399      STD	Y+1,R25
    0051D 8388      ST	Y,R24
    0051E E026      LDI	R18,6
    0051F E004      LDI	R16,4
    00520 DE8B      RCALL	_lcd_puts
(0119) 				
(0120) 				lcd_putd(4,6,time[0],2);
    00521 E082      LDI	R24,2
    00522 838C      STD	Y+4,R24
    00523 802D      LDD	R2,Y+5
    00524 2433      CLR	R3
    00525 2444      CLR	R4
    00526 2455      CLR	R5
    00527 8228      ST	Y,R2
    00528 8239      STD	Y+1,R3
    00529 824A      STD	Y+2,R4
    0052A 825B      STD	Y+3,R5
    0052B E026      LDI	R18,6
    0052C E004      LDI	R16,4
    0052D DDD5      RCALL	_lcd_putd
(0121) 				lcd_putd(4,2,time[2],2);
    0052E E082      LDI	R24,2
    0052F 838C      STD	Y+4,R24
    00530 802F      LDD	R2,Y+7
    00531 2433      CLR	R3
    00532 2444      CLR	R4
    00533 2455      CLR	R5
    00534 8228      ST	Y,R2
    00535 8239      STD	Y+1,R3
    00536 824A      STD	Y+2,R4
    00537 825B      STD	Y+3,R5
    00538 E022      LDI	R18,2
    00539 E004      LDI	R16,4
    0053A DDC8      RCALL	_lcd_putd
(0122) 				lcd_putc(4,3,':');
    0053B E38A      LDI	R24,0x3A
    0053C 8388      ST	Y,R24
    0053D E023      LDI	R18,3
    0053E E004      LDI	R16,4
    0053F DD78      RCALL	_lcd_putc
(0123) 				lcd_putd(4,4,time[1],2);
    00540 E082      LDI	R24,2
    00541 838C      STD	Y+4,R24
    00542 802E      LDD	R2,Y+6
    00543 2433      CLR	R3
    00544 2444      CLR	R4
    00545 2455      CLR	R5
    00546 8228      ST	Y,R2
    00547 8239      STD	Y+1,R3
    00548 824A      STD	Y+2,R4
    00549 825B      STD	Y+3,R5
    0054A E024      LDI	R18,4
    0054B E004      LDI	R16,4
    0054C DDB6      RCALL	_lcd_putd
(0124) 				lcd_putc(4,5,':');
    0054D E38A      LDI	R24,0x3A
    0054E 8388      ST	Y,R24
    0054F E025      LDI	R18,5
    00550 E004      LDI	R16,4
    00551 DD66      RCALL	_lcd_putc
(0125) 				lcd_putd(4,6,time[0],2);
    00552 E082      LDI	R24,2
    00553 838C      STD	Y+4,R24
    00554 802D      LDD	R2,Y+5
    00555 2433      CLR	R3
    00556 2444      CLR	R4
    00557 2455      CLR	R5
    00558 8228      ST	Y,R2
    00559 8239      STD	Y+1,R3
    0055A 824A      STD	Y+2,R4
    0055B 825B      STD	Y+3,R5
    0055C E026      LDI	R18,6
    0055D E004      LDI	R16,4
    0055E DDA4      RCALL	_lcd_putd
(0126) 				time_tmp=time[0];
    0055F 80AD      LDD	R10,Y+5
(0127) 			}
(0128) 			delay50ms(5);
FILE: <library>
    00560 E005      LDI	R16,5
    00561 E010      LDI	R17,0
    00562 DCD8      RCALL	_delay50ms
    00563 CFAC      RJMP	0x0510
    00564 9628      ADIW	R28,0x8
    00565 9508      RET
push_arg4:
    00566 933A      ST	-Y,R19
    00567 932A      ST	-Y,R18
push_arg2:
    00568 931A      ST	-Y,R17
    00569 930A      ST	-Y,R16
    0056A 9508      RET
div32u:
    0056B 94E8      BCLR	6
    0056C C001      RJMP	0x056E
mod32u:
    0056D 9468      BSET	6
    0056E D030      RCALL	long_div_prolog
    0056F 24CC      CLR	R12
    00570 C009      RJMP	0x057A
div32s:
    00571 94E8      BCLR	6
    00572 C001      RJMP	0x0574
mod32s:
    00573 9468      BSET	6
    00574 D02A      RCALL	long_div_prolog
    00575 FD37      SBRC	R19,7
    00576 940E 0675 CALL	neg32
    00578 FDB7      SBRC	R27,7
    00579 D052      RCALL	neg_R24_R27
    0057A 2477      CLR	R7
    0057B 2488      CLR	R8
    0057C 2499      CLR	R9
    0057D 24AA      CLR	R10
    0057E 24BB      CLR	R11
    0057F D042      RCALL	tst_R16_R19
    00580 F0C1      BEQ	0x0599
    00581 D045      RCALL	tst_R24_R27
    00582 F0B1      BEQ	0x0599
    00583 E2E8      LDI	R30,0x28
    00584 0F00      LSL	R16
    00585 1F11      ROL	R17
    00586 1F22      ROL	R18
    00587 1F33      ROL	R19
    00588 1C77      ROL	R7
    00589 1C88      ROL	R8
    0058A 1C99      ROL	R9
    0058B 1CAA      ROL	R10
    0058C 1CBB      ROL	R11
    0058D 1688      CP	R8,R24
    0058E 0699      CPC	R9,R25
    0058F 06AA      CPC	R10,R26
    00590 06BB      CPC	R11,R27
    00591 F028      BCS	0x0597
    00592 1A88      SUB	R8,R24
    00593 0A99      SBC	R9,R25
    00594 0AAA      SBC	R10,R26
    00595 0ABB      SBC	R11,R27
    00596 9503      INC	R16
    00597 95EA      DEC	R30
    00598 F759      BNE	0x0584
    00599 F426      BRTC	0x059E
    0059A 2D08      MOV	R16,R8
    0059B 2D19      MOV	R17,R9
    0059C 2D2A      MOV	R18,R10
    0059D 2D3B      MOV	R19,R11
    0059E C013      RJMP	long_div_epilog
long_div_prolog:
    0059F 927A      ST	-Y,R7
    005A0 928A      ST	-Y,R8
    005A1 929A      ST	-Y,R9
    005A2 92AA      ST	-Y,R10
    005A3 92BA      ST	-Y,R11
    005A4 92CA      ST	-Y,R12
    005A5 93EA      ST	-Y,R30
    005A6 938A      ST	-Y,R24
    005A7 939A      ST	-Y,R25
    005A8 93AA      ST	-Y,R26
    005A9 93BA      ST	-Y,R27
    005AA 858B      LDD	R24,Y+11
    005AB 859C      LDD	R25,Y+12
    005AC 85AD      LDD	R26,Y+13
    005AD 85BE      LDD	R27,Y+14
    005AE 2EC3      MOV	R12,R19
    005AF F00E      BRTS	0x05B1
    005B0 26CB      EOR	R12,R27
    005B1 9508      RET
long_div_epilog:
    005B2 FCC7      SBRC	R12,7
    005B3 940E 0675 CALL	neg32
    005B5 91B9      LD	R27,Y+
    005B6 91A9      LD	R26,Y+
    005B7 9199      LD	R25,Y+
    005B8 9189      LD	R24,Y+
    005B9 91E9      LD	R30,Y+
    005BA 90C9      LD	R12,Y+
    005BB 90B9      LD	R11,Y+
    005BC 90A9      LD	R10,Y+
    005BD 9099      LD	R9,Y+
    005BE 9089      LD	R8,Y+
    005BF 9079      LD	R7,Y+
    005C0 9624      ADIW	R28,4
    005C1 9508      RET
tst_R16_R19:
    005C2 2FE0      MOV	R30,R16
    005C3 2BE1      OR	R30,R17
    005C4 2BE2      OR	R30,R18
    005C5 2BE3      OR	R30,R19
    005C6 9508      RET
tst_R24_R27:
    005C7 2FE8      MOV	R30,R24
    005C8 2BE9      OR	R30,R25
    005C9 2BEA      OR	R30,R26
    005CA 2BEB      OR	R30,R27
    005CB 9508      RET
neg_R24_R27:
    005CC 9580      COM	R24
    005CD 9590      COM	R25
    005CE 95A0      COM	R26
    005CF 95B0      COM	R27
    005D0 5F8F      SUBI	R24,0xFF
    005D1 4F9F      SBCI	R25,0xFF
    005D2 4FAF      SBCI	R26,0xFF
    005D3 4FBF      SBCI	R27,0xFF
    005D4 9508      RET
mod8u:
    005D5 9468      BSET	6
    005D6 C001      RJMP	xdiv8u
div8u:
    005D7 94E8      BCLR	6
xdiv8u:
    005D8 932A      ST	-Y,R18
    005D9 92FA      ST	-Y,R15
    005DA 92EA      ST	-Y,R14
    005DB 24FF      CLR	R15
    005DC 24EE      CLR	R14
    005DD E120      LDI	R18,0x10
    005DE 0F00      LSL	R16
    005DF 1CFF      ROL	R15
    005E0 1CEE      ROL	R14
    005E1 16E1      CP	R14,R17
    005E2 F010      BCS	0x05E5
    005E3 1AE1      SUB	R14,R17
    005E4 9503      INC	R16
    005E5 952A      DEC	R18
    005E6 F7B9      BNE	0x05DE
    005E7 F40E      BRTC	0x05E9
    005E8 2D0E      MOV	R16,R14
    005E9 90E9      LD	R14,Y+
    005EA 90F9      LD	R15,Y+
    005EB 9129      LD	R18,Y+
    005EC 9508      RET
empy32u|empy32s:
    005ED 940E 067E CALL	long_prolog
    005EF 927A      ST	-Y,R7
    005F0 940E 0697 CALL	tstzero1
    005F2 F159      BEQ	0x061E
    005F3 2477      CLR	R7
    005F4 940E 069D CALL	tstzero2
    005F6 F419      BNE	0x05FA
    005F7 018C      MOVW	R16,R24
    005F8 019D      MOVW	R18,R26
    005F9 C024      RJMP	0x061E
    005FA 920A      ST	-Y,R0
    005FB 921A      ST	-Y,R1
    005FC 9F08      MUL	R16,R24
    005FD 2CB0      MOV	R11,R0
    005FE 2CA1      MOV	R10,R1
    005FF 9F28      MUL	R18,R24
    00600 2C90      MOV	R9,R0
    00601 2C81      MOV	R8,R1
    00602 9F18      MUL	R17,R24
    00603 0CA0      ADD	R10,R0
    00604 1C91      ADC	R9,R1
    00605 1C87      ADC	R8,R7
    00606 9F09      MUL	R16,R25
    00607 0CA0      ADD	R10,R0
    00608 1C91      ADC	R9,R1
    00609 1C87      ADC	R8,R7
    0060A 9F19      MUL	R17,R25
    0060B 0C90      ADD	R9,R0
    0060C 1C81      ADC	R8,R1
    0060D 9F0A      MUL	R16,R26
    0060E 0C90      ADD	R9,R0
    0060F 1C81      ADC	R8,R1
    00610 9F38      MUL	R19,R24
    00611 0C80      ADD	R8,R0
    00612 9F29      MUL	R18,R25
    00613 0C80      ADD	R8,R0
    00614 9F1A      MUL	R17,R26
    00615 0C80      ADD	R8,R0
    00616 9F0B      MUL	R16,R27
    00617 0C80      ADD	R8,R0
    00618 9019      LD	R1,Y+
    00619 9009      LD	R0,Y+
    0061A 2D0B      MOV	R16,R11
    0061B 2D1A      MOV	R17,R10
    0061C 2D29      MOV	R18,R9
    0061D 2D38      MOV	R19,R8
    0061E 9079      LD	R7,Y+
    0061F 940C 068C JMP	long_epilog
pop_xgset00FC:
    00621 90A9      LD	R10,Y+
    00622 90B9      LD	R11,Y+
    00623 90C9      LD	R12,Y+
    00624 90D9      LD	R13,Y+
    00625 90E9      LD	R14,Y+
    00626 90F9      LD	R15,Y+
    00627 9508      RET
pop_xgset30FC:
    00628 90A9      LD	R10,Y+
    00629 90B9      LD	R11,Y+
    0062A 90C9      LD	R12,Y+
    0062B 90D9      LD	R13,Y+
    0062C 90E9      LD	R14,Y+
    0062D 90F9      LD	R15,Y+
    0062E 9149      LD	R20,Y+
    0062F 9159      LD	R21,Y+
    00630 9508      RET
pop_xgsetF0FC:
    00631 90A9      LD	R10,Y+
    00632 90B9      LD	R11,Y+
    00633 90C9      LD	R12,Y+
    00634 90D9      LD	R13,Y+
    00635 90E9      LD	R14,Y+
    00636 90F9      LD	R15,Y+
    00637 9149      LD	R20,Y+
    00638 9159      LD	R21,Y+
    00639 9169      LD	R22,Y+
    0063A 9179      LD	R23,Y+
    0063B 9508      RET
push_xgsetF0FC:
    0063C 937A      ST	-Y,R23
    0063D 936A      ST	-Y,R22
push_xgset30FC:
    0063E 935A      ST	-Y,R21
    0063F 934A      ST	-Y,R20
push_xgset00FC:
    00640 92FA      ST	-Y,R15
    00641 92EA      ST	-Y,R14
push_xgset003C:
    00642 92DA      ST	-Y,R13
    00643 92CA      ST	-Y,R12
    00644 92BA      ST	-Y,R11
    00645 92AA      ST	-Y,R10
    00646 9508      RET
push_xgsetF00C:
    00647 937A      ST	-Y,R23
    00648 936A      ST	-Y,R22
    00649 935A      ST	-Y,R21
    0064A 934A      ST	-Y,R20
    0064B 92BA      ST	-Y,R11
    0064C 92AA      ST	-Y,R10
    0064D 9508      RET
pop_xgsetF00C:
    0064E 90A9      LD	R10,Y+
    0064F 90B9      LD	R11,Y+
    00650 9149      LD	R20,Y+
    00651 9159      LD	R21,Y+
    00652 9169      LD	R22,Y+
    00653 9179      LD	R23,Y+
    00654 9508      RET
push_xgset303C:
    00655 935A      ST	-Y,R21
    00656 934A      ST	-Y,R20
    00657 92DA      ST	-Y,R13
    00658 92CA      ST	-Y,R12
    00659 92BA      ST	-Y,R11
    0065A 92AA      ST	-Y,R10
    0065B 9508      RET
pop_xgset303C:
    0065C 90A9      LD	R10,Y+
    0065D 90B9      LD	R11,Y+
    0065E 90C9      LD	R12,Y+
    0065F 90D9      LD	R13,Y+
    00660 9149      LD	R20,Y+
    00661 9159      LD	R21,Y+
    00662 9508      RET
push_xgsetF03C:
    00663 937A      ST	-Y,R23
    00664 936A      ST	-Y,R22
    00665 935A      ST	-Y,R21
    00666 934A      ST	-Y,R20
    00667 92DA      ST	-Y,R13
    00668 92CA      ST	-Y,R12
    00669 92BA      ST	-Y,R11
    0066A 92AA      ST	-Y,R10
    0066B 9508      RET
pop_xgsetF03C:
    0066C 90A9      LD	R10,Y+
    0066D 90B9      LD	R11,Y+
    0066E 90C9      LD	R12,Y+
    0066F 90D9      LD	R13,Y+
    00670 9149      LD	R20,Y+
    00671 9159      LD	R21,Y+
    00672 9169      LD	R22,Y+
    00673 9179      LD	R23,Y+
    00674 9508      RET
neg32:
    00675 9500      COM	R16
    00676 9510      COM	R17
    00677 9520      COM	R18
    00678 9530      COM	R19
    00679 5F0F      SUBI	R16,0xFF
    0067A 4F1F      SBCI	R17,0xFF
    0067B 4F2F      SBCI	R18,0xFF
    0067C 4F3F      SBCI	R19,0xFF
    0067D 9508      RET
long_prolog:
    0067E 928A      ST	-Y,R8
    0067F 929A      ST	-Y,R9
    00680 92AA      ST	-Y,R10
    00681 92BA      ST	-Y,R11
    00682 93EA      ST	-Y,R30
    00683 938A      ST	-Y,R24
    00684 939A      ST	-Y,R25
    00685 93AA      ST	-Y,R26
    00686 93BA      ST	-Y,R27
    00687 8589      LDD	R24,Y+9
    00688 859A      LDD	R25,Y+10
    00689 85AB      LDD	R26,Y+11
    0068A 85BC      LDD	R27,Y+12
    0068B 9508      RET
long_epilog:
    0068C 91B9      LD	R27,Y+
    0068D 91A9      LD	R26,Y+
    0068E 9199      LD	R25,Y+
    0068F 9189      LD	R24,Y+
    00690 91E9      LD	R30,Y+
    00691 90B9      LD	R11,Y+
    00692 90A9      LD	R10,Y+
    00693 9099      LD	R9,Y+
    00694 9089      LD	R8,Y+
    00695 9624      ADIW	R28,4
    00696 9508      RET
tstzero1:
    00697 27EE      CLR	R30
    00698 2BE0      OR	R30,R16
    00699 2BE1      OR	R30,R17
    0069A 2BE2      OR	R30,R18
    0069B 2BE3      OR	R30,R19
    0069C 9508      RET
tstzero2:
    0069D 27EE      CLR	R30
    0069E 2BE8      OR	R30,R24
    0069F 2BE9      OR	R30,R25
    006A0 2BEA      OR	R30,R26
    006A1 2BEB      OR	R30,R27
    006A2 9508      RET
