Interrupt Vectors
    00000 C014      RJMP	__text_start|__start

Program Code (text area)
__text_start|__start:
    00015 E5CF      LDI	R28,0x5F
    00016 E0D2      LDI	R29,2
    00017 BFCD      OUT	0x3D,R28
    00018 BFDE      OUT	0x3E,R29
    00019 51C0      SUBI	R28,0x10
    0001A 40D0      SBCI	R29,0
    0001B EA0A      LDI	R16,0xAA
    0001C 8308      ST	Y,R16
    0001D 2400      CLR	R0
    0001E E6E0      LDI	R30,0x60
    0001F E0F0      LDI	R31,0
    00020 E010      LDI	R17,0
    00021 36E6      CPI	R30,0x66
    00022 07F1      CPC	R31,R17
    00023 F011      BEQ	0x0026
    00024 9201      ST	Z+,R0
    00025 CFFB      RJMP	0x0021
    00026 8300      ST	Z,R16
    00027 E2EA      LDI	R30,0x2A
    00028 E0F0      LDI	R31,0
    00029 E6A0      LDI	R26,0x60
    0002A E0B0      LDI	R27,0
    0002B E010      LDI	R17,0
    0002C E000      LDI	R16,0
    0002D BF0B      OUT	0x3B,R16
    0002E 32EA      CPI	R30,0x2A
    0002F 07F1      CPC	R31,R17
    00030 F021      BEQ	0x0035
    00031 95C8      LPM
    00032 9631      ADIW	R30,1
    00033 920D      ST	X+,R0
    00034 CFF9      RJMP	0x002E
    00035 D208      RCALL	_main
_exit:
    00036 CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    00037 D20F      RCALL	push_arg4
    00038 D2D1      RCALL	push_xgsetF03C
    00039 9728      SBIW	R28,0x8
    0003A 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    0003B 24AA      CLR	R10
    0003C E081      LDI	R24,1
    0003D 8388      ST	Y,R24
    0003E E080      LDI	R24,0
    0003F 8389      STD	Y+1,R24
    00040 838A      STD	Y+2,R24
    00041 838B      STD	Y+3,R24
    00042 C039      RJMP	0x007C
(0120)     {
(0121)         y=dat/j;
    00043 8028      LD	R2,Y
    00044 8039      LDD	R3,Y+1
    00045 804A      LDD	R4,Y+2
    00046 805B      LDD	R5,Y+3
    00047 8908      LDD	R16,Y+16
    00048 8919      LDD	R17,Y+17
    00049 892A      LDD	R18,Y+18
    0004A 893B      LDD	R19,Y+19
    0004B 925A      ST	-Y,R5
    0004C 924A      ST	-Y,R4
    0004D 923A      ST	-Y,R3
    0004E 922A      ST	-Y,R2
    0004F D1FC      RCALL	div32u
    00050 830C      STD	Y+4,R16
    00051 831D      STD	Y+5,R17
    00052 832E      STD	Y+6,R18
    00053 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    00054 E04A      LDI	R20,0xA
    00055 E050      LDI	R21,0
    00056 E060      LDI	R22,0
    00057 E070      LDI	R23,0
    00058 810C      LDD	R16,Y+4
    00059 811D      LDD	R17,Y+5
    0005A 812E      LDD	R18,Y+6
    0005B 813F      LDD	R19,Y+7
    0005C 937A      ST	-Y,R23
    0005D 936A      ST	-Y,R22
    0005E 935A      ST	-Y,R21
    0005F 934A      ST	-Y,R20
    00060 D1ED      RCALL	mod32u
    00061 E680      LDI	R24,0x60
    00062 E090      LDI	R25,0
    00063 2DEA      MOV	R30,R10
    00064 27FF      CLR	R31
    00065 0FE8      ADD	R30,R24
    00066 1FF9      ADC	R31,R25
    00067 8300      ST	Z,R16
(0123)         j*=10;
    00068 8028      LD	R2,Y
    00069 8039      LDD	R3,Y+1
    0006A 804A      LDD	R4,Y+2
    0006B 805B      LDD	R5,Y+3
    0006C E04A      LDI	R20,0xA
    0006D E050      LDI	R21,0
    0006E E060      LDI	R22,0
    0006F E070      LDI	R23,0
    00070 925A      ST	-Y,R5
    00071 924A      ST	-Y,R4
    00072 923A      ST	-Y,R3
    00073 922A      ST	-Y,R2
    00074 018A      MOVW	R16,R20
    00075 019B      MOVW	R18,R22
    00076 D23D      RCALL	empy32u|empy32s
    00077 8308      ST	Y,R16
    00078 8319      STD	Y+1,R17
    00079 832A      STD	Y+2,R18
    0007A 833B      STD	Y+3,R19
    0007B 94A3      INC	R10
    0007C 2C2C      MOV	R2,R12
    0007D 2433      CLR	R3
    0007E FC27      SBRC	R2,7
    0007F 9430      COM	R3
    00080 2C4A      MOV	R4,R10
    00081 2455      CLR	R5
    00082 1442      CP	R4,R2
    00083 0453      CPC	R5,R3
    00084 F40C      BGE	0x0086
    00085 CFBD      RJMP	0x0043
    00086 9628      ADIW	R28,0x8
    00087 D28B      RCALL	pop_xgsetF03C
    00088 9624      ADIW	R28,4
    00089 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    0008A EA84      LDI	R24,0xA4
    0008B 9380 0074 STS	dataElem+20,R24
(0128) 	I2CWaitAck();
    0008D 9020 0074 LDS	R2,dataElem+20
    0008F FE27      SBRS	R2,7
    00090 CFFC      RJMP	0x008D
(0129) 	if( I2CChkAck()!=I2C_START ) 
    00091 9180 0071 LDS	R24,dataElem+17
    00093 7F88      ANDI	R24,0xF8
    00094 3088      CPI	R24,0x8
    00095 F011      BEQ	0x0098
(0130) 		return I2C_ERR;
    00096 2700      CLR	R16
    00097 C001      RJMP	0x0099
(0131) 	return I2C_CRR;
    00098 E001      LDI	R16,1
    00099 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    0009A EA84      LDI	R24,0xA4
    0009B 9380 0074 STS	dataElem+20,R24
(0144) 	I2CWaitAck();
    0009D 9020 0074 LDS	R2,dataElem+20
    0009F FE27      SBRS	R2,7
    000A0 CFFC      RJMP	0x009D
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    000A1 9180 0071 LDS	R24,dataElem+17
    000A3 7F88      ANDI	R24,0xF8
    000A4 3180      CPI	R24,0x10
    000A5 F011      BEQ	0x00A8
(0146) 		return I2C_ERR;
    000A6 2700      CLR	R16
    000A7 C001      RJMP	0x00A9
(0147) 	return I2C_CRR;
    000A8 E001      LDI	R16,1
    000A9 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    000AA 9300 0073 STS	dataElem+19,R16
    000AC E884      LDI	R24,0x84
    000AD 9380 0074 STS	dataElem+20,R24
(0160) 	I2CWaitAck();
    000AF 9020 0074 LDS	R2,dataElem+20
    000B1 FE27      SBRS	R2,7
    000B2 CFFC      RJMP	0x00AF
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    000B3 9180 0071 LDS	R24,dataElem+17
    000B5 7F88      ANDI	R24,0xF8
    000B6 3188      CPI	R24,0x18
    000B7 F011      BEQ	0x00BA
(0162) 		return I2C_ERR;
    000B8 2700      CLR	R16
    000B9 C001      RJMP	0x00BB
(0163) 	return I2C_CRR;		
    000BA E001      LDI	R16,1
    000BB 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    000BC 92AA      ST	-Y,R10
    000BD 92BA      ST	-Y,R11
    000BE 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    000BF FEA0      SBRS	R10,0
    000C0 C00E      RJMP	0x00CF
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    000C1 2D0A      MOV	R16,R10
    000C2 9506      LSR	R16
    000C3 9506      LSR	R16
    000C4 9506      LSR	R16
    000C5 9506      LSR	R16
    000C6 9506      LSR	R16
    000C7 9506      LSR	R16
    000C8 9506      LSR	R16
    000C9 9506      LSR	R16
    000CA DFDF      RCALL	_I2C_SendWrDAdr
    000CB 2300      TST	R16
    000CC F411      BNE	0x00CF
(0177) 			return I2C_ERR;
    000CD 2700      CLR	R16
    000CE C007      RJMP	0x00D6
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    000CF 2D0A      MOV	R16,R10
    000D0 DFD9      RCALL	_I2C_SendWrDAdr
    000D1 2300      TST	R16
    000D2 F411      BNE	0x00D5
(0179) 		return I2C_ERR;
    000D3 2700      CLR	R16
    000D4 C001      RJMP	0x00D6
(0180) 	return I2C_CRR;
    000D5 E001      LDI	R16,1
    000D6 90B9      LD	R11,Y+
    000D7 90A9      LD	R10,Y+
    000D8 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    000D9 9300 0073 STS	dataElem+19,R16
    000DB E884      LDI	R24,0x84
    000DC 9380 0074 STS	dataElem+20,R24
(0193) 	I2CWaitAck();
    000DE 9020 0074 LDS	R2,dataElem+20
    000E0 FE27      SBRS	R2,7
    000E1 CFFC      RJMP	0x00DE
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    000E2 9180 0071 LDS	R24,dataElem+17
    000E4 7F88      ANDI	R24,0xF8
    000E5 3480      CPI	R24,0x40
    000E6 F011      BEQ	0x00E9
(0195) 		return I2C_ERR;
    000E7 2700      CLR	R16
    000E8 C001      RJMP	0x00EA
(0196) 	return I2C_CRR;	
    000E9 E001      LDI	R16,1
    000EA 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    000EB 92AA      ST	-Y,R10
    000EC 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    000ED FEA0      SBRS	R10,0
    000EE C00E      RJMP	0x00FD
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    000EF 2D0A      MOV	R16,R10
    000F0 9506      LSR	R16
    000F1 9506      LSR	R16
    000F2 9506      LSR	R16
    000F3 9506      LSR	R16
    000F4 9506      LSR	R16
    000F5 9506      LSR	R16
    000F6 9506      LSR	R16
    000F7 9506      LSR	R16
    000F8 DFB1      RCALL	_I2C_SendWrDAdr
    000F9 2300      TST	R16
    000FA F411      BNE	0x00FD
(0210) 			return I2C_ERR;
    000FB 2700      CLR	R16
    000FC C007      RJMP	0x0104
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    000FD 2D0A      MOV	R16,R10
    000FE DFAB      RCALL	_I2C_SendWrDAdr
    000FF 2300      TST	R16
    00100 F411      BNE	0x0103
(0212) 		return I2C_ERR;
    00101 2700      CLR	R16
    00102 C001      RJMP	0x0104
(0213) 	return I2C_CRR;
    00103 E001      LDI	R16,1
    00104 90A9      LD	R10,Y+
    00105 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    00106 9300 0073 STS	dataElem+19,R16
    00108 E884      LDI	R24,0x84
    00109 9380 0074 STS	dataElem+20,R24
(0226) 	I2CWaitAck();
    0010B 9020 0074 LDS	R2,dataElem+20
    0010D FE27      SBRS	R2,7
    0010E CFFC      RJMP	0x010B
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    0010F 9180 0071 LDS	R24,dataElem+17
    00111 7F88      ANDI	R24,0xF8
    00112 3288      CPI	R24,0x28
    00113 F011      BEQ	0x0116
(0228) 		return I2C_ERR;
    00114 2700      CLR	R16
    00115 C001      RJMP	0x0117
(0229) 	return I2C_CRR;	
    00116 E001      LDI	R16,1
    00117 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    00118 E884      LDI	R24,0x84
    00119 9380 0074 STS	dataElem+20,R24
(0242) 	I2CWaitAck();
    0011B 9020 0074 LDS	R2,dataElem+20
    0011D FE27      SBRS	R2,7
    0011E CFFC      RJMP	0x011B
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    0011F 9180 0071 LDS	R24,dataElem+17
    00121 7F88      ANDI	R24,0xF8
    00122 3588      CPI	R24,0x58
    00123 F011      BEQ	0x0126
(0244) 		return I2C_ERR;
    00124 2700      CLR	R16
    00125 C005      RJMP	0x012B
(0245) 	*pRdDat=TWDR;
    00126 9020 0073 LDS	R2,dataElem+19
    00128 01F8      MOVW	R30,R16
    00129 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    0012A E001      LDI	R16,1
    0012B 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    0012C EC84      LDI	R24,0xC4
    0012D 9380 0074 STS	dataElem+20,R24
(0259) 	I2CWaitAck();
    0012F 9020 0074 LDS	R2,dataElem+20
    00131 FE27      SBRS	R2,7
    00132 CFFC      RJMP	0x012F
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    00133 9180 0071 LDS	R24,dataElem+17
    00135 7F88      ANDI	R24,0xF8
    00136 3580      CPI	R24,0x50
    00137 F011      BEQ	0x013A
(0261) 		return I2C_ERR;
    00138 2700      CLR	R16
    00139 C005      RJMP	0x013F
(0262) 	*pRdDat=TWDR;
    0013A 9020 0073 LDS	R2,dataElem+19
    0013C 01F8      MOVW	R30,R16
    0013D 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    0013E E001      LDI	R16,1
    0013F 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    00140 D1C2      RCALL	push_xgset00FC
    00141 2EC2      MOV	R12,R18
    00142 0178      MOVW	R14,R16
    00143 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    00144 DF45      RCALL	_I2C_Start
    00145 2300      TST	R16
    00146 F411      BNE	0x0149
(0278) 		return I2C_ERR;
    00147 2700      CLR	R16
    00148 C018      RJMP	0x0161
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    00149 0187      MOVW	R16,R14
    0014A DF71      RCALL	_I2C_SendWrDAdr_
    0014B 2300      TST	R16
    0014C F411      BNE	0x014F
(0281) 		return I2C_ERR;
    0014D 2700      CLR	R16
    0014E C012      RJMP	0x0161
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    0014F 2D0C      MOV	R16,R12
    00150 DFB5      RCALL	_I2C_SendDat
    00151 2EC0      MOV	R12,R16
    00152 2300      TST	R16
    00153 F411      BNE	0x0156
(0284) 		return I2C_ERR;
    00154 2700      CLR	R16
    00155 C00B      RJMP	0x0161
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    00156 2D0A      MOV	R16,R10
    00157 DFAE      RCALL	_I2C_SendDat
    00158 2EA0      MOV	R10,R16
    00159 2300      TST	R16
    0015A F411      BNE	0x015D
(0287) 		return I2C_ERR;
    0015B 2700      CLR	R16
    0015C C004      RJMP	0x0161
(0288) 
(0289) 	I2C_Stop();
    0015D E984      LDI	R24,0x94
    0015E 9380 0074 STS	dataElem+20,R24
(0290) 
(0291) 	return I2C_CRR;
    00160 E001      LDI	R16,1
    00161 C182      RJMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    00162 D19E      RCALL	push_xgset30FC
    00163 2EE2      MOV	R14,R18
    00164 01A8      MOVW	R20,R16
    00165 84C8      LDD	R12,Y+8
    00166 84AA      LDD	R10,Y+10
    00167 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    00168 DF21      RCALL	_I2C_Start
    00169 2300      TST	R16
    0016A F411      BNE	0x016D
(0324) 		return I2C_ERR;
    0016B 2700      CLR	R16
    0016C C025      RJMP	0x0192
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    0016D 018A      MOVW	R16,R20
    0016E DF4D      RCALL	_I2C_SendWrDAdr_
    0016F 2300      TST	R16
    00170 F411      BNE	0x0173
(0327) 		return I2C_ERR;
    00171 2700      CLR	R16
    00172 C01F      RJMP	0x0192
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00173 2D0E      MOV	R16,R14
    00174 DF91      RCALL	_I2C_SendDat
    00175 2EE0      MOV	R14,R16
    00176 2300      TST	R16
    00177 F411      BNE	0x017A
(0330) 		return I2C_ERR;
    00178 2700      CLR	R16
    00179 C018      RJMP	0x0192
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    0017A DF1F      RCALL	_I2C_Restart
    0017B 2EE0      MOV	R14,R16
    0017C 2300      TST	R16
    0017D F411      BNE	0x0180
(0333) 		return I2C_ERR;
    0017E 2700      CLR	R16
    0017F C012      RJMP	0x0192
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    00180 2D0C      MOV	R16,R12
    00181 DF57      RCALL	_I2C_SendRdDAdr
    00182 2EC0      MOV	R12,R16
    00183 2300      TST	R16
    00184 F411      BNE	0x0187
(0336) 		return I2C_ERR;
    00185 2700      CLR	R16
    00186 C00B      RJMP	0x0192
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    00187 0185      MOVW	R16,R10
    00188 DF8F      RCALL	_I2C_RcvNAckDat
    00189 2EA0      MOV	R10,R16
    0018A 2300      TST	R16
    0018B F411      BNE	0x018E
(0339) 		return I2C_ERR;
    0018C 2700      CLR	R16
    0018D C004      RJMP	0x0192
(0340) 
(0341) 	I2C_Stop();
    0018E E984      LDI	R24,0x94
    0018F 9380 0074 STS	dataElem+20,R24
(0342) 
(0343) 	return I2C_CRR;
    00191 E001      LDI	R16,1
    00192 C158      RJMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    00193 D16B      RCALL	push_xgsetF0FC
    00194 2EE2      MOV	R14,R18
    00195 01B8      MOVW	R22,R16
    00196 84CA      LDD	R12,Y+10
    00197 84AC      LDD	R10,Y+12
    00198 84BD      LDD	R11,Y+13
    00199 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    0019A DEEF      RCALL	_I2C_Start
    0019B 2300      TST	R16
    0019C F411      BNE	0x019F
(0363) 		return I2C_ERR;
    0019D 2700      CLR	R16
    0019E C039      RJMP	0x01D8
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    0019F 018B      MOVW	R16,R22
    001A0 DF1B      RCALL	_I2C_SendWrDAdr_
    001A1 2300      TST	R16
    001A2 F411      BNE	0x01A5
(0366) 		return I2C_ERR;
    001A3 2700      CLR	R16
    001A4 C033      RJMP	0x01D8
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001A5 2D0E      MOV	R16,R14
    001A6 DF5F      RCALL	_I2C_SendDat
    001A7 2EE0      MOV	R14,R16
    001A8 2300      TST	R16
    001A9 F411      BNE	0x01AC
(0369) 		return I2C_ERR;
    001AA 2700      CLR	R16
    001AB C02C      RJMP	0x01D8
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    001AC DEED      RCALL	_I2C_Restart
    001AD 2EE0      MOV	R14,R16
    001AE 2300      TST	R16
    001AF F411      BNE	0x01B2
(0372) 		return I2C_ERR;
    001B0 2700      CLR	R16
    001B1 C026      RJMP	0x01D8
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001B2 2D0C      MOV	R16,R12
    001B3 DF25      RCALL	_I2C_SendRdDAdr
    001B4 2EC0      MOV	R12,R16
    001B5 2300      TST	R16
    001B6 F411      BNE	0x01B9
(0375) 		return I2C_ERR;
    001B7 2700      CLR	R16
    001B8 C01F      RJMP	0x01D8
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    001B9 24CC      CLR	R12
    001BA C00B      RJMP	0x01C6
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    001BB 2D0C      MOV	R16,R12
    001BC 2711      CLR	R17
    001BD 0D0A      ADD	R16,R10
    001BE 1D1B      ADC	R17,R11
    001BF DF6C      RCALL	_I2C_RcvAckDat
    001C0 2EE0      MOV	R14,R16
    001C1 2300      TST	R16
    001C2 F411      BNE	0x01C5
(0379) 			return I2C_ERR;
    001C3 2700      CLR	R16
    001C4 C013      RJMP	0x01D8
    001C5 94C3      INC	R12
    001C6 2F84      MOV	R24,R20
    001C7 5081      SUBI	R24,1
    001C8 16C8      CP	R12,R24
    001C9 F388      BCS	0x01BB
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    001CA 2D0C      MOV	R16,R12
    001CB 2711      CLR	R17
    001CC 0D0A      ADD	R16,R10
    001CD 1D1B      ADC	R17,R11
    001CE DF49      RCALL	_I2C_RcvNAckDat
    001CF 2EA0      MOV	R10,R16
    001D0 2300      TST	R16
    001D1 F411      BNE	0x01D4
(0382) 			return I2C_ERR;
    001D2 2700      CLR	R16
    001D3 C004      RJMP	0x01D8
(0383) 
(0384) 	I2C_Stop();
    001D4 E984      LDI	R24,0x94
    001D5 9380 0074 STS	dataElem+20,R24
(0385) 	
(0386) 	return I2C_CRR;
    001D7 E001      LDI	R16,1
    001D8 C11B      RJMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    001D9 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    001DA C007      RJMP	0x01E2
(0108)         for(j=0;j<70;j++)	
    001DB 2744      CLR	R20
    001DC C001      RJMP	0x01DE
    001DD 9543      INC	R20
    001DE 3446      CPI	R20,0x46
    001DF F3E8      BCS	0x01DD
    001E0 5001      SUBI	R16,1
    001E1 4010      SBCI	R17,0
    001E2 2422      CLR	R2
    001E3 2433      CLR	R3
    001E4 1620      CP	R2,R16
    001E5 0631      CPC	R3,R17
    001E6 F3A4      BLT	0x01DB
    001E7 9149      LD	R20,Y+
    001E8 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    001E9 934A      ST	-Y,R20
    001EA 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    001EB C013      RJMP	0x01FF
(0123) 		for(i=0;i<52642;i++)
    001EC 2744      CLR	R20
    001ED 2755      CLR	R21
    001EE C002      RJMP	0x01F1
    001EF 5F4F      SUBI	R20,0xFF
    001F0 4F5F      SBCI	R21,0xFF
    001F1 EA82      LDI	R24,0xA2
    001F2 EC9D      LDI	R25,0xCD
    001F3 E0A0      LDI	R26,0
    001F4 E0B0      LDI	R27,0
    001F5 011A      MOVW	R2,R20
    001F6 2444      CLR	R4
    001F7 2455      CLR	R5
    001F8 1628      CP	R2,R24
    001F9 0639      CPC	R3,R25
    001FA 064A      CPC	R4,R26
    001FB 065B      CPC	R5,R27
    001FC F394      BLT	0x01EF
    001FD 5001      SUBI	R16,1
    001FE 4010      SBCI	R17,0
    001FF 2422      CLR	R2
    00200 2433      CLR	R3
    00201 1620      CP	R2,R16
    00202 0631      CPC	R3,R17
    00203 F344      BLT	0x01EC
    00204 9159      LD	R21,Y+
    00205 9149      LD	R20,Y+
    00206 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    00207 934A      ST	-Y,R20
    00208 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    00209 2744      CLR	R20
    0020A 2755      CLR	R21
    0020B C002      RJMP	0x020E
    0020C 5F4F      SUBI	R20,0xFF
    0020D 4F5F      SBCI	R21,0xFF
    0020E 1740      CP	R20,R16
    0020F 0751      CPC	R21,R17
    00210 F3D8      BCS	0x020C
    00211 9159      LD	R21,Y+
    00212 9149      LD	R20,Y+
    00213 9508      RET
FILE: E:\吴泽备份\DVK501光盘内容\M128_E~1\MAX485~1\MAX485\test.c
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   MAX485示例程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2009-03-31
(0013) 	
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 先把写数据并显示在MX485自发自收试验
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：
(0030) 		 	  DVK501				 DVK501
(0031) 				U1:A	     ---------    U2:A
(0032) 				U1:B		---------	  U2:B
(0033) 				U1:EN		---------	  VCC
(0034) 				U2:EN		---------	  GND
(0035) 	
(0036) 			  STK128+     			STK128+
(0037) 			   PA	---------  		 LED0~7
(0038) 
(0039) 			   DVK501				  STK128+
(0040) 				VCC		---------	  VCC
(0041) 				GND		---------	  GND
(0042) 				U1:DI   ---------	  PE1(TXD0)
(0043) 				U2:RO	---------	  PE0(RXD0)
(0044) 				
(0045) ----------------------------------------------------------------------
(0046) 注意事项： 
(0047) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0048) （2）请详细阅读“使用必读”及相关资料。
(0049) ----------------------------------------------------------------------
(0050) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0051) 
(0052) #include <iom128v.h>
(0053) #include "D:\ICC_H\CmmICC.H"
(0054) void UART_init(void)
(0055) {
(0056) // USART0 initialization
(0057) // Communication Parameters: 8 Data, 1 Stop, No Parity
(0058) // USART0 Receiver: On
(0059) // USART0 Transmitter: On
(0060) // USART0 Mode: Asynchronous
(0061) // USART0 Baud Rate: 9600
(0062) UCSR0A=0x00;
_UART_init:
    00214 2422      CLR	R2
    00215 B82B      OUT	0x0B,R2
(0063) UCSR0B=0x18;
    00216 E188      LDI	R24,0x18
    00217 B98A      OUT	0x0A,R24
(0064) UCSR0C=0x06;
    00218 E086      LDI	R24,6
    00219 9380 0095 STS	dataElem+53,R24
(0065) UBRR0H=0x00;
    0021B 9220 0090 STS	dataElem+48,R2
(0066) UBRR0L=0x2F;
    0021D E28F      LDI	R24,0x2F
    0021E B989      OUT	0x09,R24
    0021F 9508      RET
(0067) }
(0068) 
(0069) 
(0070) //从RS232发送一个字节 
(0071) void uart_putchar0(char c) 
(0072) { 
(0073)     while(!(UCSR0A & 0x20));
_uart_putchar0:
  c                    --> R16
    00220 9B5D      SBIS	0x0B,5
    00221 CFFE      RJMP	_uart_putchar0
(0074)     UDR0 = c; 
    00222 B90C      OUT	0x0C,R16
    00223 9508      RET
(0075) } 
(0076) //从RS232接收一个字节 
(0077) unsigned int uart_getchar0(void) 
(0078) { 
(0079)     unsigned char status,res; 
(0080)     if(!(UCSR0A & 0x80)) return -1;        //no data to be received 
_uart_getchar0:
  res                  --> R16
  status               --> R18
    00224 995F      SBIC	0x0B,7
    00225 C003      RJMP	0x0229
    00226 EF0F      LDI	R16,0xFF
    00227 EF1F      LDI	R17,0xFF
    00228 C009      RJMP	0x0232
(0081)     status = UCSR0A; 
    00229 B12B      IN	R18,0x0B
(0082)     res = UDR0; 
    0022A B10C      IN	R16,0x0C
(0083)     if (status & 0x1c) return -1;        // If error, return -1 
    0022B 2F82      MOV	R24,R18
    0022C 718C      ANDI	R24,0x1C
    0022D F019      BEQ	0x0231
    0022E EF0F      LDI	R16,0xFF
    0022F EF1F      LDI	R17,0xFF
    00230 C001      RJMP	0x0232
(0084)     return res; 
    00231 2711      CLR	R17
    00232 9508      RET
_uart_waitchar0:
  c                    --> R10
    00233 92AA      ST	-Y,R10
    00234 92BA      ST	-Y,R11
(0085) } 
(0086) //等待从RS232接收一个有效的字节 
(0087) unsigned char uart_waitchar0(void) 
(0088) { 
(0089)     unsigned int c; 
(0090)     while((c=uart_getchar0())==-1); 
    00235 DFEE      RCALL	_uart_getchar0
    00236 0158      MOVW	R10,R16
    00237 3F0F      CPI	R16,0xFF
    00238 EFEF      LDI	R30,0xFF
    00239 071E      CPC	R17,R30
    0023A F3D1      BEQ	0x0235
(0091)     return (unsigned char)c; 
    0023B 90B9      LD	R11,Y+
    0023C 90A9      LD	R10,Y+
    0023D 9508      RET
(0092) } 
(0093) 
(0094) void main(void)
(0095) {
(0096)  	DDRA=0xFF;
_main:
    0023E EF8F      LDI	R24,0xFF
    0023F BB8A      OUT	0x1A,R24
(0097)  	UART_init();
    00240 DFD3      RCALL	_UART_init
(0098) 	uart_putchar0(0x55);
    00241 E505      LDI	R16,0x55
    00242 DFDD      RCALL	_uart_putchar0
(0099) 	
(0100) 	PORTA=uart_waitchar0();
    00243 DFEF      RCALL	_uart_waitchar0
    00244 BB0B      OUT	0x1B,R16
(0101) 	while(1);
FILE: <library>
    00245 CFFF      RJMP	0x0245
    00246 9508      RET
push_arg4:
    00247 933A      ST	-Y,R19
    00248 932A      ST	-Y,R18
push_arg2:
    00249 931A      ST	-Y,R17
    0024A 930A      ST	-Y,R16
    0024B 9508      RET
div32u:
    0024C 94E8      BCLR	6
    0024D C001      RJMP	0x024F
mod32u:
    0024E 9468      BSET	6
    0024F D02F      RCALL	long_div_prolog
    00250 24CC      CLR	R12
    00251 C008      RJMP	0x025A
div32s:
    00252 94E8      BCLR	6
    00253 C001      RJMP	0x0255
mod32s:
    00254 9468      BSET	6
    00255 D029      RCALL	long_div_prolog
    00256 FD37      SBRC	R19,7
    00257 D0C4      RCALL	neg32
    00258 FDB7      SBRC	R27,7
    00259 D051      RCALL	neg_R24_R27
    0025A 2477      CLR	R7
    0025B 2488      CLR	R8
    0025C 2499      CLR	R9
    0025D 24AA      CLR	R10
    0025E 24BB      CLR	R11
    0025F D041      RCALL	tst_R16_R19
    00260 F0C1      BEQ	0x0279
    00261 D044      RCALL	tst_R24_R27
    00262 F0B1      BEQ	0x0279
    00263 E2E8      LDI	R30,0x28
    00264 0F00      LSL	R16
    00265 1F11      ROL	R17
    00266 1F22      ROL	R18
    00267 1F33      ROL	R19
    00268 1C77      ROL	R7
    00269 1C88      ROL	R8
    0026A 1C99      ROL	R9
    0026B 1CAA      ROL	R10
    0026C 1CBB      ROL	R11
    0026D 1688      CP	R8,R24
    0026E 0699      CPC	R9,R25
    0026F 06AA      CPC	R10,R26
    00270 06BB      CPC	R11,R27
    00271 F028      BCS	0x0277
    00272 1A88      SUB	R8,R24
    00273 0A99      SBC	R9,R25
    00274 0AAA      SBC	R10,R26
    00275 0ABB      SBC	R11,R27
    00276 9503      INC	R16
    00277 95EA      DEC	R30
    00278 F759      BNE	0x0264
    00279 F426      BRTC	0x027E
    0027A 2D08      MOV	R16,R8
    0027B 2D19      MOV	R17,R9
    0027C 2D2A      MOV	R18,R10
    0027D 2D3B      MOV	R19,R11
    0027E C013      RJMP	long_div_epilog
long_div_prolog:
    0027F 927A      ST	-Y,R7
    00280 928A      ST	-Y,R8
    00281 929A      ST	-Y,R9
    00282 92AA      ST	-Y,R10
    00283 92BA      ST	-Y,R11
    00284 92CA      ST	-Y,R12
    00285 93EA      ST	-Y,R30
    00286 938A      ST	-Y,R24
    00287 939A      ST	-Y,R25
    00288 93AA      ST	-Y,R26
    00289 93BA      ST	-Y,R27
    0028A 858B      LDD	R24,Y+11
    0028B 859C      LDD	R25,Y+12
    0028C 85AD      LDD	R26,Y+13
    0028D 85BE      LDD	R27,Y+14
    0028E 2EC3      MOV	R12,R19
    0028F F00E      BRTS	0x0291
    00290 26CB      EOR	R12,R27
    00291 9508      RET
long_div_epilog:
    00292 FCC7      SBRC	R12,7
    00293 D088      RCALL	neg32
    00294 91B9      LD	R27,Y+
    00295 91A9      LD	R26,Y+
    00296 9199      LD	R25,Y+
    00297 9189      LD	R24,Y+
    00298 91E9      LD	R30,Y+
    00299 90C9      LD	R12,Y+
    0029A 90B9      LD	R11,Y+
    0029B 90A9      LD	R10,Y+
    0029C 9099      LD	R9,Y+
    0029D 9089      LD	R8,Y+
    0029E 9079      LD	R7,Y+
    0029F 9624      ADIW	R28,4
    002A0 9508      RET
tst_R16_R19:
    002A1 2FE0      MOV	R30,R16
    002A2 2BE1      OR	R30,R17
    002A3 2BE2      OR	R30,R18
    002A4 2BE3      OR	R30,R19
    002A5 9508      RET
tst_R24_R27:
    002A6 2FE8      MOV	R30,R24
    002A7 2BE9      OR	R30,R25
    002A8 2BEA      OR	R30,R26
    002A9 2BEB      OR	R30,R27
    002AA 9508      RET
neg_R24_R27:
    002AB 9580      COM	R24
    002AC 9590      COM	R25
    002AD 95A0      COM	R26
    002AE 95B0      COM	R27
    002AF 5F8F      SUBI	R24,0xFF
    002B0 4F9F      SBCI	R25,0xFF
    002B1 4FAF      SBCI	R26,0xFF
    002B2 4FBF      SBCI	R27,0xFF
    002B3 9508      RET
empy32u|empy32s:
    002B4 D070      RCALL	long_prolog
    002B5 927A      ST	-Y,R7
    002B6 D087      RCALL	tstzero1
    002B7 F151      BEQ	0x02E2
    002B8 2477      CLR	R7
    002B9 D08A      RCALL	tstzero2
    002BA F419      BNE	0x02BE
    002BB 018C      MOVW	R16,R24
    002BC 019D      MOVW	R18,R26
    002BD C024      RJMP	0x02E2
    002BE 920A      ST	-Y,R0
    002BF 921A      ST	-Y,R1
    002C0 9F08      MUL	R16,R24
    002C1 2CB0      MOV	R11,R0
    002C2 2CA1      MOV	R10,R1
    002C3 9F28      MUL	R18,R24
    002C4 2C90      MOV	R9,R0
    002C5 2C81      MOV	R8,R1
    002C6 9F18      MUL	R17,R24
    002C7 0CA0      ADD	R10,R0
    002C8 1C91      ADC	R9,R1
    002C9 1C87      ADC	R8,R7
    002CA 9F09      MUL	R16,R25
    002CB 0CA0      ADD	R10,R0
    002CC 1C91      ADC	R9,R1
    002CD 1C87      ADC	R8,R7
    002CE 9F19      MUL	R17,R25
    002CF 0C90      ADD	R9,R0
    002D0 1C81      ADC	R8,R1
    002D1 9F0A      MUL	R16,R26
    002D2 0C90      ADD	R9,R0
    002D3 1C81      ADC	R8,R1
    002D4 9F38      MUL	R19,R24
    002D5 0C80      ADD	R8,R0
    002D6 9F29      MUL	R18,R25
    002D7 0C80      ADD	R8,R0
    002D8 9F1A      MUL	R17,R26
    002D9 0C80      ADD	R8,R0
    002DA 9F0B      MUL	R16,R27
    002DB 0C80      ADD	R8,R0
    002DC 9019      LD	R1,Y+
    002DD 9009      LD	R0,Y+
    002DE 2D0B      MOV	R16,R11
    002DF 2D1A      MOV	R17,R10
    002E0 2D29      MOV	R18,R9
    002E1 2D38      MOV	R19,R8
    002E2 9079      LD	R7,Y+
    002E3 C04F      RJMP	long_epilog
pop_xgset00FC:
    002E4 90A9      LD	R10,Y+
    002E5 90B9      LD	R11,Y+
    002E6 90C9      LD	R12,Y+
    002E7 90D9      LD	R13,Y+
    002E8 90E9      LD	R14,Y+
    002E9 90F9      LD	R15,Y+
    002EA 9508      RET
pop_xgset30FC:
    002EB 90A9      LD	R10,Y+
    002EC 90B9      LD	R11,Y+
    002ED 90C9      LD	R12,Y+
    002EE 90D9      LD	R13,Y+
    002EF 90E9      LD	R14,Y+
    002F0 90F9      LD	R15,Y+
    002F1 9149      LD	R20,Y+
    002F2 9159      LD	R21,Y+
    002F3 9508      RET
pop_xgsetF0FC:
    002F4 90A9      LD	R10,Y+
    002F5 90B9      LD	R11,Y+
    002F6 90C9      LD	R12,Y+
    002F7 90D9      LD	R13,Y+
    002F8 90E9      LD	R14,Y+
    002F9 90F9      LD	R15,Y+
    002FA 9149      LD	R20,Y+
    002FB 9159      LD	R21,Y+
    002FC 9169      LD	R22,Y+
    002FD 9179      LD	R23,Y+
    002FE 9508      RET
push_xgsetF0FC:
    002FF 937A      ST	-Y,R23
    00300 936A      ST	-Y,R22
push_xgset30FC:
    00301 935A      ST	-Y,R21
    00302 934A      ST	-Y,R20
push_xgset00FC:
    00303 92FA      ST	-Y,R15
    00304 92EA      ST	-Y,R14
push_xgset003C:
    00305 92DA      ST	-Y,R13
    00306 92CA      ST	-Y,R12
    00307 92BA      ST	-Y,R11
    00308 92AA      ST	-Y,R10
    00309 9508      RET
push_xgsetF03C:
    0030A 937A      ST	-Y,R23
    0030B 936A      ST	-Y,R22
    0030C 935A      ST	-Y,R21
    0030D 934A      ST	-Y,R20
    0030E 92DA      ST	-Y,R13
    0030F 92CA      ST	-Y,R12
    00310 92BA      ST	-Y,R11
    00311 92AA      ST	-Y,R10
    00312 9508      RET
pop_xgsetF03C:
    00313 90A9      LD	R10,Y+
    00314 90B9      LD	R11,Y+
    00315 90C9      LD	R12,Y+
    00316 90D9      LD	R13,Y+
    00317 9149      LD	R20,Y+
    00318 9159      LD	R21,Y+
    00319 9169      LD	R22,Y+
    0031A 9179      LD	R23,Y+
    0031B 9508      RET
neg32:
    0031C 9500      COM	R16
    0031D 9510      COM	R17
    0031E 9520      COM	R18
    0031F 9530      COM	R19
    00320 5F0F      SUBI	R16,0xFF
    00321 4F1F      SBCI	R17,0xFF
    00322 4F2F      SBCI	R18,0xFF
    00323 4F3F      SBCI	R19,0xFF
    00324 9508      RET
long_prolog:
    00325 928A      ST	-Y,R8
    00326 929A      ST	-Y,R9
    00327 92AA      ST	-Y,R10
    00328 92BA      ST	-Y,R11
    00329 93EA      ST	-Y,R30
    0032A 938A      ST	-Y,R24
    0032B 939A      ST	-Y,R25
    0032C 93AA      ST	-Y,R26
    0032D 93BA      ST	-Y,R27
    0032E 8589      LDD	R24,Y+9
    0032F 859A      LDD	R25,Y+10
    00330 85AB      LDD	R26,Y+11
    00331 85BC      LDD	R27,Y+12
    00332 9508      RET
long_epilog:
    00333 91B9      LD	R27,Y+
    00334 91A9      LD	R26,Y+
    00335 9199      LD	R25,Y+
    00336 9189      LD	R24,Y+
    00337 91E9      LD	R30,Y+
    00338 90B9      LD	R11,Y+
    00339 90A9      LD	R10,Y+
    0033A 9099      LD	R9,Y+
    0033B 9089      LD	R8,Y+
    0033C 9624      ADIW	R28,4
    0033D 9508      RET
tstzero1:
    0033E 27EE      CLR	R30
    0033F 2BE0      OR	R30,R16
    00340 2BE1      OR	R30,R17
    00341 2BE2      OR	R30,R18
    00342 2BE3      OR	R30,R19
    00343 9508      RET
tstzero2:
    00344 27EE      CLR	R30
    00345 2BE8      OR	R30,R24
    00346 2BE9      OR	R30,R25
    00347 2BEA      OR	R30,R26
    00348 2BEB      OR	R30,R27
    00349 9508      RET
