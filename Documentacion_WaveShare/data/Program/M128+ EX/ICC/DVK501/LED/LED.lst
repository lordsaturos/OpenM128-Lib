Interrupt Vectors
    00000 940C 0046 JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    00046 EFCF      LDI	R28,0xFF
    00047 E1D0      LDI	R29,0x10
    00048 BFCD      OUT	0x3D,R28
    00049 BFDE      OUT	0x3E,R29
    0004A 51CE      SUBI	R28,0x1E
    0004B 40D0      SBCI	R29,0
    0004C EA0A      LDI	R16,0xAA
    0004D 8308      ST	Y,R16
    0004E 2400      CLR	R0
    0004F E0E0      LDI	R30,0
    00050 E0F1      LDI	R31,1
    00051 E011      LDI	R17,1
    00052 30E6      CPI	R30,6
    00053 07F1      CPC	R31,R17
    00054 F011      BEQ	0x0057
    00055 9201      ST	Z+,R0
    00056 CFFB      RJMP	0x0052
    00057 8300      ST	Z,R16
    00058 E8EC      LDI	R30,0x8C
    00059 E0F0      LDI	R31,0
    0005A E0A0      LDI	R26,0
    0005B E0B1      LDI	R27,1
    0005C E010      LDI	R17,0
    0005D E000      LDI	R16,0
    0005E BF0B      OUT	0x3B,R16
    0005F 38EC      CPI	R30,0x8C
    00060 07F1      CPC	R31,R17
    00061 F021      BEQ	0x0066
    00062 95C8      LPM
    00063 9631      ADIW	R30,1
    00064 920D      ST	X+,R0
    00065 CFF9      RJMP	0x005F
    00066 940E 00FD CALL	_main
_exit:
    00068 CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    00069 940E 010A CALL	push_arg4
    0006B 940E 01AD CALL	push_xgsetF03C
    0006D 9728      SBIW	R28,0x8
    0006E 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    0006F 24AA      CLR	R10
    00070 E081      LDI	R24,1
    00071 8388      ST	Y,R24
    00072 E080      LDI	R24,0
    00073 8389      STD	Y+1,R24
    00074 838A      STD	Y+2,R24
    00075 838B      STD	Y+3,R24
    00076 C03C      RJMP	0x00B3
(0120)     {
(0121)         y=dat/j;
    00077 8028      LD	R2,Y
    00078 8039      LDD	R3,Y+1
    00079 804A      LDD	R4,Y+2
    0007A 805B      LDD	R5,Y+3
    0007B 8908      LDD	R16,Y+16
    0007C 8919      LDD	R17,Y+17
    0007D 892A      LDD	R18,Y+18
    0007E 893B      LDD	R19,Y+19
    0007F 925A      ST	-Y,R5
    00080 924A      ST	-Y,R4
    00081 923A      ST	-Y,R3
    00082 922A      ST	-Y,R2
    00083 940E 010F CALL	div32u
    00085 830C      STD	Y+4,R16
    00086 831D      STD	Y+5,R17
    00087 832E      STD	Y+6,R18
    00088 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    00089 E04A      LDI	R20,0xA
    0008A E050      LDI	R21,0
    0008B E060      LDI	R22,0
    0008C E070      LDI	R23,0
    0008D 810C      LDD	R16,Y+4
    0008E 811D      LDD	R17,Y+5
    0008F 812E      LDD	R18,Y+6
    00090 813F      LDD	R19,Y+7
    00091 937A      ST	-Y,R23
    00092 936A      ST	-Y,R22
    00093 935A      ST	-Y,R21
    00094 934A      ST	-Y,R20
    00095 940E 0111 CALL	mod32u
    00097 E080      LDI	R24,0
    00098 E091      LDI	R25,1
    00099 2DEA      MOV	R30,R10
    0009A 27FF      CLR	R31
    0009B 0FE8      ADD	R30,R24
    0009C 1FF9      ADC	R31,R25
    0009D 8300      ST	Z,R16
(0123)         j*=10;
    0009E 8028      LD	R2,Y
    0009F 8039      LDD	R3,Y+1
    000A0 804A      LDD	R4,Y+2
    000A1 805B      LDD	R5,Y+3
    000A2 E04A      LDI	R20,0xA
    000A3 E050      LDI	R21,0
    000A4 E060      LDI	R22,0
    000A5 E070      LDI	R23,0
    000A6 925A      ST	-Y,R5
    000A7 924A      ST	-Y,R4
    000A8 923A      ST	-Y,R3
    000A9 922A      ST	-Y,R2
    000AA 018A      MOVW	R16,R20
    000AB 019B      MOVW	R18,R22
    000AC 940E 0179 CALL	empy32s|empy32u
    000AE 8308      ST	Y,R16
    000AF 8319      STD	Y+1,R17
    000B0 832A      STD	Y+2,R18
    000B1 833B      STD	Y+3,R19
    000B2 94A3      INC	R10
    000B3 2C2C      MOV	R2,R12
    000B4 2433      CLR	R3
    000B5 FC27      SBRC	R2,7
    000B6 9430      COM	R3
    000B7 2C4A      MOV	R4,R10
    000B8 2455      CLR	R5
    000B9 1442      CP	R4,R2
    000BA 0453      CPC	R5,R3
    000BB F40C      BGE	0x00BD
    000BC CFBA      RJMP	0x0077
    000BD 9628      ADIW	R28,0x8
    000BE 940E 01B6 CALL	pop_xgsetF03C
    000C0 9624      ADIW	R28,4
    000C1 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    000C2 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    000C3 C007      RJMP	0x00CB
(0108)         for(j=0;j<70;j++)	
    000C4 2744      CLR	R20
    000C5 C001      RJMP	0x00C7
    000C6 9543      INC	R20
    000C7 3446      CPI	R20,0x46
    000C8 F3E8      BCS	0x00C6
    000C9 5001      SUBI	R16,1
    000CA 4010      SBCI	R17,0
    000CB 2422      CLR	R2
    000CC 2433      CLR	R3
    000CD 1620      CP	R2,R16
    000CE 0631      CPC	R3,R17
    000CF F3A4      BLT	0x00C4
    000D0 9149      LD	R20,Y+
    000D1 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    000D2 934A      ST	-Y,R20
    000D3 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    000D4 C013      RJMP	0x00E8
(0123) 		for(i=0;i<52642;i++)
    000D5 2744      CLR	R20
    000D6 2755      CLR	R21
    000D7 C002      RJMP	0x00DA
    000D8 5F4F      SUBI	R20,0xFF
    000D9 4F5F      SBCI	R21,0xFF
    000DA EA82      LDI	R24,0xA2
    000DB EC9D      LDI	R25,0xCD
    000DC E0A0      LDI	R26,0
    000DD E0B0      LDI	R27,0
    000DE 011A      MOVW	R2,R20
    000DF 2444      CLR	R4
    000E0 2455      CLR	R5
    000E1 1628      CP	R2,R24
    000E2 0639      CPC	R3,R25
    000E3 064A      CPC	R4,R26
    000E4 065B      CPC	R5,R27
    000E5 F394      BLT	0x00D8
    000E6 5001      SUBI	R16,1
    000E7 4010      SBCI	R17,0
    000E8 2422      CLR	R2
    000E9 2433      CLR	R3
    000EA 1620      CP	R2,R16
    000EB 0631      CPC	R3,R17
    000EC F344      BLT	0x00D5
    000ED 9159      LD	R21,Y+
    000EE 9149      LD	R20,Y+
    000EF 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    000F0 934A      ST	-Y,R20
    000F1 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    000F2 2744      CLR	R20
    000F3 2755      CLR	R21
    000F4 C002      RJMP	0x00F7
    000F5 5F4F      SUBI	R20,0xFF
    000F6 4F5F      SBCI	R21,0xFF
    000F7 1740      CP	R20,R16
    000F8 0751      CPC	R21,R17
    000F9 F3D8      BCS	0x00F5
    000FA 9159      LD	R21,Y+
    000FB 9149      LD	R20,Y+
    000FC 9508      RET
FILE: D:\DVK501_ICC\M128_E~1\LED\LED.C
(0001) /*
(0002) *========================================================================================================
(0003) *
(0004) * File                : LED.c
(0005) * Hardware Environment:	
(0006) * Build Environment   : ICC 7.22
(0007) * Version             : V1.0
(0008) * By                  : Wu Ze
(0009) *
(0010) *                                  (c) Copyright 2005-2009, WaveShare
(0011) *                                       http://www.waveShare.net
(0012) *                                          All Rights Reserved
(0013) *
(0014) *========================================================================================================
(0015) */
(0016) 
(0017) 
(0018) /****************************例子程序效果介绍*****************************
(0019) *
(0020) *将单片机的某端口接到LED灯后，可以观察到LED在错位闪烁，闪烁周期为1秒
(0021) *
(0022) *****************************例子程序效果介绍****************************/
(0023) #define NO_INCLUDE_I2C_H 1
(0024) #include <iom128v.h>
(0025) #include "d:\icc_h\CmmICC.h"
(0026) int main(void)
(0027) {
(0028) 	DDRA=0xFF;	//PA口接LED
_main:
    000FD EF8F      LDI	R24,0xFF
    000FE BB8A      OUT	0x1A,R24
(0029) 	PORTA=0x55;
    000FF E585      LDI	R24,0x55
    00100 BB8B      OUT	0x1B,R24
    00101 C006      RJMP	0x0108
(0030) 	while(1)
(0031) 	{
(0032) 		delay50ms(500);	//延时500毫秒(0.5秒)
    00102 EF04      LDI	R16,0xF4
    00103 E011      LDI	R17,1
    00104 DFCD      RCALL	_delay50ms
(0033) 		PORTA=~PORTA;	//PORTA电平取反
FILE: <library>
    00105 B22B      IN	R2,0x1B
    00106 9420      COM	R2
    00107 BA2B      OUT	0x1B,R2
    00108 CFF9      RJMP	0x0102
    00109 9508      RET
push_arg4:
    0010A 933A      ST	-Y,R19
    0010B 932A      ST	-Y,R18
push_arg2:
    0010C 931A      ST	-Y,R17
    0010D 930A      ST	-Y,R16
    0010E 9508      RET
div32u:
    0010F 94E8      BCLR	6
    00110 C001      RJMP	0x0112
mod32u:
    00111 9468      BSET	6
    00112 D030      RCALL	long_div_prolog
    00113 24CC      CLR	R12
    00114 C009      RJMP	0x011E
div32s:
    00115 94E8      BCLR	6
    00116 C001      RJMP	0x0118
mod32s:
    00117 9468      BSET	6
    00118 D02A      RCALL	long_div_prolog
    00119 FD37      SBRC	R19,7
    0011A 940E 01BF CALL	neg32
    0011C FDB7      SBRC	R27,7
    0011D D052      RCALL	neg_R24_R27
    0011E 2477      CLR	R7
    0011F 2488      CLR	R8
    00120 2499      CLR	R9
    00121 24AA      CLR	R10
    00122 24BB      CLR	R11
    00123 D042      RCALL	tst_R16_R19
    00124 F0C1      BEQ	0x013D
    00125 D045      RCALL	tst_R24_R27
    00126 F0B1      BEQ	0x013D
    00127 E2E8      LDI	R30,0x28
    00128 0F00      LSL	R16
    00129 1F11      ROL	R17
    0012A 1F22      ROL	R18
    0012B 1F33      ROL	R19
    0012C 1C77      ROL	R7
    0012D 1C88      ROL	R8
    0012E 1C99      ROL	R9
    0012F 1CAA      ROL	R10
    00130 1CBB      ROL	R11
    00131 1688      CP	R8,R24
    00132 0699      CPC	R9,R25
    00133 06AA      CPC	R10,R26
    00134 06BB      CPC	R11,R27
    00135 F028      BCS	0x013B
    00136 1A88      SUB	R8,R24
    00137 0A99      SBC	R9,R25
    00138 0AAA      SBC	R10,R26
    00139 0ABB      SBC	R11,R27
    0013A 9503      INC	R16
    0013B 95EA      DEC	R30
    0013C F759      BNE	0x0128
    0013D F426      BRTC	0x0142
    0013E 2D08      MOV	R16,R8
    0013F 2D19      MOV	R17,R9
    00140 2D2A      MOV	R18,R10
    00141 2D3B      MOV	R19,R11
    00142 C013      RJMP	long_div_epilog
long_div_prolog:
    00143 927A      ST	-Y,R7
    00144 928A      ST	-Y,R8
    00145 929A      ST	-Y,R9
    00146 92AA      ST	-Y,R10
    00147 92BA      ST	-Y,R11
    00148 92CA      ST	-Y,R12
    00149 93EA      ST	-Y,R30
    0014A 938A      ST	-Y,R24
    0014B 939A      ST	-Y,R25
    0014C 93AA      ST	-Y,R26
    0014D 93BA      ST	-Y,R27
    0014E 858B      LDD	R24,Y+11
    0014F 859C      LDD	R25,Y+12
    00150 85AD      LDD	R26,Y+13
    00151 85BE      LDD	R27,Y+14
    00152 2EC3      MOV	R12,R19
    00153 F00E      BRTS	0x0155
    00154 26CB      EOR	R12,R27
    00155 9508      RET
long_div_epilog:
    00156 FCC7      SBRC	R12,7
    00157 940E 01BF CALL	neg32
    00159 91B9      LD	R27,Y+
    0015A 91A9      LD	R26,Y+
    0015B 9199      LD	R25,Y+
    0015C 9189      LD	R24,Y+
    0015D 91E9      LD	R30,Y+
    0015E 90C9      LD	R12,Y+
    0015F 90B9      LD	R11,Y+
    00160 90A9      LD	R10,Y+
    00161 9099      LD	R9,Y+
    00162 9089      LD	R8,Y+
    00163 9079      LD	R7,Y+
    00164 9624      ADIW	R28,4
    00165 9508      RET
tst_R16_R19:
    00166 2FE0      MOV	R30,R16
    00167 2BE1      OR	R30,R17
    00168 2BE2      OR	R30,R18
    00169 2BE3      OR	R30,R19
    0016A 9508      RET
tst_R24_R27:
    0016B 2FE8      MOV	R30,R24
    0016C 2BE9      OR	R30,R25
    0016D 2BEA      OR	R30,R26
    0016E 2BEB      OR	R30,R27
    0016F 9508      RET
neg_R24_R27:
    00170 9580      COM	R24
    00171 9590      COM	R25
    00172 95A0      COM	R26
    00173 95B0      COM	R27
    00174 5F8F      SUBI	R24,0xFF
    00175 4F9F      SBCI	R25,0xFF
    00176 4FAF      SBCI	R26,0xFF
    00177 4FBF      SBCI	R27,0xFF
    00178 9508      RET
empy32s|empy32u:
    00179 940E 01C8 CALL	long_prolog
    0017B 927A      ST	-Y,R7
    0017C 940E 01E1 CALL	tstzero1
    0017E F159      BEQ	0x01AA
    0017F 2477      CLR	R7
    00180 940E 01E7 CALL	tstzero2
    00182 F419      BNE	0x0186
    00183 018C      MOVW	R16,R24
    00184 019D      MOVW	R18,R26
    00185 C024      RJMP	0x01AA
    00186 920A      ST	-Y,R0
    00187 921A      ST	-Y,R1
    00188 9F08      MUL	R16,R24
    00189 2CB0      MOV	R11,R0
    0018A 2CA1      MOV	R10,R1
    0018B 9F28      MUL	R18,R24
    0018C 2C90      MOV	R9,R0
    0018D 2C81      MOV	R8,R1
    0018E 9F18      MUL	R17,R24
    0018F 0CA0      ADD	R10,R0
    00190 1C91      ADC	R9,R1
    00191 1C87      ADC	R8,R7
    00192 9F09      MUL	R16,R25
    00193 0CA0      ADD	R10,R0
    00194 1C91      ADC	R9,R1
    00195 1C87      ADC	R8,R7
    00196 9F19      MUL	R17,R25
    00197 0C90      ADD	R9,R0
    00198 1C81      ADC	R8,R1
    00199 9F0A      MUL	R16,R26
    0019A 0C90      ADD	R9,R0
    0019B 1C81      ADC	R8,R1
    0019C 9F38      MUL	R19,R24
    0019D 0C80      ADD	R8,R0
    0019E 9F29      MUL	R18,R25
    0019F 0C80      ADD	R8,R0
    001A0 9F1A      MUL	R17,R26
    001A1 0C80      ADD	R8,R0
    001A2 9F0B      MUL	R16,R27
    001A3 0C80      ADD	R8,R0
    001A4 9019      LD	R1,Y+
    001A5 9009      LD	R0,Y+
    001A6 2D0B      MOV	R16,R11
    001A7 2D1A      MOV	R17,R10
    001A8 2D29      MOV	R18,R9
    001A9 2D38      MOV	R19,R8
    001AA 9079      LD	R7,Y+
    001AB 940C 01D6 JMP	long_epilog
push_xgsetF03C:
    001AD 937A      ST	-Y,R23
    001AE 936A      ST	-Y,R22
    001AF 935A      ST	-Y,R21
    001B0 934A      ST	-Y,R20
    001B1 92DA      ST	-Y,R13
    001B2 92CA      ST	-Y,R12
    001B3 92BA      ST	-Y,R11
    001B4 92AA      ST	-Y,R10
    001B5 9508      RET
pop_xgsetF03C:
    001B6 90A9      LD	R10,Y+
    001B7 90B9      LD	R11,Y+
    001B8 90C9      LD	R12,Y+
    001B9 90D9      LD	R13,Y+
    001BA 9149      LD	R20,Y+
    001BB 9159      LD	R21,Y+
    001BC 9169      LD	R22,Y+
    001BD 9179      LD	R23,Y+
    001BE 9508      RET
neg32:
    001BF 9500      COM	R16
    001C0 9510      COM	R17
    001C1 9520      COM	R18
    001C2 9530      COM	R19
    001C3 5F0F      SUBI	R16,0xFF
    001C4 4F1F      SBCI	R17,0xFF
    001C5 4F2F      SBCI	R18,0xFF
    001C6 4F3F      SBCI	R19,0xFF
    001C7 9508      RET
long_prolog:
    001C8 928A      ST	-Y,R8
    001C9 929A      ST	-Y,R9
    001CA 92AA      ST	-Y,R10
    001CB 92BA      ST	-Y,R11
    001CC 93EA      ST	-Y,R30
    001CD 938A      ST	-Y,R24
    001CE 939A      ST	-Y,R25
    001CF 93AA      ST	-Y,R26
    001D0 93BA      ST	-Y,R27
    001D1 8589      LDD	R24,Y+9
    001D2 859A      LDD	R25,Y+10
    001D3 85AB      LDD	R26,Y+11
    001D4 85BC      LDD	R27,Y+12
    001D5 9508      RET
long_epilog:
    001D6 91B9      LD	R27,Y+
    001D7 91A9      LD	R26,Y+
    001D8 9199      LD	R25,Y+
    001D9 9189      LD	R24,Y+
    001DA 91E9      LD	R30,Y+
    001DB 90B9      LD	R11,Y+
    001DC 90A9      LD	R10,Y+
    001DD 9099      LD	R9,Y+
    001DE 9089      LD	R8,Y+
    001DF 9624      ADIW	R28,4
    001E0 9508      RET
tstzero1:
    001E1 27EE      CLR	R30
    001E2 2BE0      OR	R30,R16
    001E3 2BE1      OR	R30,R17
    001E4 2BE2      OR	R30,R18
    001E5 2BE3      OR	R30,R19
    001E6 9508      RET
tstzero2:
    001E7 27EE      CLR	R30
    001E8 2BE8      OR	R30,R24
    001E9 2BE9      OR	R30,R25
    001EA 2BEA      OR	R30,R26
    001EB 2BEB      OR	R30,R27
    001EC 9508      RET
