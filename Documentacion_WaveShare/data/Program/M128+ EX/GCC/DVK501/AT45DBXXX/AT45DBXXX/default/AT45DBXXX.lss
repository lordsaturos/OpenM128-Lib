
AT45DBXXX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000064  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000328  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001a3  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000345  00000000  00000000  00000731  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000126  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000cb  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 91 00 	call	0x122	; 0x122 <main>
  9c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <spiInitAt45db>:
#if defined(_DVK501_M128_EX_)
#define CLR_SS_AT45DB() cbi(PORTB,0)
#define SET_SS_AT45DB() sbi(PORTB,0)
void spiInitAt45db(void)
{
	DDRB|=0x0F;
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	8f 60       	ori	r24, 0x0F	; 15
  a8:	87 bb       	out	0x17, r24	; 23
	PORTB|=0x0F;
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	88 bb       	out	0x18, r24	; 24
	SPCR=0x50;
  b0:	80 e5       	ldi	r24, 0x50	; 80
  b2:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x01;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	8e b9       	out	0x0e, r24	; 14
}
  b8:	08 95       	ret

000000ba <spi_transmit_byte>:
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  ba:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  bc:	77 9b       	sbis	0x0e, 7	; 14
  be:	fe cf       	rjmp	.-4      	; 0xbc <spi_transmit_byte+0x2>
}
  c0:	08 95       	ret

000000c2 <write_buffer>:
//============================================================
void write_buffer(uint16_t BufferOffset,uint8_t data)
{			
  c2:	28 2f       	mov	r18, r24
	CLR_SS_AT45DB();		
  c4:	c0 98       	cbi	0x18, 0	; 24
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <write_buffer+0x8>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  d2:	77 9b       	sbis	0x0e, 7	; 14
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <write_buffer+0x10>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  d6:	9f b9       	out	0x0f, r25	; 15
    while(!(SPSR&0x80));
  d8:	77 9b       	sbis	0x0e, 7	; 14
  da:	fe cf       	rjmp	.-4      	; 0xd8 <write_buffer+0x16>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  dc:	2f b9       	out	0x0f, r18	; 15
    while(!(SPSR&0x80));
  de:	77 9b       	sbis	0x0e, 7	; 14
  e0:	fe cf       	rjmp	.-4      	; 0xde <write_buffer+0x1c>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  e2:	6f b9       	out	0x0f, r22	; 15
    while(!(SPSR&0x80));
  e4:	77 9b       	sbis	0x0e, 7	; 14
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <write_buffer+0x22>
	spi_transmit_byte(0x84);//84			  						
	spi_transmit_byte(0xff);						
	spi_transmit_byte((uint8_t)(BufferOffset>>8));	
	spi_transmit_byte((uint8_t)BufferOffset);		
	spi_transmit_byte(data);		
	SET_SS_AT45DB();	
  e8:	c0 9a       	sbi	0x18, 0	; 24
}
  ea:	08 95       	ret

000000ec <read_buffer>:
//================================================================
uint8_t read_buffer(uint16_t BufferOffset)
{		
  ec:	28 2f       	mov	r18, r24
    uint8_t temp;
	CLR_SS_AT45DB();
  ee:	c0 98       	cbi	0x18, 0	; 24
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  f0:	81 ed       	ldi	r24, 0xD1	; 209
  f2:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  f4:	77 9b       	sbis	0x0e, 7	; 14
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <read_buffer+0x8>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  fc:	77 9b       	sbis	0x0e, 7	; 14
  fe:	fe cf       	rjmp	.-4      	; 0xfc <read_buffer+0x10>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
 100:	9f b9       	out	0x0f, r25	; 15
    while(!(SPSR&0x80));
 102:	77 9b       	sbis	0x0e, 7	; 14
 104:	fe cf       	rjmp	.-4      	; 0x102 <read_buffer+0x16>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
 106:	2f b9       	out	0x0f, r18	; 15
    while(!(SPSR&0x80));
 108:	77 9b       	sbis	0x0e, 7	; 14
 10a:	fe cf       	rjmp	.-4      	; 0x108 <read_buffer+0x1c>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
 110:	77 9b       	sbis	0x0e, 7	; 14
 112:	fe cf       	rjmp	.-4      	; 0x110 <read_buffer+0x24>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
 118:	77 9b       	sbis	0x0e, 7	; 14
 11a:	fe cf       	rjmp	.-4      	; 0x118 <read_buffer+0x2c>
	spi_transmit_byte(0xff);
	spi_transmit_byte((uint8_t)(BufferOffset>>8));
	spi_transmit_byte((uint8_t)BufferOffset);
	spi_transmit_byte(0xff);
	spi_transmit_byte(0xff);
	temp=SPDR;	  
 11c:	8f b1       	in	r24, 0x0f	; 15
	SET_SS_AT45DB();
 11e:	c0 9a       	sbi	0x18, 0	; 24
    return temp;								
}
 120:	08 95       	ret

00000122 <main>:

#define DISP_DDR DDRA
#define DISP_PORT PORTA

int main(void)
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
#if defined(_DVK501_M128_EX_)
#define CLR_SS_AT45DB() cbi(PORTB,0)
#define SET_SS_AT45DB() sbi(PORTB,0)
void spiInitAt45db(void)
{
	DDRB|=0x0F;
 12a:	87 b3       	in	r24, 0x17	; 23
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	87 bb       	out	0x17, r24	; 23
	PORTB|=0x0F;
 130:	88 b3       	in	r24, 0x18	; 24
 132:	8f 60       	ori	r24, 0x0F	; 15
 134:	88 bb       	out	0x18, r24	; 24
	SPCR=0x50;
 136:	80 e5       	ldi	r24, 0x50	; 80
 138:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x01;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	8e b9       	out	0x0e, r24	; 14
	uint8_t num;
	spiInitAt45db();
	DISP_DDR=0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8a bb       	out	0x1a, r24	; 26
	DISP_PORT=0x00;
 142:	1b ba       	out	0x1b, r1	; 27
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 148:	03 e3       	ldi	r16, 0x33	; 51
 14a:	17 e0       	ldi	r17, 0x07	; 7
	for(num=0;num<255;num++)
	{
		write_buffer((uint16_t)num,num);
 14c:	ce 01       	movw	r24, r28
 14e:	6c 2f       	mov	r22, r28
 150:	0e 94 61 00 	call	0xc2	; 0xc2 <write_buffer>
 154:	c8 01       	movw	r24, r16
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x34>
 15a:	21 96       	adiw	r28, 0x01	; 1
{
	uint8_t num;
	spiInitAt45db();
	DISP_DDR=0xFF;
	DISP_PORT=0x00;
	for(num=0;num<255;num++)
 15c:	cf 3f       	cpi	r28, 0xFF	; 255
 15e:	d1 05       	cpc	r29, r1
 160:	a9 f7       	brne	.-22     	; 0x14c <main+0x2a>
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	08 eb       	ldi	r16, 0xB8	; 184
 168:	10 e0       	ldi	r17, 0x00	; 0
		write_buffer((uint16_t)num,num);
		_delay_ms(1);
	}
	for(num=0;num<255;num++)
	{
		DISP_PORT=read_buffer((uint16_t)num);
 16a:	ce 01       	movw	r24, r28
 16c:	0e 94 76 00 	call	0xec	; 0xec <read_buffer>
 170:	8b bb       	out	0x1b, r24	; 27
 172:	88 e8       	ldi	r24, 0x88	; 136
 174:	93 e1       	ldi	r25, 0x13	; 19
 176:	f8 01       	movw	r30, r16
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x56>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	d9 f7       	brne	.-10     	; 0x176 <main+0x54>
 180:	21 96       	adiw	r28, 0x01	; 1
	for(num=0;num<255;num++)
	{
		write_buffer((uint16_t)num,num);
		_delay_ms(1);
	}
	for(num=0;num<255;num++)
 182:	cf 3f       	cpi	r28, 0xFF	; 255
 184:	d1 05       	cpc	r29, r1
 186:	89 f7       	brne	.-30     	; 0x16a <main+0x48>
 188:	ff cf       	rjmp	.-2      	; 0x188 <main+0x66>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
