
DS18B20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000066  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000413  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000180  00000000  00000000  00000687  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000037a  00000000  00000000  00000807  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000130  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000013f  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000168  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  9c:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <resetOnewire>:
#ifndef _WS_ONEWIRE_H_
#define _WS_ONEWIRE_H_
//-----复位-----
void resetOnewire(void) 
{
	OUT_DQ();
  a4:	bd 9a       	sbi	0x17, 5	; 23
    CLR_DQ();
  a6:	c5 98       	cbi	0x18, 5	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	89 e9       	ldi	r24, 0x99	; 153
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <resetOnewire+0x8>
    _delay_us(500);
    SET_DQ(); 
  b0:	c5 9a       	sbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  b2:	86 e5       	ldi	r24, 0x56	; 86
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <resetOnewire+0x10>
    _delay_us(35);
	IN_DQ();
  b8:	bd 98       	cbi	0x17, 5	; 23
	while(GET_DQ());
  ba:	b5 99       	sbic	0x16, 5	; 22
  bc:	fe cf       	rjmp	.-4      	; 0xba <resetOnewire+0x16>
  be:	01 c0       	rjmp	.+2      	; 0xc2 <resetOnewire+0x1e>
	while(!(GET_DQ()))
	OUT_DQ();
  c0:	bd 9a       	sbi	0x17, 5	; 23
    _delay_us(500);
    SET_DQ(); 
    _delay_us(35);
	IN_DQ();
	while(GET_DQ());
	while(!(GET_DQ()))
  c2:	b5 9b       	sbis	0x16, 5	; 22
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <resetOnewire+0x1c>
	OUT_DQ();
}
  c6:	08 95       	ret

000000c8 <rOnewire>:

//-----读数据-----
uint8_t rOnewire(void)
{
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	37 e0       	ldi	r19, 0x07	; 7
    uint8_t data=0,i=0;
    for(i=0;i<8;i++) 
    {
    	SET_DQ();
  ce:	43 e9       	ldi	r20, 0x93	; 147
  d0:	c5 9a       	sbi	0x18, 5	; 24
		OUT_DQ();
  d2:	bd 9a       	sbi	0x17, 5	; 23
        CLR_DQ();
  d4:	c5 98       	cbi	0x18, 5	; 24
        data=data>>1;
  d6:	86 95       	lsr	r24
  d8:	93 2f       	mov	r25, r19
  da:	9a 95       	dec	r25
  dc:	f1 f7       	brne	.-4      	; 0xda <rOnewire+0x12>
        _delay_us(3);
		IN_DQ();
  de:	bd 98       	cbi	0x17, 5	; 23
		SET_DQ();
  e0:	c5 9a       	sbi	0x18, 5	; 24
  e2:	93 2f       	mov	r25, r19
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <rOnewire+0x1c>
		_delay_us(3);
        if(GET_DQ()) data|=0x80;
  e8:	b5 99       	sbic	0x16, 5	; 22
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	94 2f       	mov	r25, r20
  ee:	9a 95       	dec	r25
  f0:	f1 f7       	brne	.-4      	; 0xee <rOnewire+0x26>

//-----读数据-----
uint8_t rOnewire(void)
{
    uint8_t data=0,i=0;
    for(i=0;i<8;i++) 
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	28 30       	cpi	r18, 0x08	; 8
  f6:	61 f7       	brne	.-40     	; 0xd0 <rOnewire+0x8>
		_delay_us(3);
        if(GET_DQ()) data|=0x80;
        _delay_us(60);
	} 
	return(data); 
} 
  f8:	08 95       	ret

000000fa <wOnewire>:
//-----写数据-----
void wOnewire(uint8_t data) 
{ 
    uint8_t i=0; 
	OUT_DQ();
  fa:	bd 9a       	sbi	0x17, 5	; 23
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	4f e9       	ldi	r20, 0x9F	; 159
    for(i=0;i<8;i++) 
    { 
        if(data&0x01)
 100:	3c e0       	ldi	r19, 0x0C	; 12
 102:	80 ff       	sbrs	r24, 0
 104:	07 c0       	rjmp	.+14     	; 0x114 <wOnewire+0x1a>
		{ 
            CLR_DQ(); 
 106:	c5 98       	cbi	0x18, 5	; 24
 108:	93 2f       	mov	r25, r19
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <wOnewire+0x10>
            _delay_us(5);
            SET_DQ(); 
 10e:	c5 9a       	sbi	0x18, 5	; 24
 110:	94 2f       	mov	r25, r20
 112:	06 c0       	rjmp	.+12     	; 0x120 <wOnewire+0x26>
            _delay_us(65);
		}	 
   	 	else 
   	 	{ 
       		CLR_DQ(); 
 114:	c5 98       	cbi	0x18, 5	; 24
 116:	94 2f       	mov	r25, r20
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <wOnewire+0x1e>
        	_delay_us(65);
        	SET_DQ(); 
 11c:	c5 9a       	sbi	0x18, 5	; 24
 11e:	93 2f       	mov	r25, r19
 120:	9a 95       	dec	r25
 122:	f1 f7       	brne	.-4      	; 0x120 <wOnewire+0x26>
//-----写数据-----
void wOnewire(uint8_t data) 
{ 
    uint8_t i=0; 
	OUT_DQ();
    for(i=0;i<8;i++) 
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	28 30       	cpi	r18, 0x08	; 8
 128:	11 f0       	breq	.+4      	; 0x12e <wOnewire+0x34>
       		CLR_DQ(); 
        	_delay_us(65);
        	SET_DQ(); 
        	_delay_us(5);
    	} 
    	data=data>>1; 
 12a:	86 95       	lsr	r24
 12c:	ea cf       	rjmp	.-44     	; 0x102 <wOnewire+0x8>
 12e:	08 95       	ret

00000130 <convertDs18b20>:
#include <ws_onewire_port.h>

//-----DS18B20转换温度-----
void convertDs18b20(void) 
{ 
    resetOnewire(); 
 130:	0e 94 52 00 	call	0xa4	; 0xa4 <resetOnewire>
    //_delay_ms(10); 
    wOnewire(0xcc); 
 134:	8c ec       	ldi	r24, 0xCC	; 204
 136:	0e 94 7d 00 	call	0xfa	; 0xfa <wOnewire>
    wOnewire(0x44); 
 13a:	84 e4       	ldi	r24, 0x44	; 68
 13c:	0e 94 7d 00 	call	0xfa	; 0xfa <wOnewire>
} 
 140:	08 95       	ret

00000142 <readTemp>:
//------------DS18BB0读温度----------
uint8_t readTemp(void) 
{ 
 142:	1f 93       	push	r17
	uint8_t temp1,temp2;
	convertDs18b20();
 144:	0e 94 98 00 	call	0x130	; 0x130 <convertDs18b20>
    resetOnewire(); 
 148:	0e 94 52 00 	call	0xa4	; 0xa4 <resetOnewire>
    //_delay_ms(10); 
    wOnewire(0xcc); 
 14c:	8c ec       	ldi	r24, 0xCC	; 204
 14e:	0e 94 7d 00 	call	0xfa	; 0xfa <wOnewire>
    wOnewire(0xbe); 	
 152:	8e eb       	ldi	r24, 0xBE	; 190
 154:	0e 94 7d 00 	call	0xfa	; 0xfa <wOnewire>
    temp1=rOnewire(); 
 158:	0e 94 64 00 	call	0xc8	; 0xc8 <rOnewire>
 15c:	18 2f       	mov	r17, r24
    temp2=rOnewire(); 
 15e:	0e 94 64 00 	call	0xc8	; 0xc8 <rOnewire>
	temp2=temp2<<4;
 162:	82 95       	swap	r24
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	12 95       	swap	r17
 168:	1f 70       	andi	r17, 0x0F	; 15
 16a:	18 2b       	or	r17, r24
	temp1=temp1>>4;
	temp2|=temp1;

	return (temp2&0x7F);
}
 16c:	81 2f       	mov	r24, r17
 16e:	8f 77       	andi	r24, 0x7F	; 127
 170:	1f 91       	pop	r17
 172:	08 95       	ret

00000174 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <ws_ds18b20.h>

int main(void)
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
	DDRA=0xFF;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	8a bb       	out	0x1a, r24	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17c:	c8 eb       	ldi	r28, 0xB8	; 184
 17e:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		PORTA=readTemp();
 180:	0e 94 a1 00 	call	0x142	; 0x142 <readTemp>
 184:	8b bb       	out	0x1b, r24	; 27
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	97 e2       	ldi	r25, 0x27	; 39
 18a:	fe 01       	movw	r30, r28
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 190:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 192:	d9 f7       	brne	.-10     	; 0x18a <main+0x16>
 194:	f5 cf       	rjmp	.-22     	; 0x180 <main+0xc>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
