
DS18B20_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800120  00800120  00000688  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e8  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b74  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000200  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000924  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fb  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b0  00000000  00000000  00002103  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000348  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a0 32       	cpi	r26, 0x20	; 32
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e2       	ldi	r26, 0x20	; 32
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a0 36       	cpi	r26, 0x60	; 96
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <main>
  c2:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <resetOnewire>:
#define _WS_ONEWIRE_H_
#include <util/delay.h>
//-----复位-----
void resetOnewire(void) 
{
	OUT_DQ();
  ca:	bd 9a       	sbi	0x17, 5	; 23
    CLR_DQ();
  cc:	c5 98       	cbi	0x18, 5	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ce:	89 e9       	ldi	r24, 0x99	; 153
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <resetOnewire+0x8>
    _delay_us(500);
    SET_DQ(); 
  d6:	c5 9a       	sbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  d8:	86 e5       	ldi	r24, 0x56	; 86
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <resetOnewire+0x10>
    _delay_us(35);
	IN_DQ();
  de:	bd 98       	cbi	0x17, 5	; 23
	while(GET_DQ());
  e0:	b5 99       	sbic	0x16, 5	; 22
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <resetOnewire+0x16>
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <resetOnewire+0x1e>
	while(!(GET_DQ()))
	OUT_DQ();
  e6:	bd 9a       	sbi	0x17, 5	; 23
    _delay_us(500);
    SET_DQ(); 
    _delay_us(35);
	IN_DQ();
	while(GET_DQ());
	while(!(GET_DQ()))
  e8:	b5 9b       	sbis	0x16, 5	; 22
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <resetOnewire+0x1c>
	OUT_DQ();
}
  ec:	08 95       	ret

000000ee <rOnewire>:

//-----读数据-----
uint8_t rOnewire(void)
{
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	37 e0       	ldi	r19, 0x07	; 7
    uint8_t data=0,i=0;
    for(i=0;i<8;i++) 
    {
    	SET_DQ();
  f4:	43 e9       	ldi	r20, 0x93	; 147
  f6:	c5 9a       	sbi	0x18, 5	; 24
		OUT_DQ();
  f8:	bd 9a       	sbi	0x17, 5	; 23
        CLR_DQ();
  fa:	c5 98       	cbi	0x18, 5	; 24
        data=data>>1;
  fc:	86 95       	lsr	r24
  fe:	93 2f       	mov	r25, r19
 100:	9a 95       	dec	r25
 102:	f1 f7       	brne	.-4      	; 0x100 <rOnewire+0x12>
        _delay_us(3);
		IN_DQ();
 104:	bd 98       	cbi	0x17, 5	; 23
		SET_DQ();
 106:	c5 9a       	sbi	0x18, 5	; 24
 108:	93 2f       	mov	r25, r19
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <rOnewire+0x1c>
		_delay_us(3);
        if(GET_DQ()) data|=0x80;
 10e:	b5 99       	sbic	0x16, 5	; 22
 110:	80 68       	ori	r24, 0x80	; 128
 112:	94 2f       	mov	r25, r20
 114:	9a 95       	dec	r25
 116:	f1 f7       	brne	.-4      	; 0x114 <rOnewire+0x26>

//-----读数据-----
uint8_t rOnewire(void)
{
    uint8_t data=0,i=0;
    for(i=0;i<8;i++) 
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	28 30       	cpi	r18, 0x08	; 8
 11c:	61 f7       	brne	.-40     	; 0xf6 <rOnewire+0x8>
		_delay_us(3);
        if(GET_DQ()) data|=0x80;
        _delay_us(60);
	} 
	return(data); 
} 
 11e:	08 95       	ret

00000120 <wOnewire>:
//-----写数据-----
void wOnewire(uint8_t data) 
{ 
    uint8_t i=0; 
	OUT_DQ();
 120:	bd 9a       	sbi	0x17, 5	; 23
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	4f e9       	ldi	r20, 0x9F	; 159
    for(i=0;i<8;i++) 
    { 
        if(data&0x01)
 126:	3c e0       	ldi	r19, 0x0C	; 12
 128:	80 ff       	sbrs	r24, 0
 12a:	07 c0       	rjmp	.+14     	; 0x13a <wOnewire+0x1a>
		{ 
            CLR_DQ(); 
 12c:	c5 98       	cbi	0x18, 5	; 24
 12e:	93 2f       	mov	r25, r19
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <wOnewire+0x10>
            _delay_us(5);
            SET_DQ(); 
 134:	c5 9a       	sbi	0x18, 5	; 24
 136:	94 2f       	mov	r25, r20
 138:	06 c0       	rjmp	.+12     	; 0x146 <wOnewire+0x26>
            _delay_us(65);
		}	 
   	 	else 
   	 	{ 
       		CLR_DQ(); 
 13a:	c5 98       	cbi	0x18, 5	; 24
 13c:	94 2f       	mov	r25, r20
 13e:	9a 95       	dec	r25
 140:	f1 f7       	brne	.-4      	; 0x13e <wOnewire+0x1e>
        	_delay_us(65);
        	SET_DQ(); 
 142:	c5 9a       	sbi	0x18, 5	; 24
 144:	93 2f       	mov	r25, r19
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <wOnewire+0x26>
//-----写数据-----
void wOnewire(uint8_t data) 
{ 
    uint8_t i=0; 
	OUT_DQ();
    for(i=0;i<8;i++) 
 14a:	2f 5f       	subi	r18, 0xFF	; 255
 14c:	28 30       	cpi	r18, 0x08	; 8
 14e:	11 f0       	breq	.+4      	; 0x154 <wOnewire+0x34>
       		CLR_DQ(); 
        	_delay_us(65);
        	SET_DQ(); 
        	_delay_us(5);
    	} 
    	data=data>>1; 
 150:	86 95       	lsr	r24
 152:	ea cf       	rjmp	.-44     	; 0x128 <wOnewire+0x8>
 154:	08 95       	ret

00000156 <convertDs18b20>:
#include <ws_onewire_port.h>

//-----DS18B20转换温度-----
void convertDs18b20(void) 
{ 
    resetOnewire(); 
 156:	0e 94 65 00 	call	0xca	; 0xca <resetOnewire>
    wOnewire(0xcc); 
 15a:	8c ec       	ldi	r24, 0xCC	; 204
 15c:	0e 94 90 00 	call	0x120	; 0x120 <wOnewire>
    wOnewire(0x44); 
 160:	84 e4       	ldi	r24, 0x44	; 68
 162:	0e 94 90 00 	call	0x120	; 0x120 <wOnewire>
} 
 166:	08 95       	ret

00000168 <readTemp>:
//------------DS18BB0读温度----------
uint8_t readTemp(void) 
{ 
 168:	1f 93       	push	r17
	uint8_t temp1,temp2;
	convertDs18b20();
 16a:	0e 94 ab 00 	call	0x156	; 0x156 <convertDs18b20>
    resetOnewire(); 
 16e:	0e 94 65 00 	call	0xca	; 0xca <resetOnewire>
    wOnewire(0xcc); 
 172:	8c ec       	ldi	r24, 0xCC	; 204
 174:	0e 94 90 00 	call	0x120	; 0x120 <wOnewire>
    wOnewire(0xbe); 	
 178:	8e eb       	ldi	r24, 0xBE	; 190
 17a:	0e 94 90 00 	call	0x120	; 0x120 <wOnewire>
    temp1=rOnewire(); 
 17e:	0e 94 77 00 	call	0xee	; 0xee <rOnewire>
 182:	18 2f       	mov	r17, r24
    temp2=rOnewire(); 
 184:	0e 94 77 00 	call	0xee	; 0xee <rOnewire>
	temp2=temp2<<4;
 188:	82 95       	swap	r24
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	12 95       	swap	r17
 18e:	1f 70       	andi	r17, 0x0F	; 15
 190:	18 2b       	or	r17, r24
	temp1=temp1>>4;
	temp2|=temp1;

	return (temp2&0x7F);
}
 192:	81 2f       	mov	r24, r17
 194:	8f 77       	andi	r24, 0x7F	; 127
 196:	1f 91       	pop	r17
 198:	08 95       	ret

0000019a <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 19a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 19c:	77 9b       	sbis	0x0e, 7	; 14
 19e:	fe cf       	rjmp	.-4      	; 0x19c <spiSendChar+0x2>
}
 1a0:	08 95       	ret

000001a2 <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 1a2:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1a4:	88 ef       	ldi	r24, 0xF8	; 248
 1a6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1a8:	77 9b       	sbis	0x0e, 7	; 14
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 1ac:	89 2f       	mov	r24, r25
 1ae:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1b0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1b2:	77 9b       	sbis	0x0e, 7	; 14
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 1b6:	92 95       	swap	r25
 1b8:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ba:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 1bc:	77 9b       	sbis	0x0e, 7	; 14
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <sendCodeST7920+0x1a>
 1c0:	88 eb       	ldi	r24, 0xB8	; 184
 1c2:	8a 95       	dec	r24
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 1c6:	08 95       	ret

000001c8 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 1c8:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ca:	8a ef       	ldi	r24, 0xFA	; 250
 1cc:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1ce:	77 9b       	sbis	0x0e, 7	; 14
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1d2:	89 2f       	mov	r24, r25
 1d4:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1d6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1d8:	77 9b       	sbis	0x0e, 7	; 14
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1dc:	92 95       	swap	r25
 1de:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1e0:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 1e2:	77 9b       	sbis	0x0e, 7	; 14
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <sendDataST7920+0x1a>
 1e6:	88 eb       	ldi	r24, 0xB8	; 184
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 1ec:	08 95       	ret

000001ee <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 1ee:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1f0:	88 ef       	ldi	r24, 0xF8	; 248
 1f2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1f4:	77 9b       	sbis	0x0e, 7	; 14
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1f8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 1fa:	77 9b       	sbis	0x0e, 7	; 14
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <refreshLCD+0xc>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 202:	77 9b       	sbis	0x0e, 7	; 14
 204:	fe cf       	rjmp	.-4      	; 0x202 <refreshLCD+0x14>
 206:	88 eb       	ldi	r24, 0xB8	; 184
 208:	8a 95       	dec	r24
 20a:	f1 f7       	brne	.-4      	; 0x208 <refreshLCD+0x1a>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 210:	6a ef       	ldi	r22, 0xFA	; 250
 212:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 214:	fa 01       	movw	r30, r20
 216:	e2 0f       	add	r30, r18
 218:	f3 1f       	adc	r31, r19
 21a:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 21c:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));
 21e:	77 9b       	sbis	0x0e, 7	; 14
 220:	fe cf       	rjmp	.-4      	; 0x21e <refreshLCD+0x30>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 222:	8e 2f       	mov	r24, r30
 224:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 226:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 228:	77 9b       	sbis	0x0e, 7	; 14
 22a:	fe cf       	rjmp	.-4      	; 0x228 <refreshLCD+0x3a>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 22c:	e2 95       	swap	r30
 22e:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 230:	ef b9       	out	0x0f, r30	; 15
	while (!(SPSR & (1<<SPIF)));
 232:	77 9b       	sbis	0x0e, 7	; 14
 234:	fe cf       	rjmp	.-4      	; 0x232 <refreshLCD+0x44>
 236:	89 2f       	mov	r24, r25
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <refreshLCD+0x4a>
 23c:	2f 5f       	subi	r18, 0xFF	; 255
 23e:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 240:	20 31       	cpi	r18, 0x10	; 16
 242:	31 05       	cpc	r19, r1
 244:	39 f7       	brne	.-50     	; 0x214 <refreshLCD+0x26>
 246:	da 01       	movw	r26, r20
 248:	fa 01       	movw	r30, r20
 24a:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 24c:	3a ef       	ldi	r19, 0xFA	; 250
 24e:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 250:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 252:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 254:	77 9b       	sbis	0x0e, 7	; 14
 256:	fe cf       	rjmp	.-4      	; 0x254 <refreshLCD+0x66>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 258:	82 2f       	mov	r24, r18
 25a:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 25c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 25e:	77 9b       	sbis	0x0e, 7	; 14
 260:	fe cf       	rjmp	.-4      	; 0x25e <refreshLCD+0x70>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 262:	22 95       	swap	r18
 264:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 266:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 268:	77 9b       	sbis	0x0e, 7	; 14
 26a:	fe cf       	rjmp	.-4      	; 0x268 <refreshLCD+0x7a>
 26c:	89 2f       	mov	r24, r25
 26e:	8a 95       	dec	r24
 270:	f1 f7       	brne	.-4      	; 0x26e <refreshLCD+0x80>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 272:	6f 5f       	subi	r22, 0xFF	; 255
 274:	31 96       	adiw	r30, 0x01	; 1
 276:	60 33       	cpi	r22, 0x30	; 48
 278:	59 f7       	brne	.-42     	; 0x250 <refreshLCD+0x62>
 27a:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 27c:	7a ef       	ldi	r23, 0xFA	; 250
 27e:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 280:	50 96       	adiw	r26, 0x10	; 16
 282:	2c 91       	ld	r18, X
 284:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 286:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));
 288:	77 9b       	sbis	0x0e, 7	; 14
 28a:	fe cf       	rjmp	.-4      	; 0x288 <refreshLCD+0x9a>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 28c:	82 2f       	mov	r24, r18
 28e:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 290:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 292:	77 9b       	sbis	0x0e, 7	; 14
 294:	fe cf       	rjmp	.-4      	; 0x292 <refreshLCD+0xa4>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 296:	22 95       	swap	r18
 298:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 29a:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 29c:	77 9b       	sbis	0x0e, 7	; 14
 29e:	fe cf       	rjmp	.-4      	; 0x29c <refreshLCD+0xae>
 2a0:	89 2f       	mov	r24, r25
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <refreshLCD+0xb4>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 2a6:	3f 5f       	subi	r19, 0xFF	; 255
 2a8:	11 96       	adiw	r26, 0x01	; 1
 2aa:	30 32       	cpi	r19, 0x20	; 32
 2ac:	49 f7       	brne	.-46     	; 0x280 <refreshLCD+0x92>
 2ae:	fa 01       	movw	r30, r20
 2b0:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2b2:	3a ef       	ldi	r19, 0xFA	; 250
 2b4:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 2b6:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2b8:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 2ba:	77 9b       	sbis	0x0e, 7	; 14
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <refreshLCD+0xcc>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 2be:	89 2f       	mov	r24, r25
 2c0:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2c2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2c4:	77 9b       	sbis	0x0e, 7	; 14
 2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <refreshLCD+0xd6>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 2c8:	92 95       	swap	r25
 2ca:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2cc:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 2ce:	77 9b       	sbis	0x0e, 7	; 14
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <refreshLCD+0xe0>
 2d2:	82 2f       	mov	r24, r18
 2d4:	8a 95       	dec	r24
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <refreshLCD+0xe6>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
 2d8:	6f 5f       	subi	r22, 0xFF	; 255
 2da:	31 96       	adiw	r30, 0x01	; 1
 2dc:	6f 33       	cpi	r22, 0x3F	; 63
 2de:	59 f7       	brne	.-42     	; 0x2b6 <refreshLCD+0xc8>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 2e0:	08 95       	ret

000002e2 <decToAscii>:
*	width是转换宽度
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	fb 01       	movw	r30, r22
 2e8:	ec 01       	movw	r28, r24
			case 1:
			{
				*(str+num) = (dec+'0');
				break;
			}
			default: *(str+num) = '0';
 2ea:	20 e3       	ldi	r18, 0x30	; 48
 2ec:	43 c0       	rjmp	.+134    	; 0x374 <decToAscii+0x92>
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
	{
		switch(width)
 2ee:	43 30       	cpi	r20, 0x03	; 3
 2f0:	21 f1       	breq	.+72     	; 0x33a <decToAscii+0x58>
 2f2:	44 30       	cpi	r20, 0x04	; 4
 2f4:	28 f4       	brcc	.+10     	; 0x300 <decToAscii+0x1e>
 2f6:	41 30       	cpi	r20, 0x01	; 1
 2f8:	b1 f1       	breq	.+108    	; 0x366 <decToAscii+0x84>
 2fa:	42 30       	cpi	r20, 0x02	; 2
 2fc:	c1 f5       	brne	.+112    	; 0x36e <decToAscii+0x8c>
 2fe:	28 c0       	rjmp	.+80     	; 0x350 <decToAscii+0x6e>
 300:	44 30       	cpi	r20, 0x04	; 4
 302:	69 f0       	breq	.+26     	; 0x31e <decToAscii+0x3c>
 304:	45 30       	cpi	r20, 0x05	; 5
 306:	99 f5       	brne	.+102    	; 0x36e <decToAscii+0x8c>
		{
			case 5:
			{
				*(str+num) = (dec/10000+'0');
 308:	cf 01       	movw	r24, r30
 30a:	60 e1       	ldi	r22, 0x10	; 16
 30c:	77 e2       	ldi	r23, 0x27	; 39
 30e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__udivmodhi4>
 312:	60 5d       	subi	r22, 0xD0	; 208
 314:	68 83       	st	Y, r22
				dec%=10000;
 316:	cf 01       	movw	r24, r30
 318:	60 e1       	ldi	r22, 0x10	; 16
 31a:	77 e2       	ldi	r23, 0x27	; 39
 31c:	0a c0       	rjmp	.+20     	; 0x332 <decToAscii+0x50>
				break;
			}			
			case 4:
			{
				*(str+num) = (dec/1000+'0');
 31e:	cf 01       	movw	r24, r30
 320:	68 ee       	ldi	r22, 0xE8	; 232
 322:	73 e0       	ldi	r23, 0x03	; 3
 324:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__udivmodhi4>
 328:	60 5d       	subi	r22, 0xD0	; 208
 32a:	68 83       	st	Y, r22
				dec%=1000;
 32c:	cf 01       	movw	r24, r30
 32e:	68 ee       	ldi	r22, 0xE8	; 232
 330:	73 e0       	ldi	r23, 0x03	; 3
 332:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__udivmodhi4>
 336:	fc 01       	movw	r30, r24
 338:	1b c0       	rjmp	.+54     	; 0x370 <decToAscii+0x8e>
				break;
			}
			case 3:
			{
				*(str+num) = (dec/100+'0');
 33a:	cf 01       	movw	r24, r30
 33c:	64 e6       	ldi	r22, 0x64	; 100
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__udivmodhi4>
 344:	60 5d       	subi	r22, 0xD0	; 208
 346:	68 83       	st	Y, r22
				dec%=100;
 348:	cf 01       	movw	r24, r30
 34a:	64 e6       	ldi	r22, 0x64	; 100
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	f1 cf       	rjmp	.-30     	; 0x332 <decToAscii+0x50>
				break;
			}
			case 2:
			{
				*(str+num) = (dec/10+'0');
 350:	cf 01       	movw	r24, r30
 352:	6a e0       	ldi	r22, 0x0A	; 10
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__udivmodhi4>
 35a:	60 5d       	subi	r22, 0xD0	; 208
 35c:	68 83       	st	Y, r22
				dec%=10;
 35e:	cf 01       	movw	r24, r30
 360:	6a e0       	ldi	r22, 0x0A	; 10
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	e6 cf       	rjmp	.-52     	; 0x332 <decToAscii+0x50>
				break;
			}
			case 1:
			{
				*(str+num) = (dec+'0');
 366:	e0 5d       	subi	r30, 0xD0	; 208
 368:	e8 83       	st	Y, r30
 36a:	e0 53       	subi	r30, 0x30	; 48
 36c:	01 c0       	rjmp	.+2      	; 0x370 <decToAscii+0x8e>
				break;
			}
			default: *(str+num) = '0';
 36e:	28 83       	st	Y, r18
		}
		width--;
 370:	41 50       	subi	r20, 0x01	; 1
 372:	21 96       	adiw	r28, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
 374:	44 23       	and	r20, r20
 376:	09 f0       	breq	.+2      	; 0x37a <decToAscii+0x98>
 378:	ba cf       	rjmp	.-140    	; 0x2ee <decToAscii+0xc>
			default: *(str+num) = '0';
		}
		width--;
		num++;
	}
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <st7920LcdInit>:
#define CLR_CS_LCD() cbi(PORTB,4)
#define OUT_CS_LCD() sbi(DDRB,4)

void st7920LcdInit(void)
{
DDRB|=0x07;
 380:	87 b3       	in	r24, 0x17	; 23
 382:	87 60       	ori	r24, 0x07	; 7
 384:	87 bb       	out	0x17, r24	; 23
PORTB&=0xF8;
 386:	88 b3       	in	r24, 0x18	; 24
 388:	88 7f       	andi	r24, 0xF8	; 248
 38a:	88 bb       	out	0x18, r24	; 24
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 38c:	80 e5       	ldi	r24, 0x50	; 80
 38e:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	8e b9       	out	0x0e, r24	; 14
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 394:	88 ef       	ldi	r24, 0xF8	; 248
 396:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 398:	77 9b       	sbis	0x0e, 7	; 14
 39a:	fe cf       	rjmp	.-4      	; 0x398 <st7920LcdInit+0x18>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 39c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 39e:	77 9b       	sbis	0x0e, 7	; 14
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <st7920LcdInit+0x1e>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3a2:	80 ec       	ldi	r24, 0xC0	; 192
 3a4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 3a6:	77 9b       	sbis	0x0e, 7	; 14
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <st7920LcdInit+0x26>
 3aa:	88 eb       	ldi	r24, 0xB8	; 184
 3ac:	8a 95       	dec	r24
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <st7920LcdInit+0x2c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3b0:	88 ef       	ldi	r24, 0xF8	; 248
 3b2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 3b4:	77 9b       	sbis	0x0e, 7	; 14
 3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3b8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 3ba:	77 9b       	sbis	0x0e, 7	; 14
 3bc:	fe cf       	rjmp	.-4      	; 0x3ba <st7920LcdInit+0x3a>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3be:	80 e1       	ldi	r24, 0x10	; 16
 3c0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 3c2:	77 9b       	sbis	0x0e, 7	; 14
 3c4:	fe cf       	rjmp	.-4      	; 0x3c2 <st7920LcdInit+0x42>
 3c6:	88 eb       	ldi	r24, 0xB8	; 184
 3c8:	8a 95       	dec	r24
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <st7920LcdInit+0x48>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3cc:	86 e6       	ldi	r24, 0x66	; 102
 3ce:	9e e0       	ldi	r25, 0x0E	; 14
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <st7920LcdInit+0x50>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 3d4:	80 e2       	ldi	r24, 0x20	; 32
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	60 e2       	ldi	r22, 0x20	; 32
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	40 e4       	ldi	r20, 0x40	; 64
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	0e 94 cd 02 	call	0x59a	; 0x59a <memset>
}
 3e4:	08 95       	ret

000003e6 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 3e6:	af 92       	push	r10
 3e8:	bf 92       	push	r11
 3ea:	cf 92       	push	r12
 3ec:	df 92       	push	r13
 3ee:	ef 92       	push	r14
 3f0:	ff 92       	push	r15
 3f2:	0f 93       	push	r16
 3f4:	df 93       	push	r29
 3f6:	cf 93       	push	r28
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	0d 85       	ldd	r16, Y+13	; 0x0d
 3fe:	ae 84       	ldd	r10, Y+14	; 0x0e
 400:	bf 84       	ldd	r11, Y+15	; 0x0f
 402:	e8 88       	ldd	r14, Y+16	; 0x10
 404:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 406:	02 95       	swap	r16
 408:	00 7f       	andi	r16, 0xF0	; 240
 40a:	8c 85       	ldd	r24, Y+12	; 0x0c
 40c:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 40e:	de 01       	movw	r26, r28
 410:	52 96       	adiw	r26, 0x12	; 18
 412:	41 c0       	rjmp	.+130    	; 0x496 <showLine+0xb0>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 414:	01 34       	cpi	r16, 0x41	; 65
 416:	08 f0       	brcs	.+2      	; 0x41a <showLine+0x34>
 418:	43 c0       	rjmp	.+134    	; 0x4a0 <showLine+0xba>

		if(*str == '\\')
 41a:	8c 35       	cpi	r24, 0x5C	; 92
 41c:	51 f4       	brne	.+20     	; 0x432 <showLine+0x4c>
		{
			str++;
 41e:	08 94       	sec
 420:	e1 1c       	adc	r14, r1
 422:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 424:	95 01       	movw	r18, r10
 426:	20 0f       	add	r18, r16
 428:	31 1d       	adc	r19, r1
 42a:	f7 01       	movw	r30, r14
 42c:	80 81       	ld	r24, Z
 42e:	f9 01       	movw	r30, r18
 430:	2d c0       	rjmp	.+90     	; 0x48c <showLine+0xa6>
		}
		else if(*str == '%')
 432:	85 32       	cpi	r24, 0x25	; 37
 434:	41 f5       	brne	.+80     	; 0x486 <showLine+0xa0>
		{
			str++;
 436:	08 94       	sec
 438:	e1 1c       	adc	r14, r1
 43a:	f1 1c       	adc	r15, r1
			if (*str=='d')
 43c:	f7 01       	movw	r30, r14
 43e:	80 81       	ld	r24, Z
 440:	84 36       	cpi	r24, 0x64	; 100
 442:	c1 f4       	brne	.+48     	; 0x474 <showLine+0x8e>
			{
				str++;
 444:	08 94       	sec
 446:	e1 1c       	adc	r14, r1
 448:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	c8 2e       	mov	r12, r24
 44e:	d1 2c       	mov	r13, r1
 450:	ca 0e       	add	r12, r26
 452:	db 1e       	adc	r13, r27
 454:	6d 91       	ld	r22, X+
 456:	7c 91       	ld	r23, X
 458:	f7 01       	movw	r30, r14
 45a:	40 81       	ld	r20, Z
 45c:	40 53       	subi	r20, 0x30	; 48
 45e:	c5 01       	movw	r24, r10
 460:	80 0f       	add	r24, r16
 462:	91 1d       	adc	r25, r1
 464:	0e 94 71 01 	call	0x2e2	; 0x2e2 <decToAscii>
				coordinate+=(*str-'0'-1);
 468:	01 53       	subi	r16, 0x31	; 49
 46a:	f7 01       	movw	r30, r14
 46c:	80 81       	ld	r24, Z
 46e:	08 0f       	add	r16, r24
 470:	d6 01       	movw	r26, r12
 472:	0d c0       	rjmp	.+26     	; 0x48e <showLine+0xa8>
			}
			else if(*str=='c')
 474:	83 36       	cpi	r24, 0x63	; 99
 476:	59 f4       	brne	.+22     	; 0x48e <showLine+0xa8>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 478:	f5 01       	movw	r30, r10
 47a:	e0 0f       	add	r30, r16
 47c:	f1 1d       	adc	r31, r1
 47e:	8c 91       	ld	r24, X
 480:	80 83       	st	Z, r24
 482:	12 96       	adiw	r26, 0x02	; 2
 484:	04 c0       	rjmp	.+8      	; 0x48e <showLine+0xa8>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 486:	f5 01       	movw	r30, r10
 488:	e0 0f       	add	r30, r16
 48a:	f1 1d       	adc	r31, r1
 48c:	80 83       	st	Z, r24
		}
		str++;
 48e:	08 94       	sec
 490:	e1 1c       	adc	r14, r1
 492:	f1 1c       	adc	r15, r1
		coordinate++;
 494:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 496:	f7 01       	movw	r30, r14
 498:	80 81       	ld	r24, Z
 49a:	88 23       	and	r24, r24
 49c:	09 f0       	breq	.+2      	; 0x4a0 <showLine+0xba>
 49e:	ba cf       	rjmp	.-140    	; 0x414 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 4a0:	cf 91       	pop	r28
 4a2:	df 91       	pop	r29
 4a4:	0f 91       	pop	r16
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	df 90       	pop	r13
 4ac:	cf 90       	pop	r12
 4ae:	bf 90       	pop	r11
 4b0:	af 90       	pop	r10
 4b2:	08 95       	ret

000004b4 <main>:
#include <util/delay.h>
#include <ws_ds18b20.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 4b4:	bf 92       	push	r11
 4b6:	cf 92       	push	r12
 4b8:	df 92       	push	r13
 4ba:	ef 92       	push	r14
 4bc:	ff 92       	push	r15
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
	st7920LcdInit(); /*LCD初始化*/
 4c6:	0e 94 c0 01 	call	0x380	; 0x380 <st7920LcdInit>
	showLine(0,0,lcd_buffer,"DS18B20 温度试验");
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <main+0x18>
 4cc:	00 d0       	rcall	.+0      	; 0x4ce <main+0x1a>
 4ce:	00 d0       	rcall	.+0      	; 0x4d0 <main+0x1c>
 4d0:	ed b7       	in	r30, 0x3d	; 61
 4d2:	fe b7       	in	r31, 0x3e	; 62
 4d4:	31 96       	adiw	r30, 0x01	; 1
 4d6:	ad b7       	in	r26, 0x3d	; 61
 4d8:	be b7       	in	r27, 0x3e	; 62
 4da:	11 96       	adiw	r26, 0x01	; 1
 4dc:	1c 92       	st	X, r1
 4de:	11 82       	std	Z+1, r1	; 0x01
 4e0:	00 e2       	ldi	r16, 0x20	; 32
 4e2:	11 e0       	ldi	r17, 0x01	; 1
 4e4:	13 83       	std	Z+3, r17	; 0x03
 4e6:	02 83       	std	Z+2, r16	; 0x02
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	95 83       	std	Z+5, r25	; 0x05
 4ee:	84 83       	std	Z+4, r24	; 0x04
 4f0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <showLine>
	showLine(0,1,lcd_buffer,"室温：  ℃");
 4f4:	ed b7       	in	r30, 0x3d	; 61
 4f6:	fe b7       	in	r31, 0x3e	; 62
 4f8:	31 96       	adiw	r30, 0x01	; 1
 4fa:	ad b7       	in	r26, 0x3d	; 61
 4fc:	be b7       	in	r27, 0x3e	; 62
 4fe:	11 96       	adiw	r26, 0x01	; 1
 500:	1c 92       	st	X, r1
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	81 83       	std	Z+1, r24	; 0x01
 506:	13 83       	std	Z+3, r17	; 0x03
 508:	02 83       	std	Z+2, r16	; 0x02
 50a:	81 e1       	ldi	r24, 0x11	; 17
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	95 83       	std	Z+5, r25	; 0x05
 510:	84 83       	std	Z+4, r24	; 0x04
 512:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <showLine>
 516:	2d b7       	in	r18, 0x3d	; 61
 518:	3e b7       	in	r19, 0x3e	; 62
 51a:	2a 5f       	subi	r18, 0xFA	; 250
 51c:	3f 4f       	sbci	r19, 0xFF	; 255
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	f8 94       	cli
 522:	3e bf       	out	0x3e, r19	; 62
 524:	0f be       	out	0x3f, r0	; 63
 526:	2d bf       	out	0x3d, r18	; 61
	while(1)
	{
		showLine(6,1,lcd_buffer,"%d2",readTemp());
 528:	26 e0       	ldi	r18, 0x06	; 6
 52a:	b2 2e       	mov	r11, r18
 52c:	ee 24       	eor	r14, r14
 52e:	e3 94       	inc	r14
 530:	f0 2e       	mov	r15, r16
 532:	01 2f       	mov	r16, r17
 534:	9c e1       	ldi	r25, 0x1C	; 28
 536:	c9 2e       	mov	r12, r25
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	d9 2e       	mov	r13, r25
 53c:	c8 eb       	ldi	r28, 0xB8	; 184
 53e:	d0 e0       	ldi	r29, 0x00	; 0
 540:	0e 94 b4 00 	call	0x168	; 0x168 <readTemp>
 544:	ad b7       	in	r26, 0x3d	; 61
 546:	be b7       	in	r27, 0x3e	; 62
 548:	18 97       	sbiw	r26, 0x08	; 8
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	be bf       	out	0x3e, r27	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	ad bf       	out	0x3d, r26	; 61
 554:	ed b7       	in	r30, 0x3d	; 61
 556:	fe b7       	in	r31, 0x3e	; 62
 558:	31 96       	adiw	r30, 0x01	; 1
 55a:	11 96       	adiw	r26, 0x01	; 1
 55c:	bc 92       	st	X, r11
 55e:	e1 82       	std	Z+1, r14	; 0x01
 560:	f2 82       	std	Z+2, r15	; 0x02
 562:	03 83       	std	Z+3, r16	; 0x03
 564:	d5 82       	std	Z+5, r13	; 0x05
 566:	c4 82       	std	Z+4, r12	; 0x04
 568:	86 83       	std	Z+6, r24	; 0x06
 56a:	17 82       	std	Z+7, r1	; 0x07
 56c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <showLine>
		refreshLCD(lcd_buffer); /*刷新LCD*/
 570:	2d b7       	in	r18, 0x3d	; 61
 572:	3e b7       	in	r19, 0x3e	; 62
 574:	28 5f       	subi	r18, 0xF8	; 248
 576:	3f 4f       	sbci	r19, 0xFF	; 255
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	3e bf       	out	0x3e, r19	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	2d bf       	out	0x3d, r18	; 61
 582:	8f 2d       	mov	r24, r15
 584:	90 2f       	mov	r25, r16
 586:	0e 94 f7 00 	call	0x1ee	; 0x1ee <refreshLCD>
 58a:	80 e1       	ldi	r24, 0x10	; 16
 58c:	97 e2       	ldi	r25, 0x27	; 39
 58e:	fe 01       	movw	r30, r28
 590:	31 97       	sbiw	r30, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <main+0xdc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 594:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 596:	d9 f7       	brne	.-10     	; 0x58e <main+0xda>
 598:	d3 cf       	rjmp	.-90     	; 0x540 <main+0x8c>

0000059a <memset>:
 59a:	dc 01       	movw	r26, r24
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <memset+0x6>
 59e:	6d 93       	st	X+, r22
 5a0:	41 50       	subi	r20, 0x01	; 1
 5a2:	50 40       	sbci	r21, 0x00	; 0
 5a4:	e0 f7       	brcc	.-8      	; 0x59e <memset+0x4>
 5a6:	08 95       	ret

000005a8 <__udivmodhi4>:
 5a8:	aa 1b       	sub	r26, r26
 5aa:	bb 1b       	sub	r27, r27
 5ac:	51 e1       	ldi	r21, 0x11	; 17
 5ae:	07 c0       	rjmp	.+14     	; 0x5be <__udivmodhi4_ep>

000005b0 <__udivmodhi4_loop>:
 5b0:	aa 1f       	adc	r26, r26
 5b2:	bb 1f       	adc	r27, r27
 5b4:	a6 17       	cp	r26, r22
 5b6:	b7 07       	cpc	r27, r23
 5b8:	10 f0       	brcs	.+4      	; 0x5be <__udivmodhi4_ep>
 5ba:	a6 1b       	sub	r26, r22
 5bc:	b7 0b       	sbc	r27, r23

000005be <__udivmodhi4_ep>:
 5be:	88 1f       	adc	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	5a 95       	dec	r21
 5c4:	a9 f7       	brne	.-22     	; 0x5b0 <__udivmodhi4_loop>
 5c6:	80 95       	com	r24
 5c8:	90 95       	com	r25
 5ca:	bc 01       	movw	r22, r24
 5cc:	cd 01       	movw	r24, r26
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
