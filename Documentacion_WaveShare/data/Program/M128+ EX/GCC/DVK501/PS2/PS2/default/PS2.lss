
PS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  0000028e  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800176  00800176  00000398  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d4  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001ff  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011e  00000000  00000000  0000068b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a2  00000000  00000000  000007a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000110  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_3>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a6 37       	cpi	r26, 0x76	; 118
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a6 e7       	ldi	r26, 0x76	; 118
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a4 38       	cpi	r26, 0x84	; 132
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 34 01 	call	0x268	; 0x268 <main>
  c2:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <__vector_3>:
*	ISR_BLOCK为GCC interrupt.h库的中断参数
*
*-------------------------------------------------------------------------------------------------------
*/
ISR(PS2_INT_VECTOR,ISR_BLOCK)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
   ps2_status++;	/*状态寄存器*/
  da:	80 91 82 01 	lds	r24, 0x0182
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 82 01 	sts	0x0182, r24
	if(ps2_status==1)
  e4:	80 91 82 01 	lds	r24, 0x0182
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	29 f4       	brne	.+10     	; 0xf6 <__vector_3+0x2c>
   { 
        if(GET_PS2_DA()) 
  ec:	83 9b       	sbis	0x10, 3	; 16
  ee:	54 c0       	rjmp	.+168    	; 0x198 <__vector_3+0xce>
            ps2_status=0;		/*判断起始位是否为0，不为0则清零计数器*/
  f0:	10 92 82 01 	sts	0x0182, r1
  f4:	51 c0       	rjmp	.+162    	; 0x198 <__vector_3+0xce>
   }
   else if(ps2_status<10 && ps2_status>0)
  f6:	80 91 82 01 	lds	r24, 0x0182
  fa:	8a 30       	cpi	r24, 0x0A	; 10
  fc:	b8 f4       	brcc	.+46     	; 0x12c <__vector_3+0x62>
  fe:	80 91 82 01 	lds	r24, 0x0182
 102:	88 23       	and	r24, r24
 104:	99 f0       	breq	.+38     	; 0x12c <__vector_3+0x62>
   {
      ps2_data=ps2_data>>1;
 106:	80 91 80 01 	lds	r24, 0x0180
 10a:	86 95       	lsr	r24
 10c:	80 93 80 01 	sts	0x0180, r24
			if(GET_PS2_DA()) {ps2_data |= 0x80;ps2_parity++;}	/*接受8bit数据位*/
 110:	83 9b       	sbis	0x10, 3	; 16
 112:	06 c0       	rjmp	.+12     	; 0x120 <__vector_3+0x56>
 114:	80 91 80 01 	lds	r24, 0x0180
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	80 93 80 01 	sts	0x0180, r24
 11e:	0c c0       	rjmp	.+24     	; 0x138 <__vector_3+0x6e>
			else ps2_data &= 0x7F;
 120:	80 91 80 01 	lds	r24, 0x0180
 124:	8f 77       	andi	r24, 0x7F	; 127
 126:	80 93 80 01 	sts	0x0180, r24
 12a:	36 c0       	rjmp	.+108    	; 0x198 <__vector_3+0xce>
   }
   else if(ps2_status==10) 
 12c:	80 91 82 01 	lds	r24, 0x0182
 130:	8a 30       	cpi	r24, 0x0A	; 10
 132:	41 f4       	brne	.+16     	; 0x144 <__vector_3+0x7a>
   {
        if(GET_PS2_DA()) 	
 134:	83 9b       	sbis	0x10, 3	; 16
 136:	30 c0       	rjmp	.+96     	; 0x198 <__vector_3+0xce>
            ps2_parity++;	/*接收奇偶校验位*/
 138:	80 91 81 01 	lds	r24, 0x0181
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 81 01 	sts	0x0181, r24
 142:	2a c0       	rjmp	.+84     	; 0x198 <__vector_3+0xce>
   }
   else if((ps2_status==11))
 144:	80 91 82 01 	lds	r24, 0x0182
 148:	8b 30       	cpi	r24, 0x0B	; 11
 14a:	11 f5       	brne	.+68     	; 0x190 <__vector_3+0xc6>
   {
        if((ps2_parity & 0x01))	/*奇偶校验*/
 14c:	80 91 81 01 	lds	r24, 0x0181
 150:	80 ff       	sbrs	r24, 0
 152:	22 c0       	rjmp	.+68     	; 0x198 <__vector_3+0xce>
        {
        ps2_buffer[ps2_wr_index]=ps2_data;	/*刷新PS2数据缓冲器*/
 154:	e0 91 76 01 	lds	r30, 0x0176
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 91 80 01 	lds	r24, 0x0180
 15e:	e9 58       	subi	r30, 0x89	; 137
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 83       	st	Z, r24
        if (++ps2_wr_index == PS2_BUFFER_SIZE) ps2_wr_index=0;	
 164:	80 91 76 01 	lds	r24, 0x0176
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 76 01 	sts	0x0176, r24
 16e:	80 91 76 01 	lds	r24, 0x0176
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	11 f4       	brne	.+4      	; 0x17a <__vector_3+0xb0>
 176:	10 92 76 01 	sts	0x0176, r1
        if (++ps2_counter == PS2_BUFFER_SIZE) ps2_counter=0;	
 17a:	80 91 7f 01 	lds	r24, 0x017F
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	80 93 7f 01 	sts	0x017F, r24
 184:	80 91 7f 01 	lds	r24, 0x017F
 188:	88 30       	cpi	r24, 0x08	; 8
 18a:	11 f4       	brne	.+4      	; 0x190 <__vector_3+0xc6>
 18c:	10 92 7f 01 	sts	0x017F, r1
        ps2_parity=0;
        }
   }
   else
   {
        ps2_status=0;	/*接收完数据后清空寄存器*/
 190:	10 92 82 01 	sts	0x0182, r1
        ps2_parity=0;
 194:	10 92 81 01 	sts	0x0181, r1
   } 
}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <ps2GetCode>:
*-------------------------------------------------------------------------------------------------------
*/
uint8_t ps2GetCode(void)
{
uint8_t data;
while(!ps2_counter);
 1a8:	80 91 7f 01 	lds	r24, 0x017F
 1ac:	88 23       	and	r24, r24
 1ae:	e1 f3       	breq	.-8      	; 0x1a8 <ps2GetCode>
data=ps2_buffer[ps2_rd_index];	/*从缓冲器读取数据*/
 1b0:	e0 91 83 01 	lds	r30, 0x0183
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	e9 58       	subi	r30, 0x89	; 137
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	e0 81       	ld	r30, Z
if (++ps2_rd_index == PS2_BUFFER_SIZE) ps2_rd_index=0;	
 1bc:	80 91 83 01 	lds	r24, 0x0183
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 83 01 	sts	0x0183, r24
 1c6:	80 91 83 01 	lds	r24, 0x0183
 1ca:	88 30       	cpi	r24, 0x08	; 8
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <ps2GetCode+0x2a>
 1ce:	10 92 83 01 	sts	0x0183, r1
cli();
 1d2:	f8 94       	cli
--ps2_counter;
 1d4:	80 91 7f 01 	lds	r24, 0x017F
 1d8:	81 50       	subi	r24, 0x01	; 1
 1da:	80 93 7f 01 	sts	0x017F, r24
sei();
 1de:	78 94       	sei
return data;
}
 1e0:	8e 2f       	mov	r24, r30
 1e2:	08 95       	ret

000001e4 <ps2Init>:

void ps2Init(void)
{
ps2_status=0;
 1e4:	10 92 82 01 	sts	0x0182, r1
ps2_data=0;
 1e8:	10 92 80 01 	sts	0x0180, r1
ps2_parity=0;
 1ec:	10 92 81 01 	sts	0x0181, r1

ps2_wr_index=0;
 1f0:	10 92 76 01 	sts	0x0176, r1
ps2_rd_index=0;
 1f4:	10 92 83 01 	sts	0x0183, r1
ps2_counter=0; 
 1f8:	10 92 7f 01 	sts	0x017F, r1

IN_PS2_CL();
 1fc:	8a 98       	cbi	0x11, 2	; 17
SET_PS2_CL();
 1fe:	92 9a       	sbi	0x12, 2	; 18
IN_PS2_DA();
 200:	8b 98       	cbi	0x11, 3	; 17
SET_PS2_DA();
 202:	93 9a       	sbi	0x12, 3	; 18
}
 204:	08 95       	ret

00000206 <ps2GetChar>:
*-------------------------------------------------------------------------------------------------------
*/
uint8_t ps2GetCode(void)
{
uint8_t data;
while(!ps2_counter);
 206:	80 91 7f 01 	lds	r24, 0x017F
 20a:	88 23       	and	r24, r24
 20c:	e1 f3       	breq	.-8      	; 0x206 <ps2GetChar>
data=ps2_buffer[ps2_rd_index];	/*从缓冲器读取数据*/
 20e:	e0 91 83 01 	lds	r30, 0x0183
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	e9 58       	subi	r30, 0x89	; 137
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	90 81       	ld	r25, Z
if (++ps2_rd_index == PS2_BUFFER_SIZE) ps2_rd_index=0;	
 21a:	80 91 83 01 	lds	r24, 0x0183
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	80 93 83 01 	sts	0x0183, r24
 224:	80 91 83 01 	lds	r24, 0x0183
 228:	88 30       	cpi	r24, 0x08	; 8
 22a:	11 f4       	brne	.+4      	; 0x230 <ps2GetChar+0x2a>
 22c:	10 92 83 01 	sts	0x0183, r1
cli();
 230:	f8 94       	cli
--ps2_counter;
 232:	80 91 7f 01 	lds	r24, 0x017F
 236:	81 50       	subi	r24, 0x01	; 1
 238:	80 93 7f 01 	sts	0x017F, r24
sei();
 23c:	78 94       	sei
 23e:	e0 e0       	ldi	r30, 0x00	; 0
 240:	f1 e0       	ldi	r31, 0x01	; 1
 242:	a0 e0       	ldi	r26, 0x00	; 0
 244:	b0 e0       	ldi	r27, 0x00	; 0
	ps2char = ps2GetCode();
	while(1)
	{
		if(ps2num > ((sizeof(keyboardToAscii)) >> 1)) 
			return(0);
		else if(keyboardToAscii[ps2num][0] == ps2char) 
 246:	80 81       	ld	r24, Z
 248:	89 17       	cp	r24, r25
 24a:	39 f4       	brne	.+14     	; 0x25a <ps2GetChar+0x54>
			return(keyboardToAscii[ps2num][1]);
 24c:	aa 0f       	add	r26, r26
 24e:	bb 1f       	adc	r27, r27
 250:	a0 50       	subi	r26, 0x00	; 0
 252:	bf 4f       	sbci	r27, 0xFF	; 255
 254:	11 96       	adiw	r26, 0x01	; 1
 256:	8c 91       	ld	r24, X
 258:	08 95       	ret
 25a:	11 96       	adiw	r26, 0x01	; 1
 25c:	32 96       	adiw	r30, 0x02	; 2
	uint8_t ps2num = 0x00;

	ps2char = ps2GetCode();
	while(1)
	{
		if(ps2num > ((sizeof(keyboardToAscii)) >> 1)) 
 25e:	ac 33       	cpi	r26, 0x3C	; 60
 260:	b1 05       	cpc	r27, r1
 262:	89 f7       	brne	.-30     	; 0x246 <ps2GetChar+0x40>
 264:	80 e0       	ldi	r24, 0x00	; 0
			return(0);
		else if(keyboardToAscii[ps2num][0] == ps2char) 
			return(keyboardToAscii[ps2num][1]);
		ps2num++;
	}
}
 266:	08 95       	ret

00000268 <main>:
#define PORT_LED PORTA

int main(void)
{
/*IO initialization*/
DDR_LED = 0xFF; 
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	8a bb       	out	0x1a, r24	; 26
PORT_LED = 0x00;
 26c:	1b ba       	out	0x1b, r1	; 27

/*External Interrupt(s) initialization*/
/*INT2 Mode: Falling Edge*/
EICRA = 0x20;
 26e:	80 e2       	ldi	r24, 0x20	; 32
 270:	80 93 6a 00 	sts	0x006A, r24
EICRB = 0x00;
 274:	1a be       	out	0x3a, r1	; 58
EIMSK = 0x04;
 276:	84 e0       	ldi	r24, 0x04	; 4
 278:	89 bf       	out	0x39, r24	; 57
EIFR = 0x04;
 27a:	88 bf       	out	0x38, r24	; 56

/*PS2 initialization*/
ps2Init();
 27c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ps2Init>

sei();
 280:	78 94       	sei
while(1)
{
	PORT_LED = ps2GetChar();
 282:	0e 94 03 01 	call	0x206	; 0x206 <ps2GetChar>
 286:	8b bb       	out	0x1b, r24	; 27
 288:	fc cf       	rjmp	.-8      	; 0x282 <main+0x1a>

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
