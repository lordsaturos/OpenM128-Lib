
74HC164.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000039  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000017f  00000000  00000000  0000019f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000114  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ed  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e1  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000050  00000000  00000000  00000741  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <hc164SetDat>:
#ifndef _WS_74HC164_H_
#define _WS_74HC164_H_
#include <stdint.h>

void hc164SetDat(uint8_t dat)
{
  a4:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
	{
		HC164_CLR_CLK;
  a6:	c7 98       	cbi	0x18, 7	; 24
		if(dat&0x80)
  a8:	87 ff       	sbrs	r24, 7
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <hc164SetDat+0xc>
			HC164_SET_DATA;
  ac:	c6 9a       	sbi	0x18, 6	; 24
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <hc164SetDat+0xe>
		else
			HC164_CLR_DATA;
  b0:	c6 98       	cbi	0x18, 6	; 24
		HC164_SET_CLK;
  b2:	c7 9a       	sbi	0x18, 7	; 24
#include <stdint.h>

void hc164SetDat(uint8_t dat)
{
	uint8_t i;
	for(i=0;i<8;i++)
  b4:	9f 5f       	subi	r25, 0xFF	; 255
  b6:	98 30       	cpi	r25, 0x08	; 8
  b8:	11 f0       	breq	.+4      	; 0xbe <hc164SetDat+0x1a>
		if(dat&0x80)
			HC164_SET_DATA;
		else
			HC164_CLR_DATA;
		HC164_SET_CLK;
		dat = dat<<1;
  ba:	88 0f       	add	r24, r24
  bc:	f4 cf       	rjmp	.-24     	; 0xa6 <hc164SetDat+0x2>
  be:	08 95       	ret

000000c0 <hc164Init>:
	}
}

void hc164Init(void)
{
	HC164_OUT_DATA;
  c0:	be 9a       	sbi	0x17, 6	; 23
	HC164_OUT_CLK;
  c2:	bf 9a       	sbi	0x17, 7	; 23
}
  c4:	08 95       	ret

000000c6 <main>:
#include <avr/io.h>
#include <ws_74hc164_port.h>
#include <util/delay.h>

int main(void)
{
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	}
}

void hc164Init(void)
{
	HC164_OUT_DATA;
  cc:	be 9a       	sbi	0x17, 6	; 23
	HC164_OUT_CLK;
  ce:	bf 9a       	sbi	0x17, 7	; 23
  d0:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d2:	c8 eb       	ldi	r28, 0xB8	; 184
  d4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t tmp=0;
	hc164Init();
	while(1)
	{
		hc164SetDat(tmp);
  d6:	81 2f       	mov	r24, r17
  d8:	0e 94 52 00 	call	0xa4	; 0xa4 <hc164SetDat>
		tmp++;
  dc:	1f 5f       	subi	r17, 0xFF	; 255
  de:	88 e8       	ldi	r24, 0x88	; 136
  e0:	93 e1       	ldi	r25, 0x13	; 19
  e2:	fe 01       	movw	r30, r28
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <main+0x1c>
  ec:	f4 cf       	rjmp	.-24     	; 0xd6 <main+0x10>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
