
PCF8574_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000009c2  00000a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080011a  0080011a  00000a70  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000197  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dcd  00000000  00000000  00000c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002cf  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c11  00000000  00000000  00001cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000028d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029d  00000000  00000000  00002a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000684  00000000  00000000  00002cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d0  00000000  00000000  00003375  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	aa 31       	cpi	r26, 0x1A	; 26
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	aa e1       	ldi	r26, 0x1A	; 26
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	aa 35       	cpi	r26, 0x5A	; 90
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 4c 04 	call	0x898	; 0x898 <main>
  c2:	0c 94 df 04 	jmp	0x9be	; 0x9be <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <twi_init>:

void twi_init()	 	 	//TWI(I2C)初始化
{
/*Hardware Environment：DVK501 && M128+ EX*/
#if defined(_DVK501_M128_EX_)
	TWBR = 0X0F;		//设置TWI波特率  
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	80 93 70 00 	sts	0x0070, r24
	TWSR &= 0XFC;		//设置TWI预分频 为 1
  d0:	e1 e7       	ldi	r30, 0x71	; 113
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8c 7f       	andi	r24, 0xFC	; 252
  d8:	80 83       	st	Z, r24
	TWSR &= 0XFC;		//设置TWI预分频 为 1
	
#else
  #warning "iic interface undefined."
#endif
}
  da:	08 95       	ret

000000dc <I2C_Start>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Start()					
{
	I2CStart();						
  dc:	84 ea       	ldi	r24, 0xA4	; 164
  de:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
  e2:	80 91 74 00 	lds	r24, 0x0074
  e6:	87 ff       	sbrs	r24, 7
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <I2C_Start+0x6>
	if( I2CChkAck()!=I2C_START ) 
  ea:	80 91 71 00 	lds	r24, 0x0071
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	88 7f       	andi	r24, 0xF8	; 248
  f2:	88 30       	cpi	r24, 0x08	; 8
  f4:	09 f4       	brne	.+2      	; 0xf8 <I2C_Start+0x1c>
  f6:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
  f8:	89 2f       	mov	r24, r25
  fa:	08 95       	ret

000000fc <I2C_Restart>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Restart()					
{
	I2CStart();						
  fc:	84 ea       	ldi	r24, 0xA4	; 164
  fe:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 102:	80 91 74 00 	lds	r24, 0x0074
 106:	87 ff       	sbrs	r24, 7
 108:	fc cf       	rjmp	.-8      	; 0x102 <I2C_Restart+0x6>
	if( I2CChkAck()!=I2C_RESTART ) 
 10a:	80 91 71 00 	lds	r24, 0x0071
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	88 7f       	andi	r24, 0xF8	; 248
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	09 f4       	brne	.+2      	; 0x118 <I2C_Restart+0x1c>
 116:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 118:	89 2f       	mov	r24, r25
 11a:	08 95       	ret

0000011c <I2C_SendWrDAdr>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr(uint8_t wrDAdr)	
{
	I2CSendByte(wrDAdr);			//设置 器件写地址
 11c:	80 93 73 00 	sts	0x0073, r24
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 126:	80 91 74 00 	lds	r24, 0x0074
 12a:	87 ff       	sbrs	r24, 7
 12c:	fc cf       	rjmp	.-8      	; 0x126 <I2C_SendWrDAdr+0xa>
	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
 12e:	80 91 71 00 	lds	r24, 0x0071
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	88 7f       	andi	r24, 0xF8	; 248
 136:	88 31       	cpi	r24, 0x18	; 24
 138:	09 f4       	brne	.+2      	; 0x13c <I2C_SendWrDAdr+0x20>
 13a:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;		
}
 13c:	89 2f       	mov	r24, r25
 13e:	08 95       	ret

00000140 <I2C_SendWrDAdr_>:
提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr_(uint16_t wrDAdr)	
{
 140:	9c 01       	movw	r18, r24
	if( (wrDAdr&0xF000) == 0xF000 )	//判断是否为 10位 器件地址
 142:	80 70       	andi	r24, 0x00	; 0
 144:	90 7f       	andi	r25, 0xF0	; 240
 146:	80 50       	subi	r24, 0x00	; 0
 148:	90 4f       	sbci	r25, 0xF0	; 240
 14a:	81 f4       	brne	.+32     	; 0x16c <I2C_SendWrDAdr_+0x2c>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr(uint8_t wrDAdr)	
{
	I2CSendByte(wrDAdr);			//设置 器件写地址
 14c:	10 92 73 00 	sts	0x0073, r1
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 156:	80 91 74 00 	lds	r24, 0x0074
 15a:	87 ff       	sbrs	r24, 7
 15c:	fc cf       	rjmp	.-8      	; 0x156 <I2C_SendWrDAdr_+0x16>
	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
 15e:	80 91 71 00 	lds	r24, 0x0071
 162:	88 7f       	andi	r24, 0xF8	; 248
 164:	88 31       	cpi	r24, 0x18	; 24
 166:	11 f0       	breq	.+4      	; 0x16c <I2C_SendWrDAdr_+0x2c>
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	10 c0       	rjmp	.+32     	; 0x18c <I2C_SendWrDAdr_+0x4c>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr(uint8_t wrDAdr)	
{
	I2CSendByte(wrDAdr);			//设置 器件写地址
 16c:	20 93 73 00 	sts	0x0073, r18
 170:	84 e8       	ldi	r24, 0x84	; 132
 172:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 176:	80 91 74 00 	lds	r24, 0x0074
 17a:	87 ff       	sbrs	r24, 7
 17c:	fc cf       	rjmp	.-8      	; 0x176 <I2C_SendWrDAdr_+0x36>
	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
 17e:	80 91 71 00 	lds	r24, 0x0071
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	88 7f       	andi	r24, 0xF8	; 248
 186:	88 31       	cpi	r24, 0x18	; 24
 188:	09 f4       	brne	.+2      	; 0x18c <I2C_SendWrDAdr_+0x4c>
 18a:	91 e0       	ldi	r25, 0x01	; 1
		if( I2C_SendWrDAdr( (uint8_t)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
			return I2C_ERR;
	if( I2C_SendWrDAdr( (uint8_t)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
		return I2C_ERR;
	return I2C_CRR;
}
 18c:	89 2f       	mov	r24, r25
 18e:	08 95       	ret

00000190 <I2C_SendRdDAdr>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendRdDAdr(uint8_t rdDAdr)	
{
	I2CSendByte(rdDAdr);			//设置 器件读地址
 190:	80 93 73 00 	sts	0x0073, r24
 194:	84 e8       	ldi	r24, 0x84	; 132
 196:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 19a:	80 91 74 00 	lds	r24, 0x0074
 19e:	87 ff       	sbrs	r24, 7
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <I2C_SendRdDAdr+0xa>
	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
 1a2:	80 91 71 00 	lds	r24, 0x0071
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	88 7f       	andi	r24, 0xF8	; 248
 1aa:	80 34       	cpi	r24, 0x40	; 64
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <I2C_SendRdDAdr+0x20>
 1ae:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;	
}
 1b0:	89 2f       	mov	r24, r25
 1b2:	08 95       	ret

000001b4 <I2C_SendRdDAdr_>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr(uint8_t wrDAdr)	
{
	I2CSendByte(wrDAdr);			//设置 器件写地址
 1b4:	80 93 73 00 	sts	0x0073, r24
 1b8:	84 e8       	ldi	r24, 0x84	; 132
 1ba:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 1be:	80 91 74 00 	lds	r24, 0x0074
 1c2:	87 ff       	sbrs	r24, 7
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <I2C_SendRdDAdr_+0xa>
	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
 1c6:	80 91 71 00 	lds	r24, 0x0071
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	88 7f       	andi	r24, 0xF8	; 248
 1ce:	88 31       	cpi	r24, 0x18	; 24
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <I2C_SendRdDAdr_+0x20>
 1d2:	91 e0       	ldi	r25, 0x01	; 1
		if( I2C_SendWrDAdr( (uint8_t)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
			return I2C_ERR;
	if( I2C_SendWrDAdr( (uint8_t)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
		return I2C_ERR;
	return I2C_CRR;
}
 1d4:	89 2f       	mov	r24, r25
 1d6:	08 95       	ret

000001d8 <I2C_SendDat>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendDat(uint8_t configDat)	
{
	I2CSendByte(configDat);			
 1d8:	80 93 73 00 	sts	0x0073, r24
 1dc:	84 e8       	ldi	r24, 0x84	; 132
 1de:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 1e2:	80 91 74 00 	lds	r24, 0x0074
 1e6:	87 ff       	sbrs	r24, 7
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <I2C_SendDat+0xa>
	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 1ea:	80 91 71 00 	lds	r24, 0x0071
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	88 7f       	andi	r24, 0xF8	; 248
 1f2:	88 32       	cpi	r24, 0x28	; 40
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <I2C_SendDat+0x20>
 1f6:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;	
}
 1f8:	89 2f       	mov	r24, r25
 1fa:	08 95       	ret

000001fc <I2C_RcvNAckDat>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvNAckDat(uint8_t *pRdDat)	
{
 1fc:	fc 01       	movw	r30, r24
	I2CRcvNckByte();
 1fe:	84 e8       	ldi	r24, 0x84	; 132
 200:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 204:	80 91 74 00 	lds	r24, 0x0074
 208:	87 ff       	sbrs	r24, 7
 20a:	fc cf       	rjmp	.-8      	; 0x204 <I2C_RcvNAckDat+0x8>
	if( I2CChkAck()!=I2C_MR_DATA_NACK )
 20c:	80 91 71 00 	lds	r24, 0x0071
 210:	88 7f       	andi	r24, 0xF8	; 248
 212:	88 35       	cpi	r24, 0x58	; 88
 214:	11 f0       	breq	.+4      	; 0x21a <I2C_RcvNAckDat+0x1e>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	08 95       	ret
		return I2C_ERR;
	*pRdDat=TWDR;
 21a:	80 91 73 00 	lds	r24, 0x0073
 21e:	80 83       	st	Z, r24
 220:	81 e0       	ldi	r24, 0x01	; 1
	return I2C_CRR;
}
 222:	08 95       	ret

00000224 <I2C_RcvAckDat>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvAckDat(uint8_t *pRdDat)	
{
 224:	fc 01       	movw	r30, r24
	I2CRcvAckByte();					
 226:	84 ec       	ldi	r24, 0xC4	; 196
 228:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 22c:	80 91 74 00 	lds	r24, 0x0074
 230:	87 ff       	sbrs	r24, 7
 232:	fc cf       	rjmp	.-8      	; 0x22c <I2C_RcvAckDat+0x8>
	if( I2CChkAck()!=I2C_MR_DATA_ACK )
 234:	80 91 71 00 	lds	r24, 0x0071
 238:	88 7f       	andi	r24, 0xF8	; 248
 23a:	80 35       	cpi	r24, 0x50	; 80
 23c:	11 f0       	breq	.+4      	; 0x242 <I2C_RcvAckDat+0x1e>
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	08 95       	ret
		return I2C_ERR;
	*pRdDat=TWDR;
 242:	80 91 73 00 	lds	r24, 0x0073
 246:	80 83       	st	Z, r24
 248:	81 e0       	ldi	r24, 0x01	; 1
	return I2C_CRR;
}
 24a:	08 95       	ret

0000024c <I2C_Write>:
		 wordAdr: word address 字地址
		 dat: data 数据
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Write(uint16_t wrDAdr,uint8_t wordAdr,uint8_t dat)
{
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	9c 01       	movw	r18, r24
 252:	16 2f       	mov	r17, r22
 254:	04 2f       	mov	r16, r20
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Start()					
{
	I2CStart();						
 256:	84 ea       	ldi	r24, 0xA4	; 164
 258:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 25c:	80 91 74 00 	lds	r24, 0x0074
 260:	87 ff       	sbrs	r24, 7
 262:	fc cf       	rjmp	.-8      	; 0x25c <I2C_Write+0x10>
	if( I2CChkAck()!=I2C_START ) 
 264:	80 91 71 00 	lds	r24, 0x0071
 268:	88 7f       	andi	r24, 0xF8	; 248
 26a:	88 30       	cpi	r24, 0x08	; 8
 26c:	c9 f4       	brne	.+50     	; 0x2a0 <I2C_Write+0x54>
 26e:	1c c0       	rjmp	.+56     	; 0x2a8 <I2C_Write+0x5c>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendDat(uint8_t configDat)	
{
	I2CSendByte(configDat);			
 270:	10 93 73 00 	sts	0x0073, r17
 274:	84 e8       	ldi	r24, 0x84	; 132
 276:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 27a:	80 91 74 00 	lds	r24, 0x0074
 27e:	87 ff       	sbrs	r24, 7
 280:	fc cf       	rjmp	.-8      	; 0x27a <I2C_Write+0x2e>
	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 282:	80 91 71 00 	lds	r24, 0x0071
 286:	88 7f       	andi	r24, 0xF8	; 248
 288:	88 32       	cpi	r24, 0x28	; 40
 28a:	51 f4       	brne	.+20     	; 0x2a0 <I2C_Write+0x54>
 28c:	13 c0       	rjmp	.+38     	; 0x2b4 <I2C_Write+0x68>
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendDat(uint8_t configDat)	
{
	I2CSendByte(configDat);			
	I2CWaitAck();
 28e:	80 91 74 00 	lds	r24, 0x0074
 292:	87 ff       	sbrs	r24, 7
 294:	fc cf       	rjmp	.-8      	; 0x28e <I2C_Write+0x42>
	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 296:	80 91 71 00 	lds	r24, 0x0071
 29a:	88 7f       	andi	r24, 0xF8	; 248
 29c:	88 32       	cpi	r24, 0x28	; 40
 29e:	81 f0       	breq	.+32     	; 0x2c0 <I2C_Write+0x74>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
		return I2C_ERR;

	I2C_Stop();

	return I2C_CRR;
}
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret
uint8_t I2C_Write(uint16_t wrDAdr,uint8_t wordAdr,uint8_t dat)
{
	if( I2C_Start()==I2C_ERR )
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 2a8:	c9 01       	movw	r24, r18
 2aa:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_SendWrDAdr_>
 2ae:	88 23       	and	r24, r24
 2b0:	f9 f6       	brne	.-66     	; 0x270 <I2C_Write+0x24>
 2b2:	f6 cf       	rjmp	.-20     	; 0x2a0 <I2C_Write+0x54>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendDat(uint8_t configDat)	
{
	I2CSendByte(configDat);			
 2b4:	00 93 73 00 	sts	0x0073, r16
 2b8:	84 e8       	ldi	r24, 0x84	; 132
 2ba:	80 93 74 00 	sts	0x0074, r24
 2be:	e7 cf       	rjmp	.-50     	; 0x28e <I2C_Write+0x42>
		return I2C_ERR;

	if( I2C_SendDat(dat)==I2C_ERR )
		return I2C_ERR;

	I2C_Stop();
 2c0:	84 e9       	ldi	r24, 0x94	; 148
 2c2:	80 93 74 00 	sts	0x0074, r24
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	ec cf       	rjmp	.-40     	; 0x2a2 <I2C_Write+0x56>

000002ca <I2C_Read>:
		 *pRdDat: p->read data 读取数据指针
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Read(uint16_t wrDAdr,uint8_t wordAdr,
			  uint8_t rdDAdr,uint8_t *pRdDat)
{
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	fc 01       	movw	r30, r24
 2d4:	16 2f       	mov	r17, r22
 2d6:	04 2f       	mov	r16, r20
 2d8:	e9 01       	movw	r28, r18
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Start()					
{
	I2CStart();						
 2da:	84 ea       	ldi	r24, 0xA4	; 164
 2dc:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 2e0:	80 91 74 00 	lds	r24, 0x0074
 2e4:	87 ff       	sbrs	r24, 7
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <I2C_Read+0x16>
	if( I2CChkAck()!=I2C_START ) 
 2e8:	80 91 71 00 	lds	r24, 0x0071
 2ec:	88 7f       	andi	r24, 0xF8	; 248
 2ee:	88 30       	cpi	r24, 0x08	; 8
 2f0:	a9 f5       	brne	.+106    	; 0x35c <I2C_Read+0x92>
 2f2:	3a c0       	rjmp	.+116    	; 0x368 <I2C_Read+0x9e>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendDat(uint8_t configDat)	
{
	I2CSendByte(configDat);			
 2f4:	10 93 73 00 	sts	0x0073, r17
 2f8:	84 e8       	ldi	r24, 0x84	; 132
 2fa:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 2fe:	80 91 74 00 	lds	r24, 0x0074
 302:	87 ff       	sbrs	r24, 7
 304:	fc cf       	rjmp	.-8      	; 0x2fe <I2C_Read+0x34>
	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 306:	80 91 71 00 	lds	r24, 0x0071
 30a:	88 7f       	andi	r24, 0xF8	; 248
 30c:	88 32       	cpi	r24, 0x28	; 40
 30e:	31 f5       	brne	.+76     	; 0x35c <I2C_Read+0x92>
 310:	31 c0       	rjmp	.+98     	; 0x374 <I2C_Read+0xaa>
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Restart()					
{
	I2CStart();						
	I2CWaitAck();
 312:	80 91 74 00 	lds	r24, 0x0074
 316:	87 ff       	sbrs	r24, 7
 318:	fc cf       	rjmp	.-8      	; 0x312 <I2C_Read+0x48>
	if( I2CChkAck()!=I2C_RESTART ) 
 31a:	80 91 71 00 	lds	r24, 0x0071
 31e:	88 7f       	andi	r24, 0xF8	; 248
 320:	80 31       	cpi	r24, 0x10	; 16
 322:	e1 f4       	brne	.+56     	; 0x35c <I2C_Read+0x92>
 324:	2b c0       	rjmp	.+86     	; 0x37c <I2C_Read+0xb2>
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendRdDAdr(uint8_t rdDAdr)	
{
	I2CSendByte(rdDAdr);			//设置 器件读地址
	I2CWaitAck();
 326:	80 91 74 00 	lds	r24, 0x0074
 32a:	87 ff       	sbrs	r24, 7
 32c:	fc cf       	rjmp	.-8      	; 0x326 <I2C_Read+0x5c>
	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
 32e:	80 91 71 00 	lds	r24, 0x0071
 332:	88 7f       	andi	r24, 0xF8	; 248
 334:	80 34       	cpi	r24, 0x40	; 64
 336:	91 f4       	brne	.+36     	; 0x35c <I2C_Read+0x92>
 338:	27 c0       	rjmp	.+78     	; 0x388 <I2C_Read+0xbe>
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvNAckDat(uint8_t *pRdDat)	
{
	I2CRcvNckByte();
	I2CWaitAck();
 33a:	80 91 74 00 	lds	r24, 0x0074
 33e:	87 ff       	sbrs	r24, 7
 340:	fc cf       	rjmp	.-8      	; 0x33a <I2C_Read+0x70>
	if( I2CChkAck()!=I2C_MR_DATA_NACK )
 342:	80 91 71 00 	lds	r24, 0x0071
 346:	88 7f       	andi	r24, 0xF8	; 248
 348:	88 35       	cpi	r24, 0x58	; 88
 34a:	41 f4       	brne	.+16     	; 0x35c <I2C_Read+0x92>
		return I2C_ERR;
	*pRdDat=TWDR;
 34c:	80 91 73 00 	lds	r24, 0x0073
 350:	88 83       	st	Y, r24
		return I2C_ERR;

	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
		return I2C_ERR;

	I2C_Stop();
 352:	84 e9       	ldi	r24, 0x94	; 148
 354:	80 93 74 00 	sts	0x0074, r24
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	01 c0       	rjmp	.+2      	; 0x35e <I2C_Read+0x94>

	return I2C_CRR;
 35c:	80 e0       	ldi	r24, 0x00	; 0
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	08 95       	ret
			  uint8_t rdDAdr,uint8_t *pRdDat)
{
	if( I2C_Start()==I2C_ERR )
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 368:	cf 01       	movw	r24, r30
 36a:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_SendWrDAdr_>
 36e:	88 23       	and	r24, r24
 370:	09 f6       	brne	.-126    	; 0x2f4 <I2C_Read+0x2a>
 372:	f4 cf       	rjmp	.-24     	; 0x35c <I2C_Read+0x92>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Restart()					
{
	I2CStart();						
 374:	84 ea       	ldi	r24, 0xA4	; 164
 376:	80 93 74 00 	sts	0x0074, r24
 37a:	cb cf       	rjmp	.-106    	; 0x312 <I2C_Read+0x48>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendRdDAdr(uint8_t rdDAdr)	
{
	I2CSendByte(rdDAdr);			//设置 器件读地址
 37c:	00 93 73 00 	sts	0x0073, r16
 380:	84 e8       	ldi	r24, 0x84	; 132
 382:	80 93 74 00 	sts	0x0074, r24
 386:	cf cf       	rjmp	.-98     	; 0x326 <I2C_Read+0x5c>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvNAckDat(uint8_t *pRdDat)	
{
	I2CRcvNckByte();
 388:	84 e8       	ldi	r24, 0x84	; 132
 38a:	80 93 74 00 	sts	0x0074, r24
 38e:	d5 cf       	rjmp	.-86     	; 0x33a <I2C_Read+0x70>

00000390 <I2C_Read_>:
		 num: number 读取数据个数
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Read_(uint16_t wrDAdr,uint8_t wordAdr,
			   uint8_t rdDAdr,uint8_t *pRdDat,uint8_t num)
{
 390:	ff 92       	push	r15
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	fc 01       	movw	r30, r24
 39c:	16 2f       	mov	r17, r22
 39e:	f4 2e       	mov	r15, r20
 3a0:	e9 01       	movw	r28, r18
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Start()					
{
	I2CStart();						
 3a2:	84 ea       	ldi	r24, 0xA4	; 164
 3a4:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 3a8:	80 91 74 00 	lds	r24, 0x0074
 3ac:	87 ff       	sbrs	r24, 7
 3ae:	fc cf       	rjmp	.-8      	; 0x3a8 <I2C_Read_+0x18>
	if( I2CChkAck()!=I2C_START ) 
 3b0:	80 91 71 00 	lds	r24, 0x0071
 3b4:	88 7f       	andi	r24, 0xF8	; 248
 3b6:	88 30       	cpi	r24, 0x08	; 8
 3b8:	09 f0       	breq	.+2      	; 0x3bc <I2C_Read_+0x2c>
 3ba:	58 c0       	rjmp	.+176    	; 0x46c <I2C_Read_+0xdc>
 3bc:	5e c0       	rjmp	.+188    	; 0x47a <I2C_Read_+0xea>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendDat(uint8_t configDat)	
{
	I2CSendByte(configDat);			
 3be:	10 93 73 00 	sts	0x0073, r17
 3c2:	84 e8       	ldi	r24, 0x84	; 132
 3c4:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 3c8:	80 91 74 00 	lds	r24, 0x0074
 3cc:	87 ff       	sbrs	r24, 7
 3ce:	fc cf       	rjmp	.-8      	; 0x3c8 <I2C_Read_+0x38>
	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 3d0:	80 91 71 00 	lds	r24, 0x0071
 3d4:	88 7f       	andi	r24, 0xF8	; 248
 3d6:	88 32       	cpi	r24, 0x28	; 40
 3d8:	09 f0       	breq	.+2      	; 0x3dc <I2C_Read_+0x4c>
 3da:	48 c0       	rjmp	.+144    	; 0x46c <I2C_Read_+0xdc>
 3dc:	55 c0       	rjmp	.+170    	; 0x488 <I2C_Read_+0xf8>
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Restart()					
{
	I2CStart();						
	I2CWaitAck();
 3de:	80 91 74 00 	lds	r24, 0x0074
 3e2:	87 ff       	sbrs	r24, 7
 3e4:	fc cf       	rjmp	.-8      	; 0x3de <I2C_Read_+0x4e>
	if( I2CChkAck()!=I2C_RESTART ) 
 3e6:	80 91 71 00 	lds	r24, 0x0071
 3ea:	88 7f       	andi	r24, 0xF8	; 248
 3ec:	80 31       	cpi	r24, 0x10	; 16
 3ee:	f1 f5       	brne	.+124    	; 0x46c <I2C_Read_+0xdc>
 3f0:	4f c0       	rjmp	.+158    	; 0x490 <I2C_Read_+0x100>
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendRdDAdr(uint8_t rdDAdr)	
{
	I2CSendByte(rdDAdr);			//设置 器件读地址
	I2CWaitAck();
 3f2:	80 91 74 00 	lds	r24, 0x0074
 3f6:	87 ff       	sbrs	r24, 7
 3f8:	fc cf       	rjmp	.-8      	; 0x3f2 <I2C_Read_+0x62>
	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
 3fa:	80 91 71 00 	lds	r24, 0x0071
 3fe:	88 7f       	andi	r24, 0xF8	; 248
 400:	80 34       	cpi	r24, 0x40	; 64
 402:	a1 f5       	brne	.+104    	; 0x46c <I2C_Read_+0xdc>
 404:	40 e0       	ldi	r20, 0x00	; 0
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
		return I2C_ERR;

	for(i=0;i<num-1;i++)
 406:	20 2f       	mov	r18, r16
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	21 50       	subi	r18, 0x01	; 1
 40c:	30 40       	sbci	r19, 0x00	; 0
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvAckDat(uint8_t *pRdDat)	
{
	I2CRcvAckByte();					
 40e:	54 ec       	ldi	r21, 0xC4	; 196
 410:	12 c0       	rjmp	.+36     	; 0x436 <I2C_Read_+0xa6>
 412:	50 93 74 00 	sts	0x0074, r21
	I2CWaitAck();
 416:	80 91 74 00 	lds	r24, 0x0074
 41a:	87 ff       	sbrs	r24, 7
 41c:	fc cf       	rjmp	.-8      	; 0x416 <I2C_Read_+0x86>
	if( I2CChkAck()!=I2C_MR_DATA_ACK )
 41e:	80 91 71 00 	lds	r24, 0x0071
 422:	88 7f       	andi	r24, 0xF8	; 248
 424:	80 35       	cpi	r24, 0x50	; 80
 426:	11 f5       	brne	.+68     	; 0x46c <I2C_Read_+0xdc>
		return I2C_ERR;
	*pRdDat=TWDR;
 428:	80 91 73 00 	lds	r24, 0x0073
 42c:	fe 01       	movw	r30, r28
 42e:	e4 0f       	add	r30, r20
 430:	f1 1d       	adc	r31, r1
 432:	80 83       	st	Z, r24
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
		return I2C_ERR;

	for(i=0;i<num-1;i++)
 434:	4f 5f       	subi	r20, 0xFF	; 255
 436:	84 2f       	mov	r24, r20
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	82 17       	cp	r24, r18
 43c:	93 07       	cpc	r25, r19
 43e:	4c f3       	brlt	.-46     	; 0x412 <I2C_Read_+0x82>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvNAckDat(uint8_t *pRdDat)	
{
	I2CRcvNckByte();
 440:	84 e8       	ldi	r24, 0x84	; 132
 442:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 446:	80 91 74 00 	lds	r24, 0x0074
 44a:	87 ff       	sbrs	r24, 7
 44c:	fc cf       	rjmp	.-8      	; 0x446 <I2C_Read_+0xb6>
	if( I2CChkAck()!=I2C_MR_DATA_NACK )
 44e:	80 91 71 00 	lds	r24, 0x0071
 452:	88 7f       	andi	r24, 0xF8	; 248
 454:	88 35       	cpi	r24, 0x58	; 88
 456:	51 f4       	brne	.+20     	; 0x46c <I2C_Read_+0xdc>
		return I2C_ERR;
	*pRdDat=TWDR;
 458:	80 91 73 00 	lds	r24, 0x0073
 45c:	c4 0f       	add	r28, r20
 45e:	d1 1d       	adc	r29, r1
 460:	88 83       	st	Y, r24
			return I2C_ERR;
	
	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
			return I2C_ERR;

	I2C_Stop();
 462:	84 e9       	ldi	r24, 0x94	; 148
 464:	80 93 74 00 	sts	0x0074, r24
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	01 c0       	rjmp	.+2      	; 0x46e <I2C_Read_+0xde>
	
	return I2C_CRR;
 46c:	80 e0       	ldi	r24, 0x00	; 0
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	ff 90       	pop	r15
 478:	08 95       	ret
 	uint8_t i;
	
	if( I2C_Start()==I2C_ERR )
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 47a:	cf 01       	movw	r24, r30
 47c:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_SendWrDAdr_>
 480:	88 23       	and	r24, r24
 482:	09 f0       	breq	.+2      	; 0x486 <I2C_Read_+0xf6>
 484:	9c cf       	rjmp	.-200    	; 0x3be <I2C_Read_+0x2e>
 486:	f2 cf       	rjmp	.-28     	; 0x46c <I2C_Read_+0xdc>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Restart()					
{
	I2CStart();						
 488:	84 ea       	ldi	r24, 0xA4	; 164
 48a:	80 93 74 00 	sts	0x0074, r24
 48e:	a7 cf       	rjmp	.-178    	; 0x3de <I2C_Read_+0x4e>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendRdDAdr(uint8_t rdDAdr)	
{
	I2CSendByte(rdDAdr);			//设置 器件读地址
 490:	f0 92 73 00 	sts	0x0073, r15
 494:	84 e8       	ldi	r24, 0x84	; 132
 496:	80 93 74 00 	sts	0x0074, r24
 49a:	ab cf       	rjmp	.-170    	; 0x3f2 <I2C_Read_+0x62>

0000049c <Write_PCF8574>:

//==============================
//函数名：  Write_PCF8574
//==============================
void Write_PCF8574(uint8_t data)
{
 49c:	1f 93       	push	r17
 49e:	18 2f       	mov	r17, r24
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Start()					
{
	I2CStart();						
 4a0:	84 ea       	ldi	r24, 0xA4	; 164
 4a2:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 4a6:	80 91 74 00 	lds	r24, 0x0074
 4aa:	87 ff       	sbrs	r24, 7
 4ac:	fc cf       	rjmp	.-8      	; 0x4a6 <Write_PCF8574+0xa>
	if( I2CChkAck()!=I2C_START ) 
 4ae:	80 91 71 00 	lds	r24, 0x0071
 4b2:	88 7f       	andi	r24, 0xF8	; 248
 4b4:	88 30       	cpi	r24, 0x08	; 8
 4b6:	d1 f4       	brne	.+52     	; 0x4ec <Write_PCF8574+0x50>
 4b8:	0f c0       	rjmp	.+30     	; 0x4d8 <Write_PCF8574+0x3c>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendDat(uint8_t configDat)	
{
	I2CSendByte(configDat);			
 4ba:	10 93 73 00 	sts	0x0073, r17
 4be:	84 e8       	ldi	r24, 0x84	; 132
 4c0:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 4c4:	80 91 74 00 	lds	r24, 0x0074
 4c8:	87 ff       	sbrs	r24, 7
 4ca:	fc cf       	rjmp	.-8      	; 0x4c4 <Write_PCF8574+0x28>
	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 4cc:	80 91 71 00 	lds	r24, 0x0071
 4d0:	88 7f       	andi	r24, 0xF8	; 248
 4d2:	88 32       	cpi	r24, 0x28	; 40
 4d4:	59 f4       	brne	.+22     	; 0x4ec <Write_PCF8574+0x50>
 4d6:	07 c0       	rjmp	.+14     	; 0x4e6 <Write_PCF8574+0x4a>
	if( I2C_Start()==0 )
		return ;	
	if( I2C_SendWrDAdr_(0x40)==0 )
 4d8:	80 e4       	ldi	r24, 0x40	; 64
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_SendWrDAdr_>
 4e0:	88 23       	and	r24, r24
 4e2:	59 f7       	brne	.-42     	; 0x4ba <Write_PCF8574+0x1e>
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <Write_PCF8574+0x50>
		return ;
	if( I2C_SendDat(data)==0 )
		return ;
	I2C_Stop();
 4e6:	84 e9       	ldi	r24, 0x94	; 148
 4e8:	80 93 74 00 	sts	0x0074, r24

}
 4ec:	1f 91       	pop	r17
 4ee:	08 95       	ret

000004f0 <Read_PCF8574>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Start()					
{
	I2CStart();						
 4f0:	84 ea       	ldi	r24, 0xA4	; 164
 4f2:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 4f6:	80 91 74 00 	lds	r24, 0x0074
 4fa:	87 ff       	sbrs	r24, 7
 4fc:	fc cf       	rjmp	.-8      	; 0x4f6 <Read_PCF8574+0x6>
	if( I2CChkAck()!=I2C_START ) 
 4fe:	80 91 71 00 	lds	r24, 0x0071
 502:	88 7f       	andi	r24, 0xF8	; 248
 504:	88 30       	cpi	r24, 0x08	; 8
 506:	39 f5       	brne	.+78     	; 0x556 <Read_PCF8574+0x66>
 508:	28 c0       	rjmp	.+80     	; 0x55a <Read_PCF8574+0x6a>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Restart()					
{
	I2CStart();						
 50a:	84 ea       	ldi	r24, 0xA4	; 164
 50c:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 510:	80 91 74 00 	lds	r24, 0x0074
 514:	87 ff       	sbrs	r24, 7
 516:	fc cf       	rjmp	.-8      	; 0x510 <Read_PCF8574+0x20>
	if( I2CChkAck()!=I2C_RESTART ) 
 518:	80 91 71 00 	lds	r24, 0x0071
 51c:	88 7f       	andi	r24, 0xF8	; 248
 51e:	80 31       	cpi	r24, 0x10	; 16
 520:	d1 f4       	brne	.+52     	; 0x556 <Read_PCF8574+0x66>
 522:	22 c0       	rjmp	.+68     	; 0x568 <Read_PCF8574+0x78>
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendRdDAdr(uint8_t rdDAdr)	
{
	I2CSendByte(rdDAdr);			//设置 器件读地址
	I2CWaitAck();
 524:	80 91 74 00 	lds	r24, 0x0074
 528:	87 ff       	sbrs	r24, 7
 52a:	fc cf       	rjmp	.-8      	; 0x524 <Read_PCF8574+0x34>
	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
 52c:	80 91 71 00 	lds	r24, 0x0071
 530:	88 7f       	andi	r24, 0xF8	; 248
 532:	80 34       	cpi	r24, 0x40	; 64
 534:	81 f4       	brne	.+32     	; 0x556 <Read_PCF8574+0x66>
 536:	1f c0       	rjmp	.+62     	; 0x576 <Read_PCF8574+0x86>
		return 0;
	if( I2C_Restart()==I2C_ERR )
		return I2C_ERR;
	if( I2C_SendRdDAdr(0x41)==I2C_ERR )
		return I2C_ERR;
	I2CRcvNckByte();I2CWaitAck();
 538:	80 91 74 00 	lds	r24, 0x0074
 53c:	87 ff       	sbrs	r24, 7
 53e:	fc cf       	rjmp	.-8      	; 0x538 <Read_PCF8574+0x48>
	if( I2CChkAck()!=I2C_MR_DATA_NACK )
 540:	80 91 71 00 	lds	r24, 0x0071
 544:	88 7f       	andi	r24, 0xF8	; 248
 546:	88 35       	cpi	r24, 0x58	; 88
 548:	31 f4       	brne	.+12     	; 0x556 <Read_PCF8574+0x66>
		return I2C_ERR;
	I2C_Stop();
 54a:	84 e9       	ldi	r24, 0x94	; 148
 54c:	80 93 74 00 	sts	0x0074, r24
	return TWDR;
 550:	80 91 73 00 	lds	r24, 0x0073
 554:	08 95       	ret
 556:	80 e0       	ldi	r24, 0x00	; 0
}
 558:	08 95       	ret
//===============================
uint8_t Read_PCF8574(void)
{
	if( I2C_Start()==0 )
		return 0;	
	if( I2C_SendWrDAdr_(0x40)==0 )
 55a:	80 e4       	ldi	r24, 0x40	; 64
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_SendWrDAdr_>
 562:	88 23       	and	r24, r24
 564:	91 f6       	brne	.-92     	; 0x50a <Read_PCF8574+0x1a>
 566:	f7 cf       	rjmp	.-18     	; 0x556 <Read_PCF8574+0x66>
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendRdDAdr(uint8_t rdDAdr)	
{
	I2CSendByte(rdDAdr);			//设置 器件读地址
 568:	81 e4       	ldi	r24, 0x41	; 65
 56a:	80 93 73 00 	sts	0x0073, r24
 56e:	84 e8       	ldi	r24, 0x84	; 132
 570:	80 93 74 00 	sts	0x0074, r24
 574:	d7 cf       	rjmp	.-82     	; 0x524 <Read_PCF8574+0x34>
		return 0;
	if( I2C_Restart()==I2C_ERR )
		return I2C_ERR;
	if( I2C_SendRdDAdr(0x41)==I2C_ERR )
		return I2C_ERR;
	I2CRcvNckByte();I2CWaitAck();
 576:	84 e8       	ldi	r24, 0x84	; 132
 578:	80 93 74 00 	sts	0x0074, r24
 57c:	dd cf       	rjmp	.-70     	; 0x538 <Read_PCF8574+0x48>

0000057e <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 57e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 580:	77 9b       	sbis	0x0e, 7	; 14
 582:	fe cf       	rjmp	.-4      	; 0x580 <spiSendChar+0x2>
}
 584:	08 95       	ret

00000586 <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 586:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 588:	88 ef       	ldi	r24, 0xF8	; 248
 58a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 58c:	77 9b       	sbis	0x0e, 7	; 14
 58e:	fe cf       	rjmp	.-4      	; 0x58c <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 590:	89 2f       	mov	r24, r25
 592:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 594:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 596:	77 9b       	sbis	0x0e, 7	; 14
 598:	fe cf       	rjmp	.-4      	; 0x596 <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 59a:	92 95       	swap	r25
 59c:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 59e:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 5a0:	77 9b       	sbis	0x0e, 7	; 14
 5a2:	fe cf       	rjmp	.-4      	; 0x5a0 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5a4:	88 eb       	ldi	r24, 0xB8	; 184
 5a6:	8a 95       	dec	r24
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 5aa:	08 95       	ret

000005ac <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 5ac:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 5ae:	8a ef       	ldi	r24, 0xFA	; 250
 5b0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 5b2:	77 9b       	sbis	0x0e, 7	; 14
 5b4:	fe cf       	rjmp	.-4      	; 0x5b2 <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 5b6:	89 2f       	mov	r24, r25
 5b8:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 5ba:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 5bc:	77 9b       	sbis	0x0e, 7	; 14
 5be:	fe cf       	rjmp	.-4      	; 0x5bc <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 5c0:	92 95       	swap	r25
 5c2:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 5c4:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 5c6:	77 9b       	sbis	0x0e, 7	; 14
 5c8:	fe cf       	rjmp	.-4      	; 0x5c6 <sendDataST7920+0x1a>
 5ca:	88 eb       	ldi	r24, 0xB8	; 184
 5cc:	8a 95       	dec	r24
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 5d0:	08 95       	ret

000005d2 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 5d2:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 5d4:	88 ef       	ldi	r24, 0xF8	; 248
 5d6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 5d8:	77 9b       	sbis	0x0e, 7	; 14
 5da:	fe cf       	rjmp	.-4      	; 0x5d8 <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 5dc:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 5de:	77 9b       	sbis	0x0e, 7	; 14
 5e0:	fe cf       	rjmp	.-4      	; 0x5de <refreshLCD+0xc>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 5e2:	80 e2       	ldi	r24, 0x20	; 32
 5e4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 5e6:	77 9b       	sbis	0x0e, 7	; 14
 5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <refreshLCD+0x14>
 5ea:	88 eb       	ldi	r24, 0xB8	; 184
 5ec:	8a 95       	dec	r24
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <refreshLCD+0x1a>
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 5f4:	6a ef       	ldi	r22, 0xFA	; 250
 5f6:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 5f8:	fa 01       	movw	r30, r20
 5fa:	e2 0f       	add	r30, r18
 5fc:	f3 1f       	adc	r31, r19
 5fe:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 600:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));
 602:	77 9b       	sbis	0x0e, 7	; 14
 604:	fe cf       	rjmp	.-4      	; 0x602 <refreshLCD+0x30>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 606:	8e 2f       	mov	r24, r30
 608:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 60a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 60c:	77 9b       	sbis	0x0e, 7	; 14
 60e:	fe cf       	rjmp	.-4      	; 0x60c <refreshLCD+0x3a>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 610:	e2 95       	swap	r30
 612:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 614:	ef b9       	out	0x0f, r30	; 15
	while (!(SPSR & (1<<SPIF)));
 616:	77 9b       	sbis	0x0e, 7	; 14
 618:	fe cf       	rjmp	.-4      	; 0x616 <refreshLCD+0x44>
 61a:	89 2f       	mov	r24, r25
 61c:	8a 95       	dec	r24
 61e:	f1 f7       	brne	.-4      	; 0x61c <refreshLCD+0x4a>
 620:	2f 5f       	subi	r18, 0xFF	; 255
 622:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 624:	20 31       	cpi	r18, 0x10	; 16
 626:	31 05       	cpc	r19, r1
 628:	39 f7       	brne	.-50     	; 0x5f8 <refreshLCD+0x26>
 62a:	da 01       	movw	r26, r20
 62c:	fa 01       	movw	r30, r20
 62e:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 630:	3a ef       	ldi	r19, 0xFA	; 250
 632:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 634:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 636:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 638:	77 9b       	sbis	0x0e, 7	; 14
 63a:	fe cf       	rjmp	.-4      	; 0x638 <refreshLCD+0x66>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 63c:	82 2f       	mov	r24, r18
 63e:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 640:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 642:	77 9b       	sbis	0x0e, 7	; 14
 644:	fe cf       	rjmp	.-4      	; 0x642 <refreshLCD+0x70>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 646:	22 95       	swap	r18
 648:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 64a:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 64c:	77 9b       	sbis	0x0e, 7	; 14
 64e:	fe cf       	rjmp	.-4      	; 0x64c <refreshLCD+0x7a>
 650:	89 2f       	mov	r24, r25
 652:	8a 95       	dec	r24
 654:	f1 f7       	brne	.-4      	; 0x652 <refreshLCD+0x80>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 656:	6f 5f       	subi	r22, 0xFF	; 255
 658:	31 96       	adiw	r30, 0x01	; 1
 65a:	60 33       	cpi	r22, 0x30	; 48
 65c:	59 f7       	brne	.-42     	; 0x634 <refreshLCD+0x62>
 65e:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 660:	7a ef       	ldi	r23, 0xFA	; 250
 662:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 664:	50 96       	adiw	r26, 0x10	; 16
 666:	2c 91       	ld	r18, X
 668:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 66a:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));
 66c:	77 9b       	sbis	0x0e, 7	; 14
 66e:	fe cf       	rjmp	.-4      	; 0x66c <refreshLCD+0x9a>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 670:	82 2f       	mov	r24, r18
 672:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 674:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 676:	77 9b       	sbis	0x0e, 7	; 14
 678:	fe cf       	rjmp	.-4      	; 0x676 <refreshLCD+0xa4>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 67a:	22 95       	swap	r18
 67c:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 67e:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 680:	77 9b       	sbis	0x0e, 7	; 14
 682:	fe cf       	rjmp	.-4      	; 0x680 <refreshLCD+0xae>
 684:	89 2f       	mov	r24, r25
 686:	8a 95       	dec	r24
 688:	f1 f7       	brne	.-4      	; 0x686 <refreshLCD+0xb4>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 68a:	3f 5f       	subi	r19, 0xFF	; 255
 68c:	11 96       	adiw	r26, 0x01	; 1
 68e:	30 32       	cpi	r19, 0x20	; 32
 690:	49 f7       	brne	.-46     	; 0x664 <refreshLCD+0x92>
 692:	fa 01       	movw	r30, r20
 694:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 696:	3a ef       	ldi	r19, 0xFA	; 250
 698:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 69a:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 69c:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 69e:	77 9b       	sbis	0x0e, 7	; 14
 6a0:	fe cf       	rjmp	.-4      	; 0x69e <refreshLCD+0xcc>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 6a2:	89 2f       	mov	r24, r25
 6a4:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 6a6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 6a8:	77 9b       	sbis	0x0e, 7	; 14
 6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <refreshLCD+0xd6>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 6ac:	92 95       	swap	r25
 6ae:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 6b0:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 6b2:	77 9b       	sbis	0x0e, 7	; 14
 6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <refreshLCD+0xe0>
 6b6:	82 2f       	mov	r24, r18
 6b8:	8a 95       	dec	r24
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <refreshLCD+0xe6>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
 6bc:	6f 5f       	subi	r22, 0xFF	; 255
 6be:	31 96       	adiw	r30, 0x01	; 1
 6c0:	6f 33       	cpi	r22, 0x3F	; 63
 6c2:	59 f7       	brne	.-42     	; 0x69a <refreshLCD+0xc8>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 6c4:	08 95       	ret

000006c6 <decToAscii>:
*	width是转换宽度
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	fb 01       	movw	r30, r22
 6cc:	ec 01       	movw	r28, r24
			case 1:
			{
				*(str+num) = (dec+'0');
				break;
			}
			default: *(str+num) = '0';
 6ce:	20 e3       	ldi	r18, 0x30	; 48
 6d0:	43 c0       	rjmp	.+134    	; 0x758 <decToAscii+0x92>
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
	{
		switch(width)
 6d2:	43 30       	cpi	r20, 0x03	; 3
 6d4:	21 f1       	breq	.+72     	; 0x71e <decToAscii+0x58>
 6d6:	44 30       	cpi	r20, 0x04	; 4
 6d8:	28 f4       	brcc	.+10     	; 0x6e4 <decToAscii+0x1e>
 6da:	41 30       	cpi	r20, 0x01	; 1
 6dc:	b1 f1       	breq	.+108    	; 0x74a <decToAscii+0x84>
 6de:	42 30       	cpi	r20, 0x02	; 2
 6e0:	c1 f5       	brne	.+112    	; 0x752 <decToAscii+0x8c>
 6e2:	28 c0       	rjmp	.+80     	; 0x734 <decToAscii+0x6e>
 6e4:	44 30       	cpi	r20, 0x04	; 4
 6e6:	69 f0       	breq	.+26     	; 0x702 <decToAscii+0x3c>
 6e8:	45 30       	cpi	r20, 0x05	; 5
 6ea:	99 f5       	brne	.+102    	; 0x752 <decToAscii+0x8c>
		{
			case 5:
			{
				*(str+num) = (dec/10000+'0');
 6ec:	cf 01       	movw	r24, r30
 6ee:	60 e1       	ldi	r22, 0x10	; 16
 6f0:	77 e2       	ldi	r23, 0x27	; 39
 6f2:	0e 94 cb 04 	call	0x996	; 0x996 <__udivmodhi4>
 6f6:	60 5d       	subi	r22, 0xD0	; 208
 6f8:	68 83       	st	Y, r22
				dec%=10000;
 6fa:	cf 01       	movw	r24, r30
 6fc:	60 e1       	ldi	r22, 0x10	; 16
 6fe:	77 e2       	ldi	r23, 0x27	; 39
 700:	0a c0       	rjmp	.+20     	; 0x716 <decToAscii+0x50>
				break;
			}			
			case 4:
			{
				*(str+num) = (dec/1000+'0');
 702:	cf 01       	movw	r24, r30
 704:	68 ee       	ldi	r22, 0xE8	; 232
 706:	73 e0       	ldi	r23, 0x03	; 3
 708:	0e 94 cb 04 	call	0x996	; 0x996 <__udivmodhi4>
 70c:	60 5d       	subi	r22, 0xD0	; 208
 70e:	68 83       	st	Y, r22
				dec%=1000;
 710:	cf 01       	movw	r24, r30
 712:	68 ee       	ldi	r22, 0xE8	; 232
 714:	73 e0       	ldi	r23, 0x03	; 3
 716:	0e 94 cb 04 	call	0x996	; 0x996 <__udivmodhi4>
 71a:	fc 01       	movw	r30, r24
 71c:	1b c0       	rjmp	.+54     	; 0x754 <decToAscii+0x8e>
				break;
			}
			case 3:
			{
				*(str+num) = (dec/100+'0');
 71e:	cf 01       	movw	r24, r30
 720:	64 e6       	ldi	r22, 0x64	; 100
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	0e 94 cb 04 	call	0x996	; 0x996 <__udivmodhi4>
 728:	60 5d       	subi	r22, 0xD0	; 208
 72a:	68 83       	st	Y, r22
				dec%=100;
 72c:	cf 01       	movw	r24, r30
 72e:	64 e6       	ldi	r22, 0x64	; 100
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	f1 cf       	rjmp	.-30     	; 0x716 <decToAscii+0x50>
				break;
			}
			case 2:
			{
				*(str+num) = (dec/10+'0');
 734:	cf 01       	movw	r24, r30
 736:	6a e0       	ldi	r22, 0x0A	; 10
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	0e 94 cb 04 	call	0x996	; 0x996 <__udivmodhi4>
 73e:	60 5d       	subi	r22, 0xD0	; 208
 740:	68 83       	st	Y, r22
				dec%=10;
 742:	cf 01       	movw	r24, r30
 744:	6a e0       	ldi	r22, 0x0A	; 10
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	e6 cf       	rjmp	.-52     	; 0x716 <decToAscii+0x50>
				break;
			}
			case 1:
			{
				*(str+num) = (dec+'0');
 74a:	e0 5d       	subi	r30, 0xD0	; 208
 74c:	e8 83       	st	Y, r30
 74e:	e0 53       	subi	r30, 0x30	; 48
 750:	01 c0       	rjmp	.+2      	; 0x754 <decToAscii+0x8e>
				break;
			}
			default: *(str+num) = '0';
 752:	28 83       	st	Y, r18
		}
		width--;
 754:	41 50       	subi	r20, 0x01	; 1
 756:	21 96       	adiw	r28, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
 758:	44 23       	and	r20, r20
 75a:	09 f0       	breq	.+2      	; 0x75e <decToAscii+0x98>
 75c:	ba cf       	rjmp	.-140    	; 0x6d2 <decToAscii+0xc>
			default: *(str+num) = '0';
		}
		width--;
		num++;
	}
}
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	08 95       	ret

00000764 <st7920LcdInit>:
#define CLR_CS_LCD() cbi(PORTB,4)
#define OUT_CS_LCD() sbi(DDRB,4)

void st7920LcdInit(void)
{
DDRB|=0x07;
 764:	87 b3       	in	r24, 0x17	; 23
 766:	87 60       	ori	r24, 0x07	; 7
 768:	87 bb       	out	0x17, r24	; 23
PORTB&=0xF8;
 76a:	88 b3       	in	r24, 0x18	; 24
 76c:	88 7f       	andi	r24, 0xF8	; 248
 76e:	88 bb       	out	0x18, r24	; 24
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 770:	80 e5       	ldi	r24, 0x50	; 80
 772:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	8e b9       	out	0x0e, r24	; 14
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 778:	88 ef       	ldi	r24, 0xF8	; 248
 77a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 77c:	77 9b       	sbis	0x0e, 7	; 14
 77e:	fe cf       	rjmp	.-4      	; 0x77c <st7920LcdInit+0x18>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 780:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 782:	77 9b       	sbis	0x0e, 7	; 14
 784:	fe cf       	rjmp	.-4      	; 0x782 <st7920LcdInit+0x1e>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 786:	80 ec       	ldi	r24, 0xC0	; 192
 788:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 78a:	77 9b       	sbis	0x0e, 7	; 14
 78c:	fe cf       	rjmp	.-4      	; 0x78a <st7920LcdInit+0x26>
 78e:	88 eb       	ldi	r24, 0xB8	; 184
 790:	8a 95       	dec	r24
 792:	f1 f7       	brne	.-4      	; 0x790 <st7920LcdInit+0x2c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 794:	88 ef       	ldi	r24, 0xF8	; 248
 796:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 798:	77 9b       	sbis	0x0e, 7	; 14
 79a:	fe cf       	rjmp	.-4      	; 0x798 <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 79c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 79e:	77 9b       	sbis	0x0e, 7	; 14
 7a0:	fe cf       	rjmp	.-4      	; 0x79e <st7920LcdInit+0x3a>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 7a2:	80 e1       	ldi	r24, 0x10	; 16
 7a4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 7a6:	77 9b       	sbis	0x0e, 7	; 14
 7a8:	fe cf       	rjmp	.-4      	; 0x7a6 <st7920LcdInit+0x42>
 7aa:	88 eb       	ldi	r24, 0xB8	; 184
 7ac:	8a 95       	dec	r24
 7ae:	f1 f7       	brne	.-4      	; 0x7ac <st7920LcdInit+0x48>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 7b0:	86 e6       	ldi	r24, 0x66	; 102
 7b2:	9e e0       	ldi	r25, 0x0E	; 14
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	f1 f7       	brne	.-4      	; 0x7b4 <st7920LcdInit+0x50>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 7b8:	8a e1       	ldi	r24, 0x1A	; 26
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	60 e2       	ldi	r22, 0x20	; 32
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	40 e4       	ldi	r20, 0x40	; 64
 7c2:	50 e0       	ldi	r21, 0x00	; 0
 7c4:	0e 94 c4 04 	call	0x988	; 0x988 <memset>
}
 7c8:	08 95       	ret

000007ca <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 7ca:	af 92       	push	r10
 7cc:	bf 92       	push	r11
 7ce:	cf 92       	push	r12
 7d0:	df 92       	push	r13
 7d2:	ef 92       	push	r14
 7d4:	ff 92       	push	r15
 7d6:	0f 93       	push	r16
 7d8:	df 93       	push	r29
 7da:	cf 93       	push	r28
 7dc:	cd b7       	in	r28, 0x3d	; 61
 7de:	de b7       	in	r29, 0x3e	; 62
 7e0:	0d 85       	ldd	r16, Y+13	; 0x0d
 7e2:	ae 84       	ldd	r10, Y+14	; 0x0e
 7e4:	bf 84       	ldd	r11, Y+15	; 0x0f
 7e6:	e8 88       	ldd	r14, Y+16	; 0x10
 7e8:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 7ea:	02 95       	swap	r16
 7ec:	00 7f       	andi	r16, 0xF0	; 240
 7ee:	8c 85       	ldd	r24, Y+12	; 0x0c
 7f0:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 7f2:	de 01       	movw	r26, r28
 7f4:	52 96       	adiw	r26, 0x12	; 18
 7f6:	41 c0       	rjmp	.+130    	; 0x87a <showLine+0xb0>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 7f8:	01 34       	cpi	r16, 0x41	; 65
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <showLine+0x34>
 7fc:	43 c0       	rjmp	.+134    	; 0x884 <showLine+0xba>

		if(*str == '\\')
 7fe:	8c 35       	cpi	r24, 0x5C	; 92
 800:	51 f4       	brne	.+20     	; 0x816 <showLine+0x4c>
		{
			str++;
 802:	08 94       	sec
 804:	e1 1c       	adc	r14, r1
 806:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 808:	95 01       	movw	r18, r10
 80a:	20 0f       	add	r18, r16
 80c:	31 1d       	adc	r19, r1
 80e:	f7 01       	movw	r30, r14
 810:	80 81       	ld	r24, Z
 812:	f9 01       	movw	r30, r18
 814:	2d c0       	rjmp	.+90     	; 0x870 <showLine+0xa6>
		}
		else if(*str == '%')
 816:	85 32       	cpi	r24, 0x25	; 37
 818:	41 f5       	brne	.+80     	; 0x86a <showLine+0xa0>
		{
			str++;
 81a:	08 94       	sec
 81c:	e1 1c       	adc	r14, r1
 81e:	f1 1c       	adc	r15, r1
			if (*str=='d')
 820:	f7 01       	movw	r30, r14
 822:	80 81       	ld	r24, Z
 824:	84 36       	cpi	r24, 0x64	; 100
 826:	c1 f4       	brne	.+48     	; 0x858 <showLine+0x8e>
			{
				str++;
 828:	08 94       	sec
 82a:	e1 1c       	adc	r14, r1
 82c:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 82e:	82 e0       	ldi	r24, 0x02	; 2
 830:	c8 2e       	mov	r12, r24
 832:	d1 2c       	mov	r13, r1
 834:	ca 0e       	add	r12, r26
 836:	db 1e       	adc	r13, r27
 838:	6d 91       	ld	r22, X+
 83a:	7c 91       	ld	r23, X
 83c:	f7 01       	movw	r30, r14
 83e:	40 81       	ld	r20, Z
 840:	40 53       	subi	r20, 0x30	; 48
 842:	c5 01       	movw	r24, r10
 844:	80 0f       	add	r24, r16
 846:	91 1d       	adc	r25, r1
 848:	0e 94 63 03 	call	0x6c6	; 0x6c6 <decToAscii>
				coordinate+=(*str-'0'-1);
 84c:	01 53       	subi	r16, 0x31	; 49
 84e:	f7 01       	movw	r30, r14
 850:	80 81       	ld	r24, Z
 852:	08 0f       	add	r16, r24
 854:	d6 01       	movw	r26, r12
 856:	0d c0       	rjmp	.+26     	; 0x872 <showLine+0xa8>
			}
			else if(*str=='c')
 858:	83 36       	cpi	r24, 0x63	; 99
 85a:	59 f4       	brne	.+22     	; 0x872 <showLine+0xa8>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 85c:	f5 01       	movw	r30, r10
 85e:	e0 0f       	add	r30, r16
 860:	f1 1d       	adc	r31, r1
 862:	8c 91       	ld	r24, X
 864:	80 83       	st	Z, r24
 866:	12 96       	adiw	r26, 0x02	; 2
 868:	04 c0       	rjmp	.+8      	; 0x872 <showLine+0xa8>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 86a:	f5 01       	movw	r30, r10
 86c:	e0 0f       	add	r30, r16
 86e:	f1 1d       	adc	r31, r1
 870:	80 83       	st	Z, r24
		}
		str++;
 872:	08 94       	sec
 874:	e1 1c       	adc	r14, r1
 876:	f1 1c       	adc	r15, r1
		coordinate++;
 878:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 87a:	f7 01       	movw	r30, r14
 87c:	80 81       	ld	r24, Z
 87e:	88 23       	and	r24, r24
 880:	09 f0       	breq	.+2      	; 0x884 <showLine+0xba>
 882:	ba cf       	rjmp	.-140    	; 0x7f8 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 884:	cf 91       	pop	r28
 886:	df 91       	pop	r29
 888:	0f 91       	pop	r16
 88a:	ff 90       	pop	r15
 88c:	ef 90       	pop	r14
 88e:	df 90       	pop	r13
 890:	cf 90       	pop	r12
 892:	bf 90       	pop	r11
 894:	af 90       	pop	r10
 896:	08 95       	ret

00000898 <main>:
#include <ws_iic_port.h>
#include <ws_pcf8574.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 898:	af 92       	push	r10
 89a:	bf 92       	push	r11
 89c:	cf 92       	push	r12
 89e:	df 92       	push	r13
 8a0:	ef 92       	push	r14
 8a2:	ff 92       	push	r15
 8a4:	0f 93       	push	r16
 8a6:	1f 93       	push	r17
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
	uint8_t tmp=0;
	st7920LcdInit(); /*LCD初始化*/
 8ac:	0e 94 b2 03 	call	0x764	; 0x764 <st7920LcdInit>
	showLine(0,0,lcd_buffer,"PCF8574 试验");
 8b0:	00 d0       	rcall	.+0      	; 0x8b2 <main+0x1a>
 8b2:	00 d0       	rcall	.+0      	; 0x8b4 <main+0x1c>
 8b4:	00 d0       	rcall	.+0      	; 0x8b6 <main+0x1e>
 8b6:	ed b7       	in	r30, 0x3d	; 61
 8b8:	fe b7       	in	r31, 0x3e	; 62
 8ba:	31 96       	adiw	r30, 0x01	; 1
 8bc:	ad b7       	in	r26, 0x3d	; 61
 8be:	be b7       	in	r27, 0x3e	; 62
 8c0:	11 96       	adiw	r26, 0x01	; 1
 8c2:	1c 92       	st	X, r1
 8c4:	11 82       	std	Z+1, r1	; 0x01
 8c6:	0a e1       	ldi	r16, 0x1A	; 26
 8c8:	11 e0       	ldi	r17, 0x01	; 1
 8ca:	13 83       	std	Z+3, r17	; 0x03
 8cc:	02 83       	std	Z+2, r16	; 0x02
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	95 83       	std	Z+5, r25	; 0x05
 8d4:	84 83       	std	Z+4, r24	; 0x04
 8d6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <showLine>
	showLine(0,1,lcd_buffer,"输出值：");
 8da:	ed b7       	in	r30, 0x3d	; 61
 8dc:	fe b7       	in	r31, 0x3e	; 62
 8de:	31 96       	adiw	r30, 0x01	; 1
 8e0:	ad b7       	in	r26, 0x3d	; 61
 8e2:	be b7       	in	r27, 0x3e	; 62
 8e4:	11 96       	adiw	r26, 0x01	; 1
 8e6:	1c 92       	st	X, r1
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	81 83       	std	Z+1, r24	; 0x01
 8ec:	13 83       	std	Z+3, r17	; 0x03
 8ee:	02 83       	std	Z+2, r16	; 0x02
 8f0:	8d e0       	ldi	r24, 0x0D	; 13
 8f2:	91 e0       	ldi	r25, 0x01	; 1
 8f4:	95 83       	std	Z+5, r25	; 0x05
 8f6:	84 83       	std	Z+4, r24	; 0x04
 8f8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <showLine>
	refreshLCD(lcd_buffer); /*刷新LCD*/
 8fc:	8d b7       	in	r24, 0x3d	; 61
 8fe:	9e b7       	in	r25, 0x3e	; 62
 900:	06 96       	adiw	r24, 0x06	; 6
 902:	0f b6       	in	r0, 0x3f	; 63
 904:	f8 94       	cli
 906:	9e bf       	out	0x3e, r25	; 62
 908:	0f be       	out	0x3f, r0	; 63
 90a:	8d bf       	out	0x3d, r24	; 61
 90c:	c8 01       	movw	r24, r16
 90e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <refreshLCD>
 912:	ff 24       	eor	r15, r15
	while(1)
	{
		Write_PCF8574(tmp);
		showLine(8,1,lcd_buffer,"%d3",tmp);
 914:	28 e0       	ldi	r18, 0x08	; 8
 916:	a2 2e       	mov	r10, r18
 918:	bb 24       	eor	r11, r11
 91a:	b3 94       	inc	r11
 91c:	e0 2e       	mov	r14, r16
 91e:	01 2f       	mov	r16, r17
 920:	96 e1       	ldi	r25, 0x16	; 22
 922:	c9 2e       	mov	r12, r25
 924:	91 e0       	ldi	r25, 0x01	; 1
 926:	d9 2e       	mov	r13, r25
 928:	c8 eb       	ldi	r28, 0xB8	; 184
 92a:	d0 e0       	ldi	r29, 0x00	; 0
	showLine(0,0,lcd_buffer,"PCF8574 试验");
	showLine(0,1,lcd_buffer,"输出值：");
	refreshLCD(lcd_buffer); /*刷新LCD*/
	while(1)
	{
		Write_PCF8574(tmp);
 92c:	8f 2d       	mov	r24, r15
 92e:	0e 94 4e 02 	call	0x49c	; 0x49c <Write_PCF8574>
		showLine(8,1,lcd_buffer,"%d3",tmp);
 932:	ad b7       	in	r26, 0x3d	; 61
 934:	be b7       	in	r27, 0x3e	; 62
 936:	18 97       	sbiw	r26, 0x08	; 8
 938:	0f b6       	in	r0, 0x3f	; 63
 93a:	f8 94       	cli
 93c:	be bf       	out	0x3e, r27	; 62
 93e:	0f be       	out	0x3f, r0	; 63
 940:	ad bf       	out	0x3d, r26	; 61
 942:	ed b7       	in	r30, 0x3d	; 61
 944:	fe b7       	in	r31, 0x3e	; 62
 946:	31 96       	adiw	r30, 0x01	; 1
 948:	11 96       	adiw	r26, 0x01	; 1
 94a:	ac 92       	st	X, r10
 94c:	b1 82       	std	Z+1, r11	; 0x01
 94e:	e2 82       	std	Z+2, r14	; 0x02
 950:	03 83       	std	Z+3, r16	; 0x03
 952:	d5 82       	std	Z+5, r13	; 0x05
 954:	c4 82       	std	Z+4, r12	; 0x04
 956:	f6 82       	std	Z+6, r15	; 0x06
 958:	17 82       	std	Z+7, r1	; 0x07
 95a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <showLine>
		refreshLCD(lcd_buffer); /*刷新LCD*/
 95e:	8d b7       	in	r24, 0x3d	; 61
 960:	9e b7       	in	r25, 0x3e	; 62
 962:	08 96       	adiw	r24, 0x08	; 8
 964:	0f b6       	in	r0, 0x3f	; 63
 966:	f8 94       	cli
 968:	9e bf       	out	0x3e, r25	; 62
 96a:	0f be       	out	0x3f, r0	; 63
 96c:	8d bf       	out	0x3d, r24	; 61
 96e:	8e 2d       	mov	r24, r14
 970:	90 2f       	mov	r25, r16
 972:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <refreshLCD>
		tmp++;
 976:	f3 94       	inc	r15
 978:	80 e1       	ldi	r24, 0x10	; 16
 97a:	97 e2       	ldi	r25, 0x27	; 39
 97c:	fe 01       	movw	r30, r28
 97e:	31 97       	sbiw	r30, 0x01	; 1
 980:	f1 f7       	brne	.-4      	; 0x97e <main+0xe6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 982:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 984:	d9 f7       	brne	.-10     	; 0x97c <main+0xe4>
 986:	d2 cf       	rjmp	.-92     	; 0x92c <main+0x94>

00000988 <memset>:
 988:	dc 01       	movw	r26, r24
 98a:	01 c0       	rjmp	.+2      	; 0x98e <memset+0x6>
 98c:	6d 93       	st	X+, r22
 98e:	41 50       	subi	r20, 0x01	; 1
 990:	50 40       	sbci	r21, 0x00	; 0
 992:	e0 f7       	brcc	.-8      	; 0x98c <memset+0x4>
 994:	08 95       	ret

00000996 <__udivmodhi4>:
 996:	aa 1b       	sub	r26, r26
 998:	bb 1b       	sub	r27, r27
 99a:	51 e1       	ldi	r21, 0x11	; 17
 99c:	07 c0       	rjmp	.+14     	; 0x9ac <__udivmodhi4_ep>

0000099e <__udivmodhi4_loop>:
 99e:	aa 1f       	adc	r26, r26
 9a0:	bb 1f       	adc	r27, r27
 9a2:	a6 17       	cp	r26, r22
 9a4:	b7 07       	cpc	r27, r23
 9a6:	10 f0       	brcs	.+4      	; 0x9ac <__udivmodhi4_ep>
 9a8:	a6 1b       	sub	r26, r22
 9aa:	b7 0b       	sbc	r27, r23

000009ac <__udivmodhi4_ep>:
 9ac:	88 1f       	adc	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	5a 95       	dec	r21
 9b2:	a9 f7       	brne	.-22     	; 0x99e <__udivmodhi4_loop>
 9b4:	80 95       	com	r24
 9b6:	90 95       	com	r25
 9b8:	bc 01       	movw	r22, r24
 9ba:	cd 01       	movw	r24, r26
 9bc:	08 95       	ret

000009be <_exit>:
 9be:	f8 94       	cli

000009c0 <__stop_program>:
 9c0:	ff cf       	rjmp	.-2      	; 0x9c0 <__stop_program>
