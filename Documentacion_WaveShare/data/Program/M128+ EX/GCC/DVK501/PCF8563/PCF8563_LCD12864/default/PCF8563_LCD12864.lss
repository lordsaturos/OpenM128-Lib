
PCF8563_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000980  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080012c  0080012c  00000a40  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001d9  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bd  00000000  00000000  00000c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025a  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009cb  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  0000211c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000316  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e9  00000000  00000000  000025f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	ac 32       	cpi	r26, 0x2C	; 44
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	ac e2       	ldi	r26, 0x2C	; 44
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ac 36       	cpi	r26, 0x6C	; 108
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 ef 03 	call	0x7de	; 0x7de <main>
  c2:	0c 94 be 04 	jmp	0x97c	; 0x97c <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <twi_init>:

void twi_init()	 	 	//TWI(I2C)初始化
{
/*Hardware Environment：DVK501 && M128+ EX*/
#if defined(_DVK501_M128_EX_)
	TWBR = 0X0F;		//设置TWI波特率  
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	80 93 70 00 	sts	0x0070, r24
	TWSR &= 0XFC;		//设置TWI预分频 为 1
  d0:	e1 e7       	ldi	r30, 0x71	; 113
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8c 7f       	andi	r24, 0xFC	; 252
  d8:	80 83       	st	Z, r24
	TWSR &= 0XFC;		//设置TWI预分频 为 1
	
#else
  #warning "iic interface undefined."
#endif
}
  da:	08 95       	ret

000000dc <I2C_Start>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Start()					
{
	I2CStart();						
  dc:	84 ea       	ldi	r24, 0xA4	; 164
  de:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
  e2:	80 91 74 00 	lds	r24, 0x0074
  e6:	87 ff       	sbrs	r24, 7
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <I2C_Start+0x6>
	if( I2CChkAck()!=I2C_START ) 
  ea:	80 91 71 00 	lds	r24, 0x0071
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	88 7f       	andi	r24, 0xF8	; 248
  f2:	88 30       	cpi	r24, 0x08	; 8
  f4:	09 f4       	brne	.+2      	; 0xf8 <I2C_Start+0x1c>
  f6:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
  f8:	89 2f       	mov	r24, r25
  fa:	08 95       	ret

000000fc <I2C_Restart>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Restart()					
{
	I2CStart();						
  fc:	84 ea       	ldi	r24, 0xA4	; 164
  fe:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 102:	80 91 74 00 	lds	r24, 0x0074
 106:	87 ff       	sbrs	r24, 7
 108:	fc cf       	rjmp	.-8      	; 0x102 <I2C_Restart+0x6>
	if( I2CChkAck()!=I2C_RESTART ) 
 10a:	80 91 71 00 	lds	r24, 0x0071
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	88 7f       	andi	r24, 0xF8	; 248
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	09 f4       	brne	.+2      	; 0x118 <I2C_Restart+0x1c>
 116:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 118:	89 2f       	mov	r24, r25
 11a:	08 95       	ret

0000011c <I2C_SendWrDAdr>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr(uint8_t wrDAdr)	
{
	I2CSendByte(wrDAdr);			//设置 器件写地址
 11c:	80 93 73 00 	sts	0x0073, r24
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 126:	80 91 74 00 	lds	r24, 0x0074
 12a:	87 ff       	sbrs	r24, 7
 12c:	fc cf       	rjmp	.-8      	; 0x126 <I2C_SendWrDAdr+0xa>
	if( I2CChkAck()!=I2C_MT_SLA_ACK )
 12e:	80 91 71 00 	lds	r24, 0x0071
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	88 7f       	andi	r24, 0xF8	; 248
 136:	88 31       	cpi	r24, 0x18	; 24
 138:	09 f4       	brne	.+2      	; 0x13c <I2C_SendWrDAdr+0x20>
 13a:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 13c:	89 2f       	mov	r24, r25
 13e:	08 95       	ret

00000140 <I2C_SendWrDAdr_>:
提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr_(uint16_t wrDAdr)	
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
	if( (wrDAdr&0xF000) == 0xF000 )	//判断是否为 10位 器件地址
 146:	80 70       	andi	r24, 0x00	; 0
 148:	90 7f       	andi	r25, 0xF0	; 240
 14a:	80 50       	subi	r24, 0x00	; 0
 14c:	90 4f       	sbci	r25, 0xF0	; 240
 14e:	29 f4       	brne	.+10     	; 0x15a <I2C_SendWrDAdr_+0x1a>
		if( I2C_SendWrDAdr( (uint8_t)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 8e 00 	call	0x11c	; 0x11c <I2C_SendWrDAdr>
 156:	88 23       	and	r24, r24
 158:	29 f0       	breq	.+10     	; 0x164 <I2C_SendWrDAdr_+0x24>
			return I2C_ERR;
	if( I2C_SendWrDAdr( (uint8_t)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 8e 00 	call	0x11c	; 0x11c <I2C_SendWrDAdr>
 160:	81 11       	cpse	r24, r1
 162:	81 e0       	ldi	r24, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <I2C_SendRdDAdr>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendRdDAdr(uint8_t rdDAdr)	
{
	I2CSendByte(rdDAdr);			//设置 器件读地址
 16a:	80 93 73 00 	sts	0x0073, r24
 16e:	84 e8       	ldi	r24, 0x84	; 132
 170:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 174:	80 91 74 00 	lds	r24, 0x0074
 178:	87 ff       	sbrs	r24, 7
 17a:	fc cf       	rjmp	.-8      	; 0x174 <I2C_SendRdDAdr+0xa>
	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
 17c:	80 91 71 00 	lds	r24, 0x0071
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	88 7f       	andi	r24, 0xF8	; 248
 184:	80 34       	cpi	r24, 0x40	; 64
 186:	09 f4       	brne	.+2      	; 0x18a <I2C_SendRdDAdr+0x20>
 188:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;	
}
 18a:	89 2f       	mov	r24, r25
 18c:	08 95       	ret

0000018e <I2C_SendRdDAdr_>:
uint8_t I2C_SendRdDAdr_(uint8_t rdDAdr)	
{
	if( (rdDAdr&0xF000) == 0xF000)	//判断是否为 10位 器件地址
		if( I2C_SendWrDAdr( (uint8_t)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
			return I2C_ERR;
	if( I2C_SendWrDAdr( (uint8_t)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
 18e:	0e 94 8e 00 	call	0x11c	; 0x11c <I2C_SendWrDAdr>
 192:	81 11       	cpse	r24, r1
 194:	81 e0       	ldi	r24, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 196:	08 95       	ret

00000198 <I2C_SendDat>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendDat(uint8_t configDat)	
{
	I2CSendByte(configDat);			
 198:	80 93 73 00 	sts	0x0073, r24
 19c:	84 e8       	ldi	r24, 0x84	; 132
 19e:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 1a2:	80 91 74 00 	lds	r24, 0x0074
 1a6:	87 ff       	sbrs	r24, 7
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <I2C_SendDat+0xa>
	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 1aa:	80 91 71 00 	lds	r24, 0x0071
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	88 7f       	andi	r24, 0xF8	; 248
 1b2:	88 32       	cpi	r24, 0x28	; 40
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <I2C_SendDat+0x20>
 1b6:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;	
}
 1b8:	89 2f       	mov	r24, r25
 1ba:	08 95       	ret

000001bc <I2C_RcvNAckDat>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvNAckDat(uint8_t *pRdDat)	
{
 1bc:	fc 01       	movw	r30, r24
	I2CRcvNckByte();
 1be:	84 e8       	ldi	r24, 0x84	; 132
 1c0:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 1c4:	80 91 74 00 	lds	r24, 0x0074
 1c8:	87 ff       	sbrs	r24, 7
 1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <I2C_RcvNAckDat+0x8>
	if( I2CChkAck()!=I2C_MR_DATA_NACK )
 1cc:	80 91 71 00 	lds	r24, 0x0071
 1d0:	88 7f       	andi	r24, 0xF8	; 248
 1d2:	88 35       	cpi	r24, 0x58	; 88
 1d4:	11 f0       	breq	.+4      	; 0x1da <I2C_RcvNAckDat+0x1e>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret
		return I2C_ERR;
	*pRdDat=TWDR;
 1da:	80 91 73 00 	lds	r24, 0x0073
 1de:	80 83       	st	Z, r24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
	return I2C_CRR;
}
 1e2:	08 95       	ret

000001e4 <I2C_RcvAckDat>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvAckDat(uint8_t *pRdDat)	
{
 1e4:	fc 01       	movw	r30, r24
	I2CRcvAckByte();					
 1e6:	84 ec       	ldi	r24, 0xC4	; 196
 1e8:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 1ec:	80 91 74 00 	lds	r24, 0x0074
 1f0:	87 ff       	sbrs	r24, 7
 1f2:	fc cf       	rjmp	.-8      	; 0x1ec <I2C_RcvAckDat+0x8>
	if( I2CChkAck()!=I2C_MR_DATA_ACK )
 1f4:	80 91 71 00 	lds	r24, 0x0071
 1f8:	88 7f       	andi	r24, 0xF8	; 248
 1fa:	80 35       	cpi	r24, 0x50	; 80
 1fc:	11 f0       	breq	.+4      	; 0x202 <I2C_RcvAckDat+0x1e>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
		return I2C_ERR;
	*pRdDat=TWDR;
 202:	80 91 73 00 	lds	r24, 0x0073
 206:	80 83       	st	Z, r24
 208:	81 e0       	ldi	r24, 0x01	; 1
	return I2C_CRR;
}
 20a:	08 95       	ret

0000020c <I2C_Write>:
		 wordAdr: word address 字地址
		 dat: data 数据
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Write(uint16_t wrDAdr,uint8_t wordAdr,uint8_t dat)
{
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
 216:	16 2f       	mov	r17, r22
 218:	04 2f       	mov	r16, r20
	if( I2C_Start()==I2C_ERR )
 21a:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Start>
 21e:	88 23       	and	r24, r24
 220:	a1 f0       	breq	.+40     	; 0x24a <I2C_Write+0x3e>
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 222:	ce 01       	movw	r24, r28
 224:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_SendWrDAdr_>
 228:	88 23       	and	r24, r24
 22a:	79 f0       	breq	.+30     	; 0x24a <I2C_Write+0x3e>
		return I2C_ERR;

	if( I2C_SendDat(wordAdr)==I2C_ERR )
 22c:	81 2f       	mov	r24, r17
 22e:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_SendDat>
 232:	88 23       	and	r24, r24
 234:	51 f0       	breq	.+20     	; 0x24a <I2C_Write+0x3e>
		return I2C_ERR;

	if( I2C_SendDat(dat)==I2C_ERR )
 236:	80 2f       	mov	r24, r16
 238:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_SendDat>
 23c:	88 23       	and	r24, r24
 23e:	29 f0       	breq	.+10     	; 0x24a <I2C_Write+0x3e>
		return I2C_ERR;

	I2C_Stop();
 240:	84 e9       	ldi	r24, 0x94	; 148
 242:	80 93 74 00 	sts	0x0074, r24
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	01 c0       	rjmp	.+2      	; 0x24c <I2C_Write+0x40>

	return I2C_CRR;
 24a:	80 e0       	ldi	r24, 0x00	; 0
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <I2C_Read>:
		 *pRdDat: p->read data 读取数据指针
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Read(uint16_t wrDAdr,uint8_t wordAdr,
			  uint8_t rdDAdr,uint8_t *pRdDat)
{
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
 264:	f6 2e       	mov	r15, r22
 266:	e4 2e       	mov	r14, r20
 268:	89 01       	movw	r16, r18
	if( I2C_Start()==I2C_ERR )
 26a:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Start>
 26e:	88 23       	and	r24, r24
 270:	e9 f0       	breq	.+58     	; 0x2ac <I2C_Read+0x56>
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 272:	ce 01       	movw	r24, r28
 274:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_SendWrDAdr_>
 278:	88 23       	and	r24, r24
 27a:	c1 f0       	breq	.+48     	; 0x2ac <I2C_Read+0x56>
		return I2C_ERR;

	if( I2C_SendDat(wordAdr)==I2C_ERR )
 27c:	8f 2d       	mov	r24, r15
 27e:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_SendDat>
 282:	88 23       	and	r24, r24
 284:	99 f0       	breq	.+38     	; 0x2ac <I2C_Read+0x56>
		return I2C_ERR;

	if( I2C_Restart()==I2C_ERR )
 286:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_Restart>
 28a:	88 23       	and	r24, r24
 28c:	79 f0       	breq	.+30     	; 0x2ac <I2C_Read+0x56>
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
 28e:	8e 2d       	mov	r24, r14
 290:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SendRdDAdr>
 294:	88 23       	and	r24, r24
 296:	51 f0       	breq	.+20     	; 0x2ac <I2C_Read+0x56>
		return I2C_ERR;

	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
 298:	c8 01       	movw	r24, r16
 29a:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_RcvNAckDat>
 29e:	88 23       	and	r24, r24
 2a0:	29 f0       	breq	.+10     	; 0x2ac <I2C_Read+0x56>
		return I2C_ERR;

	I2C_Stop();
 2a2:	84 e9       	ldi	r24, 0x94	; 148
 2a4:	80 93 74 00 	sts	0x0074, r24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <I2C_Read+0x58>

	return I2C_CRR;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	08 95       	ret

000002bc <I2C_Read_>:
		 num: number 读取数据个数
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Read_(uint16_t wrDAdr,uint8_t wordAdr,
			   uint8_t rdDAdr,uint8_t *pRdDat,uint8_t num)
{
 2bc:	cf 92       	push	r12
 2be:	df 92       	push	r13
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	ec 01       	movw	r28, r24
 2cc:	16 2f       	mov	r17, r22
 2ce:	f4 2e       	mov	r15, r20
 2d0:	69 01       	movw	r12, r18
 	uint8_t i;
	
	if( I2C_Start()==I2C_ERR )
 2d2:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Start>
 2d6:	88 23       	and	r24, r24
 2d8:	81 f1       	breq	.+96     	; 0x33a <I2C_Read_+0x7e>
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 2da:	ce 01       	movw	r24, r28
 2dc:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_SendWrDAdr_>
 2e0:	88 23       	and	r24, r24
 2e2:	59 f1       	breq	.+86     	; 0x33a <I2C_Read_+0x7e>
		return I2C_ERR;

	if( I2C_SendDat(wordAdr)==I2C_ERR )
 2e4:	81 2f       	mov	r24, r17
 2e6:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_SendDat>
 2ea:	88 23       	and	r24, r24
 2ec:	31 f1       	breq	.+76     	; 0x33a <I2C_Read_+0x7e>
		return I2C_ERR;

	if( I2C_Restart()==I2C_ERR )
 2ee:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_Restart>
 2f2:	88 23       	and	r24, r24
 2f4:	11 f1       	breq	.+68     	; 0x33a <I2C_Read_+0x7e>
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
 2f6:	8f 2d       	mov	r24, r15
 2f8:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_SendRdDAdr>
 2fc:	88 23       	and	r24, r24
 2fe:	e9 f0       	breq	.+58     	; 0x33a <I2C_Read_+0x7e>
 300:	ff 24       	eor	r15, r15
		return I2C_ERR;

	for(i=0;i<num-1;i++)
 302:	10 e0       	ldi	r17, 0x00	; 0
 304:	01 50       	subi	r16, 0x01	; 1
 306:	10 40       	sbci	r17, 0x00	; 0
 308:	06 c0       	rjmp	.+12     	; 0x316 <I2C_Read_+0x5a>
		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
 30a:	c9 01       	movw	r24, r18
 30c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <I2C_RcvAckDat>
 310:	88 23       	and	r24, r24
 312:	99 f0       	breq	.+38     	; 0x33a <I2C_Read_+0x7e>
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
		return I2C_ERR;

	for(i=0;i<num-1;i++)
 314:	f3 94       	inc	r15
 316:	8f 2d       	mov	r24, r15
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	96 01       	movw	r18, r12
 31c:	28 0f       	add	r18, r24
 31e:	39 1f       	adc	r19, r25
 320:	80 17       	cp	r24, r16
 322:	91 07       	cpc	r25, r17
 324:	94 f3       	brlt	.-28     	; 0x30a <I2C_Read_+0x4e>
		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
			return I2C_ERR;
	
	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
 326:	c9 01       	movw	r24, r18
 328:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_RcvNAckDat>
 32c:	88 23       	and	r24, r24
 32e:	29 f0       	breq	.+10     	; 0x33a <I2C_Read_+0x7e>
			return I2C_ERR;

	I2C_Stop();
 330:	84 e9       	ldi	r24, 0x94	; 148
 332:	80 93 74 00 	sts	0x0074, r24
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	01 c0       	rjmp	.+2      	; 0x33c <I2C_Read_+0x80>
	
	return I2C_CRR;
 33a:	80 e0       	ldi	r24, 0x00	; 0
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	08 95       	ret

0000034c <WriteAByte>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t WriteAByte(uint8_t wordAdr,uint8_t dat)
{
 34c:	28 2f       	mov	r18, r24
 34e:	46 2f       	mov	r20, r22
	if( I2C_Write(WR_DADR,wordAdr,dat)==I2C_ERR )
 350:	82 ea       	ldi	r24, 0xA2	; 162
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	62 2f       	mov	r22, r18
 356:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Write>
 35a:	81 11       	cpse	r24, r1
 35c:	81 e0       	ldi	r24, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 35e:	08 95       	ret

00000360 <ReadNByte>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t ReadNByte(uint8_t wordAdr,uint8_t *pRdDat,uint8_t num)
{  
 360:	0f 93       	push	r16
 362:	58 2f       	mov	r21, r24
 364:	9b 01       	movw	r18, r22
 366:	04 2f       	mov	r16, r20
	if( I2C_Read_(WR_DADR,wordAdr,RD_DADR,pRdDat,num)==I2C_ERR )
 368:	82 ea       	ldi	r24, 0xA2	; 162
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	65 2f       	mov	r22, r21
 36e:	43 ea       	ldi	r20, 0xA3	; 163
 370:	0e 94 5e 01 	call	0x2bc	; 0x2bc <I2C_Read_>
 374:	81 11       	cpse	r24, r1
 376:	81 e0       	ldi	r24, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 378:	0f 91       	pop	r16
 37a:	08 95       	ret

0000037c <PCF8563_getTime>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
void PCF8563_getTime(uint8_t *buf)
{
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	8c 01       	movw	r16, r24
	ReadNByte(SECOND_DATA_BUF,buf,3);
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	b8 01       	movw	r22, r16
 386:	43 e0       	ldi	r20, 0x03	; 3
 388:	0e 94 b0 01 	call	0x360	; 0x360 <ReadNByte>
	buf[0]=buf[0]&0x7f;		//get second data
 38c:	f8 01       	movw	r30, r16
 38e:	80 81       	ld	r24, Z
 390:	8f 77       	andi	r24, 0x7F	; 127
 392:	80 83       	st	Z, r24
	buf[1]=buf[1]&0x7f;		//get minute data
 394:	81 81       	ldd	r24, Z+1	; 0x01
 396:	8f 77       	andi	r24, 0x7F	; 127
 398:	81 83       	std	Z+1, r24	; 0x01
	buf[2]=buf[2]&0x3f;		//get hour data
 39a:	82 81       	ldd	r24, Z+2	; 0x02
 39c:	8f 73       	andi	r24, 0x3F	; 63
 39e:	82 83       	std	Z+2, r24	; 0x02

	buf[0]=changeHexToInt(buf[0]);
 3a0:	20 81       	ld	r18, Z
 3a2:	82 2f       	mov	r24, r18
 3a4:	82 95       	swap	r24
 3a6:	8f 70       	andi	r24, 0x0F	; 15
 3a8:	3a e0       	ldi	r19, 0x0A	; 10
 3aa:	83 9f       	mul	r24, r19
 3ac:	c0 01       	movw	r24, r0
 3ae:	11 24       	eor	r1, r1
 3b0:	2f 70       	andi	r18, 0x0F	; 15
 3b2:	28 0f       	add	r18, r24
 3b4:	20 83       	st	Z, r18
	buf[1]=changeHexToInt(buf[1]);
 3b6:	21 81       	ldd	r18, Z+1	; 0x01
 3b8:	82 2f       	mov	r24, r18
 3ba:	82 95       	swap	r24
 3bc:	8f 70       	andi	r24, 0x0F	; 15
 3be:	83 9f       	mul	r24, r19
 3c0:	c0 01       	movw	r24, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	2f 70       	andi	r18, 0x0F	; 15
 3c6:	28 0f       	add	r18, r24
 3c8:	21 83       	std	Z+1, r18	; 0x01
	buf[2]=changeHexToInt(buf[2]);
 3ca:	22 81       	ldd	r18, Z+2	; 0x02
 3cc:	82 2f       	mov	r24, r18
 3ce:	82 95       	swap	r24
 3d0:	8f 70       	andi	r24, 0x0F	; 15
 3d2:	83 9f       	mul	r24, r19
 3d4:	c0 01       	movw	r24, r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 70       	andi	r18, 0x0F	; 15
 3da:	28 0f       	add	r18, r24
 3dc:	22 83       	std	Z+2, r18	; 0x02
}
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	08 95       	ret

000003e4 <PCF8563_setTime>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
void PCF8563_setTime(uint8_t hour,uint8_t minute,uint8_t second)
{
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	28 2f       	mov	r18, r24
 3ee:	56 2f       	mov	r21, r22
	hour=changeIntToHex(hour);		//将数据的Dex格式转换为Hex格式
 3f0:	6a e0       	ldi	r22, 0x0A	; 10
 3f2:	0e 94 97 04 	call	0x92e	; 0x92e <__udivmodqi4>
 3f6:	38 2f       	mov	r19, r24
 3f8:	32 95       	swap	r19
 3fa:	30 7f       	andi	r19, 0xF0	; 240
 3fc:	82 2f       	mov	r24, r18
 3fe:	0e 94 97 04 	call	0x92e	; 0x92e <__udivmodqi4>
 402:	29 2f       	mov	r18, r25
	minute=changeIntToHex(minute);
 404:	85 2f       	mov	r24, r21
 406:	0e 94 97 04 	call	0x92e	; 0x92e <__udivmodqi4>
 40a:	08 2f       	mov	r16, r24
 40c:	02 95       	swap	r16
 40e:	00 7f       	andi	r16, 0xF0	; 240
 410:	85 2f       	mov	r24, r21
 412:	0e 94 97 04 	call	0x92e	; 0x92e <__udivmodqi4>
 416:	e9 2e       	mov	r14, r25
	second=changeIntToHex(second);
 418:	84 2f       	mov	r24, r20
 41a:	0e 94 97 04 	call	0x92e	; 0x92e <__udivmodqi4>
 41e:	18 2f       	mov	r17, r24
 420:	12 95       	swap	r17
 422:	10 7f       	andi	r17, 0xF0	; 240
 424:	84 2f       	mov	r24, r20
 426:	0e 94 97 04 	call	0x92e	; 0x92e <__udivmodqi4>
 42a:	f9 2e       	mov	r15, r25

	WriteAByte(HOUR_DATA_BUF,hour);
 42c:	32 0f       	add	r19, r18
 42e:	84 e0       	ldi	r24, 0x04	; 4
 430:	63 2f       	mov	r22, r19
 432:	0e 94 a6 01 	call	0x34c	; 0x34c <WriteAByte>
	WriteAByte(MINUTE_DATA_BUF,minute);
 436:	0e 0d       	add	r16, r14
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	60 2f       	mov	r22, r16
 43c:	0e 94 a6 01 	call	0x34c	; 0x34c <WriteAByte>
	WriteAByte(SECOND_DATA_BUF,second);
 440:	1f 0d       	add	r17, r15
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	61 2f       	mov	r22, r17
 446:	0e 94 a6 01 	call	0x34c	; 0x34c <WriteAByte>
}
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	ff 90       	pop	r15
 450:	ef 90       	pop	r14
 452:	08 95       	ret

00000454 <PCF8563_init>:
输    入：
返    回：
--------------------------------------------------------------------*/
void PCF8563_init()
{
	WriteAByte(CTRL_BUF1,0x00);			//basic setting
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	0e 94 a6 01 	call	0x34c	; 0x34c <WriteAByte>
	WriteAByte(CTRL_BUF2,0x12);			//alarm enable
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	62 e1       	ldi	r22, 0x12	; 18
 460:	0e 94 a6 01 	call	0x34c	; 0x34c <WriteAByte>
}
 464:	08 95       	ret

00000466 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 466:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 468:	77 9b       	sbis	0x0e, 7	; 14
 46a:	fe cf       	rjmp	.-4      	; 0x468 <spiSendChar+0x2>
}
 46c:	08 95       	ret

0000046e <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 46e:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 470:	88 ef       	ldi	r24, 0xF8	; 248
 472:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 474:	77 9b       	sbis	0x0e, 7	; 14
 476:	fe cf       	rjmp	.-4      	; 0x474 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 478:	89 2f       	mov	r24, r25
 47a:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 47c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 47e:	77 9b       	sbis	0x0e, 7	; 14
 480:	fe cf       	rjmp	.-4      	; 0x47e <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 482:	92 95       	swap	r25
 484:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 486:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 488:	77 9b       	sbis	0x0e, 7	; 14
 48a:	fe cf       	rjmp	.-4      	; 0x488 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 48c:	88 eb       	ldi	r24, 0xB8	; 184
 48e:	8a 95       	dec	r24
 490:	f1 f7       	brne	.-4      	; 0x48e <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 492:	08 95       	ret

00000494 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 494:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 496:	8a ef       	ldi	r24, 0xFA	; 250
 498:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 49a:	77 9b       	sbis	0x0e, 7	; 14
 49c:	fe cf       	rjmp	.-4      	; 0x49a <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 49e:	89 2f       	mov	r24, r25
 4a0:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 4a2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 4a4:	77 9b       	sbis	0x0e, 7	; 14
 4a6:	fe cf       	rjmp	.-4      	; 0x4a4 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 4a8:	92 95       	swap	r25
 4aa:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 4ac:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 4ae:	77 9b       	sbis	0x0e, 7	; 14
 4b0:	fe cf       	rjmp	.-4      	; 0x4ae <sendDataST7920+0x1a>
 4b2:	88 eb       	ldi	r24, 0xB8	; 184
 4b4:	8a 95       	dec	r24
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 4b8:	08 95       	ret

000004ba <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 4ba:	cf 92       	push	r12
 4bc:	df 92       	push	r13
 4be:	ef 92       	push	r14
 4c0:	ff 92       	push	r15
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	6c 01       	movw	r12, r24
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	0e 94 37 02 	call	0x46e	; 0x46e <sendCodeST7920>
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 4d6:	f6 01       	movw	r30, r12
 4d8:	ec 0f       	add	r30, r28
 4da:	fd 1f       	adc	r31, r29
 4dc:	80 81       	ld	r24, Z
 4de:	0e 94 4a 02 	call	0x494	; 0x494 <sendDataST7920>
 4e2:	21 96       	adiw	r28, 0x01	; 1
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 4e4:	c0 31       	cpi	r28, 0x10	; 16
 4e6:	d1 05       	cpc	r29, r1
 4e8:	b1 f7       	brne	.-20     	; 0x4d6 <refreshLCD+0x1c>
 4ea:	76 01       	movw	r14, r12
 4ec:	e6 01       	movw	r28, r12
 4ee:	00 e2       	ldi	r16, 0x20	; 32
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 4f0:	88 a1       	ldd	r24, Y+32	; 0x20
 4f2:	0e 94 4a 02 	call	0x494	; 0x494 <sendDataST7920>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 4f6:	0f 5f       	subi	r16, 0xFF	; 255
 4f8:	21 96       	adiw	r28, 0x01	; 1
 4fa:	00 33       	cpi	r16, 0x30	; 48
 4fc:	c9 f7       	brne	.-14     	; 0x4f0 <refreshLCD+0x36>
 4fe:	10 e1       	ldi	r17, 0x10	; 16
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 500:	f7 01       	movw	r30, r14
 502:	80 89       	ldd	r24, Z+16	; 0x10
 504:	0e 94 4a 02 	call	0x494	; 0x494 <sendDataST7920>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 508:	1f 5f       	subi	r17, 0xFF	; 255
 50a:	08 94       	sec
 50c:	e1 1c       	adc	r14, r1
 50e:	f1 1c       	adc	r15, r1
 510:	10 32       	cpi	r17, 0x20	; 32
 512:	b1 f7       	brne	.-20     	; 0x500 <refreshLCD+0x46>
 514:	e6 01       	movw	r28, r12
 516:	e0 96       	adiw	r28, 0x30	; 48
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 518:	89 91       	ld	r24, Y+
 51a:	0e 94 4a 02 	call	0x494	; 0x494 <sendDataST7920>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 51e:	0f 5f       	subi	r16, 0xFF	; 255
 520:	00 34       	cpi	r16, 0x40	; 64
 522:	d1 f7       	brne	.-12     	; 0x518 <refreshLCD+0x5e>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	cf 90       	pop	r12
 534:	08 95       	ret

00000536 <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 536:	1f 93       	push	r17
 538:	fc 01       	movw	r30, r24
 53a:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 53c:	10 e3       	ldi	r17, 0x30	; 48
 53e:	43 c0       	rjmp	.+134    	; 0x5c6 <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 540:	43 30       	cpi	r20, 0x03	; 3
 542:	21 f1       	breq	.+72     	; 0x58c <decToAscii+0x56>
 544:	44 30       	cpi	r20, 0x04	; 4
 546:	28 f4       	brcc	.+10     	; 0x552 <decToAscii+0x1c>
 548:	41 30       	cpi	r20, 0x01	; 1
 54a:	b1 f1       	breq	.+108    	; 0x5b8 <decToAscii+0x82>
 54c:	42 30       	cpi	r20, 0x02	; 2
 54e:	c1 f5       	brne	.+112    	; 0x5c0 <decToAscii+0x8a>
 550:	28 c0       	rjmp	.+80     	; 0x5a2 <decToAscii+0x6c>
 552:	44 30       	cpi	r20, 0x04	; 4
 554:	69 f0       	breq	.+26     	; 0x570 <decToAscii+0x3a>
 556:	45 30       	cpi	r20, 0x05	; 5
 558:	99 f5       	brne	.+102    	; 0x5c0 <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 55a:	c9 01       	movw	r24, r18
 55c:	60 e1       	ldi	r22, 0x10	; 16
 55e:	77 e2       	ldi	r23, 0x27	; 39
 560:	0e 94 a3 04 	call	0x946	; 0x946 <__udivmodhi4>
 564:	60 5d       	subi	r22, 0xD0	; 208
 566:	60 83       	st	Z, r22
				dec%=10000;
 568:	c9 01       	movw	r24, r18
 56a:	60 e1       	ldi	r22, 0x10	; 16
 56c:	77 e2       	ldi	r23, 0x27	; 39
 56e:	0a c0       	rjmp	.+20     	; 0x584 <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 570:	c9 01       	movw	r24, r18
 572:	68 ee       	ldi	r22, 0xE8	; 232
 574:	73 e0       	ldi	r23, 0x03	; 3
 576:	0e 94 a3 04 	call	0x946	; 0x946 <__udivmodhi4>
 57a:	60 5d       	subi	r22, 0xD0	; 208
 57c:	60 83       	st	Z, r22
				dec%=1000;
 57e:	c9 01       	movw	r24, r18
 580:	68 ee       	ldi	r22, 0xE8	; 232
 582:	73 e0       	ldi	r23, 0x03	; 3
 584:	0e 94 a3 04 	call	0x946	; 0x946 <__udivmodhi4>
 588:	9c 01       	movw	r18, r24
 58a:	1b c0       	rjmp	.+54     	; 0x5c2 <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 58c:	c9 01       	movw	r24, r18
 58e:	64 e6       	ldi	r22, 0x64	; 100
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	0e 94 a3 04 	call	0x946	; 0x946 <__udivmodhi4>
 596:	60 5d       	subi	r22, 0xD0	; 208
 598:	60 83       	st	Z, r22
				dec%=100;
 59a:	c9 01       	movw	r24, r18
 59c:	64 e6       	ldi	r22, 0x64	; 100
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	f1 cf       	rjmp	.-30     	; 0x584 <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 5a2:	c9 01       	movw	r24, r18
 5a4:	6a e0       	ldi	r22, 0x0A	; 10
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	0e 94 a3 04 	call	0x946	; 0x946 <__udivmodhi4>
 5ac:	60 5d       	subi	r22, 0xD0	; 208
 5ae:	60 83       	st	Z, r22
				dec%=10;
 5b0:	c9 01       	movw	r24, r18
 5b2:	6a e0       	ldi	r22, 0x0A	; 10
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	e6 cf       	rjmp	.-52     	; 0x584 <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 5b8:	20 5d       	subi	r18, 0xD0	; 208
 5ba:	20 83       	st	Z, r18
 5bc:	20 53       	subi	r18, 0x30	; 48
 5be:	01 c0       	rjmp	.+2      	; 0x5c2 <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 5c0:	10 83       	st	Z, r17
		}
		width--;
 5c2:	41 50       	subi	r20, 0x01	; 1
		str++;
 5c4:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 5c6:	44 23       	and	r20, r20
 5c8:	09 f0       	breq	.+2      	; 0x5cc <decToAscii+0x96>
 5ca:	ba cf       	rjmp	.-140    	; 0x540 <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 5cc:	1f 91       	pop	r17
 5ce:	08 95       	ret

000005d0 <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 5d0:	cf 92       	push	r12
 5d2:	df 92       	push	r13
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 5e2:	eb 01       	movw	r28, r22
 5e4:	cd 2f       	mov	r28, r29
 5e6:	dd 27       	eor	r29, r29
 5e8:	c2 95       	swap	r28
 5ea:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 5ec:	27 e3       	ldi	r18, 0x37	; 55
 5ee:	d2 2e       	mov	r13, r18
 5f0:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 5f2:	90 e3       	ldi	r25, 0x30	; 48
 5f4:	e9 2e       	mov	r14, r25
 5f6:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 5f8:	a7 2f       	mov	r26, r23
 5fa:	bb 27       	eor	r27, r27
 5fc:	af 70       	andi	r26, 0x0F	; 15
 5fe:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 600:	17 e3       	ldi	r17, 0x37	; 55
 602:	f1 2e       	mov	r15, r17
 604:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 606:	0a 2f       	mov	r16, r26
 608:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 60a:	9b 01       	movw	r18, r22
 60c:	54 e0       	ldi	r21, 0x04	; 4
 60e:	36 95       	lsr	r19
 610:	27 95       	ror	r18
 612:	5a 95       	dec	r21
 614:	e1 f7       	brne	.-8      	; 0x60e <hexToAscii+0x3e>
 616:	2f 70       	andi	r18, 0x0F	; 15
 618:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 61a:	82 2f       	mov	r24, r18
 61c:	12 2f       	mov	r17, r18
 61e:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 620:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 622:	90 e3       	ldi	r25, 0x30	; 48
 624:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 626:	6f 70       	andi	r22, 0x0F	; 15
 628:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 62a:	56 2f       	mov	r21, r22
 62c:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 62e:	96 2f       	mov	r25, r22
 630:	99 5c       	subi	r25, 0xC9	; 201
 632:	2a c0       	rjmp	.+84     	; 0x688 <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 634:	42 30       	cpi	r20, 0x02	; 2
 636:	b9 f0       	breq	.+46     	; 0x666 <hexToAscii+0x96>
 638:	43 30       	cpi	r20, 0x03	; 3
 63a:	18 f4       	brcc	.+6      	; 0x642 <hexToAscii+0x72>
 63c:	41 30       	cpi	r20, 0x01	; 1
 63e:	09 f5       	brne	.+66     	; 0x682 <hexToAscii+0xb2>
 640:	19 c0       	rjmp	.+50     	; 0x674 <hexToAscii+0xa4>
 642:	43 30       	cpi	r20, 0x03	; 3
 644:	49 f0       	breq	.+18     	; 0x658 <hexToAscii+0x88>
 646:	44 30       	cpi	r20, 0x04	; 4
 648:	e1 f4       	brne	.+56     	; 0x682 <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 64a:	ca 30       	cpi	r28, 0x0A	; 10
 64c:	d1 05       	cpc	r29, r1
 64e:	10 f0       	brcs	.+4      	; 0x654 <hexToAscii+0x84>
 650:	d0 82       	st	Z, r13
 652:	18 c0       	rjmp	.+48     	; 0x684 <hexToAscii+0xb4>
				else *str = tmp+'0';
 654:	e0 82       	st	Z, r14
 656:	16 c0       	rjmp	.+44     	; 0x684 <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 658:	aa 30       	cpi	r26, 0x0A	; 10
 65a:	b1 05       	cpc	r27, r1
 65c:	10 f0       	brcs	.+4      	; 0x662 <hexToAscii+0x92>
 65e:	f0 82       	st	Z, r15
 660:	11 c0       	rjmp	.+34     	; 0x684 <hexToAscii+0xb4>
				else *str = tmp+'0';
 662:	00 83       	st	Z, r16
 664:	0f c0       	rjmp	.+30     	; 0x684 <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 666:	2a 30       	cpi	r18, 0x0A	; 10
 668:	31 05       	cpc	r19, r1
 66a:	10 f0       	brcs	.+4      	; 0x670 <hexToAscii+0xa0>
 66c:	10 83       	st	Z, r17
 66e:	0a c0       	rjmp	.+20     	; 0x684 <hexToAscii+0xb4>
				else *str = tmp+'0';
 670:	80 83       	st	Z, r24
 672:	08 c0       	rjmp	.+16     	; 0x684 <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 674:	6a 30       	cpi	r22, 0x0A	; 10
 676:	71 05       	cpc	r23, r1
 678:	10 f0       	brcs	.+4      	; 0x67e <hexToAscii+0xae>
 67a:	90 83       	st	Z, r25
 67c:	03 c0       	rjmp	.+6      	; 0x684 <hexToAscii+0xb4>
				else *str = tmp+'0';
 67e:	50 83       	st	Z, r21
 680:	01 c0       	rjmp	.+2      	; 0x684 <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 682:	c0 82       	st	Z, r12
		}
		width--;
 684:	41 50       	subi	r20, 0x01	; 1
		str++;
 686:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 688:	44 23       	and	r20, r20
 68a:	a1 f6       	brne	.-88     	; 0x634 <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	df 90       	pop	r13
 69a:	cf 90       	pop	r12
 69c:	08 95       	ret

0000069e <st7920LcdInit>:
#define CLR_CS_LCD() cbi(PORTB,4)
#define OUT_CS_LCD() sbi(DDRB,4)

void st7920LcdInit(void)
{
DDRB|=0x07;
 69e:	87 b3       	in	r24, 0x17	; 23
 6a0:	87 60       	ori	r24, 0x07	; 7
 6a2:	87 bb       	out	0x17, r24	; 23
PORTB&=0xF8;
 6a4:	88 b3       	in	r24, 0x18	; 24
 6a6:	88 7f       	andi	r24, 0xF8	; 248
 6a8:	88 bb       	out	0x18, r24	; 24
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 6aa:	80 e5       	ldi	r24, 0x50	; 80
 6ac:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	8e b9       	out	0x0e, r24	; 14
sendCodeST7920(0x0C);//整体显示
 6b2:	8c e0       	ldi	r24, 0x0C	; 12
 6b4:	0e 94 37 02 	call	0x46e	; 0x46e <sendCodeST7920>
sendCodeST7920(0x01);//清屏
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 37 02 	call	0x46e	; 0x46e <sendCodeST7920>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6be:	86 e6       	ldi	r24, 0x66	; 102
 6c0:	9e e0       	ldi	r25, 0x0E	; 14
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <st7920LcdInit+0x24>
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 6c6:	8c e2       	ldi	r24, 0x2C	; 44
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	60 e2       	ldi	r22, 0x20	; 32
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	40 e4       	ldi	r20, 0x40	; 64
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	0e 94 b7 04 	call	0x96e	; 0x96e <memset>
}
 6d6:	08 95       	ret

000006d8 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 6d8:	af 92       	push	r10
 6da:	bf 92       	push	r11
 6dc:	cf 92       	push	r12
 6de:	df 92       	push	r13
 6e0:	ef 92       	push	r14
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	df 93       	push	r29
 6e8:	cf 93       	push	r28
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
 6ee:	0d 85       	ldd	r16, Y+13	; 0x0d
 6f0:	ae 84       	ldd	r10, Y+14	; 0x0e
 6f2:	bf 84       	ldd	r11, Y+15	; 0x0f
 6f4:	e8 88       	ldd	r14, Y+16	; 0x10
 6f6:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 6f8:	02 95       	swap	r16
 6fa:	00 7f       	andi	r16, 0xF0	; 240
 6fc:	8c 85       	ldd	r24, Y+12	; 0x0c
 6fe:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 700:	de 01       	movw	r26, r28
 702:	52 96       	adiw	r26, 0x12	; 18
 704:	5d c0       	rjmp	.+186    	; 0x7c0 <showLine+0xe8>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 706:	01 34       	cpi	r16, 0x41	; 65
 708:	08 f0       	brcs	.+2      	; 0x70c <showLine+0x34>
 70a:	5f c0       	rjmp	.+190    	; 0x7ca <showLine+0xf2>

		if(*str == '\\')
 70c:	8c 35       	cpi	r24, 0x5C	; 92
 70e:	51 f4       	brne	.+20     	; 0x724 <showLine+0x4c>
		{
			str++;
 710:	08 94       	sec
 712:	e1 1c       	adc	r14, r1
 714:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 716:	95 01       	movw	r18, r10
 718:	20 0f       	add	r18, r16
 71a:	31 1d       	adc	r19, r1
 71c:	f7 01       	movw	r30, r14
 71e:	80 81       	ld	r24, Z
 720:	f9 01       	movw	r30, r18
 722:	49 c0       	rjmp	.+146    	; 0x7b6 <showLine+0xde>
		}
		else if(*str == '%')
 724:	85 32       	cpi	r24, 0x25	; 37
 726:	09 f0       	breq	.+2      	; 0x72a <showLine+0x52>
 728:	43 c0       	rjmp	.+134    	; 0x7b0 <showLine+0xd8>
		{
			str++;
 72a:	08 94       	sec
 72c:	e1 1c       	adc	r14, r1
 72e:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 730:	f7 01       	movw	r30, r14
 732:	80 81       	ld	r24, Z
 734:	84 36       	cpi	r24, 0x64	; 100
 736:	11 f0       	breq	.+4      	; 0x73c <showLine+0x64>
 738:	84 34       	cpi	r24, 0x44	; 68
 73a:	99 f4       	brne	.+38     	; 0x762 <showLine+0x8a>
			{
				str++;
 73c:	08 94       	sec
 73e:	e1 1c       	adc	r14, r1
 740:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 742:	52 e0       	ldi	r21, 0x02	; 2
 744:	c5 2e       	mov	r12, r21
 746:	d1 2c       	mov	r13, r1
 748:	ca 0e       	add	r12, r26
 74a:	db 1e       	adc	r13, r27
 74c:	6d 91       	ld	r22, X+
 74e:	7c 91       	ld	r23, X
 750:	f7 01       	movw	r30, r14
 752:	40 81       	ld	r20, Z
 754:	40 53       	subi	r20, 0x30	; 48
 756:	c5 01       	movw	r24, r10
 758:	80 0f       	add	r24, r16
 75a:	91 1d       	adc	r25, r1
 75c:	0e 94 9b 02 	call	0x536	; 0x536 <decToAscii>
 760:	21 c0       	rjmp	.+66     	; 0x7a4 <showLine+0xcc>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 762:	83 36       	cpi	r24, 0x63	; 99
 764:	11 f0       	breq	.+4      	; 0x76a <showLine+0x92>
 766:	83 34       	cpi	r24, 0x43	; 67
 768:	39 f4       	brne	.+14     	; 0x778 <showLine+0xa0>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 76a:	f5 01       	movw	r30, r10
 76c:	e0 0f       	add	r30, r16
 76e:	f1 1d       	adc	r31, r1
 770:	8c 91       	ld	r24, X
 772:	80 83       	st	Z, r24
 774:	12 96       	adiw	r26, 0x02	; 2
 776:	20 c0       	rjmp	.+64     	; 0x7b8 <showLine+0xe0>
			}
			else if(*str=='x'||*str=='X')
 778:	88 37       	cpi	r24, 0x78	; 120
 77a:	11 f0       	breq	.+4      	; 0x780 <showLine+0xa8>
 77c:	88 35       	cpi	r24, 0x58	; 88
 77e:	e1 f4       	brne	.+56     	; 0x7b8 <showLine+0xe0>
			{
				str++;
 780:	08 94       	sec
 782:	e1 1c       	adc	r14, r1
 784:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 786:	42 e0       	ldi	r20, 0x02	; 2
 788:	c4 2e       	mov	r12, r20
 78a:	d1 2c       	mov	r13, r1
 78c:	ca 0e       	add	r12, r26
 78e:	db 1e       	adc	r13, r27
 790:	6d 91       	ld	r22, X+
 792:	7c 91       	ld	r23, X
 794:	f7 01       	movw	r30, r14
 796:	40 81       	ld	r20, Z
 798:	40 53       	subi	r20, 0x30	; 48
 79a:	c5 01       	movw	r24, r10
 79c:	80 0f       	add	r24, r16
 79e:	91 1d       	adc	r25, r1
 7a0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <hexToAscii>
				coordinate+=(*str-'0'-1);
 7a4:	01 53       	subi	r16, 0x31	; 49
 7a6:	f7 01       	movw	r30, r14
 7a8:	80 81       	ld	r24, Z
 7aa:	08 0f       	add	r16, r24
 7ac:	d6 01       	movw	r26, r12
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <showLine+0xe0>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 7b0:	f5 01       	movw	r30, r10
 7b2:	e0 0f       	add	r30, r16
 7b4:	f1 1d       	adc	r31, r1
 7b6:	80 83       	st	Z, r24
		}
		str++;
 7b8:	08 94       	sec
 7ba:	e1 1c       	adc	r14, r1
 7bc:	f1 1c       	adc	r15, r1
		coordinate++;
 7be:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 7c0:	f7 01       	movw	r30, r14
 7c2:	80 81       	ld	r24, Z
 7c4:	88 23       	and	r24, r24
 7c6:	09 f0       	breq	.+2      	; 0x7ca <showLine+0xf2>
 7c8:	9e cf       	rjmp	.-196    	; 0x706 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 7ca:	cf 91       	pop	r28
 7cc:	df 91       	pop	r29
 7ce:	0f 91       	pop	r16
 7d0:	ff 90       	pop	r15
 7d2:	ef 90       	pop	r14
 7d4:	df 90       	pop	r13
 7d6:	cf 90       	pop	r12
 7d8:	bf 90       	pop	r11
 7da:	af 90       	pop	r10
 7dc:	08 95       	ret

000007de <main>:
#include <ws_lcd_ST7920_port.h>



int main(void)
{	
 7de:	8f 92       	push	r8
 7e0:	9f 92       	push	r9
 7e2:	af 92       	push	r10
 7e4:	bf 92       	push	r11
 7e6:	cf 92       	push	r12
 7e8:	df 92       	push	r13
 7ea:	ef 92       	push	r14
 7ec:	ff 92       	push	r15
 7ee:	0f 93       	push	r16
 7f0:	1f 93       	push	r17
 7f2:	df 93       	push	r29
 7f4:	cf 93       	push	r28
 7f6:	00 d0       	rcall	.+0      	; 0x7f8 <main+0x1a>
 7f8:	0f 92       	push	r0
 7fa:	cd b7       	in	r28, 0x3d	; 61
 7fc:	de b7       	in	r29, 0x3e	; 62
	uint8_t time[3],tmp=0;
	st7920LcdInit(); 
 7fe:	0e 94 4f 03 	call	0x69e	; 0x69e <st7920LcdInit>
	PCF8563_init();	
 802:	0e 94 2a 02 	call	0x454	; 0x454 <PCF8563_init>
	showLine(0,0,lcd_buffer,"PCF8563 实验");
 806:	00 d0       	rcall	.+0      	; 0x808 <main+0x2a>
 808:	00 d0       	rcall	.+0      	; 0x80a <main+0x2c>
 80a:	00 d0       	rcall	.+0      	; 0x80c <main+0x2e>
 80c:	ed b7       	in	r30, 0x3d	; 61
 80e:	fe b7       	in	r31, 0x3e	; 62
 810:	31 96       	adiw	r30, 0x01	; 1
 812:	ad b7       	in	r26, 0x3d	; 61
 814:	be b7       	in	r27, 0x3e	; 62
 816:	11 96       	adiw	r26, 0x01	; 1
 818:	1c 92       	st	X, r1
 81a:	11 82       	std	Z+1, r1	; 0x01
 81c:	0c e2       	ldi	r16, 0x2C	; 44
 81e:	11 e0       	ldi	r17, 0x01	; 1
 820:	13 83       	std	Z+3, r17	; 0x03
 822:	02 83       	std	Z+2, r16	; 0x02
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	91 e0       	ldi	r25, 0x01	; 1
 828:	95 83       	std	Z+5, r25	; 0x05
 82a:	84 83       	std	Z+4, r24	; 0x04
 82c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <showLine>
	showLine(0,1,lcd_buffer,"设定时间: OK");
 830:	ed b7       	in	r30, 0x3d	; 61
 832:	fe b7       	in	r31, 0x3e	; 62
 834:	31 96       	adiw	r30, 0x01	; 1
 836:	ad b7       	in	r26, 0x3d	; 61
 838:	be b7       	in	r27, 0x3e	; 62
 83a:	11 96       	adiw	r26, 0x01	; 1
 83c:	1c 92       	st	X, r1
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	81 83       	std	Z+1, r24	; 0x01
 842:	13 83       	std	Z+3, r17	; 0x03
 844:	02 83       	std	Z+2, r16	; 0x02
 846:	8d e0       	ldi	r24, 0x0D	; 13
 848:	91 e0       	ldi	r25, 0x01	; 1
 84a:	95 83       	std	Z+5, r25	; 0x05
 84c:	84 83       	std	Z+4, r24	; 0x04
 84e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <showLine>
	showLine(0,2,lcd_buffer,"时间:");
 852:	ed b7       	in	r30, 0x3d	; 61
 854:	fe b7       	in	r31, 0x3e	; 62
 856:	31 96       	adiw	r30, 0x01	; 1
 858:	ad b7       	in	r26, 0x3d	; 61
 85a:	be b7       	in	r27, 0x3e	; 62
 85c:	11 96       	adiw	r26, 0x01	; 1
 85e:	1c 92       	st	X, r1
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	81 83       	std	Z+1, r24	; 0x01
 864:	13 83       	std	Z+3, r17	; 0x03
 866:	02 83       	std	Z+2, r16	; 0x02
 868:	8a e1       	ldi	r24, 0x1A	; 26
 86a:	91 e0       	ldi	r25, 0x01	; 1
 86c:	95 83       	std	Z+5, r25	; 0x05
 86e:	84 83       	std	Z+4, r24	; 0x04
 870:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <showLine>
	refreshLCD(lcd_buffer); 
 874:	2d b7       	in	r18, 0x3d	; 61
 876:	3e b7       	in	r19, 0x3e	; 62
 878:	2a 5f       	subi	r18, 0xFA	; 250
 87a:	3f 4f       	sbci	r19, 0xFF	; 255
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	f8 94       	cli
 880:	3e bf       	out	0x3e, r19	; 62
 882:	0f be       	out	0x3f, r0	; 63
 884:	2d bf       	out	0x3d, r18	; 61
 886:	c8 01       	movw	r24, r16
 888:	0e 94 5d 02 	call	0x4ba	; 0x4ba <refreshLCD>

void twi_init()	 	 	//TWI(I2C)初始化
{
/*Hardware Environment：DVK501 && M128+ EX*/
#if defined(_DVK501_M128_EX_)
	TWBR = 0X0F;		//设置TWI波特率  
 88c:	8f e0       	ldi	r24, 0x0F	; 15
 88e:	80 93 70 00 	sts	0x0070, r24
	TWSR &= 0XFC;		//设置TWI预分频 为 1
 892:	80 91 71 00 	lds	r24, 0x0071
 896:	8c 7f       	andi	r24, 0xFC	; 252
 898:	80 93 71 00 	sts	0x0071, r24
	twi_init();	
	PCF8563_setTime(1,2,3); 
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	62 e0       	ldi	r22, 0x02	; 2
 8a0:	43 e0       	ldi	r20, 0x03	; 3
 8a2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PCF8563_setTime>
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	98 e4       	ldi	r25, 0x48	; 72
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	f1 f7       	brne	.-4      	; 0x8aa <main+0xcc>
 8ae:	ff 24       	eor	r15, r15
	_delay_ms(10);
	while(1)
	{	
		PCF8563_getTime(time);
 8b0:	5e 01       	movw	r10, r28
 8b2:	08 94       	sec
 8b4:	a1 1c       	adc	r10, r1
 8b6:	b1 1c       	adc	r11, r1
		if(time[0]!=tmp)
		{
			showLine(6,2,lcd_buffer,"%d2:%d2:%d2",time[2],time[1],time[0]);
 8b8:	e6 e0       	ldi	r30, 0x06	; 6
 8ba:	8e 2e       	mov	r8, r30
 8bc:	72 e0       	ldi	r23, 0x02	; 2
 8be:	97 2e       	mov	r9, r23
 8c0:	e0 2e       	mov	r14, r16
 8c2:	01 2f       	mov	r16, r17
 8c4:	60 e2       	ldi	r22, 0x20	; 32
 8c6:	c6 2e       	mov	r12, r22
 8c8:	61 e0       	ldi	r22, 0x01	; 1
 8ca:	d6 2e       	mov	r13, r22
	twi_init();	
	PCF8563_setTime(1,2,3); 
	_delay_ms(10);
	while(1)
	{	
		PCF8563_getTime(time);
 8cc:	c5 01       	movw	r24, r10
 8ce:	0e 94 be 01 	call	0x37c	; 0x37c <PCF8563_getTime>
		if(time[0]!=tmp)
 8d2:	99 81       	ldd	r25, Y+1	; 0x01
 8d4:	9f 15       	cp	r25, r15
 8d6:	49 f1       	breq	.+82     	; 0x92a <main+0x14c>
		{
			showLine(6,2,lcd_buffer,"%d2:%d2:%d2",time[2],time[1],time[0]);
 8d8:	ad b7       	in	r26, 0x3d	; 61
 8da:	be b7       	in	r27, 0x3e	; 62
 8dc:	1c 97       	sbiw	r26, 0x0c	; 12
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	f8 94       	cli
 8e2:	be bf       	out	0x3e, r27	; 62
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	ad bf       	out	0x3d, r26	; 61
 8e8:	ed b7       	in	r30, 0x3d	; 61
 8ea:	fe b7       	in	r31, 0x3e	; 62
 8ec:	31 96       	adiw	r30, 0x01	; 1
 8ee:	11 96       	adiw	r26, 0x01	; 1
 8f0:	8c 92       	st	X, r8
 8f2:	91 82       	std	Z+1, r9	; 0x01
 8f4:	e2 82       	std	Z+2, r14	; 0x02
 8f6:	03 83       	std	Z+3, r16	; 0x03
 8f8:	d5 82       	std	Z+5, r13	; 0x05
 8fa:	c4 82       	std	Z+4, r12	; 0x04
 8fc:	8b 81       	ldd	r24, Y+3	; 0x03
 8fe:	86 83       	std	Z+6, r24	; 0x06
 900:	17 82       	std	Z+7, r1	; 0x07
 902:	8a 81       	ldd	r24, Y+2	; 0x02
 904:	80 87       	std	Z+8, r24	; 0x08
 906:	11 86       	std	Z+9, r1	; 0x09
 908:	92 87       	std	Z+10, r25	; 0x0a
 90a:	13 86       	std	Z+11, r1	; 0x0b
 90c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <showLine>
			refreshLCD(lcd_buffer); 
 910:	2d b7       	in	r18, 0x3d	; 61
 912:	3e b7       	in	r19, 0x3e	; 62
 914:	24 5f       	subi	r18, 0xF4	; 244
 916:	3f 4f       	sbci	r19, 0xFF	; 255
 918:	0f b6       	in	r0, 0x3f	; 63
 91a:	f8 94       	cli
 91c:	3e bf       	out	0x3e, r19	; 62
 91e:	0f be       	out	0x3f, r0	; 63
 920:	2d bf       	out	0x3d, r18	; 61
 922:	8e 2d       	mov	r24, r14
 924:	90 2f       	mov	r25, r16
 926:	0e 94 5d 02 	call	0x4ba	; 0x4ba <refreshLCD>
		}
		tmp=time[0];
 92a:	f9 80       	ldd	r15, Y+1	; 0x01
 92c:	cf cf       	rjmp	.-98     	; 0x8cc <main+0xee>

0000092e <__udivmodqi4>:
 92e:	99 1b       	sub	r25, r25
 930:	79 e0       	ldi	r23, 0x09	; 9
 932:	04 c0       	rjmp	.+8      	; 0x93c <__udivmodqi4_ep>

00000934 <__udivmodqi4_loop>:
 934:	99 1f       	adc	r25, r25
 936:	96 17       	cp	r25, r22
 938:	08 f0       	brcs	.+2      	; 0x93c <__udivmodqi4_ep>
 93a:	96 1b       	sub	r25, r22

0000093c <__udivmodqi4_ep>:
 93c:	88 1f       	adc	r24, r24
 93e:	7a 95       	dec	r23
 940:	c9 f7       	brne	.-14     	; 0x934 <__udivmodqi4_loop>
 942:	80 95       	com	r24
 944:	08 95       	ret

00000946 <__udivmodhi4>:
 946:	aa 1b       	sub	r26, r26
 948:	bb 1b       	sub	r27, r27
 94a:	51 e1       	ldi	r21, 0x11	; 17
 94c:	07 c0       	rjmp	.+14     	; 0x95c <__udivmodhi4_ep>

0000094e <__udivmodhi4_loop>:
 94e:	aa 1f       	adc	r26, r26
 950:	bb 1f       	adc	r27, r27
 952:	a6 17       	cp	r26, r22
 954:	b7 07       	cpc	r27, r23
 956:	10 f0       	brcs	.+4      	; 0x95c <__udivmodhi4_ep>
 958:	a6 1b       	sub	r26, r22
 95a:	b7 0b       	sbc	r27, r23

0000095c <__udivmodhi4_ep>:
 95c:	88 1f       	adc	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	5a 95       	dec	r21
 962:	a9 f7       	brne	.-22     	; 0x94e <__udivmodhi4_loop>
 964:	80 95       	com	r24
 966:	90 95       	com	r25
 968:	bc 01       	movw	r22, r24
 96a:	cd 01       	movw	r24, r26
 96c:	08 95       	ret

0000096e <memset>:
 96e:	dc 01       	movw	r26, r24
 970:	01 c0       	rjmp	.+2      	; 0x974 <memset+0x6>
 972:	6d 93       	st	X+, r22
 974:	41 50       	subi	r20, 0x01	; 1
 976:	50 40       	sbci	r21, 0x00	; 0
 978:	e0 f7       	brcc	.-8      	; 0x972 <memset+0x4>
 97a:	08 95       	ret

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>
