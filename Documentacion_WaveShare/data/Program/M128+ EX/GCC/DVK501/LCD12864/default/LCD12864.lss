
LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000048a  0000051e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080011c  0080011c  0000053a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009d  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089c  00000000  00000000  000005f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c2  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ad  00000000  00000000  00001055  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a0  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000271  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00001ba5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	ac 31       	cpi	r26, 0x1C	; 28
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	ac e1       	ldi	r26, 0x1C	; 28
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ac 35       	cpi	r26, 0x5C	; 92
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
  c2:	0c 94 43 02 	jmp	0x486	; 0x486 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  ca:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  cc:	77 9b       	sbis	0x0e, 7	; 14
  ce:	fe cf       	rjmp	.-4      	; 0xcc <spiSendChar+0x2>
}
  d0:	08 95       	ret

000000d2 <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
  d2:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  d4:	88 ef       	ldi	r24, 0xF8	; 248
  d6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  d8:	77 9b       	sbis	0x0e, 7	; 14
  da:	fe cf       	rjmp	.-4      	; 0xd8 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
  dc:	89 2f       	mov	r24, r25
  de:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  e0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  e2:	77 9b       	sbis	0x0e, 7	; 14
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
  e6:	92 95       	swap	r25
  e8:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  ea:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
  ec:	77 9b       	sbis	0x0e, 7	; 14
  ee:	fe cf       	rjmp	.-4      	; 0xec <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  f0:	88 eb       	ldi	r24, 0xB8	; 184
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
  f6:	08 95       	ret

000000f8 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
  f8:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  fa:	8a ef       	ldi	r24, 0xFA	; 250
  fc:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  fe:	77 9b       	sbis	0x0e, 7	; 14
 100:	fe cf       	rjmp	.-4      	; 0xfe <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 102:	89 2f       	mov	r24, r25
 104:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 106:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 108:	77 9b       	sbis	0x0e, 7	; 14
 10a:	fe cf       	rjmp	.-4      	; 0x108 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 10c:	92 95       	swap	r25
 10e:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 110:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 112:	77 9b       	sbis	0x0e, 7	; 14
 114:	fe cf       	rjmp	.-4      	; 0x112 <sendDataST7920+0x1a>
 116:	88 eb       	ldi	r24, 0xB8	; 184
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 11c:	08 95       	ret

0000011e <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 11e:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 120:	88 ef       	ldi	r24, 0xF8	; 248
 122:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 124:	77 9b       	sbis	0x0e, 7	; 14
 126:	fe cf       	rjmp	.-4      	; 0x124 <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 128:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 12a:	77 9b       	sbis	0x0e, 7	; 14
 12c:	fe cf       	rjmp	.-4      	; 0x12a <refreshLCD+0xc>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 132:	77 9b       	sbis	0x0e, 7	; 14
 134:	fe cf       	rjmp	.-4      	; 0x132 <refreshLCD+0x14>
 136:	88 eb       	ldi	r24, 0xB8	; 184
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <refreshLCD+0x1a>
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 140:	6a ef       	ldi	r22, 0xFA	; 250
 142:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 144:	fa 01       	movw	r30, r20
 146:	e2 0f       	add	r30, r18
 148:	f3 1f       	adc	r31, r19
 14a:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 14c:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));
 14e:	77 9b       	sbis	0x0e, 7	; 14
 150:	fe cf       	rjmp	.-4      	; 0x14e <refreshLCD+0x30>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 152:	8e 2f       	mov	r24, r30
 154:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 156:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 158:	77 9b       	sbis	0x0e, 7	; 14
 15a:	fe cf       	rjmp	.-4      	; 0x158 <refreshLCD+0x3a>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 15c:	e2 95       	swap	r30
 15e:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 160:	ef b9       	out	0x0f, r30	; 15
	while (!(SPSR & (1<<SPIF)));
 162:	77 9b       	sbis	0x0e, 7	; 14
 164:	fe cf       	rjmp	.-4      	; 0x162 <refreshLCD+0x44>
 166:	89 2f       	mov	r24, r25
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <refreshLCD+0x4a>
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 170:	20 31       	cpi	r18, 0x10	; 16
 172:	31 05       	cpc	r19, r1
 174:	39 f7       	brne	.-50     	; 0x144 <refreshLCD+0x26>
 176:	da 01       	movw	r26, r20
 178:	fa 01       	movw	r30, r20
 17a:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 17c:	3a ef       	ldi	r19, 0xFA	; 250
 17e:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 180:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 182:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 184:	77 9b       	sbis	0x0e, 7	; 14
 186:	fe cf       	rjmp	.-4      	; 0x184 <refreshLCD+0x66>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 188:	82 2f       	mov	r24, r18
 18a:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 18c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 18e:	77 9b       	sbis	0x0e, 7	; 14
 190:	fe cf       	rjmp	.-4      	; 0x18e <refreshLCD+0x70>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 192:	22 95       	swap	r18
 194:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 196:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 198:	77 9b       	sbis	0x0e, 7	; 14
 19a:	fe cf       	rjmp	.-4      	; 0x198 <refreshLCD+0x7a>
 19c:	89 2f       	mov	r24, r25
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <refreshLCD+0x80>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	31 96       	adiw	r30, 0x01	; 1
 1a6:	60 33       	cpi	r22, 0x30	; 48
 1a8:	59 f7       	brne	.-42     	; 0x180 <refreshLCD+0x62>
 1aa:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ac:	7a ef       	ldi	r23, 0xFA	; 250
 1ae:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1b0:	50 96       	adiw	r26, 0x10	; 16
 1b2:	2c 91       	ld	r18, X
 1b4:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1b6:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));
 1b8:	77 9b       	sbis	0x0e, 7	; 14
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <refreshLCD+0x9a>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1bc:	82 2f       	mov	r24, r18
 1be:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1c0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1c2:	77 9b       	sbis	0x0e, 7	; 14
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <refreshLCD+0xa4>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1c6:	22 95       	swap	r18
 1c8:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ca:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 1cc:	77 9b       	sbis	0x0e, 7	; 14
 1ce:	fe cf       	rjmp	.-4      	; 0x1cc <refreshLCD+0xae>
 1d0:	89 2f       	mov	r24, r25
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <refreshLCD+0xb4>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 1d6:	3f 5f       	subi	r19, 0xFF	; 255
 1d8:	11 96       	adiw	r26, 0x01	; 1
 1da:	30 32       	cpi	r19, 0x20	; 32
 1dc:	49 f7       	brne	.-46     	; 0x1b0 <refreshLCD+0x92>
 1de:	fa 01       	movw	r30, r20
 1e0:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1e2:	3a ef       	ldi	r19, 0xFA	; 250
 1e4:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1e6:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1e8:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 1ea:	77 9b       	sbis	0x0e, 7	; 14
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <refreshLCD+0xcc>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1ee:	89 2f       	mov	r24, r25
 1f0:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1f2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1f4:	77 9b       	sbis	0x0e, 7	; 14
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <refreshLCD+0xd6>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1f8:	92 95       	swap	r25
 1fa:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1fc:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 1fe:	77 9b       	sbis	0x0e, 7	; 14
 200:	fe cf       	rjmp	.-4      	; 0x1fe <refreshLCD+0xe0>
 202:	82 2f       	mov	r24, r18
 204:	8a 95       	dec	r24
 206:	f1 f7       	brne	.-4      	; 0x204 <refreshLCD+0xe6>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	31 96       	adiw	r30, 0x01	; 1
 20c:	6f 33       	cpi	r22, 0x3F	; 63
 20e:	59 f7       	brne	.-42     	; 0x1e6 <refreshLCD+0xc8>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 210:	08 95       	ret

00000212 <decToAscii>:
*	width是转换宽度
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	fb 01       	movw	r30, r22
 218:	ec 01       	movw	r28, r24
			case 1:
			{
				*(str+num) = (dec+'0');
				break;
			}
			default: *(str+num) = '0';
 21a:	20 e3       	ldi	r18, 0x30	; 48
 21c:	43 c0       	rjmp	.+134    	; 0x2a4 <decToAscii+0x92>
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
	{
		switch(width)
 21e:	43 30       	cpi	r20, 0x03	; 3
 220:	21 f1       	breq	.+72     	; 0x26a <decToAscii+0x58>
 222:	44 30       	cpi	r20, 0x04	; 4
 224:	28 f4       	brcc	.+10     	; 0x230 <decToAscii+0x1e>
 226:	41 30       	cpi	r20, 0x01	; 1
 228:	b1 f1       	breq	.+108    	; 0x296 <decToAscii+0x84>
 22a:	42 30       	cpi	r20, 0x02	; 2
 22c:	c1 f5       	brne	.+112    	; 0x29e <decToAscii+0x8c>
 22e:	28 c0       	rjmp	.+80     	; 0x280 <decToAscii+0x6e>
 230:	44 30       	cpi	r20, 0x04	; 4
 232:	69 f0       	breq	.+26     	; 0x24e <decToAscii+0x3c>
 234:	45 30       	cpi	r20, 0x05	; 5
 236:	99 f5       	brne	.+102    	; 0x29e <decToAscii+0x8c>
		{
			case 5:
			{
				*(str+num) = (dec/10000+'0');
 238:	cf 01       	movw	r24, r30
 23a:	60 e1       	ldi	r22, 0x10	; 16
 23c:	77 e2       	ldi	r23, 0x27	; 39
 23e:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodhi4>
 242:	60 5d       	subi	r22, 0xD0	; 208
 244:	68 83       	st	Y, r22
				dec%=10000;
 246:	cf 01       	movw	r24, r30
 248:	60 e1       	ldi	r22, 0x10	; 16
 24a:	77 e2       	ldi	r23, 0x27	; 39
 24c:	0a c0       	rjmp	.+20     	; 0x262 <decToAscii+0x50>
				break;
			}			
			case 4:
			{
				*(str+num) = (dec/1000+'0');
 24e:	cf 01       	movw	r24, r30
 250:	68 ee       	ldi	r22, 0xE8	; 232
 252:	73 e0       	ldi	r23, 0x03	; 3
 254:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodhi4>
 258:	60 5d       	subi	r22, 0xD0	; 208
 25a:	68 83       	st	Y, r22
				dec%=1000;
 25c:	cf 01       	movw	r24, r30
 25e:	68 ee       	ldi	r22, 0xE8	; 232
 260:	73 e0       	ldi	r23, 0x03	; 3
 262:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodhi4>
 266:	fc 01       	movw	r30, r24
 268:	1b c0       	rjmp	.+54     	; 0x2a0 <decToAscii+0x8e>
				break;
			}
			case 3:
			{
				*(str+num) = (dec/100+'0');
 26a:	cf 01       	movw	r24, r30
 26c:	64 e6       	ldi	r22, 0x64	; 100
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodhi4>
 274:	60 5d       	subi	r22, 0xD0	; 208
 276:	68 83       	st	Y, r22
				dec%=100;
 278:	cf 01       	movw	r24, r30
 27a:	64 e6       	ldi	r22, 0x64	; 100
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	f1 cf       	rjmp	.-30     	; 0x262 <decToAscii+0x50>
				break;
			}
			case 2:
			{
				*(str+num) = (dec/10+'0');
 280:	cf 01       	movw	r24, r30
 282:	6a e0       	ldi	r22, 0x0A	; 10
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	0e 94 2f 02 	call	0x45e	; 0x45e <__udivmodhi4>
 28a:	60 5d       	subi	r22, 0xD0	; 208
 28c:	68 83       	st	Y, r22
				dec%=10;
 28e:	cf 01       	movw	r24, r30
 290:	6a e0       	ldi	r22, 0x0A	; 10
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	e6 cf       	rjmp	.-52     	; 0x262 <decToAscii+0x50>
				break;
			}
			case 1:
			{
				*(str+num) = (dec+'0');
 296:	e0 5d       	subi	r30, 0xD0	; 208
 298:	e8 83       	st	Y, r30
 29a:	e0 53       	subi	r30, 0x30	; 48
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <decToAscii+0x8e>
				break;
			}
			default: *(str+num) = '0';
 29e:	28 83       	st	Y, r18
		}
		width--;
 2a0:	41 50       	subi	r20, 0x01	; 1
 2a2:	21 96       	adiw	r28, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
 2a4:	44 23       	and	r20, r20
 2a6:	09 f0       	breq	.+2      	; 0x2aa <decToAscii+0x98>
 2a8:	ba cf       	rjmp	.-140    	; 0x21e <decToAscii+0xc>
			default: *(str+num) = '0';
		}
		width--;
		num++;
	}
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <st7920LcdInit>:

void st7920LcdInit(void)
{
/*Hardware Environment：DVK501 && M128+ EX*/
#if defined(_DVK501_M128_EX_)
DDRB|=0x0E;
 2b0:	87 b3       	in	r24, 0x17	; 23
 2b2:	8e 60       	ori	r24, 0x0E	; 14
 2b4:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 2b6:	80 e5       	ldi	r24, 0x50	; 80
 2b8:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	8e b9       	out	0x0e, r24	; 14
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2be:	88 ef       	ldi	r24, 0xF8	; 248
 2c0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2c2:	77 9b       	sbis	0x0e, 7	; 14
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <st7920LcdInit+0x12>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2c6:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 2c8:	77 9b       	sbis	0x0e, 7	; 14
 2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <st7920LcdInit+0x18>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2cc:	80 ec       	ldi	r24, 0xC0	; 192
 2ce:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2d0:	77 9b       	sbis	0x0e, 7	; 14
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <st7920LcdInit+0x20>
 2d4:	88 eb       	ldi	r24, 0xB8	; 184
 2d6:	8a 95       	dec	r24
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <st7920LcdInit+0x26>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2da:	88 ef       	ldi	r24, 0xF8	; 248
 2dc:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2de:	77 9b       	sbis	0x0e, 7	; 14
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <st7920LcdInit+0x2e>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2e2:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 2e4:	77 9b       	sbis	0x0e, 7	; 14
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2e8:	80 e1       	ldi	r24, 0x10	; 16
 2ea:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2ec:	77 9b       	sbis	0x0e, 7	; 14
 2ee:	fe cf       	rjmp	.-4      	; 0x2ec <st7920LcdInit+0x3c>
 2f0:	88 eb       	ldi	r24, 0xB8	; 184
 2f2:	8a 95       	dec	r24
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <st7920LcdInit+0x42>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2f6:	86 e6       	ldi	r24, 0x66	; 102
 2f8:	9e e0       	ldi	r25, 0x0E	; 14
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <st7920LcdInit+0x4a>

sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 2fe:	8c e1       	ldi	r24, 0x1C	; 28
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	60 e2       	ldi	r22, 0x20	; 32
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	40 e4       	ldi	r20, 0x40	; 64
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	0e 94 28 02 	call	0x450	; 0x450 <memset>
memset(lcd_buffer,' ',sizeof(lcd_buffer));
#else
  #warning "LCD1264_ST7920 interface undefined."
#endif

}
 30e:	08 95       	ret

00000310 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 310:	af 92       	push	r10
 312:	bf 92       	push	r11
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	df 93       	push	r29
 320:	cf 93       	push	r28
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	0d 85       	ldd	r16, Y+13	; 0x0d
 328:	ae 84       	ldd	r10, Y+14	; 0x0e
 32a:	bf 84       	ldd	r11, Y+15	; 0x0f
 32c:	e8 88       	ldd	r14, Y+16	; 0x10
 32e:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 330:	02 95       	swap	r16
 332:	00 7f       	andi	r16, 0xF0	; 240
 334:	8c 85       	ldd	r24, Y+12	; 0x0c
 336:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 338:	de 01       	movw	r26, r28
 33a:	52 96       	adiw	r26, 0x12	; 18
 33c:	41 c0       	rjmp	.+130    	; 0x3c0 <showLine+0xb0>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 33e:	01 34       	cpi	r16, 0x41	; 65
 340:	08 f0       	brcs	.+2      	; 0x344 <showLine+0x34>
 342:	43 c0       	rjmp	.+134    	; 0x3ca <showLine+0xba>

		if(*str == '\\')
 344:	8c 35       	cpi	r24, 0x5C	; 92
 346:	51 f4       	brne	.+20     	; 0x35c <showLine+0x4c>
		{
			str++;
 348:	08 94       	sec
 34a:	e1 1c       	adc	r14, r1
 34c:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 34e:	95 01       	movw	r18, r10
 350:	20 0f       	add	r18, r16
 352:	31 1d       	adc	r19, r1
 354:	f7 01       	movw	r30, r14
 356:	80 81       	ld	r24, Z
 358:	f9 01       	movw	r30, r18
 35a:	2d c0       	rjmp	.+90     	; 0x3b6 <showLine+0xa6>
		}
		else if(*str == '%')
 35c:	85 32       	cpi	r24, 0x25	; 37
 35e:	41 f5       	brne	.+80     	; 0x3b0 <showLine+0xa0>
		{
			str++;
 360:	08 94       	sec
 362:	e1 1c       	adc	r14, r1
 364:	f1 1c       	adc	r15, r1
			if (*str=='d')
 366:	f7 01       	movw	r30, r14
 368:	80 81       	ld	r24, Z
 36a:	84 36       	cpi	r24, 0x64	; 100
 36c:	c1 f4       	brne	.+48     	; 0x39e <showLine+0x8e>
			{
				str++;
 36e:	08 94       	sec
 370:	e1 1c       	adc	r14, r1
 372:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	c8 2e       	mov	r12, r24
 378:	d1 2c       	mov	r13, r1
 37a:	ca 0e       	add	r12, r26
 37c:	db 1e       	adc	r13, r27
 37e:	6d 91       	ld	r22, X+
 380:	7c 91       	ld	r23, X
 382:	f7 01       	movw	r30, r14
 384:	40 81       	ld	r20, Z
 386:	40 53       	subi	r20, 0x30	; 48
 388:	c5 01       	movw	r24, r10
 38a:	80 0f       	add	r24, r16
 38c:	91 1d       	adc	r25, r1
 38e:	0e 94 09 01 	call	0x212	; 0x212 <decToAscii>
				coordinate+=(*str-'0'-1);
 392:	01 53       	subi	r16, 0x31	; 49
 394:	f7 01       	movw	r30, r14
 396:	80 81       	ld	r24, Z
 398:	08 0f       	add	r16, r24
 39a:	d6 01       	movw	r26, r12
 39c:	0d c0       	rjmp	.+26     	; 0x3b8 <showLine+0xa8>
			}
			else if(*str=='c')
 39e:	83 36       	cpi	r24, 0x63	; 99
 3a0:	59 f4       	brne	.+22     	; 0x3b8 <showLine+0xa8>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 3a2:	f5 01       	movw	r30, r10
 3a4:	e0 0f       	add	r30, r16
 3a6:	f1 1d       	adc	r31, r1
 3a8:	8c 91       	ld	r24, X
 3aa:	80 83       	st	Z, r24
 3ac:	12 96       	adiw	r26, 0x02	; 2
 3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <showLine+0xa8>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 3b0:	f5 01       	movw	r30, r10
 3b2:	e0 0f       	add	r30, r16
 3b4:	f1 1d       	adc	r31, r1
 3b6:	80 83       	st	Z, r24
		}
		str++;
 3b8:	08 94       	sec
 3ba:	e1 1c       	adc	r14, r1
 3bc:	f1 1c       	adc	r15, r1
		coordinate++;
 3be:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 3c0:	f7 01       	movw	r30, r14
 3c2:	80 81       	ld	r24, Z
 3c4:	88 23       	and	r24, r24
 3c6:	09 f0       	breq	.+2      	; 0x3ca <showLine+0xba>
 3c8:	ba cf       	rjmp	.-140    	; 0x33e <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 3ca:	cf 91       	pop	r28
 3cc:	df 91       	pop	r29
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	bf 90       	pop	r11
 3da:	af 90       	pop	r10
 3dc:	08 95       	ret

000003de <main>:
#define _DVK501_M128_EX_ 1
#include <avr/io.h>
#include <ws_lcd_ST7920_port.h>
int main(void)
{
 3de:	ff 92       	push	r15
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
st7920LcdInit();
 3e4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <st7920LcdInit>

showLine(2,1,lcd_buffer,"深圳微雪电子");
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <main+0xc>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <main+0xe>
 3ec:	00 d0       	rcall	.+0      	; 0x3ee <main+0x10>
 3ee:	ed b7       	in	r30, 0x3d	; 61
 3f0:	fe b7       	in	r31, 0x3e	; 62
 3f2:	31 96       	adiw	r30, 0x01	; 1
 3f4:	92 e0       	ldi	r25, 0x02	; 2
 3f6:	f9 2e       	mov	r15, r25
 3f8:	ad b7       	in	r26, 0x3d	; 61
 3fa:	be b7       	in	r27, 0x3e	; 62
 3fc:	11 96       	adiw	r26, 0x01	; 1
 3fe:	fc 92       	st	X, r15
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	81 83       	std	Z+1, r24	; 0x01
 404:	0c e1       	ldi	r16, 0x1C	; 28
 406:	11 e0       	ldi	r17, 0x01	; 1
 408:	13 83       	std	Z+3, r17	; 0x03
 40a:	02 83       	std	Z+2, r16	; 0x02
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	95 83       	std	Z+5, r25	; 0x05
 412:	84 83       	std	Z+4, r24	; 0x04
 414:	0e 94 88 01 	call	0x310	; 0x310 <showLine>
showLine(2,2,lcd_buffer,"waveshare.net");
 418:	ed b7       	in	r30, 0x3d	; 61
 41a:	fe b7       	in	r31, 0x3e	; 62
 41c:	31 96       	adiw	r30, 0x01	; 1
 41e:	ad b7       	in	r26, 0x3d	; 61
 420:	be b7       	in	r27, 0x3e	; 62
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	fc 92       	st	X, r15
 426:	f1 82       	std	Z+1, r15	; 0x01
 428:	13 83       	std	Z+3, r17	; 0x03
 42a:	02 83       	std	Z+2, r16	; 0x02
 42c:	8d e0       	ldi	r24, 0x0D	; 13
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	95 83       	std	Z+5, r25	; 0x05
 432:	84 83       	std	Z+4, r24	; 0x04
 434:	0e 94 88 01 	call	0x310	; 0x310 <showLine>
refreshLCD(lcd_buffer);
 438:	8d b7       	in	r24, 0x3d	; 61
 43a:	9e b7       	in	r25, 0x3e	; 62
 43c:	06 96       	adiw	r24, 0x06	; 6
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	9e bf       	out	0x3e, r25	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	8d bf       	out	0x3d, r24	; 61
 448:	c8 01       	movw	r24, r16
 44a:	0e 94 8f 00 	call	0x11e	; 0x11e <refreshLCD>
 44e:	ff cf       	rjmp	.-2      	; 0x44e <main+0x70>

00000450 <memset>:
 450:	dc 01       	movw	r26, r24
 452:	01 c0       	rjmp	.+2      	; 0x456 <memset+0x6>
 454:	6d 93       	st	X+, r22
 456:	41 50       	subi	r20, 0x01	; 1
 458:	50 40       	sbci	r21, 0x00	; 0
 45a:	e0 f7       	brcc	.-8      	; 0x454 <memset+0x4>
 45c:	08 95       	ret

0000045e <__udivmodhi4>:
 45e:	aa 1b       	sub	r26, r26
 460:	bb 1b       	sub	r27, r27
 462:	51 e1       	ldi	r21, 0x11	; 17
 464:	07 c0       	rjmp	.+14     	; 0x474 <__udivmodhi4_ep>

00000466 <__udivmodhi4_loop>:
 466:	aa 1f       	adc	r26, r26
 468:	bb 1f       	adc	r27, r27
 46a:	a6 17       	cp	r26, r22
 46c:	b7 07       	cpc	r27, r23
 46e:	10 f0       	brcs	.+4      	; 0x474 <__udivmodhi4_ep>
 470:	a6 1b       	sub	r26, r22
 472:	b7 0b       	sbc	r27, r23

00000474 <__udivmodhi4_ep>:
 474:	88 1f       	adc	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	5a 95       	dec	r21
 47a:	a9 f7       	brne	.-22     	; 0x466 <__udivmodhi4_loop>
 47c:	80 95       	com	r24
 47e:	90 95       	com	r25
 480:	bc 01       	movw	r22, r24
 482:	cd 01       	movw	r24, r26
 484:	08 95       	ret

00000486 <_exit>:
 486:	f8 94       	cli

00000488 <__stop_program>:
 488:	ff cf       	rjmp	.-2      	; 0x488 <__stop_program>
