
USART_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000592  00000626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080011a  0080011a  00000640  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d6  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a57  00000000  00000000  00000736  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000234  00000000  00000000  0000118d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000887  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e4  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000340  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	aa 31       	cpi	r26, 0x1A	; 26
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	aa e1       	ldi	r26, 0x1A	; 26
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	aa 35       	cpi	r26, 0x5A	; 90
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  c2:	0c 94 c7 02 	jmp	0x58e	; 0x58e <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <usartInit>:
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSR0A=0x00;
  ca:	1b b8       	out	0x0b, r1	; 11
UCSR0B=0x18;
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	8a b9       	out	0x0a, r24	; 10
UCSR0C=0x06;
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 95 00 	sts	0x0095, r24
UBRR0H=0x00;
  d6:	10 92 90 00 	sts	0x0090, r1
UBRR0L=0x2F;
  da:	8f e2       	ldi	r24, 0x2F	; 47
  dc:	89 b9       	out	0x09, r24	; 9
}
  de:	08 95       	ret

000000e0 <putUsart0>:


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
    while(!(WS_UCSR0A & 0x20));
  e0:	5d 9b       	sbis	0x0b, 5	; 11
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <putUsart0>
    WS_UDR0 = c;
  e4:	8c b9       	out	0x0c, r24	; 12
}
  e6:	08 95       	ret

000000e8 <getUsart0>:
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  e8:	5f 9b       	sbis	0x0b, 7	; 11
  ea:	07 c0       	rjmp	.+14     	; 0xfa <getUsart0+0x12>
    status = WS_UCSR0A;
  ec:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
  ee:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  f0:	8c 71       	andi	r24, 0x1C	; 28
  f2:	19 f4       	brne	.+6      	; 0xfa <getUsart0+0x12>
    return res;
  f4:	29 2f       	mov	r18, r25
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <getUsart0+0x16>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	3f ef       	ldi	r19, 0xFF	; 255
}
  fe:	c9 01       	movw	r24, r18
 100:	08 95       	ret

00000102 <waitUsart0>:
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 102:	5f 9b       	sbis	0x0b, 7	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <waitUsart0>
    status = WS_UCSR0A;
 106:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
 108:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 10a:	8c 71       	andi	r24, 0x1C	; 28
 10c:	d1 f7       	brne	.-12     	; 0x102 <waitUsart0>
uint8_t waitUsart0(void)
{
    uint16_t c;
    while((c=getUsart0())==0xFFFF);
    return (uint8_t)c;
}
 10e:	89 2f       	mov	r24, r25
 110:	08 95       	ret

00000112 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 112:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 114:	77 9b       	sbis	0x0e, 7	; 14
 116:	fe cf       	rjmp	.-4      	; 0x114 <spiSendChar+0x2>
}
 118:	08 95       	ret

0000011a <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 11a:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 11c:	88 ef       	ldi	r24, 0xF8	; 248
 11e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 120:	77 9b       	sbis	0x0e, 7	; 14
 122:	fe cf       	rjmp	.-4      	; 0x120 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 124:	89 2f       	mov	r24, r25
 126:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 128:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 12a:	77 9b       	sbis	0x0e, 7	; 14
 12c:	fe cf       	rjmp	.-4      	; 0x12a <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 12e:	92 95       	swap	r25
 130:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 132:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 134:	77 9b       	sbis	0x0e, 7	; 14
 136:	fe cf       	rjmp	.-4      	; 0x134 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 138:	88 eb       	ldi	r24, 0xB8	; 184
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 13e:	08 95       	ret

00000140 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 140:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 142:	8a ef       	ldi	r24, 0xFA	; 250
 144:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 146:	77 9b       	sbis	0x0e, 7	; 14
 148:	fe cf       	rjmp	.-4      	; 0x146 <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 14a:	89 2f       	mov	r24, r25
 14c:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 14e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 150:	77 9b       	sbis	0x0e, 7	; 14
 152:	fe cf       	rjmp	.-4      	; 0x150 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 154:	92 95       	swap	r25
 156:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 158:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 15a:	77 9b       	sbis	0x0e, 7	; 14
 15c:	fe cf       	rjmp	.-4      	; 0x15a <sendDataST7920+0x1a>
 15e:	88 eb       	ldi	r24, 0xB8	; 184
 160:	8a 95       	dec	r24
 162:	f1 f7       	brne	.-4      	; 0x160 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 164:	08 95       	ret

00000166 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 166:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 168:	88 ef       	ldi	r24, 0xF8	; 248
 16a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 16c:	77 9b       	sbis	0x0e, 7	; 14
 16e:	fe cf       	rjmp	.-4      	; 0x16c <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 170:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 172:	77 9b       	sbis	0x0e, 7	; 14
 174:	fe cf       	rjmp	.-4      	; 0x172 <refreshLCD+0xc>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 17a:	77 9b       	sbis	0x0e, 7	; 14
 17c:	fe cf       	rjmp	.-4      	; 0x17a <refreshLCD+0x14>
 17e:	88 eb       	ldi	r24, 0xB8	; 184
 180:	8a 95       	dec	r24
 182:	f1 f7       	brne	.-4      	; 0x180 <refreshLCD+0x1a>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 188:	6a ef       	ldi	r22, 0xFA	; 250
 18a:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 18c:	fa 01       	movw	r30, r20
 18e:	e2 0f       	add	r30, r18
 190:	f3 1f       	adc	r31, r19
 192:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 194:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));
 196:	77 9b       	sbis	0x0e, 7	; 14
 198:	fe cf       	rjmp	.-4      	; 0x196 <refreshLCD+0x30>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 19a:	8e 2f       	mov	r24, r30
 19c:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 19e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1a0:	77 9b       	sbis	0x0e, 7	; 14
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <refreshLCD+0x3a>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1a4:	e2 95       	swap	r30
 1a6:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1a8:	ef b9       	out	0x0f, r30	; 15
	while (!(SPSR & (1<<SPIF)));
 1aa:	77 9b       	sbis	0x0e, 7	; 14
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <refreshLCD+0x44>
 1ae:	89 2f       	mov	r24, r25
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <refreshLCD+0x4a>
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 1b8:	20 31       	cpi	r18, 0x10	; 16
 1ba:	31 05       	cpc	r19, r1
 1bc:	39 f7       	brne	.-50     	; 0x18c <refreshLCD+0x26>
 1be:	da 01       	movw	r26, r20
 1c0:	fa 01       	movw	r30, r20
 1c2:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1c4:	3a ef       	ldi	r19, 0xFA	; 250
 1c6:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1c8:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ca:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 1cc:	77 9b       	sbis	0x0e, 7	; 14
 1ce:	fe cf       	rjmp	.-4      	; 0x1cc <refreshLCD+0x66>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1d0:	82 2f       	mov	r24, r18
 1d2:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1d4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1d6:	77 9b       	sbis	0x0e, 7	; 14
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <refreshLCD+0x70>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1da:	22 95       	swap	r18
 1dc:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1de:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 1e0:	77 9b       	sbis	0x0e, 7	; 14
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <refreshLCD+0x7a>
 1e4:	89 2f       	mov	r24, r25
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <refreshLCD+0x80>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 1ea:	6f 5f       	subi	r22, 0xFF	; 255
 1ec:	31 96       	adiw	r30, 0x01	; 1
 1ee:	60 33       	cpi	r22, 0x30	; 48
 1f0:	59 f7       	brne	.-42     	; 0x1c8 <refreshLCD+0x62>
 1f2:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1f4:	7a ef       	ldi	r23, 0xFA	; 250
 1f6:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1f8:	50 96       	adiw	r26, 0x10	; 16
 1fa:	2c 91       	ld	r18, X
 1fc:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1fe:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));
 200:	77 9b       	sbis	0x0e, 7	; 14
 202:	fe cf       	rjmp	.-4      	; 0x200 <refreshLCD+0x9a>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 204:	82 2f       	mov	r24, r18
 206:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 208:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 20a:	77 9b       	sbis	0x0e, 7	; 14
 20c:	fe cf       	rjmp	.-4      	; 0x20a <refreshLCD+0xa4>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 20e:	22 95       	swap	r18
 210:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 212:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 214:	77 9b       	sbis	0x0e, 7	; 14
 216:	fe cf       	rjmp	.-4      	; 0x214 <refreshLCD+0xae>
 218:	89 2f       	mov	r24, r25
 21a:	8a 95       	dec	r24
 21c:	f1 f7       	brne	.-4      	; 0x21a <refreshLCD+0xb4>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 21e:	3f 5f       	subi	r19, 0xFF	; 255
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	30 32       	cpi	r19, 0x20	; 32
 224:	49 f7       	brne	.-46     	; 0x1f8 <refreshLCD+0x92>
 226:	fa 01       	movw	r30, r20
 228:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 22a:	3a ef       	ldi	r19, 0xFA	; 250
 22c:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 22e:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 230:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 232:	77 9b       	sbis	0x0e, 7	; 14
 234:	fe cf       	rjmp	.-4      	; 0x232 <refreshLCD+0xcc>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 236:	89 2f       	mov	r24, r25
 238:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 23a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 23c:	77 9b       	sbis	0x0e, 7	; 14
 23e:	fe cf       	rjmp	.-4      	; 0x23c <refreshLCD+0xd6>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 240:	92 95       	swap	r25
 242:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 244:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 246:	77 9b       	sbis	0x0e, 7	; 14
 248:	fe cf       	rjmp	.-4      	; 0x246 <refreshLCD+0xe0>
 24a:	82 2f       	mov	r24, r18
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <refreshLCD+0xe6>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
 250:	6f 5f       	subi	r22, 0xFF	; 255
 252:	31 96       	adiw	r30, 0x01	; 1
 254:	6f 33       	cpi	r22, 0x3F	; 63
 256:	59 f7       	brne	.-42     	; 0x22e <refreshLCD+0xc8>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 258:	08 95       	ret

0000025a <decToAscii>:
*	width是转换宽度
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	fb 01       	movw	r30, r22
 260:	ec 01       	movw	r28, r24
			case 1:
			{
				*(str+num) = (dec+'0');
				break;
			}
			default: *(str+num) = '0';
 262:	20 e3       	ldi	r18, 0x30	; 48
 264:	43 c0       	rjmp	.+134    	; 0x2ec <decToAscii+0x92>
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
	{
		switch(width)
 266:	43 30       	cpi	r20, 0x03	; 3
 268:	21 f1       	breq	.+72     	; 0x2b2 <decToAscii+0x58>
 26a:	44 30       	cpi	r20, 0x04	; 4
 26c:	28 f4       	brcc	.+10     	; 0x278 <decToAscii+0x1e>
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	b1 f1       	breq	.+108    	; 0x2de <decToAscii+0x84>
 272:	42 30       	cpi	r20, 0x02	; 2
 274:	c1 f5       	brne	.+112    	; 0x2e6 <decToAscii+0x8c>
 276:	28 c0       	rjmp	.+80     	; 0x2c8 <decToAscii+0x6e>
 278:	44 30       	cpi	r20, 0x04	; 4
 27a:	69 f0       	breq	.+26     	; 0x296 <decToAscii+0x3c>
 27c:	45 30       	cpi	r20, 0x05	; 5
 27e:	99 f5       	brne	.+102    	; 0x2e6 <decToAscii+0x8c>
		{
			case 5:
			{
				*(str+num) = (dec/10000+'0');
 280:	cf 01       	movw	r24, r30
 282:	60 e1       	ldi	r22, 0x10	; 16
 284:	77 e2       	ldi	r23, 0x27	; 39
 286:	0e 94 b3 02 	call	0x566	; 0x566 <__udivmodhi4>
 28a:	60 5d       	subi	r22, 0xD0	; 208
 28c:	68 83       	st	Y, r22
				dec%=10000;
 28e:	cf 01       	movw	r24, r30
 290:	60 e1       	ldi	r22, 0x10	; 16
 292:	77 e2       	ldi	r23, 0x27	; 39
 294:	0a c0       	rjmp	.+20     	; 0x2aa <decToAscii+0x50>
				break;
			}			
			case 4:
			{
				*(str+num) = (dec/1000+'0');
 296:	cf 01       	movw	r24, r30
 298:	68 ee       	ldi	r22, 0xE8	; 232
 29a:	73 e0       	ldi	r23, 0x03	; 3
 29c:	0e 94 b3 02 	call	0x566	; 0x566 <__udivmodhi4>
 2a0:	60 5d       	subi	r22, 0xD0	; 208
 2a2:	68 83       	st	Y, r22
				dec%=1000;
 2a4:	cf 01       	movw	r24, r30
 2a6:	68 ee       	ldi	r22, 0xE8	; 232
 2a8:	73 e0       	ldi	r23, 0x03	; 3
 2aa:	0e 94 b3 02 	call	0x566	; 0x566 <__udivmodhi4>
 2ae:	fc 01       	movw	r30, r24
 2b0:	1b c0       	rjmp	.+54     	; 0x2e8 <decToAscii+0x8e>
				break;
			}
			case 3:
			{
				*(str+num) = (dec/100+'0');
 2b2:	cf 01       	movw	r24, r30
 2b4:	64 e6       	ldi	r22, 0x64	; 100
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	0e 94 b3 02 	call	0x566	; 0x566 <__udivmodhi4>
 2bc:	60 5d       	subi	r22, 0xD0	; 208
 2be:	68 83       	st	Y, r22
				dec%=100;
 2c0:	cf 01       	movw	r24, r30
 2c2:	64 e6       	ldi	r22, 0x64	; 100
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	f1 cf       	rjmp	.-30     	; 0x2aa <decToAscii+0x50>
				break;
			}
			case 2:
			{
				*(str+num) = (dec/10+'0');
 2c8:	cf 01       	movw	r24, r30
 2ca:	6a e0       	ldi	r22, 0x0A	; 10
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	0e 94 b3 02 	call	0x566	; 0x566 <__udivmodhi4>
 2d2:	60 5d       	subi	r22, 0xD0	; 208
 2d4:	68 83       	st	Y, r22
				dec%=10;
 2d6:	cf 01       	movw	r24, r30
 2d8:	6a e0       	ldi	r22, 0x0A	; 10
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	e6 cf       	rjmp	.-52     	; 0x2aa <decToAscii+0x50>
				break;
			}
			case 1:
			{
				*(str+num) = (dec+'0');
 2de:	e0 5d       	subi	r30, 0xD0	; 208
 2e0:	e8 83       	st	Y, r30
 2e2:	e0 53       	subi	r30, 0x30	; 48
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <decToAscii+0x8e>
				break;
			}
			default: *(str+num) = '0';
 2e6:	28 83       	st	Y, r18
		}
		width--;
 2e8:	41 50       	subi	r20, 0x01	; 1
 2ea:	21 96       	adiw	r28, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
 2ec:	44 23       	and	r20, r20
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <decToAscii+0x98>
 2f0:	ba cf       	rjmp	.-140    	; 0x266 <decToAscii+0xc>
			default: *(str+num) = '0';
		}
		width--;
		num++;
	}
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <st7920LcdInit>:
#define CLR_CS_LCD() cbi(PORTB,4)
#define OUT_CS_LCD() sbi(DDRB,4)

void st7920LcdInit(void)
{
DDRB|=0x07;
 2f8:	87 b3       	in	r24, 0x17	; 23
 2fa:	87 60       	ori	r24, 0x07	; 7
 2fc:	87 bb       	out	0x17, r24	; 23
PORTB&=0xF8;
 2fe:	88 b3       	in	r24, 0x18	; 24
 300:	88 7f       	andi	r24, 0xF8	; 248
 302:	88 bb       	out	0x18, r24	; 24
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 304:	80 e5       	ldi	r24, 0x50	; 80
 306:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	8e b9       	out	0x0e, r24	; 14
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 30c:	88 ef       	ldi	r24, 0xF8	; 248
 30e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 310:	77 9b       	sbis	0x0e, 7	; 14
 312:	fe cf       	rjmp	.-4      	; 0x310 <st7920LcdInit+0x18>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 314:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 316:	77 9b       	sbis	0x0e, 7	; 14
 318:	fe cf       	rjmp	.-4      	; 0x316 <st7920LcdInit+0x1e>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 31a:	80 ec       	ldi	r24, 0xC0	; 192
 31c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 31e:	77 9b       	sbis	0x0e, 7	; 14
 320:	fe cf       	rjmp	.-4      	; 0x31e <st7920LcdInit+0x26>
 322:	88 eb       	ldi	r24, 0xB8	; 184
 324:	8a 95       	dec	r24
 326:	f1 f7       	brne	.-4      	; 0x324 <st7920LcdInit+0x2c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 328:	88 ef       	ldi	r24, 0xF8	; 248
 32a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 32c:	77 9b       	sbis	0x0e, 7	; 14
 32e:	fe cf       	rjmp	.-4      	; 0x32c <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 330:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 332:	77 9b       	sbis	0x0e, 7	; 14
 334:	fe cf       	rjmp	.-4      	; 0x332 <st7920LcdInit+0x3a>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 336:	80 e1       	ldi	r24, 0x10	; 16
 338:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 33a:	77 9b       	sbis	0x0e, 7	; 14
 33c:	fe cf       	rjmp	.-4      	; 0x33a <st7920LcdInit+0x42>
 33e:	88 eb       	ldi	r24, 0xB8	; 184
 340:	8a 95       	dec	r24
 342:	f1 f7       	brne	.-4      	; 0x340 <st7920LcdInit+0x48>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 344:	86 e6       	ldi	r24, 0x66	; 102
 346:	9e e0       	ldi	r25, 0x0E	; 14
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <st7920LcdInit+0x50>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 34c:	8a e1       	ldi	r24, 0x1A	; 26
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	60 e2       	ldi	r22, 0x20	; 32
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	40 e4       	ldi	r20, 0x40	; 64
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	0e 94 ac 02 	call	0x558	; 0x558 <memset>
}
 35c:	08 95       	ret

0000035e <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 35e:	af 92       	push	r10
 360:	bf 92       	push	r11
 362:	cf 92       	push	r12
 364:	df 92       	push	r13
 366:	ef 92       	push	r14
 368:	ff 92       	push	r15
 36a:	0f 93       	push	r16
 36c:	df 93       	push	r29
 36e:	cf 93       	push	r28
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	0d 85       	ldd	r16, Y+13	; 0x0d
 376:	ae 84       	ldd	r10, Y+14	; 0x0e
 378:	bf 84       	ldd	r11, Y+15	; 0x0f
 37a:	e8 88       	ldd	r14, Y+16	; 0x10
 37c:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 37e:	02 95       	swap	r16
 380:	00 7f       	andi	r16, 0xF0	; 240
 382:	8c 85       	ldd	r24, Y+12	; 0x0c
 384:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 386:	de 01       	movw	r26, r28
 388:	52 96       	adiw	r26, 0x12	; 18
 38a:	41 c0       	rjmp	.+130    	; 0x40e <showLine+0xb0>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 38c:	01 34       	cpi	r16, 0x41	; 65
 38e:	08 f0       	brcs	.+2      	; 0x392 <showLine+0x34>
 390:	43 c0       	rjmp	.+134    	; 0x418 <showLine+0xba>

		if(*str == '\\')
 392:	8c 35       	cpi	r24, 0x5C	; 92
 394:	51 f4       	brne	.+20     	; 0x3aa <showLine+0x4c>
		{
			str++;
 396:	08 94       	sec
 398:	e1 1c       	adc	r14, r1
 39a:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 39c:	95 01       	movw	r18, r10
 39e:	20 0f       	add	r18, r16
 3a0:	31 1d       	adc	r19, r1
 3a2:	f7 01       	movw	r30, r14
 3a4:	80 81       	ld	r24, Z
 3a6:	f9 01       	movw	r30, r18
 3a8:	2d c0       	rjmp	.+90     	; 0x404 <showLine+0xa6>
		}
		else if(*str == '%')
 3aa:	85 32       	cpi	r24, 0x25	; 37
 3ac:	41 f5       	brne	.+80     	; 0x3fe <showLine+0xa0>
		{
			str++;
 3ae:	08 94       	sec
 3b0:	e1 1c       	adc	r14, r1
 3b2:	f1 1c       	adc	r15, r1
			if (*str=='d')
 3b4:	f7 01       	movw	r30, r14
 3b6:	80 81       	ld	r24, Z
 3b8:	84 36       	cpi	r24, 0x64	; 100
 3ba:	c1 f4       	brne	.+48     	; 0x3ec <showLine+0x8e>
			{
				str++;
 3bc:	08 94       	sec
 3be:	e1 1c       	adc	r14, r1
 3c0:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	c8 2e       	mov	r12, r24
 3c6:	d1 2c       	mov	r13, r1
 3c8:	ca 0e       	add	r12, r26
 3ca:	db 1e       	adc	r13, r27
 3cc:	6d 91       	ld	r22, X+
 3ce:	7c 91       	ld	r23, X
 3d0:	f7 01       	movw	r30, r14
 3d2:	40 81       	ld	r20, Z
 3d4:	40 53       	subi	r20, 0x30	; 48
 3d6:	c5 01       	movw	r24, r10
 3d8:	80 0f       	add	r24, r16
 3da:	91 1d       	adc	r25, r1
 3dc:	0e 94 2d 01 	call	0x25a	; 0x25a <decToAscii>
				coordinate+=(*str-'0'-1);
 3e0:	01 53       	subi	r16, 0x31	; 49
 3e2:	f7 01       	movw	r30, r14
 3e4:	80 81       	ld	r24, Z
 3e6:	08 0f       	add	r16, r24
 3e8:	d6 01       	movw	r26, r12
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <showLine+0xa8>
			}
			else if(*str=='c')
 3ec:	83 36       	cpi	r24, 0x63	; 99
 3ee:	59 f4       	brne	.+22     	; 0x406 <showLine+0xa8>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 3f0:	f5 01       	movw	r30, r10
 3f2:	e0 0f       	add	r30, r16
 3f4:	f1 1d       	adc	r31, r1
 3f6:	8c 91       	ld	r24, X
 3f8:	80 83       	st	Z, r24
 3fa:	12 96       	adiw	r26, 0x02	; 2
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <showLine+0xa8>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 3fe:	f5 01       	movw	r30, r10
 400:	e0 0f       	add	r30, r16
 402:	f1 1d       	adc	r31, r1
 404:	80 83       	st	Z, r24
		}
		str++;
 406:	08 94       	sec
 408:	e1 1c       	adc	r14, r1
 40a:	f1 1c       	adc	r15, r1
		coordinate++;
 40c:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 40e:	f7 01       	movw	r30, r14
 410:	80 81       	ld	r24, Z
 412:	88 23       	and	r24, r24
 414:	09 f0       	breq	.+2      	; 0x418 <showLine+0xba>
 416:	ba cf       	rjmp	.-140    	; 0x38c <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 418:	cf 91       	pop	r28
 41a:	df 91       	pop	r29
 41c:	0f 91       	pop	r16
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	cf 90       	pop	r12
 426:	bf 90       	pop	r11
 428:	af 90       	pop	r10
 42a:	08 95       	ret

0000042c <main>:
#include <util/delay.h>
#include <ws_usart_port.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 42c:	8f 92       	push	r8
 42e:	9f 92       	push	r9
 430:	af 92       	push	r10
 432:	bf 92       	push	r11
 434:	cf 92       	push	r12
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSR0A=0x00;
 444:	1b b8       	out	0x0b, r1	; 11
UCSR0B=0x18;
 446:	88 e1       	ldi	r24, 0x18	; 24
 448:	8a b9       	out	0x0a, r24	; 10
UCSR0C=0x06;
 44a:	86 e0       	ldi	r24, 0x06	; 6
 44c:	80 93 95 00 	sts	0x0095, r24
UBRR0H=0x00;
 450:	10 92 90 00 	sts	0x0090, r1
UBRR0L=0x2F;
 454:	8f e2       	ldi	r24, 0x2F	; 47
 456:	89 b9       	out	0x09, r24	; 9
	uint8_t tmp=0;
	usartInit();
	st7920LcdInit(); /*LCD初始化*/
 458:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <st7920LcdInit>
	showLine(0,0,lcd_buffer,"USART 自发自收");
 45c:	00 d0       	rcall	.+0      	; 0x45e <main+0x32>
 45e:	00 d0       	rcall	.+0      	; 0x460 <main+0x34>
 460:	00 d0       	rcall	.+0      	; 0x462 <main+0x36>
 462:	ed b7       	in	r30, 0x3d	; 61
 464:	fe b7       	in	r31, 0x3e	; 62
 466:	31 96       	adiw	r30, 0x01	; 1
 468:	ad b7       	in	r26, 0x3d	; 61
 46a:	be b7       	in	r27, 0x3e	; 62
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	1c 92       	st	X, r1
 470:	11 82       	std	Z+1, r1	; 0x01
 472:	0a e1       	ldi	r16, 0x1A	; 26
 474:	11 e0       	ldi	r17, 0x01	; 1
 476:	13 83       	std	Z+3, r17	; 0x03
 478:	02 83       	std	Z+2, r16	; 0x02
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	95 83       	std	Z+5, r25	; 0x05
 480:	84 83       	std	Z+4, r24	; 0x04
 482:	0e 94 af 01 	call	0x35e	; 0x35e <showLine>
	showLine(0,1,lcd_buffer,"数据：");
 486:	ed b7       	in	r30, 0x3d	; 61
 488:	fe b7       	in	r31, 0x3e	; 62
 48a:	31 96       	adiw	r30, 0x01	; 1
 48c:	ad b7       	in	r26, 0x3d	; 61
 48e:	be b7       	in	r27, 0x3e	; 62
 490:	11 96       	adiw	r26, 0x01	; 1
 492:	1c 92       	st	X, r1
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	81 83       	std	Z+1, r24	; 0x01
 498:	13 83       	std	Z+3, r17	; 0x03
 49a:	02 83       	std	Z+2, r16	; 0x02
 49c:	8f e0       	ldi	r24, 0x0F	; 15
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	95 83       	std	Z+5, r25	; 0x05
 4a2:	84 83       	std	Z+4, r24	; 0x04
 4a4:	0e 94 af 01 	call	0x35e	; 0x35e <showLine>
	refreshLCD(lcd_buffer); /*刷新LCD*/
 4a8:	2d b7       	in	r18, 0x3d	; 61
 4aa:	3e b7       	in	r19, 0x3e	; 62
 4ac:	2a 5f       	subi	r18, 0xFA	; 250
 4ae:	3f 4f       	sbci	r19, 0xFF	; 255
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	3e bf       	out	0x3e, r19	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	2d bf       	out	0x3d, r18	; 61
 4ba:	c8 01       	movw	r24, r16
 4bc:	0e 94 b3 00 	call	0x166	; 0x166 <refreshLCD>
 4c0:	ff 24       	eor	r15, r15
 4c2:	a1 2c       	mov	r10, r1
 4c4:	38 e4       	ldi	r19, 0x48	; 72
 4c6:	b3 2e       	mov	r11, r19
	while(1)
	{
		putUsart0(tmp);
		_delay_ms(10);
		showLine(6,1,lcd_buffer,"%d3",(uint8_t)getUsart0());
 4c8:	26 e0       	ldi	r18, 0x06	; 6
 4ca:	82 2e       	mov	r8, r18
 4cc:	99 24       	eor	r9, r9
 4ce:	93 94       	inc	r9
 4d0:	e0 2e       	mov	r14, r16
 4d2:	01 2f       	mov	r16, r17
 4d4:	96 e1       	ldi	r25, 0x16	; 22
 4d6:	c9 2e       	mov	r12, r25
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	d9 2e       	mov	r13, r25
 4dc:	c8 eb       	ldi	r28, 0xB8	; 184
 4de:	d0 e0       	ldi	r29, 0x00	; 0


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
    while(!(WS_UCSR0A & 0x20));
 4e0:	5d 9b       	sbis	0x0b, 5	; 11
 4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <main+0xb4>
    WS_UDR0 = c;
 4e4:	fc b8       	out	0x0c, r15	; 12
 4e6:	c5 01       	movw	r24, r10
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <main+0xbc>
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 4ec:	5f 9b       	sbis	0x0b, 7	; 11
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <main+0xd0>
    status = WS_UCSR0A;
 4f0:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
 4f2:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 4f4:	8c 71       	andi	r24, 0x1C	; 28
 4f6:	11 f4       	brne	.+4      	; 0x4fc <main+0xd0>
    return res;
 4f8:	89 2f       	mov	r24, r25
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <main+0xd4>
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	9f ef       	ldi	r25, 0xFF	; 255
 500:	ad b7       	in	r26, 0x3d	; 61
 502:	be b7       	in	r27, 0x3e	; 62
 504:	18 97       	sbiw	r26, 0x08	; 8
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	be bf       	out	0x3e, r27	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	ad bf       	out	0x3d, r26	; 61
 510:	ed b7       	in	r30, 0x3d	; 61
 512:	fe b7       	in	r31, 0x3e	; 62
 514:	31 96       	adiw	r30, 0x01	; 1
 516:	11 96       	adiw	r26, 0x01	; 1
 518:	8c 92       	st	X, r8
 51a:	91 82       	std	Z+1, r9	; 0x01
 51c:	e2 82       	std	Z+2, r14	; 0x02
 51e:	03 83       	std	Z+3, r16	; 0x03
 520:	d5 82       	std	Z+5, r13	; 0x05
 522:	c4 82       	std	Z+4, r12	; 0x04
 524:	86 83       	std	Z+6, r24	; 0x06
 526:	17 82       	std	Z+7, r1	; 0x07
 528:	0e 94 af 01 	call	0x35e	; 0x35e <showLine>
		refreshLCD(lcd_buffer); /*刷新LCD*/
 52c:	2d b7       	in	r18, 0x3d	; 61
 52e:	3e b7       	in	r19, 0x3e	; 62
 530:	28 5f       	subi	r18, 0xF8	; 248
 532:	3f 4f       	sbci	r19, 0xFF	; 255
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	f8 94       	cli
 538:	3e bf       	out	0x3e, r19	; 62
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	2d bf       	out	0x3d, r18	; 61
 53e:	8e 2d       	mov	r24, r14
 540:	90 2f       	mov	r25, r16
 542:	0e 94 b3 00 	call	0x166	; 0x166 <refreshLCD>
 546:	80 e1       	ldi	r24, 0x10	; 16
 548:	97 e2       	ldi	r25, 0x27	; 39
 54a:	fe 01       	movw	r30, r28
 54c:	31 97       	sbiw	r30, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <main+0x120>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 550:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 552:	d9 f7       	brne	.-10     	; 0x54a <main+0x11e>
		tmp++;
 554:	f3 94       	inc	r15
 556:	c4 cf       	rjmp	.-120    	; 0x4e0 <main+0xb4>

00000558 <memset>:
 558:	dc 01       	movw	r26, r24
 55a:	01 c0       	rjmp	.+2      	; 0x55e <memset+0x6>
 55c:	6d 93       	st	X+, r22
 55e:	41 50       	subi	r20, 0x01	; 1
 560:	50 40       	sbci	r21, 0x00	; 0
 562:	e0 f7       	brcc	.-8      	; 0x55c <memset+0x4>
 564:	08 95       	ret

00000566 <__udivmodhi4>:
 566:	aa 1b       	sub	r26, r26
 568:	bb 1b       	sub	r27, r27
 56a:	51 e1       	ldi	r21, 0x11	; 17
 56c:	07 c0       	rjmp	.+14     	; 0x57c <__udivmodhi4_ep>

0000056e <__udivmodhi4_loop>:
 56e:	aa 1f       	adc	r26, r26
 570:	bb 1f       	adc	r27, r27
 572:	a6 17       	cp	r26, r22
 574:	b7 07       	cpc	r27, r23
 576:	10 f0       	brcs	.+4      	; 0x57c <__udivmodhi4_ep>
 578:	a6 1b       	sub	r26, r22
 57a:	b7 0b       	sbc	r27, r23

0000057c <__udivmodhi4_ep>:
 57c:	88 1f       	adc	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	5a 95       	dec	r21
 582:	a9 f7       	brne	.-22     	; 0x56e <__udivmodhi4_loop>
 584:	80 95       	com	r24
 586:	90 95       	com	r25
 588:	bc 01       	movw	r22, r24
 58a:	cd 01       	movw	r24, r26
 58c:	08 95       	ret

0000058e <_exit>:
 58e:	f8 94       	cli

00000590 <__stop_program>:
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stop_program>
