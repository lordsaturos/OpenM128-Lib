
matkey_lcd12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000005dc  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800126  00800126  00000696  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d2  00000000  00000000  000006b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000551  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d6  00000000  00000000  00000cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000620  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000211  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000324  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a6 32       	cpi	r26, 0x26	; 38
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a6 e2       	ldi	r26, 0x26	; 38
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a6 36       	cpi	r26, 0x66	; 102
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 49 02 	call	0x492	; 0x492 <main>
  c2:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <getKeyVal>:
const uint8_t getSta_[4]={0x70,0xb0,0xd0,0xe0};  

uint8_t getKeyVal()
{
    uint8_t i,j,getSta,keyVal;
	MATKEY_PORT=0xFF;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8b bb       	out	0x1b, r24	; 27
    MATKEY_DDR=0x0F;
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	8a bb       	out	0x1a, r24	; 26
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
    for(i=0;i<4;i++)              
    {               			
        MATKEY_PORT = setSta_[i];
  d6:	f9 01       	movw	r30, r18
  d8:	e3 5e       	subi	r30, 0xE3	; 227
  da:	fe 4f       	sbci	r31, 0xFE	; 254
  dc:	90 81       	ld	r25, Z
  de:	9b bb       	out	0x1b, r25	; 27
        if(MATKEY_PIN!=setSta_[i])
  e0:	89 b3       	in	r24, 0x19	; 25
  e2:	89 17       	cp	r24, r25
  e4:	99 f0       	breq	.+38     	; 0x10c <getKeyVal+0x42>
        {
            getSta=MATKEY_PIN&0xf0;
  e6:	49 b3       	in	r20, 0x19	; 25
  e8:	40 7f       	andi	r20, 0xF0	; 240
  ea:	e1 e2       	ldi	r30, 0x21	; 33
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
            for(j=0;j<4;j++)    
                if(getSta==getSta_[j])                                 
  f0:	80 81       	ld	r24, Z
  f2:	48 17       	cp	r20, r24
  f4:	39 f4       	brne	.+14     	; 0x104 <getKeyVal+0x3a>
            	{
                    keyVal=j+i*4;
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	89 2f       	mov	r24, r25
 100:	82 0f       	add	r24, r18
 102:	08 95       	ret
    {               			
        MATKEY_PORT = setSta_[i];
        if(MATKEY_PIN!=setSta_[i])
        {
            getSta=MATKEY_PIN&0xf0;
            for(j=0;j<4;j++)    
 104:	9f 5f       	subi	r25, 0xFF	; 255
 106:	31 96       	adiw	r30, 0x01	; 1
 108:	94 30       	cpi	r25, 0x04	; 4
 10a:	91 f7       	brne	.-28     	; 0xf0 <getKeyVal+0x26>
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t getKeyVal()
{
    uint8_t i,j,getSta,keyVal;
	MATKEY_PORT=0xFF;
    MATKEY_DDR=0x0F;
    for(i=0;i<4;i++)              
 110:	24 30       	cpi	r18, 0x04	; 4
 112:	31 05       	cpc	r19, r1
 114:	01 f7       	brne	.-64     	; 0xd6 <getKeyVal+0xc>
 116:	8f ef       	ldi	r24, 0xFF	; 255
                    return keyVal;
            	}
        }
    }
    return 0xFF;
}
 118:	08 95       	ret

0000011a <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 11a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 11c:	77 9b       	sbis	0x0e, 7	; 14
 11e:	fe cf       	rjmp	.-4      	; 0x11c <spiSendChar+0x2>
}
 120:	08 95       	ret

00000122 <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 122:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 124:	88 ef       	ldi	r24, 0xF8	; 248
 126:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 128:	77 9b       	sbis	0x0e, 7	; 14
 12a:	fe cf       	rjmp	.-4      	; 0x128 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 12c:	89 2f       	mov	r24, r25
 12e:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 130:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 132:	77 9b       	sbis	0x0e, 7	; 14
 134:	fe cf       	rjmp	.-4      	; 0x132 <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 136:	92 95       	swap	r25
 138:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 13a:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 13c:	77 9b       	sbis	0x0e, 7	; 14
 13e:	fe cf       	rjmp	.-4      	; 0x13c <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 140:	88 eb       	ldi	r24, 0xB8	; 184
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 146:	08 95       	ret

00000148 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 148:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 14a:	8a ef       	ldi	r24, 0xFA	; 250
 14c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 14e:	77 9b       	sbis	0x0e, 7	; 14
 150:	fe cf       	rjmp	.-4      	; 0x14e <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 152:	89 2f       	mov	r24, r25
 154:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 156:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 158:	77 9b       	sbis	0x0e, 7	; 14
 15a:	fe cf       	rjmp	.-4      	; 0x158 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 15c:	92 95       	swap	r25
 15e:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 160:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 162:	77 9b       	sbis	0x0e, 7	; 14
 164:	fe cf       	rjmp	.-4      	; 0x162 <sendDataST7920+0x1a>
 166:	88 eb       	ldi	r24, 0xB8	; 184
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 16c:	08 95       	ret

0000016e <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	6c 01       	movw	r12, r24
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 91 00 	call	0x122	; 0x122 <sendCodeST7920>
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	d0 e0       	ldi	r29, 0x00	; 0
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 18a:	f6 01       	movw	r30, r12
 18c:	ec 0f       	add	r30, r28
 18e:	fd 1f       	adc	r31, r29
 190:	80 81       	ld	r24, Z
 192:	0e 94 a4 00 	call	0x148	; 0x148 <sendDataST7920>
 196:	21 96       	adiw	r28, 0x01	; 1
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 198:	c0 31       	cpi	r28, 0x10	; 16
 19a:	d1 05       	cpc	r29, r1
 19c:	b1 f7       	brne	.-20     	; 0x18a <refreshLCD+0x1c>
 19e:	76 01       	movw	r14, r12
 1a0:	e6 01       	movw	r28, r12
 1a2:	00 e2       	ldi	r16, 0x20	; 32
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1a4:	88 a1       	ldd	r24, Y+32	; 0x20
 1a6:	0e 94 a4 00 	call	0x148	; 0x148 <sendDataST7920>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 1aa:	0f 5f       	subi	r16, 0xFF	; 255
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	00 33       	cpi	r16, 0x30	; 48
 1b0:	c9 f7       	brne	.-14     	; 0x1a4 <refreshLCD+0x36>
 1b2:	10 e1       	ldi	r17, 0x10	; 16
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1b4:	f7 01       	movw	r30, r14
 1b6:	80 89       	ldd	r24, Z+16	; 0x10
 1b8:	0e 94 a4 00 	call	0x148	; 0x148 <sendDataST7920>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 1bc:	1f 5f       	subi	r17, 0xFF	; 255
 1be:	08 94       	sec
 1c0:	e1 1c       	adc	r14, r1
 1c2:	f1 1c       	adc	r15, r1
 1c4:	10 32       	cpi	r17, 0x20	; 32
 1c6:	b1 f7       	brne	.-20     	; 0x1b4 <refreshLCD+0x46>
 1c8:	e6 01       	movw	r28, r12
 1ca:	e0 96       	adiw	r28, 0x30	; 48
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1cc:	89 91       	ld	r24, Y+
 1ce:	0e 94 a4 00 	call	0x148	; 0x148 <sendDataST7920>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 1d2:	0f 5f       	subi	r16, 0xFF	; 255
 1d4:	00 34       	cpi	r16, 0x40	; 64
 1d6:	d1 f7       	brne	.-12     	; 0x1cc <refreshLCD+0x5e>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	cf 90       	pop	r12
 1e8:	08 95       	ret

000001ea <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 1ea:	1f 93       	push	r17
 1ec:	fc 01       	movw	r30, r24
 1ee:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 1f0:	10 e3       	ldi	r17, 0x30	; 48
 1f2:	43 c0       	rjmp	.+134    	; 0x27a <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 1f4:	43 30       	cpi	r20, 0x03	; 3
 1f6:	21 f1       	breq	.+72     	; 0x240 <decToAscii+0x56>
 1f8:	44 30       	cpi	r20, 0x04	; 4
 1fa:	28 f4       	brcc	.+10     	; 0x206 <decToAscii+0x1c>
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	b1 f1       	breq	.+108    	; 0x26c <decToAscii+0x82>
 200:	42 30       	cpi	r20, 0x02	; 2
 202:	c1 f5       	brne	.+112    	; 0x274 <decToAscii+0x8a>
 204:	28 c0       	rjmp	.+80     	; 0x256 <decToAscii+0x6c>
 206:	44 30       	cpi	r20, 0x04	; 4
 208:	69 f0       	breq	.+26     	; 0x224 <decToAscii+0x3a>
 20a:	45 30       	cpi	r20, 0x05	; 5
 20c:	99 f5       	brne	.+102    	; 0x274 <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 20e:	c9 01       	movw	r24, r18
 210:	60 e1       	ldi	r22, 0x10	; 16
 212:	77 e2       	ldi	r23, 0x27	; 39
 214:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__udivmodhi4>
 218:	60 5d       	subi	r22, 0xD0	; 208
 21a:	60 83       	st	Z, r22
				dec%=10000;
 21c:	c9 01       	movw	r24, r18
 21e:	60 e1       	ldi	r22, 0x10	; 16
 220:	77 e2       	ldi	r23, 0x27	; 39
 222:	0a c0       	rjmp	.+20     	; 0x238 <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 224:	c9 01       	movw	r24, r18
 226:	68 ee       	ldi	r22, 0xE8	; 232
 228:	73 e0       	ldi	r23, 0x03	; 3
 22a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__udivmodhi4>
 22e:	60 5d       	subi	r22, 0xD0	; 208
 230:	60 83       	st	Z, r22
				dec%=1000;
 232:	c9 01       	movw	r24, r18
 234:	68 ee       	ldi	r22, 0xE8	; 232
 236:	73 e0       	ldi	r23, 0x03	; 3
 238:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__udivmodhi4>
 23c:	9c 01       	movw	r18, r24
 23e:	1b c0       	rjmp	.+54     	; 0x276 <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 240:	c9 01       	movw	r24, r18
 242:	64 e6       	ldi	r22, 0x64	; 100
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__udivmodhi4>
 24a:	60 5d       	subi	r22, 0xD0	; 208
 24c:	60 83       	st	Z, r22
				dec%=100;
 24e:	c9 01       	movw	r24, r18
 250:	64 e6       	ldi	r22, 0x64	; 100
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	f1 cf       	rjmp	.-30     	; 0x238 <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 256:	c9 01       	movw	r24, r18
 258:	6a e0       	ldi	r22, 0x0A	; 10
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__udivmodhi4>
 260:	60 5d       	subi	r22, 0xD0	; 208
 262:	60 83       	st	Z, r22
				dec%=10;
 264:	c9 01       	movw	r24, r18
 266:	6a e0       	ldi	r22, 0x0A	; 10
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	e6 cf       	rjmp	.-52     	; 0x238 <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 26c:	20 5d       	subi	r18, 0xD0	; 208
 26e:	20 83       	st	Z, r18
 270:	20 53       	subi	r18, 0x30	; 48
 272:	01 c0       	rjmp	.+2      	; 0x276 <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 274:	10 83       	st	Z, r17
		}
		width--;
 276:	41 50       	subi	r20, 0x01	; 1
		str++;
 278:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 27a:	44 23       	and	r20, r20
 27c:	09 f0       	breq	.+2      	; 0x280 <decToAscii+0x96>
 27e:	ba cf       	rjmp	.-140    	; 0x1f4 <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 280:	1f 91       	pop	r17
 282:	08 95       	ret

00000284 <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 284:	cf 92       	push	r12
 286:	df 92       	push	r13
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 296:	eb 01       	movw	r28, r22
 298:	cd 2f       	mov	r28, r29
 29a:	dd 27       	eor	r29, r29
 29c:	c2 95       	swap	r28
 29e:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 2a0:	27 e3       	ldi	r18, 0x37	; 55
 2a2:	d2 2e       	mov	r13, r18
 2a4:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 2a6:	90 e3       	ldi	r25, 0x30	; 48
 2a8:	e9 2e       	mov	r14, r25
 2aa:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 2ac:	a7 2f       	mov	r26, r23
 2ae:	bb 27       	eor	r27, r27
 2b0:	af 70       	andi	r26, 0x0F	; 15
 2b2:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 2b4:	17 e3       	ldi	r17, 0x37	; 55
 2b6:	f1 2e       	mov	r15, r17
 2b8:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 2ba:	0a 2f       	mov	r16, r26
 2bc:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 2be:	9b 01       	movw	r18, r22
 2c0:	54 e0       	ldi	r21, 0x04	; 4
 2c2:	36 95       	lsr	r19
 2c4:	27 95       	ror	r18
 2c6:	5a 95       	dec	r21
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <hexToAscii+0x3e>
 2ca:	2f 70       	andi	r18, 0x0F	; 15
 2cc:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 2ce:	82 2f       	mov	r24, r18
 2d0:	12 2f       	mov	r17, r18
 2d2:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 2d4:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 2d6:	90 e3       	ldi	r25, 0x30	; 48
 2d8:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 2da:	6f 70       	andi	r22, 0x0F	; 15
 2dc:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 2de:	56 2f       	mov	r21, r22
 2e0:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2e2:	96 2f       	mov	r25, r22
 2e4:	99 5c       	subi	r25, 0xC9	; 201
 2e6:	2a c0       	rjmp	.+84     	; 0x33c <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 2e8:	42 30       	cpi	r20, 0x02	; 2
 2ea:	b9 f0       	breq	.+46     	; 0x31a <hexToAscii+0x96>
 2ec:	43 30       	cpi	r20, 0x03	; 3
 2ee:	18 f4       	brcc	.+6      	; 0x2f6 <hexToAscii+0x72>
 2f0:	41 30       	cpi	r20, 0x01	; 1
 2f2:	09 f5       	brne	.+66     	; 0x336 <hexToAscii+0xb2>
 2f4:	19 c0       	rjmp	.+50     	; 0x328 <hexToAscii+0xa4>
 2f6:	43 30       	cpi	r20, 0x03	; 3
 2f8:	49 f0       	breq	.+18     	; 0x30c <hexToAscii+0x88>
 2fa:	44 30       	cpi	r20, 0x04	; 4
 2fc:	e1 f4       	brne	.+56     	; 0x336 <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 2fe:	ca 30       	cpi	r28, 0x0A	; 10
 300:	d1 05       	cpc	r29, r1
 302:	10 f0       	brcs	.+4      	; 0x308 <hexToAscii+0x84>
 304:	d0 82       	st	Z, r13
 306:	18 c0       	rjmp	.+48     	; 0x338 <hexToAscii+0xb4>
				else *str = tmp+'0';
 308:	e0 82       	st	Z, r14
 30a:	16 c0       	rjmp	.+44     	; 0x338 <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 30c:	aa 30       	cpi	r26, 0x0A	; 10
 30e:	b1 05       	cpc	r27, r1
 310:	10 f0       	brcs	.+4      	; 0x316 <hexToAscii+0x92>
 312:	f0 82       	st	Z, r15
 314:	11 c0       	rjmp	.+34     	; 0x338 <hexToAscii+0xb4>
				else *str = tmp+'0';
 316:	00 83       	st	Z, r16
 318:	0f c0       	rjmp	.+30     	; 0x338 <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 31a:	2a 30       	cpi	r18, 0x0A	; 10
 31c:	31 05       	cpc	r19, r1
 31e:	10 f0       	brcs	.+4      	; 0x324 <hexToAscii+0xa0>
 320:	10 83       	st	Z, r17
 322:	0a c0       	rjmp	.+20     	; 0x338 <hexToAscii+0xb4>
				else *str = tmp+'0';
 324:	80 83       	st	Z, r24
 326:	08 c0       	rjmp	.+16     	; 0x338 <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 328:	6a 30       	cpi	r22, 0x0A	; 10
 32a:	71 05       	cpc	r23, r1
 32c:	10 f0       	brcs	.+4      	; 0x332 <hexToAscii+0xae>
 32e:	90 83       	st	Z, r25
 330:	03 c0       	rjmp	.+6      	; 0x338 <hexToAscii+0xb4>
				else *str = tmp+'0';
 332:	50 83       	st	Z, r21
 334:	01 c0       	rjmp	.+2      	; 0x338 <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 336:	c0 82       	st	Z, r12
		}
		width--;
 338:	41 50       	subi	r20, 0x01	; 1
		str++;
 33a:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 33c:	44 23       	and	r20, r20
 33e:	a1 f6       	brne	.-88     	; 0x2e8 <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	df 90       	pop	r13
 34e:	cf 90       	pop	r12
 350:	08 95       	ret

00000352 <st7920LcdInit>:
#define CLR_CS_LCD() cbi(PORTB,4)
#define OUT_CS_LCD() sbi(DDRB,4)

void st7920LcdInit(void)
{
DDRB|=0x07;
 352:	87 b3       	in	r24, 0x17	; 23
 354:	87 60       	ori	r24, 0x07	; 7
 356:	87 bb       	out	0x17, r24	; 23
PORTB&=0xF8;
 358:	88 b3       	in	r24, 0x18	; 24
 35a:	88 7f       	andi	r24, 0xF8	; 248
 35c:	88 bb       	out	0x18, r24	; 24
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 35e:	80 e5       	ldi	r24, 0x50	; 80
 360:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	8e b9       	out	0x0e, r24	; 14
sendCodeST7920(0x0C);//整体显示
 366:	8c e0       	ldi	r24, 0x0C	; 12
 368:	0e 94 91 00 	call	0x122	; 0x122 <sendCodeST7920>
sendCodeST7920(0x01);//清屏
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 91 00 	call	0x122	; 0x122 <sendCodeST7920>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 372:	86 e6       	ldi	r24, 0x66	; 102
 374:	9e e0       	ldi	r25, 0x0E	; 14
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <st7920LcdInit+0x24>
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 37a:	86 e2       	ldi	r24, 0x26	; 38
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	60 e2       	ldi	r22, 0x20	; 32
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	40 e4       	ldi	r20, 0x40	; 64
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	0e 94 e5 02 	call	0x5ca	; 0x5ca <memset>
}
 38a:	08 95       	ret

0000038c <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 38c:	af 92       	push	r10
 38e:	bf 92       	push	r11
 390:	cf 92       	push	r12
 392:	df 92       	push	r13
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	df 93       	push	r29
 39c:	cf 93       	push	r28
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	0d 85       	ldd	r16, Y+13	; 0x0d
 3a4:	ae 84       	ldd	r10, Y+14	; 0x0e
 3a6:	bf 84       	ldd	r11, Y+15	; 0x0f
 3a8:	e8 88       	ldd	r14, Y+16	; 0x10
 3aa:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 3ac:	02 95       	swap	r16
 3ae:	00 7f       	andi	r16, 0xF0	; 240
 3b0:	8c 85       	ldd	r24, Y+12	; 0x0c
 3b2:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 3b4:	de 01       	movw	r26, r28
 3b6:	52 96       	adiw	r26, 0x12	; 18
 3b8:	5d c0       	rjmp	.+186    	; 0x474 <showLine+0xe8>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 3ba:	01 34       	cpi	r16, 0x41	; 65
 3bc:	08 f0       	brcs	.+2      	; 0x3c0 <showLine+0x34>
 3be:	5f c0       	rjmp	.+190    	; 0x47e <showLine+0xf2>

		if(*str == '\\')
 3c0:	8c 35       	cpi	r24, 0x5C	; 92
 3c2:	51 f4       	brne	.+20     	; 0x3d8 <showLine+0x4c>
		{
			str++;
 3c4:	08 94       	sec
 3c6:	e1 1c       	adc	r14, r1
 3c8:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 3ca:	95 01       	movw	r18, r10
 3cc:	20 0f       	add	r18, r16
 3ce:	31 1d       	adc	r19, r1
 3d0:	f7 01       	movw	r30, r14
 3d2:	80 81       	ld	r24, Z
 3d4:	f9 01       	movw	r30, r18
 3d6:	49 c0       	rjmp	.+146    	; 0x46a <showLine+0xde>
		}
		else if(*str == '%')
 3d8:	85 32       	cpi	r24, 0x25	; 37
 3da:	09 f0       	breq	.+2      	; 0x3de <showLine+0x52>
 3dc:	43 c0       	rjmp	.+134    	; 0x464 <showLine+0xd8>
		{
			str++;
 3de:	08 94       	sec
 3e0:	e1 1c       	adc	r14, r1
 3e2:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 3e4:	f7 01       	movw	r30, r14
 3e6:	80 81       	ld	r24, Z
 3e8:	84 36       	cpi	r24, 0x64	; 100
 3ea:	11 f0       	breq	.+4      	; 0x3f0 <showLine+0x64>
 3ec:	84 34       	cpi	r24, 0x44	; 68
 3ee:	99 f4       	brne	.+38     	; 0x416 <showLine+0x8a>
			{
				str++;
 3f0:	08 94       	sec
 3f2:	e1 1c       	adc	r14, r1
 3f4:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3f6:	52 e0       	ldi	r21, 0x02	; 2
 3f8:	c5 2e       	mov	r12, r21
 3fa:	d1 2c       	mov	r13, r1
 3fc:	ca 0e       	add	r12, r26
 3fe:	db 1e       	adc	r13, r27
 400:	6d 91       	ld	r22, X+
 402:	7c 91       	ld	r23, X
 404:	f7 01       	movw	r30, r14
 406:	40 81       	ld	r20, Z
 408:	40 53       	subi	r20, 0x30	; 48
 40a:	c5 01       	movw	r24, r10
 40c:	80 0f       	add	r24, r16
 40e:	91 1d       	adc	r25, r1
 410:	0e 94 f5 00 	call	0x1ea	; 0x1ea <decToAscii>
 414:	21 c0       	rjmp	.+66     	; 0x458 <showLine+0xcc>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 416:	83 36       	cpi	r24, 0x63	; 99
 418:	11 f0       	breq	.+4      	; 0x41e <showLine+0x92>
 41a:	83 34       	cpi	r24, 0x43	; 67
 41c:	39 f4       	brne	.+14     	; 0x42c <showLine+0xa0>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 41e:	f5 01       	movw	r30, r10
 420:	e0 0f       	add	r30, r16
 422:	f1 1d       	adc	r31, r1
 424:	8c 91       	ld	r24, X
 426:	80 83       	st	Z, r24
 428:	12 96       	adiw	r26, 0x02	; 2
 42a:	20 c0       	rjmp	.+64     	; 0x46c <showLine+0xe0>
			}
			else if(*str=='x'||*str=='X')
 42c:	88 37       	cpi	r24, 0x78	; 120
 42e:	11 f0       	breq	.+4      	; 0x434 <showLine+0xa8>
 430:	88 35       	cpi	r24, 0x58	; 88
 432:	e1 f4       	brne	.+56     	; 0x46c <showLine+0xe0>
			{
				str++;
 434:	08 94       	sec
 436:	e1 1c       	adc	r14, r1
 438:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 43a:	42 e0       	ldi	r20, 0x02	; 2
 43c:	c4 2e       	mov	r12, r20
 43e:	d1 2c       	mov	r13, r1
 440:	ca 0e       	add	r12, r26
 442:	db 1e       	adc	r13, r27
 444:	6d 91       	ld	r22, X+
 446:	7c 91       	ld	r23, X
 448:	f7 01       	movw	r30, r14
 44a:	40 81       	ld	r20, Z
 44c:	40 53       	subi	r20, 0x30	; 48
 44e:	c5 01       	movw	r24, r10
 450:	80 0f       	add	r24, r16
 452:	91 1d       	adc	r25, r1
 454:	0e 94 42 01 	call	0x284	; 0x284 <hexToAscii>
				coordinate+=(*str-'0'-1);
 458:	01 53       	subi	r16, 0x31	; 49
 45a:	f7 01       	movw	r30, r14
 45c:	80 81       	ld	r24, Z
 45e:	08 0f       	add	r16, r24
 460:	d6 01       	movw	r26, r12
 462:	04 c0       	rjmp	.+8      	; 0x46c <showLine+0xe0>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 464:	f5 01       	movw	r30, r10
 466:	e0 0f       	add	r30, r16
 468:	f1 1d       	adc	r31, r1
 46a:	80 83       	st	Z, r24
		}
		str++;
 46c:	08 94       	sec
 46e:	e1 1c       	adc	r14, r1
 470:	f1 1c       	adc	r15, r1
		coordinate++;
 472:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 474:	f7 01       	movw	r30, r14
 476:	80 81       	ld	r24, Z
 478:	88 23       	and	r24, r24
 47a:	09 f0       	breq	.+2      	; 0x47e <showLine+0xf2>
 47c:	9e cf       	rjmp	.-196    	; 0x3ba <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 47e:	cf 91       	pop	r28
 480:	df 91       	pop	r29
 482:	0f 91       	pop	r16
 484:	ff 90       	pop	r15
 486:	ef 90       	pop	r14
 488:	df 90       	pop	r13
 48a:	cf 90       	pop	r12
 48c:	bf 90       	pop	r11
 48e:	af 90       	pop	r10
 490:	08 95       	ret

00000492 <main>:
#include <avr/io.h>
#include <ws_matkey_port.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 492:	af 92       	push	r10
 494:	bf 92       	push	r11
 496:	cf 92       	push	r12
 498:	df 92       	push	r13
 49a:	ef 92       	push	r14
 49c:	ff 92       	push	r15
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
	uint8_t tmp1=0,tmp2=0;
	st7920LcdInit(); 
 4a6:	0e 94 a9 01 	call	0x352	; 0x352 <st7920LcdInit>
	showLine(0,0,lcd_buffer,"矩阵式键盘试验");
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <main+0x1a>
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <main+0x1c>
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <main+0x1e>
 4b0:	ed b7       	in	r30, 0x3d	; 61
 4b2:	fe b7       	in	r31, 0x3e	; 62
 4b4:	31 96       	adiw	r30, 0x01	; 1
 4b6:	ad b7       	in	r26, 0x3d	; 61
 4b8:	be b7       	in	r27, 0x3e	; 62
 4ba:	11 96       	adiw	r26, 0x01	; 1
 4bc:	1c 92       	st	X, r1
 4be:	11 82       	std	Z+1, r1	; 0x01
 4c0:	06 e2       	ldi	r16, 0x26	; 38
 4c2:	11 e0       	ldi	r17, 0x01	; 1
 4c4:	13 83       	std	Z+3, r17	; 0x03
 4c6:	02 83       	std	Z+2, r16	; 0x02
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	95 83       	std	Z+5, r25	; 0x05
 4ce:	84 83       	std	Z+4, r24	; 0x04
 4d0:	0e 94 c6 01 	call	0x38c	; 0x38c <showLine>
	showLine(0,1,lcd_buffer,"键值：");
 4d4:	ed b7       	in	r30, 0x3d	; 61
 4d6:	fe b7       	in	r31, 0x3e	; 62
 4d8:	31 96       	adiw	r30, 0x01	; 1
 4da:	ad b7       	in	r26, 0x3d	; 61
 4dc:	be b7       	in	r27, 0x3e	; 62
 4de:	11 96       	adiw	r26, 0x01	; 1
 4e0:	1c 92       	st	X, r1
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	81 83       	std	Z+1, r24	; 0x01
 4e6:	13 83       	std	Z+3, r17	; 0x03
 4e8:	02 83       	std	Z+2, r16	; 0x02
 4ea:	8f e0       	ldi	r24, 0x0F	; 15
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	95 83       	std	Z+5, r25	; 0x05
 4f0:	84 83       	std	Z+4, r24	; 0x04
 4f2:	0e 94 c6 01 	call	0x38c	; 0x38c <showLine>
 4f6:	ff 24       	eor	r15, r15
 4f8:	8d b7       	in	r24, 0x3d	; 61
 4fa:	9e b7       	in	r25, 0x3e	; 62
 4fc:	06 96       	adiw	r24, 0x06	; 6
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	f8 94       	cli
 502:	9e bf       	out	0x3e, r25	; 62
 504:	0f be       	out	0x3f, r0	; 63
 506:	8d bf       	out	0x3d, r24	; 61
 508:	e0 2e       	mov	r14, r16
 50a:	01 2f       	mov	r16, r17
	{
		tmp1=getKeyVal();
		if(tmp1!=tmp2)
		{
			if(tmp1==0xFF) showLine(6,1,lcd_buffer,"  ");
			else showLine(6,1,lcd_buffer,"%d2",tmp1);
 50c:	76 e0       	ldi	r23, 0x06	; 6
 50e:	a7 2e       	mov	r10, r23
 510:	bb 24       	eor	r11, r11
 512:	b3 94       	inc	r11
 514:	69 e1       	ldi	r22, 0x19	; 25
 516:	c6 2e       	mov	r12, r22
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	d6 2e       	mov	r13, r22
	while(1)
	{
		tmp1=getKeyVal();
		if(tmp1!=tmp2)
		{
			if(tmp1==0xFF) showLine(6,1,lcd_buffer,"  ");
 51c:	c6 e1       	ldi	r28, 0x16	; 22
 51e:	d1 e0       	ldi	r29, 0x01	; 1
 520:	01 c0       	rjmp	.+2      	; 0x524 <main+0x92>
int main(void)
{
	uint8_t tmp1=0,tmp2=0;
	st7920LcdInit(); 
	showLine(0,0,lcd_buffer,"矩阵式键盘试验");
	showLine(0,1,lcd_buffer,"键值：");
 522:	f1 2e       	mov	r15, r17
	while(1)
	{
		tmp1=getKeyVal();
 524:	0e 94 65 00 	call	0xca	; 0xca <getKeyVal>
 528:	18 2f       	mov	r17, r24
		if(tmp1!=tmp2)
 52a:	8f 15       	cp	r24, r15
 52c:	d1 f3       	breq	.-12     	; 0x522 <main+0x90>
		{
			if(tmp1==0xFF) showLine(6,1,lcd_buffer,"  ");
 52e:	8f 3f       	cpi	r24, 0xFF	; 255
 530:	a9 f4       	brne	.+42     	; 0x55c <main+0xca>
 532:	00 d0       	rcall	.+0      	; 0x534 <main+0xa2>
 534:	00 d0       	rcall	.+0      	; 0x536 <main+0xa4>
 536:	00 d0       	rcall	.+0      	; 0x538 <main+0xa6>
 538:	ed b7       	in	r30, 0x3d	; 61
 53a:	fe b7       	in	r31, 0x3e	; 62
 53c:	31 96       	adiw	r30, 0x01	; 1
 53e:	ad b7       	in	r26, 0x3d	; 61
 540:	be b7       	in	r27, 0x3e	; 62
 542:	11 96       	adiw	r26, 0x01	; 1
 544:	ac 92       	st	X, r10
 546:	b1 82       	std	Z+1, r11	; 0x01
 548:	e2 82       	std	Z+2, r14	; 0x02
 54a:	03 83       	std	Z+3, r16	; 0x03
 54c:	d5 83       	std	Z+5, r29	; 0x05
 54e:	c4 83       	std	Z+4, r28	; 0x04
 550:	0e 94 c6 01 	call	0x38c	; 0x38c <showLine>
 554:	8d b7       	in	r24, 0x3d	; 61
 556:	9e b7       	in	r25, 0x3e	; 62
 558:	06 96       	adiw	r24, 0x06	; 6
 55a:	19 c0       	rjmp	.+50     	; 0x58e <main+0xfc>
			else showLine(6,1,lcd_buffer,"%d2",tmp1);
 55c:	ad b7       	in	r26, 0x3d	; 61
 55e:	be b7       	in	r27, 0x3e	; 62
 560:	18 97       	sbiw	r26, 0x08	; 8
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	be bf       	out	0x3e, r27	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	ad bf       	out	0x3d, r26	; 61
 56c:	ed b7       	in	r30, 0x3d	; 61
 56e:	fe b7       	in	r31, 0x3e	; 62
 570:	31 96       	adiw	r30, 0x01	; 1
 572:	11 96       	adiw	r26, 0x01	; 1
 574:	ac 92       	st	X, r10
 576:	b1 82       	std	Z+1, r11	; 0x01
 578:	e2 82       	std	Z+2, r14	; 0x02
 57a:	03 83       	std	Z+3, r16	; 0x03
 57c:	d5 82       	std	Z+5, r13	; 0x05
 57e:	c4 82       	std	Z+4, r12	; 0x04
 580:	86 83       	std	Z+6, r24	; 0x06
 582:	17 82       	std	Z+7, r1	; 0x07
 584:	0e 94 c6 01 	call	0x38c	; 0x38c <showLine>
 588:	8d b7       	in	r24, 0x3d	; 61
 58a:	9e b7       	in	r25, 0x3e	; 62
 58c:	08 96       	adiw	r24, 0x08	; 8
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	9e bf       	out	0x3e, r25	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	8d bf       	out	0x3d, r24	; 61
			refreshLCD(lcd_buffer); 
 598:	86 e2       	ldi	r24, 0x26	; 38
 59a:	91 e0       	ldi	r25, 0x01	; 1
 59c:	0e 94 b7 00 	call	0x16e	; 0x16e <refreshLCD>
 5a0:	c0 cf       	rjmp	.-128    	; 0x522 <main+0x90>

000005a2 <__udivmodhi4>:
 5a2:	aa 1b       	sub	r26, r26
 5a4:	bb 1b       	sub	r27, r27
 5a6:	51 e1       	ldi	r21, 0x11	; 17
 5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <__udivmodhi4_ep>

000005aa <__udivmodhi4_loop>:
 5aa:	aa 1f       	adc	r26, r26
 5ac:	bb 1f       	adc	r27, r27
 5ae:	a6 17       	cp	r26, r22
 5b0:	b7 07       	cpc	r27, r23
 5b2:	10 f0       	brcs	.+4      	; 0x5b8 <__udivmodhi4_ep>
 5b4:	a6 1b       	sub	r26, r22
 5b6:	b7 0b       	sbc	r27, r23

000005b8 <__udivmodhi4_ep>:
 5b8:	88 1f       	adc	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	5a 95       	dec	r21
 5be:	a9 f7       	brne	.-22     	; 0x5aa <__udivmodhi4_loop>
 5c0:	80 95       	com	r24
 5c2:	90 95       	com	r25
 5c4:	bc 01       	movw	r22, r24
 5c6:	cd 01       	movw	r24, r26
 5c8:	08 95       	ret

000005ca <memset>:
 5ca:	dc 01       	movw	r26, r24
 5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <memset+0x6>
 5ce:	6d 93       	st	X+, r22
 5d0:	41 50       	subi	r20, 0x01	; 1
 5d2:	50 40       	sbci	r21, 0x00	; 0
 5d4:	e0 f7       	brcc	.-8      	; 0x5ce <memset+0x4>
 5d6:	08 95       	ret

000005d8 <_exit>:
 5d8:	f8 94       	cli

000005da <__stop_program>:
 5da:	ff cf       	rjmp	.-2      	; 0x5da <__stop_program>
