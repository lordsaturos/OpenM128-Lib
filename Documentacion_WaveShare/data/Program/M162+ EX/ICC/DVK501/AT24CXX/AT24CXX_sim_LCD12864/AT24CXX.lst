Interrupt Vectors
    00000 940C 004C JMP	__text_start|__start

Program Code (text area)
__text_start|__start:
    0004C EFCF      LDI	R28,0xFF
    0004D E0D4      LDI	R29,4
    0004E BFCD      OUT	0x3D,R28
    0004F BFDE      OUT	0x3E,R29
    00050 51C0      SUBI	R28,0x10
    00051 40D0      SBCI	R29,0
    00052 EA0A      LDI	R16,0xAA
    00053 8308      ST	Y,R16
    00054 2400      CLR	R0
    00055 E2E8      LDI	R30,0x28
    00056 E0F1      LDI	R31,1
    00057 E011      LDI	R17,1
    00058 32EE      CPI	R30,0x2E
    00059 07F1      CPC	R31,R17
    0005A F011      BEQ	0x005D
    0005B 9201      ST	Z+,R0
    0005C CFFB      RJMP	0x0058
    0005D 8300      ST	Z,R16
    0005E E7E0      LDI	R30,0x70
    0005F E0F0      LDI	R31,0
    00060 E0A0      LDI	R26,0
    00061 E0B1      LDI	R27,1
    00062 E010      LDI	R17,0
    00063 E000      LDI	R16,0
    00064 BF0B      OUT	0x3B,R16
    00065 39E8      CPI	R30,0x98
    00066 07F1      CPC	R31,R17
    00067 F021      BEQ	0x006C
    00068 95C8      LPM
    00069 9631      ADIW	R30,1
    0006A 920D      ST	X+,R0
    0006B CFF9      RJMP	0x0065
    0006C 940E 03AD CALL	_main
_exit:
    0006E CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0006F 940E 03EC CALL	push_arg4
    00071 940E 04CA CALL	push_xgsetF03C
    00073 9728      SBIW	R28,0x8
    00074 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00075 24AA      CLR	R10
    00076 E081      LDI	R24,1
    00077 8388      ST	Y,R24
    00078 E080      LDI	R24,0
    00079 8389      STD	Y+1,R24
    0007A 838A      STD	Y+2,R24
    0007B 838B      STD	Y+3,R24
    0007C C03C      RJMP	0x00B9
(0120)     {
(0121)         y=dat/j;
    0007D 8028      LD	R2,Y
    0007E 8039      LDD	R3,Y+1
    0007F 804A      LDD	R4,Y+2
    00080 805B      LDD	R5,Y+3
    00081 8908      LDD	R16,Y+16
    00082 8919      LDD	R17,Y+17
    00083 892A      LDD	R18,Y+18
    00084 893B      LDD	R19,Y+19
    00085 925A      ST	-Y,R5
    00086 924A      ST	-Y,R4
    00087 923A      ST	-Y,R3
    00088 922A      ST	-Y,R2
    00089 940E 03F1 CALL	div32u
    0008B 830C      STD	Y+4,R16
    0008C 831D      STD	Y+5,R17
    0008D 832E      STD	Y+6,R18
    0008E 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0008F E04A      LDI	R20,0xA
    00090 E050      LDI	R21,0
    00091 E060      LDI	R22,0
    00092 E070      LDI	R23,0
    00093 810C      LDD	R16,Y+4
    00094 811D      LDD	R17,Y+5
    00095 812E      LDD	R18,Y+6
    00096 813F      LDD	R19,Y+7
    00097 937A      ST	-Y,R23
    00098 936A      ST	-Y,R22
    00099 935A      ST	-Y,R21
    0009A 934A      ST	-Y,R20
    0009B 940E 03F3 CALL	mod32u
    0009D E288      LDI	R24,0x28
    0009E E091      LDI	R25,1
    0009F 2DEA      MOV	R30,R10
    000A0 27FF      CLR	R31
    000A1 0FE8      ADD	R30,R24
    000A2 1FF9      ADC	R31,R25
    000A3 8300      ST	Z,R16
(0123)         j*=10;
    000A4 8028      LD	R2,Y
    000A5 8039      LDD	R3,Y+1
    000A6 804A      LDD	R4,Y+2
    000A7 805B      LDD	R5,Y+3
    000A8 E04A      LDI	R20,0xA
    000A9 E050      LDI	R21,0
    000AA E060      LDI	R22,0
    000AB E070      LDI	R23,0
    000AC 925A      ST	-Y,R5
    000AD 924A      ST	-Y,R4
    000AE 923A      ST	-Y,R3
    000AF 922A      ST	-Y,R2
    000B0 018A      MOVW	R16,R20
    000B1 019B      MOVW	R18,R22
    000B2 940E 045B CALL	empy32s|empy32u
    000B4 8308      ST	Y,R16
    000B5 8319      STD	Y+1,R17
    000B6 832A      STD	Y+2,R18
    000B7 833B      STD	Y+3,R19
    000B8 94A3      INC	R10
    000B9 2C2C      MOV	R2,R12
    000BA 2433      CLR	R3
    000BB FC27      SBRC	R2,7
    000BC 9430      COM	R3
    000BD 2C4A      MOV	R4,R10
    000BE 2455      CLR	R5
    000BF 1442      CP	R4,R2
    000C0 0453      CPC	R5,R3
    000C1 F40C      BGE	0x00C3
    000C2 CFBA      RJMP	0x007D
    000C3 9628      ADIW	R28,0x8
    000C4 940E 04D3 CALL	pop_xgsetF03C
    000C6 9624      ADIW	R28,4
    000C7 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    000C8 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    000C9 C007      RJMP	0x00D1
(0108)         for(j=0;j<70;j++)	
    000CA 2744      CLR	R20
    000CB C001      RJMP	0x00CD
    000CC 9543      INC	R20
    000CD 3446      CPI	R20,0x46
    000CE F3E8      BCS	0x00CC
    000CF 5001      SUBI	R16,1
    000D0 4010      SBCI	R17,0
    000D1 2422      CLR	R2
    000D2 2433      CLR	R3
    000D3 1620      CP	R2,R16
    000D4 0631      CPC	R3,R17
    000D5 F3A4      BLT	0x00CA
    000D6 9149      LD	R20,Y+
    000D7 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    000D8 934A      ST	-Y,R20
    000D9 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    000DA C013      RJMP	0x00EE
(0123) 		for(i=0;i<52642;i++)
    000DB 2744      CLR	R20
    000DC 2755      CLR	R21
    000DD C002      RJMP	0x00E0
    000DE 5F4F      SUBI	R20,0xFF
    000DF 4F5F      SBCI	R21,0xFF
    000E0 EA82      LDI	R24,0xA2
    000E1 EC9D      LDI	R25,0xCD
    000E2 E0A0      LDI	R26,0
    000E3 E0B0      LDI	R27,0
    000E4 011A      MOVW	R2,R20
    000E5 2444      CLR	R4
    000E6 2455      CLR	R5
    000E7 1628      CP	R2,R24
    000E8 0639      CPC	R3,R25
    000E9 064A      CPC	R4,R26
    000EA 065B      CPC	R5,R27
    000EB F394      BLT	0x00DE
    000EC 5001      SUBI	R16,1
    000ED 4010      SBCI	R17,0
    000EE 2422      CLR	R2
    000EF 2433      CLR	R3
    000F0 1620      CP	R2,R16
    000F1 0631      CPC	R3,R17
    000F2 F344      BLT	0x00DB
    000F3 9159      LD	R21,Y+
    000F4 9149      LD	R20,Y+
    000F5 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    000F6 934A      ST	-Y,R20
    000F7 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    000F8 2744      CLR	R20
    000F9 2755      CLR	R21
    000FA C002      RJMP	0x00FD
    000FB 5F4F      SUBI	R20,0xFF
    000FC 4F5F      SBCI	R21,0xFF
    000FD 1740      CP	R20,R16
    000FE 0751      CPC	R21,R17
    000FF F3D8      BCS	0x00FB
    00100 9159      LD	R21,Y+
    00101 9149      LD	R20,Y+
    00102 9508      RET
FILE: D:\ICC_H\LCD12864_ST7920.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 	                                                        
(0004) 目    的:   建立LCD12864_ST7920的串模式操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 	                                                                
(0008) 应用软件:   ICCAVR                                               
(0009) 	                                                                
(0010) 版    本:   Version 1.0
(0011) 	                                                                
(0012) 圆版时间:   2005-09-06
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) 
(0026) 
(0027) ----------------------------------------------------------------------
(0028) 入口参数说明：
(0029) 	//#define OUT_LCD_CS	sbi(DDRD,0)
(0030) 	//#define SET_LCD_CS	sbi(PORTD,0)
(0031) 	//#define CLR_LCD_CS	cbi(PORTD,0)
(0032) 
(0033) ----------------------------------------------------------------------
(0034) 待定参数说明：
(0035) 	
(0036) 
(0037) ----------------------------------------------------------------------	
(0038) 对外变量说明：
(0039) 
(0040) ----------------------------------------------------------------------
(0041) 对外函数说明：
(0042) 
(0043) ----------------------------------------------------------------------
(0044) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0045) 
(0046) 
(0047) /*--------------------------------------------------------------------
(0048) 接口定义：
(0049) 
(0050) LCD12864_ST7920			ATmega16
(0051) 1.GND		--------	GND
(0052) 2.VCC		--------	VCC
(0053) 3.V0		--------	V0
(0054) 4.RS(CS)	--------	VCC
(0055) 5.R/W(SID)	--------	MOSI/PB5
(0056) 6.E(SCLK)	--------	SCK/PB7
(0057) 7.D0		--------	NC
(0058) 8.D1		--------	NC
(0059) 9.D2		--------	NC
(0060) 10.D3		--------	NC
(0061) 11.D4		--------	NC
(0062) 12.D5		--------	NC
(0063) 13.D6		--------	NC
(0064) 14.D7		--------	NC
(0065) 15.PSB		--------	GND
(0066) 16.NC		--------	NC
(0067) 17.RST		--------	NC
(0068) 18.NC		--------	NC
(0069) 19.LED+		--------	VCC
(0070) 20.LED-		--------	GND
(0071) 
(0072) 说明：
(0073) （1）使用ATmega16的硬件SPI操作LCD12864_ST7920
(0074) （2）PIN4/CS接VCC，其实也可接到特定的IO口，但外部程序需要指定
(0075) --------------------------------------------------------------------*/
(0076) 
(0077) #ifndef LCD12864_ST7920_H
(0078) #define LCD12864_ST7920_H
(0079) 
(0080) #include "D:\ICC_H\CmmIcc.h"
(0081) 
(0082) void SPI_init()
(0083) {
(0084) 	DDRB |= 0xB0;
_SPI_init:
    00103 B387      IN	R24,0x17
    00104 6B80      ORI	R24,0xB0
    00105 BB87      OUT	0x17,R24
(0085) 	SPCR = 0x50;	//setup SPI
    00106 E580      LDI	R24,0x50
    00107 B98D      OUT	0x0D,R24
(0086) 	SPSR = 0x01;	//setup SPI
    00108 E081      LDI	R24,1
    00109 B98E      OUT	0x0E,R24
(0087) 	SEI();
    0010A 9478      BSET	7
    0010B 9508      RET
(0088) }
(0089) 
(0090) void lcd_wrByte(uint8 data)
(0091) {  
(0092) 	SPDR = data;        
_lcd_wrByte:
  data                 --> R16
    0010C B90F      OUT	0x0F,R16
(0093) 	while ((SPSR & 0x80) == 0);  
    0010D 9B77      SBIS	0x0E,7
    0010E CFFE      RJMP	0x010D
    0010F 9508      RET
_lcd_wrCmd:
  LC                   --> R10
  HC                   --> R12
    00110 92AA      ST	-Y,R10
    00111 92CA      ST	-Y,R12
    00112 2EA2      MOV	R10,R18
    00113 2EC0      MOV	R12,R16
(0094) }
(0095) 
(0096) void lcd_wrCmd(uint8 HC,uint8 LC)
(0097) {
(0098) 	lcd_wrByte(0xF8);
    00114 EF08      LDI	R16,0xF8
    00115 DFF6      RCALL	_lcd_wrByte
(0099) 	lcd_wrByte(HC);		//传输高四位
    00116 2D0C      MOV	R16,R12
    00117 DFF4      RCALL	_lcd_wrByte
(0100) 	lcd_wrByte(LC);		//传输低四位
    00118 2D0A      MOV	R16,R10
    00119 DFF2      RCALL	_lcd_wrByte
    0011A 90C9      LD	R12,Y+
    0011B 90A9      LD	R10,Y+
    0011C 9508      RET
_lcd_wrDat:
  LD                   --> R10
  HD                   --> R12
    0011D 92AA      ST	-Y,R10
    0011E 92CA      ST	-Y,R12
    0011F 2EA2      MOV	R10,R18
    00120 2EC0      MOV	R12,R16
(0101) }
(0102) 
(0103) void lcd_wrDat(uint8 HD,uint8 LD)
(0104) {
(0105) 	lcd_wrByte(0xFA);
    00121 EF0A      LDI	R16,0xFA
    00122 DFE9      RCALL	_lcd_wrByte
(0106) 	lcd_wrByte(HD);		//传输高四位
    00123 2D0C      MOV	R16,R12
    00124 DFE7      RCALL	_lcd_wrByte
(0107) 	lcd_wrByte(LD);		//传输低四位
    00125 2D0A      MOV	R16,R10
    00126 DFE5      RCALL	_lcd_wrByte
    00127 90C9      LD	R12,Y+
    00128 90A9      LD	R10,Y+
    00129 9508      RET
_lcd_set_xy:
  adr                  --> R20
  y                    --> R22
  x                    --> R10
    0012A 940E 04AE CALL	push_xgsetF00C
    0012C 2F62      MOV	R22,R18
    0012D 2EA0      MOV	R10,R16
(0108) } 
(0109) 
(0110) /*
(0111) x表示在第几行显示，y表示在第几列显示
(0112) */
(0113) void lcd_set_xy(uint8 x,uint8 y) 
(0114) {
(0115) 	uint8 adr;
(0116) 
(0117) 	switch(x)
    0012E 24BB      CLR	R11
    0012F 01C5      MOVW	R24,R10
    00130 3081      CPI	R24,1
    00131 E0E0      LDI	R30,0
    00132 079E      CPC	R25,R30
    00133 F069      BEQ	0x0141
    00134 3082      CPI	R24,2
    00135 E0E0      LDI	R30,0
    00136 079E      CPC	R25,R30
    00137 F061      BEQ	0x0144
    00138 3083      CPI	R24,3
    00139 E0E0      LDI	R30,0
    0013A 079E      CPC	R25,R30
    0013B F059      BEQ	0x0147
    0013C 3084      CPI	R24,4
    0013D E0E0      LDI	R30,0
    0013E 079E      CPC	R25,R30
    0013F F051      BEQ	0x014A
    00140 C00B      RJMP	0x014C
(0118) 	{
(0119) 	case 1: adr = 0x7F + y;
    00141 2F46      MOV	R20,R22
    00142 5841      SUBI	R20,0x81
(0120) 		break;		//在第1行y列显示
    00143 C008      RJMP	0x014C
(0121) 	case 2: adr = 0x8F + y;
    00144 2F46      MOV	R20,R22
    00145 5741      SUBI	R20,0x71
(0122) 		break;		//在第2行y列显示
    00146 C005      RJMP	0x014C
(0123) 	case 3: adr = 0x87 + y;
    00147 2F46      MOV	R20,R22
    00148 5749      SUBI	R20,0x79
(0124) 		break;		//在第3行y列显示
    00149 C002      RJMP	0x014C
(0125) 	case 4: adr = 0x97 + y;
    0014A 2F46      MOV	R20,R22
    0014B 5649      SUBI	R20,0x69
(0126) 		break;		//在第4行y列显示
(0127) 	default:	;
(0128) 	}
(0129) 	lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
    0014C 2F24      MOV	R18,R20
    0014D 702F      ANDI	R18,0xF
    0014E 702F      ANDI	R18,0xF
    0014F 9522      SWAP	R18
    00150 2F04      MOV	R16,R20
    00151 7F00      ANDI	R16,0xF0
    00152 DFBD      RCALL	_lcd_wrCmd
    00153 940C 04B5 JMP	pop_xgsetF00C
_lcd_putc:
  ch                   --> R20
  y                    --> R12
  x                    --> R10
    00155 940E 04BC CALL	push_xgset303C
    00157 2EC2      MOV	R12,R18
    00158 2EA0      MOV	R10,R16
    00159 814E      LDD	R20,Y+6
(0130) }
(0131) 
(0132) void lcd_putc(uint8 x,uint8 y,uint8 ch)
(0133) {
(0134) 	lcd_set_xy(x,y);
    0015A 2D2C      MOV	R18,R12
    0015B 2D0A      MOV	R16,R10
    0015C DFCD      RCALL	_lcd_set_xy
(0135) 	delay50us(20); 
    0015D E104      LDI	R16,0x14
    0015E E010      LDI	R17,0
    0015F DF68      RCALL	_delay50us
(0136) 	lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
    00160 2F24      MOV	R18,R20
    00161 702F      ANDI	R18,0xF
    00162 702F      ANDI	R18,0xF
    00163 9522      SWAP	R18
    00164 2F04      MOV	R16,R20
    00165 7F00      ANDI	R16,0xF0
    00166 DFB6      RCALL	_lcd_wrDat
    00167 940C 04C3 JMP	pop_xgset303C
_lcd_putd0:
  i                    --> R20
  length               --> R20
  dat                  --> Y,+7
  y                    --> R12
  x                    --> R10
    00169 940E 04BC CALL	push_xgset303C
    0016B 2EC2      MOV	R12,R18
    0016C 2EA0      MOV	R10,R16
    0016D 9721      SBIW	R28,1
    0016E 854B      LDD	R20,Y+11
(0137) }
(0138) 
(0139) void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
(0140) {
(0141) 	sint8 i;
(0142) 
(0143) 	speaData(dat,length);
    0016F 8348      ST	Y,R20
    00170 810F      LDD	R16,Y+7
    00171 8518      LDD	R17,Y+8
    00172 8529      LDD	R18,Y+9
    00173 853A      LDD	R19,Y+10
    00174 DEFA      RCALL	_speaData
(0144) 	lcd_set_xy(x,y);
    00175 2D2C      MOV	R18,R12
    00176 2D0A      MOV	R16,R10
    00177 DFB2      RCALL	_lcd_set_xy
(0145) 	delay50us(40);
    00178 E208      LDI	R16,0x28
    00179 E010      LDI	R17,0
    0017A DF4D      RCALL	_delay50us
(0146) 	for(i=length-1;i>=0;i--)
    0017B 5041      SUBI	R20,1
    0017C C01E      RJMP	0x019B
(0147) 	{
(0148) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    0017D E288      LDI	R24,0x28
    0017E E091      LDI	R25,1
    0017F 2FE4      MOV	R30,R20
    00180 27FF      CLR	R31
    00181 FDE7      SBRC	R30,7
    00182 95F0      COM	R31
    00183 0FE8      ADD	R30,R24
    00184 1FF9      ADC	R31,R25
    00185 8180      LD	R24,Z
    00186 2799      CLR	R25
    00187 96C0      ADIW	R24,0x30
    00188 019C      MOVW	R18,R24
    00189 702F      ANDI	R18,0xF
    0018A 7030      ANDI	R19,0
    0018B 0F22      LSL	R18
    0018C 1F33      ROL	R19
    0018D 0F22      LSL	R18
    0018E 1F33      ROL	R19
    0018F 0F22      LSL	R18
    00190 1F33      ROL	R19
    00191 0F22      LSL	R18
    00192 1F33      ROL	R19
    00193 018C      MOVW	R16,R24
    00194 7F00      ANDI	R16,0xF0
    00195 7010      ANDI	R17,0
    00196 DF86      RCALL	_lcd_wrDat
(0149) 		delay50us(40); 
    00197 E208      LDI	R16,0x28
    00198 E010      LDI	R17,0
    00199 DF2E      RCALL	_delay50us
    0019A 954A      DEC	R20
    0019B 3040      CPI	R20,0
    0019C F704      BGE	0x017D
    0019D 9621      ADIW	R28,1
    0019E 940C 04C3 JMP	pop_xgset303C
_lcd_putd:
  effectLen            --> R22
  i                    --> R20
  length               --> R10
  dat                  --> Y,+11
  y                    --> R14
  x                    --> R12
    001A0 940E 04A3 CALL	push_xgsetF0FC
    001A2 2EE2      MOV	R14,R18
    001A3 2EC0      MOV	R12,R16
    001A4 9721      SBIW	R28,1
    001A5 84AF      LDD	R10,Y+15
(0150) 	}
(0151) }
(0152) 
(0153) void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
(0154) {
(0155) 	sint8 i;
(0156) 	sint8 effectLen;
(0157) 
(0158) 	if(dat>999999)
    001A6 E38F      LDI	R24,0x3F
    001A7 E492      LDI	R25,0x42
    001A8 E0AF      LDI	R26,0xF
    001A9 E0B0      LDI	R27,0
    001AA 842B      LDD	R2,Y+11
    001AB 843C      LDD	R3,Y+12
    001AC 844D      LDD	R4,Y+13
    001AD 845E      LDD	R5,Y+14
    001AE 1582      CP	R24,R2
    001AF 0593      CPC	R25,R3
    001B0 05A4      CPC	R26,R4
    001B1 05B5      CPC	R27,R5
    001B2 F410      BCC	0x01B5
(0159) 		effectLen=7;
    001B3 E067      LDI	R22,7
    001B4 C04C      RJMP	0x0201
(0160) 	else if(dat>99999)
    001B5 E98F      LDI	R24,0x9F
    001B6 E896      LDI	R25,0x86
    001B7 E0A1      LDI	R26,1
    001B8 E0B0      LDI	R27,0
    001B9 842B      LDD	R2,Y+11
    001BA 843C      LDD	R3,Y+12
    001BB 844D      LDD	R4,Y+13
    001BC 845E      LDD	R5,Y+14
    001BD 1582      CP	R24,R2
    001BE 0593      CPC	R25,R3
    001BF 05A4      CPC	R26,R4
    001C0 05B5      CPC	R27,R5
    001C1 F410      BCC	0x01C4
(0161) 		effectLen=6;
    001C2 E066      LDI	R22,6
    001C3 C03D      RJMP	0x0201
(0162) 	else if(dat>9999)
    001C4 E08F      LDI	R24,0xF
    001C5 E297      LDI	R25,0x27
    001C6 E0A0      LDI	R26,0
    001C7 E0B0      LDI	R27,0
    001C8 842B      LDD	R2,Y+11
    001C9 843C      LDD	R3,Y+12
    001CA 844D      LDD	R4,Y+13
    001CB 845E      LDD	R5,Y+14
    001CC 1582      CP	R24,R2
    001CD 0593      CPC	R25,R3
    001CE 05A4      CPC	R26,R4
    001CF 05B5      CPC	R27,R5
    001D0 F410      BCC	0x01D3
(0163) 		effectLen=5;
    001D1 E065      LDI	R22,5
    001D2 C02E      RJMP	0x0201
(0164) 	else if(dat>999)
    001D3 EE87      LDI	R24,0xE7
    001D4 E093      LDI	R25,3
    001D5 E0A0      LDI	R26,0
    001D6 E0B0      LDI	R27,0
    001D7 842B      LDD	R2,Y+11
    001D8 843C      LDD	R3,Y+12
    001D9 844D      LDD	R4,Y+13
    001DA 845E      LDD	R5,Y+14
    001DB 1582      CP	R24,R2
    001DC 0593      CPC	R25,R3
    001DD 05A4      CPC	R26,R4
    001DE 05B5      CPC	R27,R5
    001DF F410      BCC	0x01E2
(0165) 		effectLen=4;
    001E0 E064      LDI	R22,4
    001E1 C01F      RJMP	0x0201
(0166) 	else if(dat>99)
    001E2 E683      LDI	R24,0x63
    001E3 E090      LDI	R25,0
    001E4 E0A0      LDI	R26,0
    001E5 E0B0      LDI	R27,0
    001E6 842B      LDD	R2,Y+11
    001E7 843C      LDD	R3,Y+12
    001E8 844D      LDD	R4,Y+13
    001E9 845E      LDD	R5,Y+14
    001EA 1582      CP	R24,R2
    001EB 0593      CPC	R25,R3
    001EC 05A4      CPC	R26,R4
    001ED 05B5      CPC	R27,R5
    001EE F410      BCC	0x01F1
(0167) 		effectLen=3;
    001EF E063      LDI	R22,3
    001F0 C010      RJMP	0x0201
(0168) 	else if(dat>9)
    001F1 E089      LDI	R24,0x9
    001F2 E090      LDI	R25,0
    001F3 E0A0      LDI	R26,0
    001F4 E0B0      LDI	R27,0
    001F5 842B      LDD	R2,Y+11
    001F6 843C      LDD	R3,Y+12
    001F7 844D      LDD	R4,Y+13
    001F8 845E      LDD	R5,Y+14
    001F9 1582      CP	R24,R2
    001FA 0593      CPC	R25,R3
    001FB 05A4      CPC	R26,R4
    001FC 05B5      CPC	R27,R5
    001FD F410      BCC	0x0200
(0169) 		effectLen=2;
    001FE E062      LDI	R22,2
    001FF C001      RJMP	0x0201
(0170) 	else
(0171) 		effectLen=1;
    00200 E061      LDI	R22,1
(0172) 	speaData(dat,effectLen);
    00201 8368      ST	Y,R22
    00202 850B      LDD	R16,Y+11
    00203 851C      LDD	R17,Y+12
    00204 852D      LDD	R18,Y+13
    00205 853E      LDD	R19,Y+14
    00206 DE68      RCALL	_speaData
(0173) 
(0174) 	lcd_set_xy(x,y);
    00207 2D2E      MOV	R18,R14
    00208 2D0C      MOV	R16,R12
    00209 DF20      RCALL	_lcd_set_xy
(0175) 	delay50us(40); 
    0020A E208      LDI	R16,0x28
    0020B E010      LDI	R17,0
    0020C DEBB      RCALL	_delay50us
(0176) 	if(length>effectLen)
    0020D 2E26      MOV	R2,R22
    0020E 2433      CLR	R3
    0020F FC27      SBRC	R2,7
    00210 9430      COM	R3
    00211 2C4A      MOV	R4,R10
    00212 2455      CLR	R5
    00213 1424      CP	R2,R4
    00214 0435      CPC	R3,R5
    00215 F46C      BGE	0x0223
(0177) 	{
(0178) 		for(i=length-effectLen-1;i>=0;i--)
    00216 2D44      MOV	R20,R4
    00217 1B46      SUB	R20,R22
    00218 5041      SUBI	R20,1
    00219 C007      RJMP	0x0221
(0179) 		{
(0180) 			lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
    0021A 2722      CLR	R18
    0021B E200      LDI	R16,0x20
    0021C DF00      RCALL	_lcd_wrDat
(0181) 			delay50us(40); 
    0021D E208      LDI	R16,0x28
    0021E E010      LDI	R17,0
    0021F DEA8      RCALL	_delay50us
    00220 954A      DEC	R20
    00221 3040      CPI	R20,0
    00222 F7BC      BGE	0x021A
(0182) 		}
(0183) 	}
(0184) 	for(i=effectLen-1;i>=0;i--)
    00223 2F46      MOV	R20,R22
    00224 5041      SUBI	R20,1
    00225 C01E      RJMP	0x0244
(0185) 	{
(0186) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    00226 E288      LDI	R24,0x28
    00227 E091      LDI	R25,1
    00228 2FE4      MOV	R30,R20
    00229 27FF      CLR	R31
    0022A FDE7      SBRC	R30,7
    0022B 95F0      COM	R31
    0022C 0FE8      ADD	R30,R24
    0022D 1FF9      ADC	R31,R25
    0022E 8180      LD	R24,Z
    0022F 2799      CLR	R25
    00230 96C0      ADIW	R24,0x30
    00231 019C      MOVW	R18,R24
    00232 702F      ANDI	R18,0xF
    00233 7030      ANDI	R19,0
    00234 0F22      LSL	R18
    00235 1F33      ROL	R19
    00236 0F22      LSL	R18
    00237 1F33      ROL	R19
    00238 0F22      LSL	R18
    00239 1F33      ROL	R19
    0023A 0F22      LSL	R18
    0023B 1F33      ROL	R19
    0023C 018C      MOVW	R16,R24
    0023D 7F00      ANDI	R16,0xF0
    0023E 7010      ANDI	R17,0
    0023F DEDD      RCALL	_lcd_wrDat
(0187) 		delay50us(40);
    00240 E208      LDI	R16,0x28
    00241 E010      LDI	R17,0
    00242 DE85      RCALL	_delay50us
    00243 954A      DEC	R20
    00244 3040      CPI	R20,0
    00245 F704      BGE	0x0226
    00246 9621      ADIW	R28,1
    00247 940C 0498 JMP	pop_xgsetF0FC
_lcd_puts:
  str                  --> R20
  y                    --> R12
  x                    --> R10
    00249 940E 04BC CALL	push_xgset303C
    0024B 2EC2      MOV	R12,R18
    0024C 2EA0      MOV	R10,R16
    0024D 814E      LDD	R20,Y+6
    0024E 815F      LDD	R21,Y+7
(0188) 	}
(0189) }
(0190) 
(0191) void lcd_puts(uint8 x,uint8 y,uint8 *str)
(0192) { 
(0193) 	lcd_set_xy(x,y);
    0024F 2D2C      MOV	R18,R12
    00250 2D0A      MOV	R16,R10
    00251 DED8      RCALL	_lcd_set_xy
(0194) 	delay50us(20);   
    00252 E104      LDI	R16,0x14
    00253 E010      LDI	R17,0
    00254 DE73      RCALL	_delay50us
    00255 C00F      RJMP	0x0265
(0195) 	while(*str)
(0196) 	{
(0197) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    00256 01FA      MOVW	R30,R20
    00257 8020      LD	R2,Z
    00258 2433      CLR	R3
    00259 2D22      MOV	R18,R2
    0025A 702F      ANDI	R18,0xF
    0025B 702F      ANDI	R18,0xF
    0025C 9522      SWAP	R18
    0025D 2D02      MOV	R16,R2
    0025E 7F00      ANDI	R16,0xF0
    0025F DEBD      RCALL	_lcd_wrDat
(0198) 		str++;
    00260 5F4F      SUBI	R20,0xFF
    00261 4F5F      SBCI	R21,0xFF
(0199) 		delay50us(20);
    00262 E104      LDI	R16,0x14
    00263 E010      LDI	R17,0
    00264 DE63      RCALL	_delay50us
    00265 01FA      MOVW	R30,R20
    00266 8020      LD	R2,Z
    00267 2022      TST	R2
    00268 F769      BNE	0x0256
    00269 940C 04C3 JMP	pop_xgset303C
_lcd_puts_:
  dlyMs                --> R10
  str                  --> R20
  y                    --> R14
  x                    --> R12
    0026B 940E 04A5 CALL	push_xgset30FC
    0026D 2EE2      MOV	R14,R18
    0026E 2EC0      MOV	R12,R16
    0026F 8548      LDD	R20,Y+8
    00270 8559      LDD	R21,Y+9
    00271 84AA      LDD	R10,Y+10
(0200) 	} 
(0201) }
(0202) 
(0203) void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
(0204) { 
(0205) 	lcd_set_xy(x,y);
    00272 2D2E      MOV	R18,R14
    00273 2D0C      MOV	R16,R12
    00274 DEB5      RCALL	_lcd_set_xy
(0206) 	delay50us(20);   
    00275 E104      LDI	R16,0x14
    00276 E010      LDI	R17,0
    00277 DE50      RCALL	_delay50us
    00278 C00F      RJMP	0x0288
(0207) 	while(*str)
(0208) 	{
(0209) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    00279 01FA      MOVW	R30,R20
    0027A 8020      LD	R2,Z
    0027B 2433      CLR	R3
    0027C 2D22      MOV	R18,R2
    0027D 702F      ANDI	R18,0xF
    0027E 702F      ANDI	R18,0xF
    0027F 9522      SWAP	R18
    00280 2D02      MOV	R16,R2
    00281 7F00      ANDI	R16,0xF0
    00282 DE9A      RCALL	_lcd_wrDat
(0210) 		str++;
    00283 5F4F      SUBI	R20,0xFF
    00284 4F5F      SBCI	R21,0xFF
(0211) 		delay50ms(dlyMs);
    00285 2D0A      MOV	R16,R10
    00286 2711      CLR	R17
    00287 DE50      RCALL	_delay50ms
    00288 01FA      MOVW	R30,R20
    00289 8020      LD	R2,Z
    0028A 2022      TST	R2
    0028B F769      BNE	0x0279
    0028C 940C 048F JMP	pop_xgset30FC
(0212) 	} 
(0213) }
(0214) 
(0215) void lcd_clr()
(0216) {
(0217) 	lcd_wrCmd(0x00,0x10);
_lcd_clr:
    0028E E120      LDI	R18,0x10
    0028F 2700      CLR	R16
    00290 DE7F      RCALL	_lcd_wrCmd
(0218) 	delay50us(200);
    00291 EC08      LDI	R16,0xC8
    00292 E010      LDI	R17,0
    00293 CE34      RJMP	_delay50us
(0219) }
(0220) 
(0221) void lcd_init(void)
(0222) {
(0223) 	SPI_init();	
_lcd_init:
    00294 DE6E      RCALL	_SPI_init
(0224) 	//OUT_LCD_CS;		//若LCD_CS
(0225) 	//SET_LCD_CS;		
(0226) 	delay50ms(1);
    00295 E001      LDI	R16,1
    00296 E010      LDI	R17,0
    00297 DE40      RCALL	_delay50ms
(0227) 	lcd_wrCmd(0x30,0x30);	//使用8位控制界面,使用基本指令集
    00298 E320      LDI	R18,0x30
    00299 E300      LDI	R16,0x30
    0029A DE75      RCALL	_lcd_wrCmd
(0228) 	//lcd_wrCmd(0x00,0xF0);	//整体显示ON
(0229) 	lcd_wrCmd(0x00,0xC0);	//整体显示ON
    0029B EC20      LDI	R18,0xC0
    0029C 2700      CLR	R16
    0029D DE72      RCALL	_lcd_wrCmd
(0230) 	lcd_wrCmd(0x00,0x10);	//清屏
    0029E E120      LDI	R18,0x10
    0029F 2700      CLR	R16
    002A0 DE6F      RCALL	_lcd_wrCmd
(0231) 	//lcd_wrCmd(0x10,0x00);	//光标
(0232) 	lcd_wrCmd(0x00,0x60);
    002A1 E620      LDI	R18,0x60
    002A2 2700      CLR	R16
    002A3 DE6C      RCALL	_lcd_wrCmd
(0233) 	//lcd_wrCmd(0x00,0x70);	//显示右移
(0234) 	delay50ms(1);		//不可省去！！！
    002A4 E001      LDI	R16,1
    002A5 E010      LDI	R17,0
    002A6 CE31      RJMP	_delay50ms
FILE: E:\吴泽备份\DVK501光盘内容\STK162~1.0\AT24CX~1\AT24CXX_sim_LCD12864\AT24CXX.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立使用AT24CXX的测试程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR 6.31A
(0009) 		                                                                
(0010) 版    本:   Version 1.0  for(mega169)                                                        
(0011) 		                                                                
(0012) 圆版时间:   2009-03-6
(0013) 	
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 硬件连接：将AT24CXX的硬件地址A0、A1、A2使用短路帽短接至“－”。
(0024) 		 	  DVK500				 STK162+
(0025) 				CS		---------	  VCC
(0026) 				PSB	    ---------	  GND
(0027) 				SID		---------	  PB5
(0028) 				CLK		---------	  PB7	
(0029) 				
(0030) 		 	  DVK500				 STK162+
(0031) 				VCC		---------	  VCC
(0032) 				GND		---------	  GND
(0033) 				SCK	    ---------	  PD5(SCL)
(0034) 				SDA		---------	  PD4(SDA)			
(0035) ----------------------------------------------------------------------
(0036) 实验内容：
(0037) 写入一些测试数据进EEPROM，再读出，使用LCD12864做指示，观测是否与写入一致。
(0038) ----------------------------------------------------------------------
(0039) ----------------------------------------------------------------------
(0040) 注意事项： 
(0041) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0042) （2）请详细阅读“使用必读”及相关资料。
(0043) ----------------------------------------------------------------------
(0044) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0045) 
(0046) #include <iom162v.h>
(0047) #define NO_INCLUDE_I2C_H 1
(0048) #include "D:\ICC_H\CmmICC.h"
(0049) #include "D:\ICC_H\LCD12864_ST7920.H"
(0050) 
(0051) #define LED_DDR		DDRA
(0052) #define LED_PORT	PORTA
(0053) 
(0054) void sDelay()
(0055) {
(0056)    unsigned char n=0x07;
_sDelay:
  n                    --> R16
    002A7 E007      LDI	R16,7
(0057)    while(n--);
    002A8 2E20      MOV	R2,R16
    002A9 2433      CLR	R3
    002AA 5001      SUBI	R16,1
    002AB 2022      TST	R2
    002AC F7D9      BNE	0x02A8
    002AD 9508      RET
_I2C_Start:
    002AE 9A8D      SBI	0x11,5
    002AF DFF7      RCALL	_sDelay
    002B0 9A8C      SBI	0x11,4
    002B1 DFF5      RCALL	_sDelay
    002B2 9A94      SBI	0x12,4
    002B3 DFF3      RCALL	_sDelay
    002B4 9A95      SBI	0x12,5
    002B5 DFF1      RCALL	_sDelay
    002B6 9894      CBI	0x12,4
    002B7 DFEF      RCALL	_sDelay
    002B8 9895      CBI	0x12,5
    002B9 CFED      RJMP	_sDelay
_I2C_Stop:
    002BA 9A8D      SBI	0x11,5
    002BB DFEB      RCALL	_sDelay
    002BC 9A8C      SBI	0x11,4
    002BD DFE9      RCALL	_sDelay
    002BE 9894      CBI	0x12,4
    002BF DFE7      RCALL	_sDelay
    002C0 9A95      SBI	0x12,5
    002C1 DFE5      RCALL	_sDelay
    002C2 9A94      SBI	0x12,4
    002C3 DFE3      RCALL	_sDelay
    002C4 9895      CBI	0x12,5
    002C5 CFE1      RJMP	_sDelay
_I2C_Send_DataAddr:
  I2C_n                --> R10
  wrDAdr               --> R20
    002C6 92AA      ST	-Y,R10
    002C7 934A      ST	-Y,R20
    002C8 2F40      MOV	R20,R16
    002C9 9A8D      SBI	0x11,5
    002CA DFDC      RCALL	_sDelay
    002CB 9A8C      SBI	0x11,4
    002CC DFDA      RCALL	_sDelay
    002CD 24AA      CLR	R10
    002CE C00F      RJMP	0x02DE
    002CF 2F84      MOV	R24,R20
    002D0 7880      ANDI	R24,0x80
    002D1 3880      CPI	R24,0x80
    002D2 F419      BNE	0x02D6
    002D3 9A94      SBI	0x12,4
    002D4 DFD2      RCALL	_sDelay
    002D5 C002      RJMP	0x02D8
    002D6 9894      CBI	0x12,4
    002D7 DFCF      RCALL	_sDelay
    002D8 9A95      SBI	0x12,5
    002D9 DFCD      RCALL	_sDelay
    002DA 9895      CBI	0x12,5
    002DB DFCB      RCALL	_sDelay
    002DC 0F44      LSL	R20
    002DD 94A3      INC	R10
    002DE E087      LDI	R24,7
    002DF 158A      CP	R24,R10
    002E0 F770      BCC	0x02CF
    002E1 988C      CBI	0x11,4
    002E2 DFC4      RCALL	_sDelay
    002E3 9A94      SBI	0x12,4
    002E4 DFC2      RCALL	_sDelay
    002E5 9A95      SBI	0x12,5
    002E6 DFC0      RCALL	_sDelay
    002E7 9984      SBIC	0x10,4
    002E8 CFFE      RJMP	0x02E7
    002E9 9895      CBI	0x12,5
    002EA DFBC      RCALL	_sDelay
    002EB 9149      LD	R20,Y+
    002EC 90A9      LD	R10,Y+
    002ED 9508      RET
_I2C_Read_DataAddr:
  rdDAdr               --> R20
  n                    --> R12
  bAct                 --> R10
    002EE 940E 04BC CALL	push_xgset303C
    002F0 2EA0      MOV	R10,R16
    002F1 2744      CLR	R20
    002F2 9895      CBI	0x12,5
    002F3 DFB3      RCALL	_sDelay
    002F4 9A8D      SBI	0x11,5
    002F5 DFB1      RCALL	_sDelay
    002F6 988C      CBI	0x11,4
    002F7 DFAF      RCALL	_sDelay
    002F8 24CC      CLR	R12
    002F9 C00A      RJMP	0x0304
    002FA 0F44      LSL	R20
    002FB 9A95      SBI	0x12,5
    002FC DFAA      RCALL	_sDelay
    002FD DFA9      RCALL	_sDelay
    002FE 9B84      SBIS	0x10,4
    002FF C001      RJMP	0x0301
    00300 6041      ORI	R20,1
    00301 9895      CBI	0x12,5
    00302 DFA4      RCALL	_sDelay
    00303 94C3      INC	R12
    00304 E087      LDI	R24,7
    00305 158C      CP	R24,R12
    00306 F798      BCC	0x02FA
    00307 9A8C      SBI	0x11,4
    00308 DF9E      RCALL	_sDelay
    00309 20AA      TST	R10
    0030A F019      BEQ	0x030E
    0030B 9A94      SBI	0x12,4
    0030C DF9A      RCALL	_sDelay
    0030D C002      RJMP	0x0310
    0030E 9894      CBI	0x12,4
    0030F DF97      RCALL	_sDelay
    00310 9A95      SBI	0x12,5
    00311 DF95      RCALL	_sDelay
    00312 9895      CBI	0x12,5
    00313 DF93      RCALL	_sDelay
    00314 2F04      MOV	R16,R20
    00315 940C 04C3 JMP	pop_xgset303C
_I2C_ReadBusy:
  n                    --> R10
  wrDAdr               --> R20
    00317 92AA      ST	-Y,R10
    00318 934A      ST	-Y,R20
    00319 2F40      MOV	R20,R16
    0031A 9A8D      SBI	0x11,5
    0031B DF8B      RCALL	_sDelay
    0031C 9A8C      SBI	0x11,4
    0031D DF89      RCALL	_sDelay
    0031E 24AA      CLR	R10
    0031F C00F      RJMP	0x032F
    00320 2F84      MOV	R24,R20
    00321 7880      ANDI	R24,0x80
    00322 3880      CPI	R24,0x80
    00323 F419      BNE	0x0327
    00324 9A94      SBI	0x12,4
    00325 DF81      RCALL	_sDelay
    00326 C002      RJMP	0x0329
    00327 9894      CBI	0x12,4
    00328 DF7E      RCALL	_sDelay
    00329 9A95      SBI	0x12,5
    0032A DF7C      RCALL	_sDelay
    0032B 9895      CBI	0x12,5
    0032C DF7A      RCALL	_sDelay
    0032D 0F44      LSL	R20
    0032E 94A3      INC	R10
    0032F E087      LDI	R24,7
    00330 158A      CP	R24,R10
    00331 F770      BCC	0x0320
    00332 988C      CBI	0x11,4
    00333 DF73      RCALL	_sDelay
    00334 9A94      SBI	0x12,4
    00335 DF71      RCALL	_sDelay
    00336 9A95      SBI	0x12,5
    00337 DF6F      RCALL	_sDelay
    00338 B340      IN	R20,0x10
    00339 7140      ANDI	R20,0x10
    0033A 9895      CBI	0x12,5
    0033B DF6B      RCALL	_sDelay
    0033C 2F04      MOV	R16,R20
    0033D 9149      LD	R20,Y+
    0033E 90A9      LD	R10,Y+
    0033F 9508      RET
_AT24C_wByte:
  dat                  --> R10
  wordAdr              --> R12
  AT24C_wrDAdr         --> R20
    00340 940E 04BC CALL	push_xgset303C
    00342 2EC2      MOV	R12,R18
    00343 2F40      MOV	R20,R16
    00344 80AE      LDD	R10,Y+6
    00345 0F44      LSL	R20
    00346 704E      ANDI	R20,0xE
    00347 6A40      ORI	R20,0xA0
    00348 DF65      RCALL	_I2C_Start
    00349 2F04      MOV	R16,R20
    0034A DF7B      RCALL	_I2C_Send_DataAddr
    0034B 2D0C      MOV	R16,R12
    0034C DF79      RCALL	_I2C_Send_DataAddr
    0034D 2D0A      MOV	R16,R10
    0034E DF77      RCALL	_I2C_Send_DataAddr
    0034F DF6A      RCALL	_I2C_Stop
    00350 940C 04C3 JMP	pop_xgset303C
_AT24C_wPage:
  AT24C_n              --> R10
  pWrDat               --> R12
  wordAdr              --> R10
  AT24C_wrDAdr         --> R20
    00352 940E 04BC CALL	push_xgset303C
    00354 2EA2      MOV	R10,R18
    00355 2F40      MOV	R20,R16
    00356 80CE      LDD	R12,Y+6
    00357 80DF      LDD	R13,Y+7
    00358 0F44      LSL	R20
    00359 704E      ANDI	R20,0xE
    0035A 6A40      ORI	R20,0xA0
    0035B DF52      RCALL	_I2C_Start
    0035C 2F04      MOV	R16,R20
    0035D DF68      RCALL	_I2C_Send_DataAddr
    0035E 2D0A      MOV	R16,R10
    0035F DF66      RCALL	_I2C_Send_DataAddr
    00360 24AA      CLR	R10
    00361 C007      RJMP	0x0369
    00362 2DEA      MOV	R30,R10
    00363 27FF      CLR	R31
    00364 0DEC      ADD	R30,R12
    00365 1DFD      ADC	R31,R13
    00366 8100      LD	R16,Z
    00367 DF5E      RCALL	_I2C_Send_DataAddr
    00368 94A3      INC	R10
    00369 E08F      LDI	R24,0xF
    0036A 158A      CP	R24,R10
    0036B F7B0      BCC	0x0362
    0036C DF4D      RCALL	_I2C_Stop
    0036D 940C 04C3 JMP	pop_xgset303C
_AT24C_rByte:
  wordAdr              --> R10
  AT24C_wrDAdr         --> R20
    0036F 92AA      ST	-Y,R10
    00370 934A      ST	-Y,R20
    00371 2EA2      MOV	R10,R18
    00372 2F40      MOV	R20,R16
    00373 0F44      LSL	R20
    00374 704E      ANDI	R20,0xE
    00375 6A40      ORI	R20,0xA0
    00376 DF37      RCALL	_I2C_Start
    00377 2F04      MOV	R16,R20
    00378 DF4D      RCALL	_I2C_Send_DataAddr
    00379 2D0A      MOV	R16,R10
    0037A DF4B      RCALL	_I2C_Send_DataAddr
    0037B 6041      ORI	R20,1
    0037C DF31      RCALL	_I2C_Start
    0037D 2F04      MOV	R16,R20
    0037E DF47      RCALL	_I2C_Send_DataAddr
    0037F 2700      CLR	R16
    00380 DF6D      RCALL	_I2C_Read_DataAddr
    00381 2F40      MOV	R20,R16
    00382 DF37      RCALL	_I2C_Stop
    00383 2F04      MOV	R16,R20
    00384 9149      LD	R20,Y+
    00385 90A9      LD	R10,Y+
    00386 9508      RET
_AT24C_rPage:
  num                  --> R10
  pRdDat               --> R20
  wordAdr              --> R12
  AT24C_wrDAdr         --> R22
    00387 940E 04CA CALL	push_xgsetF03C
    00389 2EC2      MOV	R12,R18
    0038A 2F60      MOV	R22,R16
    0038B 8548      LDD	R20,Y+8
    0038C 8559      LDD	R21,Y+9
    0038D 84AA      LDD	R10,Y+10
    0038E 0F66      LSL	R22
    0038F 706E      ANDI	R22,0xE
    00390 6A60      ORI	R22,0xA0
    00391 DF1C      RCALL	_I2C_Start
    00392 2F06      MOV	R16,R22
    00393 DF32      RCALL	_I2C_Send_DataAddr
    00394 2D0C      MOV	R16,R12
    00395 DF30      RCALL	_I2C_Send_DataAddr
    00396 6061      ORI	R22,1
    00397 DF16      RCALL	_I2C_Start
    00398 2F06      MOV	R16,R22
    00399 DF2C      RCALL	_I2C_Send_DataAddr
    0039A 94AA      DEC	R10
    0039B C007      RJMP	0x03A3
    0039C E001      LDI	R16,1
    0039D DF50      RCALL	_I2C_Read_DataAddr
    0039E 01FA      MOVW	R30,R20
    0039F 8300      ST	Z,R16
    003A0 5F4F      SUBI	R20,0xFF
    003A1 4F5F      SBCI	R21,0xFF
    003A2 94AA      DEC	R10
    003A3 E080      LDI	R24,0
    003A4 158A      CP	R24,R10
    003A5 F3B0      BCS	0x039C
    003A6 2700      CLR	R16
    003A7 DF46      RCALL	_I2C_Read_DataAddr
    003A8 01FA      MOVW	R30,R20
    003A9 8300      ST	Z,R16
    003AA DF0F      RCALL	_I2C_Stop
    003AB 940C 04D3 JMP	pop_xgsetF03C
_main:
  AT24                 --> Y,+6
  tmp                  --> R10
  TEST                 --> R22
  BYTE_ADDR            --> R20
  AT24CXX_DEVICE_ADDR  --> R10
    003AD 9725      SBIW	R28,5
(0058) }
(0059) 
(0060) #define DELAY_NOP  sDelay()
(0061) //SDA端口定义
(0062) #define SDA_IN		{cbi(DDRD,4);DELAY_NOP;}
(0063) #define SDA_OUT		{sbi(DDRD,4);DELAY_NOP;}
(0064) #define SDA_SET		{sbi(PORTD,4);DELAY_NOP;}
(0065) #define SDA_CLR		{cbi(PORTD,4);DELAY_NOP;}
(0066) #define SDA_PIN		gbi(PIND,4)
(0067) 
(0068) //SCL端口定义
(0069) #define SCL_IN  	{cbi(DDRD,5);DELAY_NOP;}
(0070) #define SCL_OUT		{sbi(DDRD,5);DELAY_NOP;}
(0071) #define SCL_SET		{sbi(PORTD,5);DELAY_NOP;}
(0072) #define SCL_CLR		{cbi(PORTD,5);DELAY_NOP;}
(0073) #define SCL_PIN		bi(PIND,5)
(0074) 
(0075) 
(0076) #include "D:\ICC_H\DVK501_IIC_sim.h"
(0077) #include "D:\ICC_H\AT24CXX_sim.h"
(0078) 
(0079) /*--------------------------------------------------------------------
(0080) 函数名称：
(0081) 函数功能：
(0082) 注意事项：
(0083) 提示说明：
(0084) 输    入：
(0085) 返    回：
(0086) --------------------------------------------------------------------*/
(0087) void main(void)
(0088) {
(0089) 	uchar AT24CXX_DEVICE_ADDR=0x00; //DVK的AT24C器件地址
    003AE 24AA      CLR	R10
(0090) 	uchar BYTE_ADDR=0x11; //AT24C字节地址
    003AF E141      LDI	R20,0x11
(0091) 	uchar AT24;
(0092) 	uchar TEST=123;	//测试数据
    003B0 E76B      LDI	R22,0x7B
(0093) 	uchar tmp;
(0094) 	
(0095) 	lcd_init();
    003B1 DEE2      RCALL	_lcd_init
(0096) 	lcd_clr();
    003B2 DEDB      RCALL	_lcd_clr
(0097) 	lcd_puts(1,1,"AT24CXX-LCD12864");
    003B3 E187      LDI	R24,0x17
    003B4 E091      LDI	R25,1
    003B5 8399      STD	Y+1,R25
    003B6 8388      ST	Y,R24
    003B7 E021      LDI	R18,1
    003B8 E001      LDI	R16,1
    003B9 DE8F      RCALL	_lcd_puts
(0098) 	lcd_puts(2,1,"eeprom  液晶显示");
    003BA E086      LDI	R24,6
    003BB E091      LDI	R25,1
    003BC 8399      STD	Y+1,R25
    003BD 8388      ST	Y,R24
    003BE E021      LDI	R18,1
    003BF E002      LDI	R16,2
    003C0 DE88      RCALL	_lcd_puts
(0099) 	lcd_puts(3,1,"内容:");
    003C1 E080      LDI	R24,0
    003C2 E091      LDI	R25,1
    003C3 8399      STD	Y+1,R25
    003C4 8388      ST	Y,R24
    003C5 E021      LDI	R18,1
    003C6 E003      LDI	R16,3
    003C7 DE81      RCALL	_lcd_puts
(0100) 
(0101) 
(0102) 	AT24C_wByte(AT24CXX_DEVICE_ADDR,BYTE_ADDR,TEST); //写入数据;
    003C8 8368      ST	Y,R22
    003C9 2F24      MOV	R18,R20
    003CA 2D0A      MOV	R16,R10
    003CB DF74      RCALL	_AT24C_wByte
    003CC C009      RJMP	0x03D6
(0103) 	while(1)
(0104) 	{
(0105) 	 		I2C_Start();
    003CD DEE0      RCALL	_I2C_Start
(0106) 	 		if(!I2C_ReadBusy(((AT24CXX_DEVICE_ADDR<<1)&0x0E)|0xA0)) 
    003CE 2D0A      MOV	R16,R10
    003CF 0F00      LSL	R16
    003D0 700E      ANDI	R16,0xE
    003D1 6A00      ORI	R16,0xA0
    003D2 DF44      RCALL	_I2C_ReadBusy
    003D3 2300      TST	R16
    003D4 F409      BNE	0x03D6
(0107) 			    break; //读忙
    003D5 C001      RJMP	0x03D7
    003D6 CFF6      RJMP	0x03CD
(0108) 	}
(0109) 	I2C_Stop();
    003D7 DEE2      RCALL	_I2C_Stop
(0110) 	tmp=AT24C_rByte(AT24CXX_DEVICE_ADDR,BYTE_ADDR);	  
    003D8 2F24      MOV	R18,R20
    003D9 2D0A      MOV	R16,R10
    003DA DF94      RCALL	_AT24C_rByte
    003DB 2EA0      MOV	R10,R16
(0111) 	lcd_putd(3,4,tmp,1);
    003DC E081      LDI	R24,1
    003DD 838C      STD	Y+4,R24
    003DE 2C2A      MOV	R2,R10
    003DF 2433      CLR	R3
    003E0 2444      CLR	R4
    003E1 2455      CLR	R5
    003E2 8228      ST	Y,R2
    003E3 8239      STD	Y+1,R3
    003E4 824A      STD	Y+2,R4
    003E5 825B      STD	Y+3,R5
    003E6 E024      LDI	R18,4
    003E7 E003      LDI	R16,3
    003E8 DDB7      RCALL	_lcd_putd
(0112) 	while(1);
FILE: <library>
    003E9 CFFF      RJMP	0x03E9
    003EA 9625      ADIW	R28,5
    003EB 9508      RET
push_arg4:
    003EC 933A      ST	-Y,R19
    003ED 932A      ST	-Y,R18
push_arg2:
    003EE 931A      ST	-Y,R17
    003EF 930A      ST	-Y,R16
    003F0 9508      RET
div32u:
    003F1 94E8      BCLR	6
    003F2 C001      RJMP	0x03F4
mod32u:
    003F3 9468      BSET	6
    003F4 D030      RCALL	long_div_prolog
    003F5 24CC      CLR	R12
    003F6 C009      RJMP	0x0400
div32s:
    003F7 94E8      BCLR	6
    003F8 C001      RJMP	0x03FA
mod32s:
    003F9 9468      BSET	6
    003FA D02A      RCALL	long_div_prolog
    003FB FD37      SBRC	R19,7
    003FC 940E 04DC CALL	neg32
    003FE FDB7      SBRC	R27,7
    003FF D052      RCALL	neg_R24_R27
    00400 2477      CLR	R7
    00401 2488      CLR	R8
    00402 2499      CLR	R9
    00403 24AA      CLR	R10
    00404 24BB      CLR	R11
    00405 D042      RCALL	tst_R16_R19
    00406 F0C1      BEQ	0x041F
    00407 D045      RCALL	tst_R24_R27
    00408 F0B1      BEQ	0x041F
    00409 E2E8      LDI	R30,0x28
    0040A 0F00      LSL	R16
    0040B 1F11      ROL	R17
    0040C 1F22      ROL	R18
    0040D 1F33      ROL	R19
    0040E 1C77      ROL	R7
    0040F 1C88      ROL	R8
    00410 1C99      ROL	R9
    00411 1CAA      ROL	R10
    00412 1CBB      ROL	R11
    00413 1688      CP	R8,R24
    00414 0699      CPC	R9,R25
    00415 06AA      CPC	R10,R26
    00416 06BB      CPC	R11,R27
    00417 F028      BCS	0x041D
    00418 1A88      SUB	R8,R24
    00419 0A99      SBC	R9,R25
    0041A 0AAA      SBC	R10,R26
    0041B 0ABB      SBC	R11,R27
    0041C 9503      INC	R16
    0041D 95EA      DEC	R30
    0041E F759      BNE	0x040A
    0041F F426      BRTC	0x0424
    00420 2D08      MOV	R16,R8
    00421 2D19      MOV	R17,R9
    00422 2D2A      MOV	R18,R10
    00423 2D3B      MOV	R19,R11
    00424 C013      RJMP	long_div_epilog
long_div_prolog:
    00425 927A      ST	-Y,R7
    00426 928A      ST	-Y,R8
    00427 929A      ST	-Y,R9
    00428 92AA      ST	-Y,R10
    00429 92BA      ST	-Y,R11
    0042A 92CA      ST	-Y,R12
    0042B 93EA      ST	-Y,R30
    0042C 938A      ST	-Y,R24
    0042D 939A      ST	-Y,R25
    0042E 93AA      ST	-Y,R26
    0042F 93BA      ST	-Y,R27
    00430 858B      LDD	R24,Y+11
    00431 859C      LDD	R25,Y+12
    00432 85AD      LDD	R26,Y+13
    00433 85BE      LDD	R27,Y+14
    00434 2EC3      MOV	R12,R19
    00435 F00E      BRTS	0x0437
    00436 26CB      EOR	R12,R27
    00437 9508      RET
long_div_epilog:
    00438 FCC7      SBRC	R12,7
    00439 940E 04DC CALL	neg32
    0043B 91B9      LD	R27,Y+
    0043C 91A9      LD	R26,Y+
    0043D 9199      LD	R25,Y+
    0043E 9189      LD	R24,Y+
    0043F 91E9      LD	R30,Y+
    00440 90C9      LD	R12,Y+
    00441 90B9      LD	R11,Y+
    00442 90A9      LD	R10,Y+
    00443 9099      LD	R9,Y+
    00444 9089      LD	R8,Y+
    00445 9079      LD	R7,Y+
    00446 9624      ADIW	R28,4
    00447 9508      RET
tst_R16_R19:
    00448 2FE0      MOV	R30,R16
    00449 2BE1      OR	R30,R17
    0044A 2BE2      OR	R30,R18
    0044B 2BE3      OR	R30,R19
    0044C 9508      RET
tst_R24_R27:
    0044D 2FE8      MOV	R30,R24
    0044E 2BE9      OR	R30,R25
    0044F 2BEA      OR	R30,R26
    00450 2BEB      OR	R30,R27
    00451 9508      RET
neg_R24_R27:
    00452 9580      COM	R24
    00453 9590      COM	R25
    00454 95A0      COM	R26
    00455 95B0      COM	R27
    00456 5F8F      SUBI	R24,0xFF
    00457 4F9F      SBCI	R25,0xFF
    00458 4FAF      SBCI	R26,0xFF
    00459 4FBF      SBCI	R27,0xFF
    0045A 9508      RET
empy32s|empy32u:
    0045B 940E 04E5 CALL	long_prolog
    0045D 927A      ST	-Y,R7
    0045E 940E 04FE CALL	tstzero1
    00460 F159      BEQ	0x048C
    00461 2477      CLR	R7
    00462 940E 0504 CALL	tstzero2
    00464 F419      BNE	0x0468
    00465 018C      MOVW	R16,R24
    00466 019D      MOVW	R18,R26
    00467 C024      RJMP	0x048C
    00468 920A      ST	-Y,R0
    00469 921A      ST	-Y,R1
    0046A 9F08      MUL	R16,R24
    0046B 2CB0      MOV	R11,R0
    0046C 2CA1      MOV	R10,R1
    0046D 9F28      MUL	R18,R24
    0046E 2C90      MOV	R9,R0
    0046F 2C81      MOV	R8,R1
    00470 9F18      MUL	R17,R24
    00471 0CA0      ADD	R10,R0
    00472 1C91      ADC	R9,R1
    00473 1C87      ADC	R8,R7
    00474 9F09      MUL	R16,R25
    00475 0CA0      ADD	R10,R0
    00476 1C91      ADC	R9,R1
    00477 1C87      ADC	R8,R7
    00478 9F19      MUL	R17,R25
    00479 0C90      ADD	R9,R0
    0047A 1C81      ADC	R8,R1
    0047B 9F0A      MUL	R16,R26
    0047C 0C90      ADD	R9,R0
    0047D 1C81      ADC	R8,R1
    0047E 9F38      MUL	R19,R24
    0047F 0C80      ADD	R8,R0
    00480 9F29      MUL	R18,R25
    00481 0C80      ADD	R8,R0
    00482 9F1A      MUL	R17,R26
    00483 0C80      ADD	R8,R0
    00484 9F0B      MUL	R16,R27
    00485 0C80      ADD	R8,R0
    00486 9019      LD	R1,Y+
    00487 9009      LD	R0,Y+
    00488 2D0B      MOV	R16,R11
    00489 2D1A      MOV	R17,R10
    0048A 2D29      MOV	R18,R9
    0048B 2D38      MOV	R19,R8
    0048C 9079      LD	R7,Y+
    0048D 940C 04F3 JMP	long_epilog
pop_xgset30FC:
    0048F 90A9      LD	R10,Y+
    00490 90B9      LD	R11,Y+
    00491 90C9      LD	R12,Y+
    00492 90D9      LD	R13,Y+
    00493 90E9      LD	R14,Y+
    00494 90F9      LD	R15,Y+
    00495 9149      LD	R20,Y+
    00496 9159      LD	R21,Y+
    00497 9508      RET
pop_xgsetF0FC:
    00498 90A9      LD	R10,Y+
    00499 90B9      LD	R11,Y+
    0049A 90C9      LD	R12,Y+
    0049B 90D9      LD	R13,Y+
    0049C 90E9      LD	R14,Y+
    0049D 90F9      LD	R15,Y+
    0049E 9149      LD	R20,Y+
    0049F 9159      LD	R21,Y+
    004A0 9169      LD	R22,Y+
    004A1 9179      LD	R23,Y+
    004A2 9508      RET
push_xgsetF0FC:
    004A3 937A      ST	-Y,R23
    004A4 936A      ST	-Y,R22
push_xgset30FC:
    004A5 935A      ST	-Y,R21
    004A6 934A      ST	-Y,R20
push_xgset00FC:
    004A7 92FA      ST	-Y,R15
    004A8 92EA      ST	-Y,R14
push_xgset003C:
    004A9 92DA      ST	-Y,R13
    004AA 92CA      ST	-Y,R12
    004AB 92BA      ST	-Y,R11
    004AC 92AA      ST	-Y,R10
    004AD 9508      RET
push_xgsetF00C:
    004AE 937A      ST	-Y,R23
    004AF 936A      ST	-Y,R22
    004B0 935A      ST	-Y,R21
    004B1 934A      ST	-Y,R20
    004B2 92BA      ST	-Y,R11
    004B3 92AA      ST	-Y,R10
    004B4 9508      RET
pop_xgsetF00C:
    004B5 90A9      LD	R10,Y+
    004B6 90B9      LD	R11,Y+
    004B7 9149      LD	R20,Y+
    004B8 9159      LD	R21,Y+
    004B9 9169      LD	R22,Y+
    004BA 9179      LD	R23,Y+
    004BB 9508      RET
push_xgset303C:
    004BC 935A      ST	-Y,R21
    004BD 934A      ST	-Y,R20
    004BE 92DA      ST	-Y,R13
    004BF 92CA      ST	-Y,R12
    004C0 92BA      ST	-Y,R11
    004C1 92AA      ST	-Y,R10
    004C2 9508      RET
pop_xgset303C:
    004C3 90A9      LD	R10,Y+
    004C4 90B9      LD	R11,Y+
    004C5 90C9      LD	R12,Y+
    004C6 90D9      LD	R13,Y+
    004C7 9149      LD	R20,Y+
    004C8 9159      LD	R21,Y+
    004C9 9508      RET
push_xgsetF03C:
    004CA 937A      ST	-Y,R23
    004CB 936A      ST	-Y,R22
    004CC 935A      ST	-Y,R21
    004CD 934A      ST	-Y,R20
    004CE 92DA      ST	-Y,R13
    004CF 92CA      ST	-Y,R12
    004D0 92BA      ST	-Y,R11
    004D1 92AA      ST	-Y,R10
    004D2 9508      RET
pop_xgsetF03C:
    004D3 90A9      LD	R10,Y+
    004D4 90B9      LD	R11,Y+
    004D5 90C9      LD	R12,Y+
    004D6 90D9      LD	R13,Y+
    004D7 9149      LD	R20,Y+
    004D8 9159      LD	R21,Y+
    004D9 9169      LD	R22,Y+
    004DA 9179      LD	R23,Y+
    004DB 9508      RET
neg32:
    004DC 9500      COM	R16
    004DD 9510      COM	R17
    004DE 9520      COM	R18
    004DF 9530      COM	R19
    004E0 5F0F      SUBI	R16,0xFF
    004E1 4F1F      SBCI	R17,0xFF
    004E2 4F2F      SBCI	R18,0xFF
    004E3 4F3F      SBCI	R19,0xFF
    004E4 9508      RET
long_prolog:
    004E5 928A      ST	-Y,R8
    004E6 929A      ST	-Y,R9
    004E7 92AA      ST	-Y,R10
    004E8 92BA      ST	-Y,R11
    004E9 93EA      ST	-Y,R30
    004EA 938A      ST	-Y,R24
    004EB 939A      ST	-Y,R25
    004EC 93AA      ST	-Y,R26
    004ED 93BA      ST	-Y,R27
    004EE 8589      LDD	R24,Y+9
    004EF 859A      LDD	R25,Y+10
    004F0 85AB      LDD	R26,Y+11
    004F1 85BC      LDD	R27,Y+12
    004F2 9508      RET
long_epilog:
    004F3 91B9      LD	R27,Y+
    004F4 91A9      LD	R26,Y+
    004F5 9199      LD	R25,Y+
    004F6 9189      LD	R24,Y+
    004F7 91E9      LD	R30,Y+
    004F8 90B9      LD	R11,Y+
    004F9 90A9      LD	R10,Y+
    004FA 9099      LD	R9,Y+
    004FB 9089      LD	R8,Y+
    004FC 9624      ADIW	R28,4
    004FD 9508      RET
tstzero1:
    004FE 27EE      CLR	R30
    004FF 2BE0      OR	R30,R16
    00500 2BE1      OR	R30,R17
    00501 2BE2      OR	R30,R18
    00502 2BE3      OR	R30,R19
    00503 9508      RET
tstzero2:
    00504 27EE      CLR	R30
    00505 2BE8      OR	R30,R24
    00506 2BE9      OR	R30,R25
    00507 2BEA      OR	R30,R26
    00508 2BEB      OR	R30,R27
    00509 9508      RET
