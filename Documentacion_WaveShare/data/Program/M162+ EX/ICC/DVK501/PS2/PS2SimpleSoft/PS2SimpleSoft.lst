Interrupt Vectors
    00000 940C 00B0 JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    000B0 EFCF      LDI	R28,0xFF
    000B1 E0D4      LDI	R29,4
    000B2 BFCD      OUT	0x3D,R28
    000B3 BFDE      OUT	0x3E,R29
    000B4 51C0      SUBI	R28,0x10
    000B5 40D0      SBCI	R29,0
    000B6 EA0A      LDI	R16,0xAA
    000B7 8308      ST	Y,R16
    000B8 2400      CLR	R0
    000B9 EFE0      LDI	R30,0xF0
    000BA E0F1      LDI	R31,1
    000BB E011      LDI	R17,1
    000BC 3FE7      CPI	R30,0xF7
    000BD 07F1      CPC	R31,R17
    000BE F011      BEQ	0x00C1
    000BF 9201      ST	Z+,R0
    000C0 CFFB      RJMP	0x00BC
    000C1 8300      ST	Z,R16
    000C2 E7E0      LDI	R30,0x70
    000C3 E0F0      LDI	R31,0
    000C4 E0A0      LDI	R26,0
    000C5 E0B1      LDI	R27,1
    000C6 E011      LDI	R17,1
    000C7 E000      LDI	R16,0
    000C8 BF0B      OUT	0x3B,R16
    000C9 36E0      CPI	R30,0x60
    000CA 07F1      CPC	R31,R17
    000CB F021      BEQ	0x00D0
    000CC 95C8      LPM
    000CD 9631      ADIW	R30,1
    000CE 920D      ST	X+,R0
    000CF CFF9      RJMP	0x00C9
    000D0 940E 0224 CALL	_main
_exit:
    000D2 CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    000D3 940E 0233 CALL	push_arg4
    000D5 940E 02D6 CALL	push_xgsetF03C
    000D7 9728      SBIW	R28,0x8
    000D8 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    000D9 24AA      CLR	R10
    000DA E081      LDI	R24,1
    000DB 8388      ST	Y,R24
    000DC E080      LDI	R24,0
    000DD 8389      STD	Y+1,R24
    000DE 838A      STD	Y+2,R24
    000DF 838B      STD	Y+3,R24
    000E0 C03C      RJMP	0x011D
(0120)     {
(0121)         y=dat/j;
    000E1 8028      LD	R2,Y
    000E2 8039      LDD	R3,Y+1
    000E3 804A      LDD	R4,Y+2
    000E4 805B      LDD	R5,Y+3
    000E5 8908      LDD	R16,Y+16
    000E6 8919      LDD	R17,Y+17
    000E7 892A      LDD	R18,Y+18
    000E8 893B      LDD	R19,Y+19
    000E9 925A      ST	-Y,R5
    000EA 924A      ST	-Y,R4
    000EB 923A      ST	-Y,R3
    000EC 922A      ST	-Y,R2
    000ED 940E 0238 CALL	div32u
    000EF 830C      STD	Y+4,R16
    000F0 831D      STD	Y+5,R17
    000F1 832E      STD	Y+6,R18
    000F2 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    000F3 E04A      LDI	R20,0xA
    000F4 E050      LDI	R21,0
    000F5 E060      LDI	R22,0
    000F6 E070      LDI	R23,0
    000F7 810C      LDD	R16,Y+4
    000F8 811D      LDD	R17,Y+5
    000F9 812E      LDD	R18,Y+6
    000FA 813F      LDD	R19,Y+7
    000FB 937A      ST	-Y,R23
    000FC 936A      ST	-Y,R22
    000FD 935A      ST	-Y,R21
    000FE 934A      ST	-Y,R20
    000FF 940E 023A CALL	mod32u
    00101 EF81      LDI	R24,0xF1
    00102 E091      LDI	R25,1
    00103 2DEA      MOV	R30,R10
    00104 27FF      CLR	R31
    00105 0FE8      ADD	R30,R24
    00106 1FF9      ADC	R31,R25
    00107 8300      ST	Z,R16
(0123)         j*=10;
    00108 8028      LD	R2,Y
    00109 8039      LDD	R3,Y+1
    0010A 804A      LDD	R4,Y+2
    0010B 805B      LDD	R5,Y+3
    0010C E04A      LDI	R20,0xA
    0010D E050      LDI	R21,0
    0010E E060      LDI	R22,0
    0010F E070      LDI	R23,0
    00110 925A      ST	-Y,R5
    00111 924A      ST	-Y,R4
    00112 923A      ST	-Y,R3
    00113 922A      ST	-Y,R2
    00114 018A      MOVW	R16,R20
    00115 019B      MOVW	R18,R22
    00116 940E 02A2 CALL	empy32u|empy32s
    00118 8308      ST	Y,R16
    00119 8319      STD	Y+1,R17
    0011A 832A      STD	Y+2,R18
    0011B 833B      STD	Y+3,R19
    0011C 94A3      INC	R10
    0011D 2C2C      MOV	R2,R12
    0011E 2433      CLR	R3
    0011F FC27      SBRC	R2,7
    00120 9430      COM	R3
    00121 2C4A      MOV	R4,R10
    00122 2455      CLR	R5
    00123 1442      CP	R4,R2
    00124 0453      CPC	R5,R3
    00125 F40C      BGE	0x0127
    00126 CFBA      RJMP	0x00E1
    00127 9628      ADIW	R28,0x8
    00128 940E 02DF CALL	pop_xgsetF03C
    0012A 9624      ADIW	R28,4
    0012B 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    0012C 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    0012D C007      RJMP	0x0135
(0108)         for(j=0;j<70;j++)	
    0012E 2744      CLR	R20
    0012F C001      RJMP	0x0131
    00130 9543      INC	R20
    00131 3446      CPI	R20,0x46
    00132 F3E8      BCS	0x0130
    00133 5001      SUBI	R16,1
    00134 4010      SBCI	R17,0
    00135 2422      CLR	R2
    00136 2433      CLR	R3
    00137 1620      CP	R2,R16
    00138 0631      CPC	R3,R17
    00139 F3A4      BLT	0x012E
    0013A 9149      LD	R20,Y+
    0013B 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    0013C 934A      ST	-Y,R20
    0013D 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    0013E C013      RJMP	0x0152
(0123) 		for(i=0;i<52642;i++)
    0013F 2744      CLR	R20
    00140 2755      CLR	R21
    00141 C002      RJMP	0x0144
    00142 5F4F      SUBI	R20,0xFF
    00143 4F5F      SBCI	R21,0xFF
    00144 EA82      LDI	R24,0xA2
    00145 EC9D      LDI	R25,0xCD
    00146 E0A0      LDI	R26,0
    00147 E0B0      LDI	R27,0
    00148 011A      MOVW	R2,R20
    00149 2444      CLR	R4
    0014A 2455      CLR	R5
    0014B 1628      CP	R2,R24
    0014C 0639      CPC	R3,R25
    0014D 064A      CPC	R4,R26
    0014E 065B      CPC	R5,R27
    0014F F394      BLT	0x0142
    00150 5001      SUBI	R16,1
    00151 4010      SBCI	R17,0
    00152 2422      CLR	R2
    00153 2433      CLR	R3
    00154 1620      CP	R2,R16
    00155 0631      CPC	R3,R17
    00156 F344      BLT	0x013F
    00157 9159      LD	R21,Y+
    00158 9149      LD	R20,Y+
    00159 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    0015A 934A      ST	-Y,R20
    0015B 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    0015C 2744      CLR	R20
    0015D 2755      CLR	R21
    0015E C002      RJMP	0x0161
    0015F 5F4F      SUBI	R20,0xFF
    00160 4F5F      SBCI	R21,0xFF
    00161 1740      CP	R20,R16
    00162 0751      CPC	R21,R17
    00163 F3D8      BCS	0x015F
    00164 9159      LD	R21,Y+
    00165 9149      LD	R20,Y+
    00166 9508      RET
FILE: E:\吴泽备份\DVK501光盘内容\STK162~1.0\PS2PC~1\PS2SimpleSoft\PS2SimpleSoft.c
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立PS/2的SimpleSoft测试程序（软件查询读取PS/2接收到的数据）
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 按PC键盘，观察单片机读到的数据，使用PA/PD口的LED做指示。
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：
(0030) 将PA/PD口的LED指示灯使用短路帽或线短接；
(0031) 将PC键盘插入PS2接口，
(0032) 使用短路帽短接PC0与DATA，
(0033) 使用短路帽短接PC1与CLK
(0034) ----------------------------------------------------------------------
(0035) 注意事项： 
(0036) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0037) （2）请详细阅读“使用必读”及相关资料。
(0038) ----------------------------------------------------------------------
(0039) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0040) 
(0041) #include <iom162v.h>
(0042) #define NO_INCLUDE_I2C_H 1
(0043) #include "D:\ICC_H\CmmICC.H"
(0044) 
(0045) #include "D:\ICC_H\PS2.H"
(0046) 
(0047) #define PRESS_DATA_DDR	DDRA
(0048) #define PRESS_DATA_PORT PORTA
(0049) #define SHIFT_DATA_DDR	DDRD
(0050) #define SHIFT_DATA_PORT PORTD
(0051) 
(0052) #define SET_SDA		sbi(PORTD,3)
(0053) #define CLR_SDA		cbi(PORTD,3)
(0054) #define GET_SDA		gbi(PIND,3)
(0055) #define OUT_SDA 	sbi(DDRD,3)
(0056) #define IN_SDA 		cbi(DDRD,3)
(0057) 
(0058) #define SET_SCK		sbi(PORTD,2)
(0059) #define CLR_SCK		cbi(PORTD,2)
(0060) #define GET_SCK		gbi(PIND,2)
(0061) #define OUT_SCK 	sbi(DDRD,2)
(0062) #define IN_SCK 		cbi(DDRD,2)
(0063) 
(0064) #define DELAY() {NOP();NOP();NOP();NOP();}
(0065) 
(0066) bool rcvF		= 0; 	//是否收到字符标志
(0067) uint8 keyVal; 			//键值
(0068) 
(0069) /*--------------------------------------------------------------------
(0070) 函数名称：
(0071) 函数功能：
(0072) 注意事项：
(0073) 提示说明：
(0074) 输    入：
(0075) 返    回：
(0076) --------------------------------------------------------------------*/
(0077) void check(void)
(0078) {
(0079)     static uint8 rcvBits = 0;	//接收次数，中断次数
(0080) 	
(0081) 	OUT_SCK; 		   			//设置"SCK_DDR"为输出
_check:
    00167 9A8A      SBI	0x11,2
(0082) 	DELAY();
    00168 0000      NOP
    00169 0000      NOP
    0016A 0000      NOP
    0016B 0000      NOP
(0083) 	SET_SCK;					//"SCK_PORT"输出"1"
    0016C 9A92      SBI	0x12,2
(0084) 	DELAY();
    0016D 0000      NOP
    0016E 0000      NOP
    0016F 0000      NOP
    00170 0000      NOP
(0085) 	
(0086) 	IN_SCK;						//设置"SCK_DDR"为输入
    00171 988A      CBI	0x11,2
(0087) 	DELAY();
    00172 0000      NOP
    00173 0000      NOP
    00174 0000      NOP
    00175 0000      NOP
(0088) 	if(!GET_SCK)
    00176 9982      SBIC	0x10,2
    00177 C025      RJMP	0x019D
(0089) 	{
(0090) 		if((rcvBits>0) && (rcvBits<9))
    00178 9020 01ED LDS	R2,PS2SimpleSoft.c:rcvBits
    0017A E080      LDI	R24,0
    0017B 1582      CP	R24,R2
    0017C F470      BCC	0x018B
    0017D 2D82      MOV	R24,R2
    0017E 3089      CPI	R24,0x9
    0017F F458      BCC	0x018B
(0091) 		{ 
(0092) 			keyVal=keyVal>>1; 	//数据是LSB格式
    00180 9020 01F0 LDS	R2,keyVal
    00182 9426      LSR	R2
    00183 9220 01F0 STS	keyVal,R2
(0093) 			//IN_SDA;			//当有对键盘有属性设置时，注意输入输出切换
(0094) 			//DELAY();
(0095) 			if(GET_SDA) 
    00185 9B83      SBIS	0x10,3
    00186 C004      RJMP	0x018B
(0096) 	 			keyVal=keyVal|0x80; 
    00187 2D82      MOV	R24,R2
    00188 6880      ORI	R24,0x80
    00189 9380 01F0 STS	keyVal,R24
(0097) 		}
(0098) 		rcvBits++;
    0018B 9180 01ED LDS	R24,PS2SimpleSoft.c:rcvBits
    0018D 5F8F      SUBI	R24,0xFF
    0018E 9380 01ED STS	PS2SimpleSoft.c:rcvBits,R24
(0099) 		while(!GET_SCK); 		//等待PS/2CLK拉高
    00190 9B82      SBIS	0x10,2
    00191 CFFE      RJMP	0x0190
(0100) 	
(0101) 		if(rcvBits>10)
    00192 E08A      LDI	R24,0xA
    00193 9020 01ED LDS	R2,PS2SimpleSoft.c:rcvBits
    00195 1582      CP	R24,R2
    00196 F430      BCC	0x019D
(0102) 		{
(0103) 			rcvBits=0; 			//接收11次表示接收完一帧数据
    00197 2422      CLR	R2
    00198 9220 01ED STS	PS2SimpleSoft.c:rcvBits,R2
(0104) 			rcvF=1; 			//标识有字符已经输入
    0019A E081      LDI	R24,1
    0019B 9380 01EC STS	rcvF,R24
(0105) 		}
(0106) 	}
    0019D 9508      RET
_keyHandle:
  i                    --> R20
  val                  --> R16
    0019E 934A      ST	-Y,R20
    0019F 935A      ST	-Y,R21
(0107) }
(0108) /*--------------------------------------------------------------------
(0109) 函数名称：
(0110) 函数功能：
(0111) 注意事项：
(0112) 提示说明：
(0113) 输    入：
(0114) 返    回：
(0115) --------------------------------------------------------------------*/
(0116) void keyHandle(uint8 val) 
(0117) {
(0118) 	uint8 i;
(0119) 	static bool isUp=0;			//按键释放动作标志
(0120) 	static bool shift=0;		//shift键按下标志
(0121) 	rcvF = 0; 
    001A0 2422      CLR	R2
    001A1 9220 01EC STS	rcvF,R2
(0122) 	PRESS_DATA_PORT = val;		//状态指示
    001A3 BB0B      OUT	0x1B,R16
(0123) 	if(!isUp)
    001A4 9020 01EE LDS	R2,PS2SimpleSoft.c:isUp
    001A6 2022      TST	R2
    001A7 F009      BEQ	0x01A9
    001A8 C05F      RJMP	0x0208
(0124) 	{
(0125) 		switch(val)
    001A9 2F40      MOV	R20,R16
    001AA 2755      CLR	R21
    001AB 3549      CPI	R20,0x59
    001AC E0E0      LDI	R30,0
    001AD 075E      CPC	R21,R30
    001AE F0B9      BEQ	0x01C6
    001AF E589      LDI	R24,0x59
    001B0 E090      LDI	R25,0
    001B1 1784      CP	R24,R20
    001B2 0795      CPC	R25,R21
    001B3 F02C      BLT	0x01B9
    001B4 3142      CPI	R20,0x12
    001B5 E0E0      LDI	R30,0
    001B6 075E      CPC	R21,R30
    001B7 F051      BEQ	0x01C2
    001B8 C011      RJMP	0x01CA
    001B9 3F40      CPI	R20,0xF0
    001BA E0E0      LDI	R30,0
    001BB 075E      CPC	R21,R30
    001BC F009      BEQ	0x01BE
    001BD C00C      RJMP	0x01CA
(0126) 		{
(0127) 			case 0xF0 :			// a relase action
(0128) 				isUp = 1;
    001BE E081      LDI	R24,1
    001BF 9380 01EE STS	PS2SimpleSoft.c:isUp,R24
(0129) 				break;
    001C1 C05F      RJMP	0x0221
(0130) 			case 0x12 :			// Left shift
(0131) 				shift = 1;
    001C2 E081      LDI	R24,1
    001C3 9380 01EF STS	PS2SimpleSoft.c:shift,R24
(0132) 				break;
    001C5 C05B      RJMP	0x0221
(0133) 			case 0x59 :			// Right shift
(0134) 				shift = 1;
    001C6 E081      LDI	R24,1
    001C7 9380 01EF STS	PS2SimpleSoft.c:shift,R24
(0135) 				break;
    001C9 C057      RJMP	0x0221
(0136) 			default:
(0137) 				if(!shift)		// If shift not pressed
    001CA 9020 01EF LDS	R2,PS2SimpleSoft.c:shift
    001CC 2022      TST	R2
    001CD F4E9      BNE	0x01EB
(0138) 				{ 
(0139) /*
(0140) 					for(i=0; unshifted[i][0]!=val && unshifted[i][0]; i++)
(0141) 						;
(0142) 					上述写法较为灵活，但KEIL非UNIXC标准，不能采用该写法
(0143) */
(0144) 					for(i=0; unshifted[i][0]!=val && i<59; i++)
    001CE 2744      CLR	R20
    001CF C001      RJMP	0x01D1
    001D0 9543      INC	R20
    001D1 E080      LDI	R24,0
    001D2 E091      LDI	R25,1
    001D3 2FE4      MOV	R30,R20
    001D4 27FF      CLR	R31
    001D5 0FEE      LSL	R30
    001D6 1FFF      ROL	R31
    001D7 0FE8      ADD	R30,R24
    001D8 1FF9      ADC	R31,R25
    001D9 8020      LD	R2,Z
    001DA 1620      CP	R2,R16
    001DB F011      BEQ	0x01DE
    001DC 334B      CPI	R20,0x3B
    001DD F390      BCS	0x01D0
(0145) 						;
(0146) 					if(unshifted[i][0] == val) 
    001DE E080      LDI	R24,0
    001DF E091      LDI	R25,1
    001E0 2FE4      MOV	R30,R20
    001E1 27FF      CLR	R31
    001E2 0FEE      LSL	R30
    001E3 1FFF      ROL	R31
    001E4 0FE8      ADD	R30,R24
    001E5 1FF9      ADC	R31,R25
    001E6 8020      LD	R2,Z
    001E7 1620      CP	R2,R16
    001E8 F009      BEQ	0x01EA
    001E9 C037      RJMP	0x0221
(0147) 						;		//状态指示
(0148) 					
(0149) 				} 
    001EA C036      RJMP	0x0221
(0150) 				else			// If shift pressed
(0151) 				{			
(0152) /*
(0153) 					for(i=0; unshifted[i][0]!=val && unshifted[i][0]; i++)
(0154) 						;
(0155) 					上述写法较为灵活，但KEIL非UNIXC标准，不能采用该写法
(0156) */
(0157) 					for(i=0; shifted[i][0]!=val && i<59; i++)
    001EB 2744      CLR	R20
    001EC C001      RJMP	0x01EE
    001ED 9543      INC	R20
    001EE E786      LDI	R24,0x76
    001EF E091      LDI	R25,1
    001F0 2FE4      MOV	R30,R20
    001F1 27FF      CLR	R31
    001F2 0FEE      LSL	R30
    001F3 1FFF      ROL	R31
    001F4 0FE8      ADD	R30,R24
    001F5 1FF9      ADC	R31,R25
    001F6 8020      LD	R2,Z
    001F7 1620      CP	R2,R16
    001F8 F011      BEQ	0x01FB
    001F9 334B      CPI	R20,0x3B
    001FA F390      BCS	0x01ED
(0158) 						;
(0159) 					if(shifted[i][0] == val) 
    001FB E786      LDI	R24,0x76
    001FC E091      LDI	R25,1
    001FD 2FE4      MOV	R30,R20
    001FE 27FF      CLR	R31
    001FF 0FEE      LSL	R30
    00200 1FFF      ROL	R31
    00201 0FE8      ADD	R30,R24
    00202 1FF9      ADC	R31,R25
    00203 8020      LD	R2,Z
    00204 1620      CP	R2,R16
    00205 F4D9      BNE	0x0221
(0160) 						SHIFT_DATA_PORT = val;//状态指示
    00206 BB02      OUT	0x12,R16
(0161) 				}
(0162) 		}
(0163) 	}
    00207 C019      RJMP	0x0221
(0164) 	else 
(0165) 	{
(0166) 		isUp=0;					
    00208 2422      CLR	R2
    00209 9220 01EE STS	PS2SimpleSoft.c:isUp,R2
(0167) 		switch(val)
    0020B 2F40      MOV	R20,R16
    0020C 2755      CLR	R21
    0020D 3142      CPI	R20,0x12
    0020E E0E0      LDI	R30,0
    0020F 075E      CPC	R21,R30
    00210 F049      BEQ	0x021A
    00211 3142      CPI	R20,0x12
    00212 E0E0      LDI	R30,0
    00213 075E      CPC	R21,R30
    00214 F064      BLT	0x0221
    00215 3549      CPI	R20,0x59
    00216 E0E0      LDI	R30,0
    00217 075E      CPC	R21,R30
    00218 F029      BEQ	0x021E
    00219 C007      RJMP	0x0221
(0168) 		{
(0169) 			case 0x12 :			// Left SHIFT
(0170) 				shift = 0;
    0021A 2422      CLR	R2
    0021B 9220 01EF STS	PS2SimpleSoft.c:shift,R2
(0171) 				break;
    0021D C003      RJMP	0x0221
(0172) 			case 0x59 :			// Right SHIFT
(0173) 				shift = 0;
    0021E 2422      CLR	R2
    0021F 9220 01EF STS	PS2SimpleSoft.c:shift,R2
(0174) 				break;
(0175) 		}
(0176) 	}
    00221 9159      LD	R21,Y+
    00222 9149      LD	R20,Y+
    00223 9508      RET
(0177) }  
(0178) /*--------------------------------------------------------------------
(0179) 函数名称：
(0180) 函数功能：
(0181) 注意事项：
(0182) 提示说明：
(0183) 输    入：
(0184) 返    回：
(0185) --------------------------------------------------------------------*/
(0186) void main(void)
(0187) {
(0188)     PRESS_DATA_DDR = 0XFF;
_main:
    00224 EF8F      LDI	R24,0xFF
    00225 BB8A      OUT	0x1A,R24
(0189) 	SHIFT_DATA_DDR = 0XFF;
    00226 BB81      OUT	0x11,R24
(0190) 	IN_SDA;
    00227 988B      CBI	0x11,3
    00228 C008      RJMP	0x0231
(0191) 	while(1)
(0192) 	{
(0193) 		check();
    00229 DF3D      RCALL	_check
(0194) 		if(rcvF)
    0022A 9020 01EC LDS	R2,rcvF
    0022C 2022      TST	R2
    0022D F019      BEQ	0x0231
(0195) 			keyHandle(keyVal);
FILE: <library>
    0022E 9100 01F0 LDS	R16,keyVal
    00230 DF6D      RCALL	_keyHandle
    00231 CFF7      RJMP	0x0229
    00232 9508      RET
push_arg4:
    00233 933A      ST	-Y,R19
    00234 932A      ST	-Y,R18
push_arg2:
    00235 931A      ST	-Y,R17
    00236 930A      ST	-Y,R16
    00237 9508      RET
div32u:
    00238 94E8      BCLR	6
    00239 C001      RJMP	0x023B
mod32u:
    0023A 9468      BSET	6
    0023B D030      RCALL	long_div_prolog
    0023C 24CC      CLR	R12
    0023D C009      RJMP	0x0247
div32s:
    0023E 94E8      BCLR	6
    0023F C001      RJMP	0x0241
mod32s:
    00240 9468      BSET	6
    00241 D02A      RCALL	long_div_prolog
    00242 FD37      SBRC	R19,7
    00243 940E 02E8 CALL	neg32
    00245 FDB7      SBRC	R27,7
    00246 D052      RCALL	neg_R24_R27
    00247 2477      CLR	R7
    00248 2488      CLR	R8
    00249 2499      CLR	R9
    0024A 24AA      CLR	R10
    0024B 24BB      CLR	R11
    0024C D042      RCALL	tst_R16_R19
    0024D F0C1      BEQ	0x0266
    0024E D045      RCALL	tst_R24_R27
    0024F F0B1      BEQ	0x0266
    00250 E2E8      LDI	R30,0x28
    00251 0F00      LSL	R16
    00252 1F11      ROL	R17
    00253 1F22      ROL	R18
    00254 1F33      ROL	R19
    00255 1C77      ROL	R7
    00256 1C88      ROL	R8
    00257 1C99      ROL	R9
    00258 1CAA      ROL	R10
    00259 1CBB      ROL	R11
    0025A 1688      CP	R8,R24
    0025B 0699      CPC	R9,R25
    0025C 06AA      CPC	R10,R26
    0025D 06BB      CPC	R11,R27
    0025E F028      BCS	0x0264
    0025F 1A88      SUB	R8,R24
    00260 0A99      SBC	R9,R25
    00261 0AAA      SBC	R10,R26
    00262 0ABB      SBC	R11,R27
    00263 9503      INC	R16
    00264 95EA      DEC	R30
    00265 F759      BNE	0x0251
    00266 F426      BRTC	0x026B
    00267 2D08      MOV	R16,R8
    00268 2D19      MOV	R17,R9
    00269 2D2A      MOV	R18,R10
    0026A 2D3B      MOV	R19,R11
    0026B C013      RJMP	long_div_epilog
long_div_prolog:
    0026C 927A      ST	-Y,R7
    0026D 928A      ST	-Y,R8
    0026E 929A      ST	-Y,R9
    0026F 92AA      ST	-Y,R10
    00270 92BA      ST	-Y,R11
    00271 92CA      ST	-Y,R12
    00272 93EA      ST	-Y,R30
    00273 938A      ST	-Y,R24
    00274 939A      ST	-Y,R25
    00275 93AA      ST	-Y,R26
    00276 93BA      ST	-Y,R27
    00277 858B      LDD	R24,Y+11
    00278 859C      LDD	R25,Y+12
    00279 85AD      LDD	R26,Y+13
    0027A 85BE      LDD	R27,Y+14
    0027B 2EC3      MOV	R12,R19
    0027C F00E      BRTS	0x027E
    0027D 26CB      EOR	R12,R27
    0027E 9508      RET
long_div_epilog:
    0027F FCC7      SBRC	R12,7
    00280 940E 02E8 CALL	neg32
    00282 91B9      LD	R27,Y+
    00283 91A9      LD	R26,Y+
    00284 9199      LD	R25,Y+
    00285 9189      LD	R24,Y+
    00286 91E9      LD	R30,Y+
    00287 90C9      LD	R12,Y+
    00288 90B9      LD	R11,Y+
    00289 90A9      LD	R10,Y+
    0028A 9099      LD	R9,Y+
    0028B 9089      LD	R8,Y+
    0028C 9079      LD	R7,Y+
    0028D 9624      ADIW	R28,4
    0028E 9508      RET
tst_R16_R19:
    0028F 2FE0      MOV	R30,R16
    00290 2BE1      OR	R30,R17
    00291 2BE2      OR	R30,R18
    00292 2BE3      OR	R30,R19
    00293 9508      RET
tst_R24_R27:
    00294 2FE8      MOV	R30,R24
    00295 2BE9      OR	R30,R25
    00296 2BEA      OR	R30,R26
    00297 2BEB      OR	R30,R27
    00298 9508      RET
neg_R24_R27:
    00299 9580      COM	R24
    0029A 9590      COM	R25
    0029B 95A0      COM	R26
    0029C 95B0      COM	R27
    0029D 5F8F      SUBI	R24,0xFF
    0029E 4F9F      SBCI	R25,0xFF
    0029F 4FAF      SBCI	R26,0xFF
    002A0 4FBF      SBCI	R27,0xFF
    002A1 9508      RET
empy32u|empy32s:
    002A2 940E 02F1 CALL	long_prolog
    002A4 927A      ST	-Y,R7
    002A5 940E 030A CALL	tstzero1
    002A7 F159      BEQ	0x02D3
    002A8 2477      CLR	R7
    002A9 940E 0310 CALL	tstzero2
    002AB F419      BNE	0x02AF
    002AC 018C      MOVW	R16,R24
    002AD 019D      MOVW	R18,R26
    002AE C024      RJMP	0x02D3
    002AF 920A      ST	-Y,R0
    002B0 921A      ST	-Y,R1
    002B1 9F08      MUL	R16,R24
    002B2 2CB0      MOV	R11,R0
    002B3 2CA1      MOV	R10,R1
    002B4 9F28      MUL	R18,R24
    002B5 2C90      MOV	R9,R0
    002B6 2C81      MOV	R8,R1
    002B7 9F18      MUL	R17,R24
    002B8 0CA0      ADD	R10,R0
    002B9 1C91      ADC	R9,R1
    002BA 1C87      ADC	R8,R7
    002BB 9F09      MUL	R16,R25
    002BC 0CA0      ADD	R10,R0
    002BD 1C91      ADC	R9,R1
    002BE 1C87      ADC	R8,R7
    002BF 9F19      MUL	R17,R25
    002C0 0C90      ADD	R9,R0
    002C1 1C81      ADC	R8,R1
    002C2 9F0A      MUL	R16,R26
    002C3 0C90      ADD	R9,R0
    002C4 1C81      ADC	R8,R1
    002C5 9F38      MUL	R19,R24
    002C6 0C80      ADD	R8,R0
    002C7 9F29      MUL	R18,R25
    002C8 0C80      ADD	R8,R0
    002C9 9F1A      MUL	R17,R26
    002CA 0C80      ADD	R8,R0
    002CB 9F0B      MUL	R16,R27
    002CC 0C80      ADD	R8,R0
    002CD 9019      LD	R1,Y+
    002CE 9009      LD	R0,Y+
    002CF 2D0B      MOV	R16,R11
    002D0 2D1A      MOV	R17,R10
    002D1 2D29      MOV	R18,R9
    002D2 2D38      MOV	R19,R8
    002D3 9079      LD	R7,Y+
    002D4 940C 02FF JMP	long_epilog
push_xgsetF03C:
    002D6 937A      ST	-Y,R23
    002D7 936A      ST	-Y,R22
    002D8 935A      ST	-Y,R21
    002D9 934A      ST	-Y,R20
    002DA 92DA      ST	-Y,R13
    002DB 92CA      ST	-Y,R12
    002DC 92BA      ST	-Y,R11
    002DD 92AA      ST	-Y,R10
    002DE 9508      RET
pop_xgsetF03C:
    002DF 90A9      LD	R10,Y+
    002E0 90B9      LD	R11,Y+
    002E1 90C9      LD	R12,Y+
    002E2 90D9      LD	R13,Y+
    002E3 9149      LD	R20,Y+
    002E4 9159      LD	R21,Y+
    002E5 9169      LD	R22,Y+
    002E6 9179      LD	R23,Y+
    002E7 9508      RET
neg32:
    002E8 9500      COM	R16
    002E9 9510      COM	R17
    002EA 9520      COM	R18
    002EB 9530      COM	R19
    002EC 5F0F      SUBI	R16,0xFF
    002ED 4F1F      SBCI	R17,0xFF
    002EE 4F2F      SBCI	R18,0xFF
    002EF 4F3F      SBCI	R19,0xFF
    002F0 9508      RET
long_prolog:
    002F1 928A      ST	-Y,R8
    002F2 929A      ST	-Y,R9
    002F3 92AA      ST	-Y,R10
    002F4 92BA      ST	-Y,R11
    002F5 93EA      ST	-Y,R30
    002F6 938A      ST	-Y,R24
    002F7 939A      ST	-Y,R25
    002F8 93AA      ST	-Y,R26
    002F9 93BA      ST	-Y,R27
    002FA 8589      LDD	R24,Y+9
    002FB 859A      LDD	R25,Y+10
    002FC 85AB      LDD	R26,Y+11
    002FD 85BC      LDD	R27,Y+12
    002FE 9508      RET
long_epilog:
    002FF 91B9      LD	R27,Y+
    00300 91A9      LD	R26,Y+
    00301 9199      LD	R25,Y+
    00302 9189      LD	R24,Y+
    00303 91E9      LD	R30,Y+
    00304 90B9      LD	R11,Y+
    00305 90A9      LD	R10,Y+
    00306 9099      LD	R9,Y+
    00307 9089      LD	R8,Y+
    00308 9624      ADIW	R28,4
    00309 9508      RET
tstzero1:
    0030A 27EE      CLR	R30
    0030B 2BE0      OR	R30,R16
    0030C 2BE1      OR	R30,R17
    0030D 2BE2      OR	R30,R18
    0030E 2BE3      OR	R30,R19
    0030F 9508      RET
tstzero2:
    00310 27EE      CLR	R30
    00311 2BE8      OR	R30,R24
    00312 2BE9      OR	R30,R25
    00313 2BEA      OR	R30,R26
    00314 2BEB      OR	R30,R27
    00315 9508      RET
