Interrupt Vectors
    00000 940C 0038 JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    00038 EFCF      LDI	R28,0xFF
    00039 E0D4      LDI	R29,4
    0003A BFCD      OUT	0x3D,R28
    0003B BFDE      OUT	0x3E,R29
    0003C 51C0      SUBI	R28,0x10
    0003D 40D0      SBCI	R29,0
    0003E EA0A      LDI	R16,0xAA
    0003F 8308      ST	Y,R16
    00040 2400      CLR	R0
    00041 E0E0      LDI	R30,0
    00042 E0F1      LDI	R31,1
    00043 E011      LDI	R17,1
    00044 30E0      CPI	R30,0
    00045 07F1      CPC	R31,R17
    00046 F011      BEQ	0x0049
    00047 9201      ST	Z+,R0
    00048 CFFB      RJMP	0x0044
    00049 8300      ST	Z,R16
    0004A E7E0      LDI	R30,0x70
    0004B E0F0      LDI	R31,0
    0004C E0A0      LDI	R26,0
    0004D E0B1      LDI	R27,1
    0004E E010      LDI	R17,0
    0004F E000      LDI	R16,0
    00050 BF0B      OUT	0x3B,R16
    00051 37E0      CPI	R30,0x70
    00052 07F1      CPC	R31,R17
    00053 F021      BEQ	0x0058
    00054 95C8      LPM
    00055 9631      ADIW	R30,1
    00056 920D      ST	X+,R0
    00057 CFF9      RJMP	0x0051
    00058 940E 0083 CALL	_main
_exit:
    0005A CFFF      RJMP	_exit
FILE: E:\吴泽备份\DVK501光盘内容\STK162~1.0\MAX232~1\MAX232\test.c
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立使用PCF8574的示例程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2009-03-31
(0013) 	
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 先把写数据并显示在MAX232自发自收试验
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：
(0030) 
(0031) 	
(0032)            M162+ EX     		  DVK501
(0033) 			   PA	---------  		  LED0~7
(0034) 			   
(0035) 			   DVK501				  M162+ EX
(0036) 				VCC		---------	  VCC
(0037) 				GND		---------	  GND
(0038) 				RXD1   ---------	  PE1(TXD0)
(0039) 				TXD1	---------	  PE0(RXD0)
(0040) 				
(0041) 				并将DB9接口的2脚和3脚短接
(0042) 				
(0043) ----------------------------------------------------------------------
(0044) 注意事项： 
(0045) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0046) （2）请详细阅读“使用必读”及相关资料。
(0047) ----------------------------------------------------------------------
(0048) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0049) 
(0050) #include <iom162v.h>
(0051) void UART_init(void)
(0052) {
(0053) // USART0 initialization
(0054) // Communication Parameters: 8 Data, 1 Stop, No Parity
(0055) // USART0 Receiver: On
(0056) // USART0 Transmitter: On
(0057) // USART0 Mode: Asynchronous
(0058) // USART0 Baud Rate: 9600
(0059) UCSR0A=0x00;
_UART_init:
    0005B 2422      CLR	R2
    0005C B82B      OUT	0x0B,R2
(0060) UCSR0B=0x18;
    0005D E188      LDI	R24,0x18
    0005E B98A      OUT	0x0A,R24
(0061) UCSR0C=0x06;
    0005F E086      LDI	R24,6
    00060 BD80      OUT	0x20,R24
(0062) UBRR0H=0x00;
    00061 BC20      OUT	0x20,R2
(0063) UBRR0L=0x2F;
    00062 E28F      LDI	R24,0x2F
    00063 B989      OUT	0x09,R24
    00064 9508      RET
(0064) }
(0065) 
(0066) 
(0067) //从RS232发送一个字节 
(0068) void uart_putchar0(char c) 
(0069) { 
(0070)     while(!(UCSR0A & 0x20));
_uart_putchar0:
  c                    --> R16
    00065 9B5D      SBIS	0x0B,5
    00066 CFFE      RJMP	_uart_putchar0
(0071)     UDR0 = c; 
    00067 B90C      OUT	0x0C,R16
    00068 9508      RET
(0072) } 
(0073) //从RS232接收一个字节 
(0074) unsigned int uart_getchar0(void) 
(0075) { 
(0076)     unsigned char status,res; 
(0077)     if(!(UCSR0A & 0x80)) return -1;        //no data to be received 
_uart_getchar0:
  res                  --> R16
  status               --> R18
    00069 995F      SBIC	0x0B,7
    0006A C003      RJMP	0x006E
    0006B EF0F      LDI	R16,0xFF
    0006C EF1F      LDI	R17,0xFF
    0006D C009      RJMP	0x0077
(0078)     status = UCSR0A; 
    0006E B12B      IN	R18,0x0B
(0079)     res = UDR0; 
    0006F B10C      IN	R16,0x0C
(0080)     if (status & 0x1c) return -1;        // If error, return -1 
    00070 2F82      MOV	R24,R18
    00071 718C      ANDI	R24,0x1C
    00072 F019      BEQ	0x0076
    00073 EF0F      LDI	R16,0xFF
    00074 EF1F      LDI	R17,0xFF
    00075 C001      RJMP	0x0077
(0081)     return res; 
    00076 2711      CLR	R17
    00077 9508      RET
_uart_waitchar0:
  c                    --> R10
    00078 92AA      ST	-Y,R10
    00079 92BA      ST	-Y,R11
(0082) } 
(0083) //等待从RS232接收一个有效的字节 
(0084) unsigned char uart_waitchar0(void) 
(0085) { 
(0086)     unsigned int c; 
(0087)     while((c=uart_getchar0())==-1); 
    0007A DFEE      RCALL	_uart_getchar0
    0007B 0158      MOVW	R10,R16
    0007C 3F0F      CPI	R16,0xFF
    0007D EFEF      LDI	R30,0xFF
    0007E 071E      CPC	R17,R30
    0007F F3D1      BEQ	0x007A
(0088)     return (unsigned char)c; 
    00080 90B9      LD	R11,Y+
    00081 90A9      LD	R10,Y+
    00082 9508      RET
(0089) } 
(0090) 
(0091) void main(void)
(0092) {
(0093)  	DDRA=0xFF;
_main:
    00083 EF8F      LDI	R24,0xFF
    00084 BB8A      OUT	0x1A,R24
(0094)  	UART_init();
    00085 DFD5      RCALL	_UART_init
(0095) 	uart_putchar0(0xAA);
    00086 EA0A      LDI	R16,0xAA
    00087 DFDD      RCALL	_uart_putchar0
(0096) 	
(0097) 	PORTA=uart_waitchar0();
    00088 DFEF      RCALL	_uart_waitchar0
    00089 BB0B      OUT	0x1B,R16
(0098) 	while(1);
FILE: <library>
    0008A CFFF      RJMP	0x008A
    0008B 9508      RET
