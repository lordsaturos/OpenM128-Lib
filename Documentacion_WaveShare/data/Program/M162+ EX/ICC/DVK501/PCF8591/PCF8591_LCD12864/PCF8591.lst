Interrupt Vectors
    00000 940C 0048 JMP	__text_start|__start

Program Code (text area)
__text_start|__start:
    00048 EFCF      LDI	R28,0xFF
    00049 E0D4      LDI	R29,4
    0004A BFCD      OUT	0x3D,R28
    0004B BFDE      OUT	0x3E,R29
    0004C 51C0      SUBI	R28,0x10
    0004D 40D0      SBCI	R29,0
    0004E EA0A      LDI	R16,0xAA
    0004F 8308      ST	Y,R16
    00050 2400      CLR	R0
    00051 E1EF      LDI	R30,0x1F
    00052 E0F1      LDI	R31,1
    00053 E011      LDI	R17,1
    00054 32E5      CPI	R30,0x25
    00055 07F1      CPC	R31,R17
    00056 F011      BEQ	0x0059
    00057 9201      ST	Z+,R0
    00058 CFFB      RJMP	0x0054
    00059 8300      ST	Z,R16
    0005A E7E0      LDI	R30,0x70
    0005B E0F0      LDI	R31,0
    0005C E0A0      LDI	R26,0
    0005D E0B1      LDI	R27,1
    0005E E010      LDI	R17,0
    0005F E000      LDI	R16,0
    00060 BF0B      OUT	0x3B,R16
    00061 38EF      CPI	R30,0x8F
    00062 07F1      CPC	R31,R17
    00063 F021      BEQ	0x0068
    00064 95C8      LPM
    00065 9631      ADIW	R30,1
    00066 920D      ST	X+,R0
    00067 CFF9      RJMP	0x0061
    00068 940E 0365 CALL	_main
_exit:
    0006A CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0006B 940E 03C1 CALL	push_arg4
    0006D 940E 04AF CALL	push_xgsetF03C
    0006F 9728      SBIW	R28,0x8
    00070 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00071 24AA      CLR	R10
    00072 E081      LDI	R24,1
    00073 8388      ST	Y,R24
    00074 E080      LDI	R24,0
    00075 8389      STD	Y+1,R24
    00076 838A      STD	Y+2,R24
    00077 838B      STD	Y+3,R24
    00078 C03C      RJMP	0x00B5
(0120)     {
(0121)         y=dat/j;
    00079 8028      LD	R2,Y
    0007A 8039      LDD	R3,Y+1
    0007B 804A      LDD	R4,Y+2
    0007C 805B      LDD	R5,Y+3
    0007D 8908      LDD	R16,Y+16
    0007E 8919      LDD	R17,Y+17
    0007F 892A      LDD	R18,Y+18
    00080 893B      LDD	R19,Y+19
    00081 925A      ST	-Y,R5
    00082 924A      ST	-Y,R4
    00083 923A      ST	-Y,R3
    00084 922A      ST	-Y,R2
    00085 940E 03C6 CALL	div32u
    00087 830C      STD	Y+4,R16
    00088 831D      STD	Y+5,R17
    00089 832E      STD	Y+6,R18
    0008A 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0008B E04A      LDI	R20,0xA
    0008C E050      LDI	R21,0
    0008D E060      LDI	R22,0
    0008E E070      LDI	R23,0
    0008F 810C      LDD	R16,Y+4
    00090 811D      LDD	R17,Y+5
    00091 812E      LDD	R18,Y+6
    00092 813F      LDD	R19,Y+7
    00093 937A      ST	-Y,R23
    00094 936A      ST	-Y,R22
    00095 935A      ST	-Y,R21
    00096 934A      ST	-Y,R20
    00097 940E 03C8 CALL	mod32u
    00099 E18F      LDI	R24,0x1F
    0009A E091      LDI	R25,1
    0009B 2DEA      MOV	R30,R10
    0009C 27FF      CLR	R31
    0009D 0FE8      ADD	R30,R24
    0009E 1FF9      ADC	R31,R25
    0009F 8300      ST	Z,R16
(0123)         j*=10;
    000A0 8028      LD	R2,Y
    000A1 8039      LDD	R3,Y+1
    000A2 804A      LDD	R4,Y+2
    000A3 805B      LDD	R5,Y+3
    000A4 E04A      LDI	R20,0xA
    000A5 E050      LDI	R21,0
    000A6 E060      LDI	R22,0
    000A7 E070      LDI	R23,0
    000A8 925A      ST	-Y,R5
    000A9 924A      ST	-Y,R4
    000AA 923A      ST	-Y,R3
    000AB 922A      ST	-Y,R2
    000AC 018A      MOVW	R16,R20
    000AD 019B      MOVW	R18,R22
    000AE 940E 0440 CALL	empy32u|empy32s
    000B0 8308      ST	Y,R16
    000B1 8319      STD	Y+1,R17
    000B2 832A      STD	Y+2,R18
    000B3 833B      STD	Y+3,R19
    000B4 94A3      INC	R10
    000B5 2C2C      MOV	R2,R12
    000B6 2433      CLR	R3
    000B7 FC27      SBRC	R2,7
    000B8 9430      COM	R3
    000B9 2C4A      MOV	R4,R10
    000BA 2455      CLR	R5
    000BB 1442      CP	R4,R2
    000BC 0453      CPC	R5,R3
    000BD F40C      BGE	0x00BF
    000BE CFBA      RJMP	0x0079
    000BF 9628      ADIW	R28,0x8
    000C0 940E 04B8 CALL	pop_xgsetF03C
    000C2 9624      ADIW	R28,4
    000C3 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    000C4 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    000C5 C007      RJMP	0x00CD
(0108)         for(j=0;j<70;j++)	
    000C6 2744      CLR	R20
    000C7 C001      RJMP	0x00C9
    000C8 9543      INC	R20
    000C9 3446      CPI	R20,0x46
    000CA F3E8      BCS	0x00C8
    000CB 5001      SUBI	R16,1
    000CC 4010      SBCI	R17,0
    000CD 2422      CLR	R2
    000CE 2433      CLR	R3
    000CF 1620      CP	R2,R16
    000D0 0631      CPC	R3,R17
    000D1 F3A4      BLT	0x00C6
    000D2 9149      LD	R20,Y+
    000D3 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    000D4 934A      ST	-Y,R20
    000D5 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    000D6 C013      RJMP	0x00EA
(0123) 		for(i=0;i<52642;i++)
    000D7 2744      CLR	R20
    000D8 2755      CLR	R21
    000D9 C002      RJMP	0x00DC
    000DA 5F4F      SUBI	R20,0xFF
    000DB 4F5F      SBCI	R21,0xFF
    000DC EA82      LDI	R24,0xA2
    000DD EC9D      LDI	R25,0xCD
    000DE E0A0      LDI	R26,0
    000DF E0B0      LDI	R27,0
    000E0 011A      MOVW	R2,R20
    000E1 2444      CLR	R4
    000E2 2455      CLR	R5
    000E3 1628      CP	R2,R24
    000E4 0639      CPC	R3,R25
    000E5 064A      CPC	R4,R26
    000E6 065B      CPC	R5,R27
    000E7 F394      BLT	0x00DA
    000E8 5001      SUBI	R16,1
    000E9 4010      SBCI	R17,0
    000EA 2422      CLR	R2
    000EB 2433      CLR	R3
    000EC 1620      CP	R2,R16
    000ED 0631      CPC	R3,R17
    000EE F344      BLT	0x00D7
    000EF 9159      LD	R21,Y+
    000F0 9149      LD	R20,Y+
    000F1 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    000F2 934A      ST	-Y,R20
    000F3 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    000F4 2744      CLR	R20
    000F5 2755      CLR	R21
    000F6 C002      RJMP	0x00F9
    000F7 5F4F      SUBI	R20,0xFF
    000F8 4F5F      SBCI	R21,0xFF
    000F9 1740      CP	R20,R16
    000FA 0751      CPC	R21,R17
    000FB F3D8      BCS	0x00F7
    000FC 9159      LD	R21,Y+
    000FD 9149      LD	R20,Y+
    000FE 9508      RET
FILE: D:\ICC_H\LCD12864_ST7920_M48.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 	                                                        
(0004) 目    的:   建立LCD12864_ST7920的串模式操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 	                                                                
(0008) 应用软件:   ICCAVR                                               
(0009) 	                                                                
(0010) 版    本:   Version 1.0
(0011) 	                                                                
(0012) 圆版时间:   2005-09-06
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) 
(0026) 
(0027) ----------------------------------------------------------------------
(0028) 入口参数说明：
(0029) 	//#define OUT_LCD_CS	sbi(DDRD,0)
(0030) 	//#define SET_LCD_CS	sbi(PORTD,0)
(0031) 	//#define CLR_LCD_CS	cbi(PORTD,0)
(0032) 
(0033) ----------------------------------------------------------------------
(0034) 待定参数说明：
(0035) 	
(0036) 
(0037) ----------------------------------------------------------------------	
(0038) 对外变量说明：
(0039) 
(0040) ----------------------------------------------------------------------
(0041) 对外函数说明：
(0042) 
(0043) ----------------------------------------------------------------------
(0044) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0045) 
(0046) 
(0047) /*--------------------------------------------------------------------
(0048) 接口定义：
(0049) 
(0050) LCD12864_ST7920			ATmega16
(0051) 1.GND		--------	GND
(0052) 2.VCC		--------	VCC
(0053) 3.V0		--------	V0
(0054) 4.RS(CS)	--------	VCC
(0055) 5.R/W(SID)	--------	MOSI/PB5
(0056) 6.E(SCLK)	--------	SCK/PB7
(0057) 7.D0		--------	NC
(0058) 8.D1		--------	NC
(0059) 9.D2		--------	NC
(0060) 10.D3		--------	NC
(0061) 11.D4		--------	NC
(0062) 12.D5		--------	NC
(0063) 13.D6		--------	NC
(0064) 14.D7		--------	NC
(0065) 15.PSB		--------	GND
(0066) 16.NC		--------	NC
(0067) 17.RST		--------	NC
(0068) 18.NC		--------	NC
(0069) 19.LED+		--------	VCC
(0070) 20.LED-		--------	GND
(0071) 
(0072) 说明：
(0073) （1）使用ATmega16的硬件SPI操作LCD12864_ST7920
(0074) （2）PIN4/CS接VCC，其实也可接到特定的IO口，但外部程序需要指定
(0075) --------------------------------------------------------------------*/
(0076) 
(0077) #ifndef LCD12864_ST7920_H
(0078) #define LCD12864_ST7920_H
(0079) 
(0080) #include "D:\ICC_H\CmmIcc.h"
(0081) 
(0082) void SPI_init()
(0083) {
(0084) 	DDRB =0xFF;
_SPI_init:
    000FF EF8F      LDI	R24,0xFF
    00100 BB87      OUT	0x17,R24
(0085) 	SPCR = 0x50;	//setup SPI
    00101 E580      LDI	R24,0x50
    00102 B98D      OUT	0x0D,R24
(0086) 	SPSR = 0x01;	//setup SPI
    00103 E081      LDI	R24,1
    00104 B98E      OUT	0x0E,R24
(0087) 	SEI();			
    00105 9478      BSET	7
    00106 9508      RET
(0088) }
(0089) 
(0090) void lcd_wrByte(uint8 data)
(0091) {  
(0092) 	SPDR = data;        
_lcd_wrByte:
  data                 --> R16
    00107 B90F      OUT	0x0F,R16
(0093) 	while ((SPSR & 0x80) == 0);  
    00108 9B77      SBIS	0x0E,7
    00109 CFFE      RJMP	0x0108
    0010A 9508      RET
_lcd_wrCmd:
  LC                   --> R10
  HC                   --> R12
    0010B 92AA      ST	-Y,R10
    0010C 92CA      ST	-Y,R12
    0010D 2EA2      MOV	R10,R18
    0010E 2EC0      MOV	R12,R16
(0094) }
(0095) 
(0096) void lcd_wrCmd(uint8 HC,uint8 LC)
(0097) {
(0098) 	lcd_wrByte(0xF8);
    0010F EF08      LDI	R16,0xF8
    00110 DFF6      RCALL	_lcd_wrByte
(0099) 	lcd_wrByte(HC);		//传输高四位
    00111 2D0C      MOV	R16,R12
    00112 DFF4      RCALL	_lcd_wrByte
(0100) 	lcd_wrByte(LC);		//传输低四位
    00113 2D0A      MOV	R16,R10
    00114 DFF2      RCALL	_lcd_wrByte
    00115 90C9      LD	R12,Y+
    00116 90A9      LD	R10,Y+
    00117 9508      RET
_lcd_wrDat:
  LD                   --> R10
  HD                   --> R12
    00118 92AA      ST	-Y,R10
    00119 92CA      ST	-Y,R12
    0011A 2EA2      MOV	R10,R18
    0011B 2EC0      MOV	R12,R16
(0101) }
(0102) 
(0103) void lcd_wrDat(uint8 HD,uint8 LD)
(0104) {
(0105) 	lcd_wrByte(0xFA);
    0011C EF0A      LDI	R16,0xFA
    0011D DFE9      RCALL	_lcd_wrByte
(0106) 	lcd_wrByte(HD);		//传输高四位
    0011E 2D0C      MOV	R16,R12
    0011F DFE7      RCALL	_lcd_wrByte
(0107) 	lcd_wrByte(LD);		//传输低四位
    00120 2D0A      MOV	R16,R10
    00121 DFE5      RCALL	_lcd_wrByte
    00122 90C9      LD	R12,Y+
    00123 90A9      LD	R10,Y+
    00124 9508      RET
_lcd_set_xy:
  adr                  --> R20
  y                    --> R22
  x                    --> R10
    00125 940E 0493 CALL	push_xgsetF00C
    00127 2F62      MOV	R22,R18
    00128 2EA0      MOV	R10,R16
(0108) } 
(0109) 
(0110) /*
(0111) x表示在第几行显示，y表示在第几列显示
(0112) */
(0113) void lcd_set_xy(uint8 x,uint8 y) 
(0114) {
(0115) 	uint8 adr;
(0116) 
(0117) 	switch(x)
    00129 24BB      CLR	R11
    0012A 01C5      MOVW	R24,R10
    0012B 3081      CPI	R24,1
    0012C E0E0      LDI	R30,0
    0012D 079E      CPC	R25,R30
    0012E F069      BEQ	0x013C
    0012F 3082      CPI	R24,2
    00130 E0E0      LDI	R30,0
    00131 079E      CPC	R25,R30
    00132 F061      BEQ	0x013F
    00133 3083      CPI	R24,3
    00134 E0E0      LDI	R30,0
    00135 079E      CPC	R25,R30
    00136 F059      BEQ	0x0142
    00137 3084      CPI	R24,4
    00138 E0E0      LDI	R30,0
    00139 079E      CPC	R25,R30
    0013A F051      BEQ	0x0145
    0013B C00B      RJMP	0x0147
(0118) 	{
(0119) 	case 1: adr = 0x7F + y;
    0013C 2F46      MOV	R20,R22
    0013D 5841      SUBI	R20,0x81
(0120) 		break;		//在第1行y列显示
    0013E C008      RJMP	0x0147
(0121) 	case 2: adr = 0x8F + y;
    0013F 2F46      MOV	R20,R22
    00140 5741      SUBI	R20,0x71
(0122) 		break;		//在第2行y列显示
    00141 C005      RJMP	0x0147
(0123) 	case 3: adr = 0x87 + y;
    00142 2F46      MOV	R20,R22
    00143 5749      SUBI	R20,0x79
(0124) 		break;		//在第3行y列显示
    00144 C002      RJMP	0x0147
(0125) 	case 4: adr = 0x97 + y;
    00145 2F46      MOV	R20,R22
    00146 5649      SUBI	R20,0x69
(0126) 		break;		//在第4行y列显示
(0127) 	default:	;
(0128) 	}
(0129) 	lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
    00147 2F24      MOV	R18,R20
    00148 702F      ANDI	R18,0xF
    00149 702F      ANDI	R18,0xF
    0014A 9522      SWAP	R18
    0014B 2F04      MOV	R16,R20
    0014C 7F00      ANDI	R16,0xF0
    0014D DFBD      RCALL	_lcd_wrCmd
    0014E 940C 049A JMP	pop_xgsetF00C
_lcd_putc:
  ch                   --> R20
  y                    --> R12
  x                    --> R10
    00150 940E 04A1 CALL	push_xgset303C
    00152 2EC2      MOV	R12,R18
    00153 2EA0      MOV	R10,R16
    00154 814E      LDD	R20,Y+6
(0130) }
(0131) 
(0132) void lcd_putc(uint8 x,uint8 y,uint8 ch)
(0133) {
(0134) 	lcd_set_xy(x,y);
    00155 2D2C      MOV	R18,R12
    00156 2D0A      MOV	R16,R10
    00157 DFCD      RCALL	_lcd_set_xy
(0135) 	delay50us(20); 
    00158 E104      LDI	R16,0x14
    00159 E010      LDI	R17,0
    0015A DF69      RCALL	_delay50us
(0136) 	lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
    0015B 2F24      MOV	R18,R20
    0015C 702F      ANDI	R18,0xF
    0015D 702F      ANDI	R18,0xF
    0015E 9522      SWAP	R18
    0015F 2F04      MOV	R16,R20
    00160 7F00      ANDI	R16,0xF0
    00161 DFB6      RCALL	_lcd_wrDat
    00162 940C 04A8 JMP	pop_xgset303C
_lcd_putd0:
  i                    --> R20
  length               --> R20
  dat                  --> Y,+7
  y                    --> R12
  x                    --> R10
    00164 940E 04A1 CALL	push_xgset303C
    00166 2EC2      MOV	R12,R18
    00167 2EA0      MOV	R10,R16
    00168 9721      SBIW	R28,1
    00169 854B      LDD	R20,Y+11
(0137) }
(0138) 
(0139) void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
(0140) {
(0141) 	sint8 i;
(0142) 
(0143) 	speaData(dat,length);
    0016A 8348      ST	Y,R20
    0016B 810F      LDD	R16,Y+7
    0016C 8518      LDD	R17,Y+8
    0016D 8529      LDD	R18,Y+9
    0016E 853A      LDD	R19,Y+10
    0016F DEFB      RCALL	_speaData
(0144) 	lcd_set_xy(x,y);
    00170 2D2C      MOV	R18,R12
    00171 2D0A      MOV	R16,R10
    00172 DFB2      RCALL	_lcd_set_xy
(0145) 	delay50us(40);
    00173 E208      LDI	R16,0x28
    00174 E010      LDI	R17,0
    00175 DF4E      RCALL	_delay50us
(0146) 	for(i=length-1;i>=0;i--)
    00176 5041      SUBI	R20,1
    00177 C01E      RJMP	0x0196
(0147) 	{
(0148) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    00178 E18F      LDI	R24,0x1F
    00179 E091      LDI	R25,1
    0017A 2FE4      MOV	R30,R20
    0017B 27FF      CLR	R31
    0017C FDE7      SBRC	R30,7
    0017D 95F0      COM	R31
    0017E 0FE8      ADD	R30,R24
    0017F 1FF9      ADC	R31,R25
    00180 8180      LD	R24,Z
    00181 2799      CLR	R25
    00182 96C0      ADIW	R24,0x30
    00183 019C      MOVW	R18,R24
    00184 702F      ANDI	R18,0xF
    00185 7030      ANDI	R19,0
    00186 0F22      LSL	R18
    00187 1F33      ROL	R19
    00188 0F22      LSL	R18
    00189 1F33      ROL	R19
    0018A 0F22      LSL	R18
    0018B 1F33      ROL	R19
    0018C 0F22      LSL	R18
    0018D 1F33      ROL	R19
    0018E 018C      MOVW	R16,R24
    0018F 7F00      ANDI	R16,0xF0
    00190 7010      ANDI	R17,0
    00191 DF86      RCALL	_lcd_wrDat
(0149) 		delay50us(40); 
    00192 E208      LDI	R16,0x28
    00193 E010      LDI	R17,0
    00194 DF2F      RCALL	_delay50us
    00195 954A      DEC	R20
    00196 3040      CPI	R20,0
    00197 F704      BGE	0x0178
    00198 9621      ADIW	R28,1
    00199 940C 04A8 JMP	pop_xgset303C
_lcd_putd:
  effectLen            --> R22
  i                    --> R20
  length               --> R10
  dat                  --> Y,+11
  y                    --> R14
  x                    --> R12
    0019B 940E 0488 CALL	push_xgsetF0FC
    0019D 2EE2      MOV	R14,R18
    0019E 2EC0      MOV	R12,R16
    0019F 9721      SBIW	R28,1
    001A0 84AF      LDD	R10,Y+15
(0150) 	}
(0151) }
(0152) 
(0153) void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
(0154) {
(0155) 	sint8 i;
(0156) 	sint8 effectLen;
(0157) 
(0158) 	if(dat>999999)
    001A1 E38F      LDI	R24,0x3F
    001A2 E492      LDI	R25,0x42
    001A3 E0AF      LDI	R26,0xF
    001A4 E0B0      LDI	R27,0
    001A5 842B      LDD	R2,Y+11
    001A6 843C      LDD	R3,Y+12
    001A7 844D      LDD	R4,Y+13
    001A8 845E      LDD	R5,Y+14
    001A9 1582      CP	R24,R2
    001AA 0593      CPC	R25,R3
    001AB 05A4      CPC	R26,R4
    001AC 05B5      CPC	R27,R5
    001AD F410      BCC	0x01B0
(0159) 		effectLen=7;
    001AE E067      LDI	R22,7
    001AF C04C      RJMP	0x01FC
(0160) 	else if(dat>99999)
    001B0 E98F      LDI	R24,0x9F
    001B1 E896      LDI	R25,0x86
    001B2 E0A1      LDI	R26,1
    001B3 E0B0      LDI	R27,0
    001B4 842B      LDD	R2,Y+11
    001B5 843C      LDD	R3,Y+12
    001B6 844D      LDD	R4,Y+13
    001B7 845E      LDD	R5,Y+14
    001B8 1582      CP	R24,R2
    001B9 0593      CPC	R25,R3
    001BA 05A4      CPC	R26,R4
    001BB 05B5      CPC	R27,R5
    001BC F410      BCC	0x01BF
(0161) 		effectLen=6;
    001BD E066      LDI	R22,6
    001BE C03D      RJMP	0x01FC
(0162) 	else if(dat>9999)
    001BF E08F      LDI	R24,0xF
    001C0 E297      LDI	R25,0x27
    001C1 E0A0      LDI	R26,0
    001C2 E0B0      LDI	R27,0
    001C3 842B      LDD	R2,Y+11
    001C4 843C      LDD	R3,Y+12
    001C5 844D      LDD	R4,Y+13
    001C6 845E      LDD	R5,Y+14
    001C7 1582      CP	R24,R2
    001C8 0593      CPC	R25,R3
    001C9 05A4      CPC	R26,R4
    001CA 05B5      CPC	R27,R5
    001CB F410      BCC	0x01CE
(0163) 		effectLen=5;
    001CC E065      LDI	R22,5
    001CD C02E      RJMP	0x01FC
(0164) 	else if(dat>999)
    001CE EE87      LDI	R24,0xE7
    001CF E093      LDI	R25,3
    001D0 E0A0      LDI	R26,0
    001D1 E0B0      LDI	R27,0
    001D2 842B      LDD	R2,Y+11
    001D3 843C      LDD	R3,Y+12
    001D4 844D      LDD	R4,Y+13
    001D5 845E      LDD	R5,Y+14
    001D6 1582      CP	R24,R2
    001D7 0593      CPC	R25,R3
    001D8 05A4      CPC	R26,R4
    001D9 05B5      CPC	R27,R5
    001DA F410      BCC	0x01DD
(0165) 		effectLen=4;
    001DB E064      LDI	R22,4
    001DC C01F      RJMP	0x01FC
(0166) 	else if(dat>99)
    001DD E683      LDI	R24,0x63
    001DE E090      LDI	R25,0
    001DF E0A0      LDI	R26,0
    001E0 E0B0      LDI	R27,0
    001E1 842B      LDD	R2,Y+11
    001E2 843C      LDD	R3,Y+12
    001E3 844D      LDD	R4,Y+13
    001E4 845E      LDD	R5,Y+14
    001E5 1582      CP	R24,R2
    001E6 0593      CPC	R25,R3
    001E7 05A4      CPC	R26,R4
    001E8 05B5      CPC	R27,R5
    001E9 F410      BCC	0x01EC
(0167) 		effectLen=3;
    001EA E063      LDI	R22,3
    001EB C010      RJMP	0x01FC
(0168) 	else if(dat>9)
    001EC E089      LDI	R24,0x9
    001ED E090      LDI	R25,0
    001EE E0A0      LDI	R26,0
    001EF E0B0      LDI	R27,0
    001F0 842B      LDD	R2,Y+11
    001F1 843C      LDD	R3,Y+12
    001F2 844D      LDD	R4,Y+13
    001F3 845E      LDD	R5,Y+14
    001F4 1582      CP	R24,R2
    001F5 0593      CPC	R25,R3
    001F6 05A4      CPC	R26,R4
    001F7 05B5      CPC	R27,R5
    001F8 F410      BCC	0x01FB
(0169) 		effectLen=2;
    001F9 E062      LDI	R22,2
    001FA C001      RJMP	0x01FC
(0170) 	else
(0171) 		effectLen=1;
    001FB E061      LDI	R22,1
(0172) 	speaData(dat,effectLen);
    001FC 8368      ST	Y,R22
    001FD 850B      LDD	R16,Y+11
    001FE 851C      LDD	R17,Y+12
    001FF 852D      LDD	R18,Y+13
    00200 853E      LDD	R19,Y+14
    00201 DE69      RCALL	_speaData
(0173) 
(0174) 	lcd_set_xy(x,y);
    00202 2D2E      MOV	R18,R14
    00203 2D0C      MOV	R16,R12
    00204 DF20      RCALL	_lcd_set_xy
(0175) 	delay50us(40); 
    00205 E208      LDI	R16,0x28
    00206 E010      LDI	R17,0
    00207 DEBC      RCALL	_delay50us
(0176) 	if(length>effectLen)
    00208 2E26      MOV	R2,R22
    00209 2433      CLR	R3
    0020A FC27      SBRC	R2,7
    0020B 9430      COM	R3
    0020C 2C4A      MOV	R4,R10
    0020D 2455      CLR	R5
    0020E 1424      CP	R2,R4
    0020F 0435      CPC	R3,R5
    00210 F46C      BGE	0x021E
(0177) 	{
(0178) 		for(i=length-effectLen-1;i>=0;i--)
    00211 2D44      MOV	R20,R4
    00212 1B46      SUB	R20,R22
    00213 5041      SUBI	R20,1
    00214 C007      RJMP	0x021C
(0179) 		{
(0180) 			lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
    00215 2722      CLR	R18
    00216 E200      LDI	R16,0x20
    00217 DF00      RCALL	_lcd_wrDat
(0181) 			delay50us(40); 
    00218 E208      LDI	R16,0x28
    00219 E010      LDI	R17,0
    0021A DEA9      RCALL	_delay50us
    0021B 954A      DEC	R20
    0021C 3040      CPI	R20,0
    0021D F7BC      BGE	0x0215
(0182) 		}
(0183) 	}
(0184) 	for(i=effectLen-1;i>=0;i--)
    0021E 2F46      MOV	R20,R22
    0021F 5041      SUBI	R20,1
    00220 C01E      RJMP	0x023F
(0185) 	{
(0186) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    00221 E18F      LDI	R24,0x1F
    00222 E091      LDI	R25,1
    00223 2FE4      MOV	R30,R20
    00224 27FF      CLR	R31
    00225 FDE7      SBRC	R30,7
    00226 95F0      COM	R31
    00227 0FE8      ADD	R30,R24
    00228 1FF9      ADC	R31,R25
    00229 8180      LD	R24,Z
    0022A 2799      CLR	R25
    0022B 96C0      ADIW	R24,0x30
    0022C 019C      MOVW	R18,R24
    0022D 702F      ANDI	R18,0xF
    0022E 7030      ANDI	R19,0
    0022F 0F22      LSL	R18
    00230 1F33      ROL	R19
    00231 0F22      LSL	R18
    00232 1F33      ROL	R19
    00233 0F22      LSL	R18
    00234 1F33      ROL	R19
    00235 0F22      LSL	R18
    00236 1F33      ROL	R19
    00237 018C      MOVW	R16,R24
    00238 7F00      ANDI	R16,0xF0
    00239 7010      ANDI	R17,0
    0023A DEDD      RCALL	_lcd_wrDat
(0187) 		delay50us(40);
    0023B E208      LDI	R16,0x28
    0023C E010      LDI	R17,0
    0023D DE86      RCALL	_delay50us
    0023E 954A      DEC	R20
    0023F 3040      CPI	R20,0
    00240 F704      BGE	0x0221
    00241 9621      ADIW	R28,1
    00242 940C 047D JMP	pop_xgsetF0FC
_lcd_puts:
  str                  --> R20
  y                    --> R12
  x                    --> R10
    00244 940E 04A1 CALL	push_xgset303C
    00246 2EC2      MOV	R12,R18
    00247 2EA0      MOV	R10,R16
    00248 814E      LDD	R20,Y+6
    00249 815F      LDD	R21,Y+7
(0188) 	}
(0189) }
(0190) 
(0191) void lcd_puts(uint8 x,uint8 y,uint8 *str)
(0192) { 
(0193) 	lcd_set_xy(x,y);
    0024A 2D2C      MOV	R18,R12
    0024B 2D0A      MOV	R16,R10
    0024C DED8      RCALL	_lcd_set_xy
(0194) 	delay50us(20);   
    0024D E104      LDI	R16,0x14
    0024E E010      LDI	R17,0
    0024F DE74      RCALL	_delay50us
    00250 C00F      RJMP	0x0260
(0195) 	while(*str)
(0196) 	{
(0197) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    00251 01FA      MOVW	R30,R20
    00252 8020      LD	R2,Z
    00253 2433      CLR	R3
    00254 2D22      MOV	R18,R2
    00255 702F      ANDI	R18,0xF
    00256 702F      ANDI	R18,0xF
    00257 9522      SWAP	R18
    00258 2D02      MOV	R16,R2
    00259 7F00      ANDI	R16,0xF0
    0025A DEBD      RCALL	_lcd_wrDat
(0198) 		str++;
    0025B 5F4F      SUBI	R20,0xFF
    0025C 4F5F      SBCI	R21,0xFF
(0199) 		delay50us(20);
    0025D E104      LDI	R16,0x14
    0025E E010      LDI	R17,0
    0025F DE64      RCALL	_delay50us
    00260 01FA      MOVW	R30,R20
    00261 8020      LD	R2,Z
    00262 2022      TST	R2
    00263 F769      BNE	0x0251
    00264 940C 04A8 JMP	pop_xgset303C
_lcd_puts_:
  dlyMs                --> R10
  str                  --> R20
  y                    --> R14
  x                    --> R12
    00266 940E 048A CALL	push_xgset30FC
    00268 2EE2      MOV	R14,R18
    00269 2EC0      MOV	R12,R16
    0026A 8548      LDD	R20,Y+8
    0026B 8559      LDD	R21,Y+9
    0026C 84AA      LDD	R10,Y+10
(0200) 	} 
(0201) }
(0202) 
(0203) void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
(0204) { 
(0205) 	lcd_set_xy(x,y);
    0026D 2D2E      MOV	R18,R14
    0026E 2D0C      MOV	R16,R12
    0026F DEB5      RCALL	_lcd_set_xy
(0206) 	delay50us(20);   
    00270 E104      LDI	R16,0x14
    00271 E010      LDI	R17,0
    00272 DE51      RCALL	_delay50us
    00273 C00F      RJMP	0x0283
(0207) 	while(*str)
(0208) 	{
(0209) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    00274 01FA      MOVW	R30,R20
    00275 8020      LD	R2,Z
    00276 2433      CLR	R3
    00277 2D22      MOV	R18,R2
    00278 702F      ANDI	R18,0xF
    00279 702F      ANDI	R18,0xF
    0027A 9522      SWAP	R18
    0027B 2D02      MOV	R16,R2
    0027C 7F00      ANDI	R16,0xF0
    0027D DE9A      RCALL	_lcd_wrDat
(0210) 		str++;
    0027E 5F4F      SUBI	R20,0xFF
    0027F 4F5F      SBCI	R21,0xFF
(0211) 		delay50ms(dlyMs);
    00280 2D0A      MOV	R16,R10
    00281 2711      CLR	R17
    00282 DE51      RCALL	_delay50ms
    00283 01FA      MOVW	R30,R20
    00284 8020      LD	R2,Z
    00285 2022      TST	R2
    00286 F769      BNE	0x0274
    00287 940C 0474 JMP	pop_xgset30FC
(0212) 	} 
(0213) }
(0214) 
(0215) void lcd_clr()
(0216) {
(0217) 	lcd_wrCmd(0x00,0x10);
_lcd_clr:
    00289 E120      LDI	R18,0x10
    0028A 2700      CLR	R16
    0028B DE7F      RCALL	_lcd_wrCmd
(0218) 	delay50us(200);
    0028C EC08      LDI	R16,0xC8
    0028D E010      LDI	R17,0
    0028E CE35      RJMP	_delay50us
(0219) }
(0220) 
(0221) void lcd_init(void)
(0222) {
(0223) 	SPI_init();	
_lcd_init:
    0028F DE6F      RCALL	_SPI_init
(0224) 	//OUT_LCD_CS;		//若LCD_CS
(0225) 	//SET_LCD_CS;		
(0226) 	delay50ms(1);
    00290 E001      LDI	R16,1
    00291 E010      LDI	R17,0
    00292 DE41      RCALL	_delay50ms
(0227) 	lcd_wrCmd(0x30,0x30);	//使用8位控制界面,使用基本指令集
    00293 E320      LDI	R18,0x30
    00294 E300      LDI	R16,0x30
    00295 DE75      RCALL	_lcd_wrCmd
(0228) 	//lcd_wrCmd(0x00,0xF0);	//整体显示ON
(0229) 	lcd_wrCmd(0x00,0xC0);	//整体显示ON
    00296 EC20      LDI	R18,0xC0
    00297 2700      CLR	R16
    00298 DE72      RCALL	_lcd_wrCmd
(0230) 	lcd_wrCmd(0x00,0x10);	//清屏
    00299 E120      LDI	R18,0x10
    0029A 2700      CLR	R16
    0029B DE6F      RCALL	_lcd_wrCmd
(0231) 	//lcd_wrCmd(0x10,0x00);	//光标
(0232) 	lcd_wrCmd(0x00,0x60);
    0029C E620      LDI	R18,0x60
    0029D 2700      CLR	R16
    0029E DE6C      RCALL	_lcd_wrCmd
(0233) 	//lcd_wrCmd(0x00,0x70);	//显示右移
(0234) 	delay50ms(1);		//不可省去！！！
    0029F E001      LDI	R16,1
    002A0 E010      LDI	R17,0
    002A1 CE32      RJMP	_delay50ms
FILE: E:\吴泽备份\DVK501光盘内容\STK162~1.0\PCF859~1\PCF8591_LCD12864\PCF8591.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立使用PCF8591的示例程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 初始化、读取AD，使用LCD12864指示获取的AD数据，
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：将PCF8591的A0、A1、A2使用短路帽短接至“－  ”。
(0030) 		  将PCF8591的IN0接可调电阻的AD1
(0031) 		 	  DVK501				 M162+ EX
(0032) 				CS		---------	  VCC
(0033) 				PSB	    ---------	  GND
(0034) 				SID		---------	  PB5
(0035) 				CLK		---------	  PB7	
(0036) 				
(0037) 		 	  DVK501				 M162+ EX
(0038) 				VCC		---------	  VCC
(0039) 				GND		---------	  GND
(0040) 				SDA	 	---------	  PD4
(0041) 				SCK		---------	  PD5
(0042) ----------------------------------------------------------------------
(0043) 注意事项： 
(0044) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0045) （2）请详细阅读“使用必读”及相关资料。
(0046) ----------------------------------------------------------------------
(0047) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0048) 
(0049) #include <iom162v.h>
(0050) #define NO_INCLUDE_I2C_H 1
(0051) #include "D:\ICC_H\CmmICC.H"
(0052) #include "D:\ICC_H\LCD12864_ST7920_M48.H"
(0053) 
(0054) #define WR_DADR		0x90	//write device-address
(0055) #define RD_DADR		0x91	//read device-address
(0056) 
(0057) void sDelay()
(0058) {
(0059)    unsigned char n=0x07;
_sDelay:
  n                    --> R16
    002A2 E007      LDI	R16,7
(0060)    while(n--);
    002A3 2E20      MOV	R2,R16
    002A4 2433      CLR	R3
    002A5 5001      SUBI	R16,1
    002A6 2022      TST	R2
    002A7 F7D9      BNE	0x02A3
    002A8 9508      RET
_I2C_Start:
    002A9 9A8D      SBI	0x11,5
    002AA DFF7      RCALL	_sDelay
    002AB 9A8C      SBI	0x11,4
    002AC DFF5      RCALL	_sDelay
    002AD 9A94      SBI	0x12,4
    002AE DFF3      RCALL	_sDelay
    002AF 9A95      SBI	0x12,5
    002B0 DFF1      RCALL	_sDelay
    002B1 9894      CBI	0x12,4
    002B2 DFEF      RCALL	_sDelay
    002B3 9895      CBI	0x12,5
    002B4 CFED      RJMP	_sDelay
_I2C_Stop:
    002B5 9A8D      SBI	0x11,5
    002B6 DFEB      RCALL	_sDelay
    002B7 9A8C      SBI	0x11,4
    002B8 DFE9      RCALL	_sDelay
    002B9 9894      CBI	0x12,4
    002BA DFE7      RCALL	_sDelay
    002BB 9A95      SBI	0x12,5
    002BC DFE5      RCALL	_sDelay
    002BD 9A94      SBI	0x12,4
    002BE DFE3      RCALL	_sDelay
    002BF 9895      CBI	0x12,5
    002C0 CFE1      RJMP	_sDelay
_I2C_Send_DataAddr:
  I2C_n                --> R10
  wrDAdr               --> R20
    002C1 92AA      ST	-Y,R10
    002C2 934A      ST	-Y,R20
    002C3 2F40      MOV	R20,R16
    002C4 9A8D      SBI	0x11,5
    002C5 DFDC      RCALL	_sDelay
    002C6 9A8C      SBI	0x11,4
    002C7 DFDA      RCALL	_sDelay
    002C8 24AA      CLR	R10
    002C9 C00F      RJMP	0x02D9
    002CA 2F84      MOV	R24,R20
    002CB 7880      ANDI	R24,0x80
    002CC 3880      CPI	R24,0x80
    002CD F419      BNE	0x02D1
    002CE 9A94      SBI	0x12,4
    002CF DFD2      RCALL	_sDelay
    002D0 C002      RJMP	0x02D3
    002D1 9894      CBI	0x12,4
    002D2 DFCF      RCALL	_sDelay
    002D3 9A95      SBI	0x12,5
    002D4 DFCD      RCALL	_sDelay
    002D5 9895      CBI	0x12,5
    002D6 DFCB      RCALL	_sDelay
    002D7 0F44      LSL	R20
    002D8 94A3      INC	R10
    002D9 E087      LDI	R24,7
    002DA 158A      CP	R24,R10
    002DB F770      BCC	0x02CA
    002DC 988C      CBI	0x11,4
    002DD DFC4      RCALL	_sDelay
    002DE 9A94      SBI	0x12,4
    002DF DFC2      RCALL	_sDelay
    002E0 9A95      SBI	0x12,5
    002E1 DFC0      RCALL	_sDelay
    002E2 9984      SBIC	0x10,4
    002E3 CFFE      RJMP	0x02E2
    002E4 9895      CBI	0x12,5
    002E5 DFBC      RCALL	_sDelay
    002E6 9149      LD	R20,Y+
    002E7 90A9      LD	R10,Y+
    002E8 9508      RET
_I2C_Read_DataAddr:
  rdDAdr               --> R20
  n                    --> R12
  bAct                 --> R10
    002E9 940E 04A1 CALL	push_xgset303C
    002EB 2EA0      MOV	R10,R16
    002EC 2744      CLR	R20
    002ED 9895      CBI	0x12,5
    002EE DFB3      RCALL	_sDelay
    002EF 9A8D      SBI	0x11,5
    002F0 DFB1      RCALL	_sDelay
    002F1 988C      CBI	0x11,4
    002F2 DFAF      RCALL	_sDelay
    002F3 24CC      CLR	R12
    002F4 C00A      RJMP	0x02FF
    002F5 0F44      LSL	R20
    002F6 9A95      SBI	0x12,5
    002F7 DFAA      RCALL	_sDelay
    002F8 DFA9      RCALL	_sDelay
    002F9 9B84      SBIS	0x10,4
    002FA C001      RJMP	0x02FC
    002FB 6041      ORI	R20,1
    002FC 9895      CBI	0x12,5
    002FD DFA4      RCALL	_sDelay
    002FE 94C3      INC	R12
    002FF E087      LDI	R24,7
    00300 158C      CP	R24,R12
    00301 F798      BCC	0x02F5
    00302 9A8C      SBI	0x11,4
    00303 DF9E      RCALL	_sDelay
    00304 20AA      TST	R10
    00305 F019      BEQ	0x0309
    00306 9A94      SBI	0x12,4
    00307 DF9A      RCALL	_sDelay
    00308 C002      RJMP	0x030B
    00309 9894      CBI	0x12,4
    0030A DF97      RCALL	_sDelay
    0030B 9A95      SBI	0x12,5
    0030C DF95      RCALL	_sDelay
    0030D 9895      CBI	0x12,5
    0030E DF93      RCALL	_sDelay
    0030F 2F04      MOV	R16,R20
    00310 940C 04A8 JMP	pop_xgset303C
_I2C_ReadBusy:
  n                    --> R10
  wrDAdr               --> R20
    00312 92AA      ST	-Y,R10
    00313 934A      ST	-Y,R20
    00314 2F40      MOV	R20,R16
    00315 9A8D      SBI	0x11,5
    00316 DF8B      RCALL	_sDelay
    00317 9A8C      SBI	0x11,4
    00318 DF89      RCALL	_sDelay
    00319 24AA      CLR	R10
    0031A C00F      RJMP	0x032A
    0031B 2F84      MOV	R24,R20
    0031C 7880      ANDI	R24,0x80
    0031D 3880      CPI	R24,0x80
    0031E F419      BNE	0x0322
    0031F 9A94      SBI	0x12,4
    00320 DF81      RCALL	_sDelay
    00321 C002      RJMP	0x0324
    00322 9894      CBI	0x12,4
    00323 DF7E      RCALL	_sDelay
    00324 9A95      SBI	0x12,5
    00325 DF7C      RCALL	_sDelay
    00326 9895      CBI	0x12,5
    00327 DF7A      RCALL	_sDelay
    00328 0F44      LSL	R20
    00329 94A3      INC	R10
    0032A E087      LDI	R24,7
    0032B 158A      CP	R24,R10
    0032C F770      BCC	0x031B
    0032D 988C      CBI	0x11,4
    0032E DF73      RCALL	_sDelay
    0032F 9A94      SBI	0x12,4
    00330 DF71      RCALL	_sDelay
    00331 9A95      SBI	0x12,5
    00332 DF6F      RCALL	_sDelay
    00333 B340      IN	R20,0x10
    00334 7140      ANDI	R20,0x10
    00335 9895      CBI	0x12,5
    00336 DF6B      RCALL	_sDelay
    00337 2F04      MOV	R16,R20
    00338 9149      LD	R20,Y+
    00339 90A9      LD	R10,Y+
    0033A 9508      RET
_PCF8591_getAD:
  PCF8591_num          --> R10
  wordAdr              --> R10
    0033B 92AA      ST	-Y,R10
    0033C 2EA0      MOV	R10,R16
    0033D DF6B      RCALL	_I2C_Start
    0033E E900      LDI	R16,0x90
    0033F DF81      RCALL	_I2C_Send_DataAddr
    00340 2D0A      MOV	R16,R10
    00341 DF7F      RCALL	_I2C_Send_DataAddr
    00342 DF66      RCALL	_I2C_Start
    00343 E901      LDI	R16,0x91
    00344 DF7C      RCALL	_I2C_Send_DataAddr
    00345 E001      LDI	R16,1
    00346 DFA2      RCALL	_I2C_Read_DataAddr
    00347 2EA0      MOV	R10,R16
    00348 DF6C      RCALL	_I2C_Stop
    00349 2D0A      MOV	R16,R10
    0034A 90A9      LD	R10,Y+
    0034B 9508      RET
_PCF8591_setDA:
  val                  --> R10
    0034C 92AA      ST	-Y,R10
    0034D 2EA0      MOV	R10,R16
    0034E DF5A      RCALL	_I2C_Start
    0034F E900      LDI	R16,0x90
    00350 DF70      RCALL	_I2C_Send_DataAddr
    00351 E400      LDI	R16,0x40
    00352 DF6E      RCALL	_I2C_Send_DataAddr
    00353 2D0A      MOV	R16,R10
    00354 DF6C      RCALL	_I2C_Send_DataAddr
    00355 DF5F      RCALL	_I2C_Stop
    00356 90A9      LD	R10,Y+
    00357 9508      RET
(0061) }
(0062) 
(0063) #define DELAY_NOP  sDelay()
(0064) 
(0065) //SDA端口定义
(0066) #define SDA_IN		{cbi(DDRD,4);DELAY_NOP;}
(0067) #define SDA_OUT		{sbi(DDRD,4);DELAY_NOP;}
(0068) #define SDA_SET		{sbi(PORTD,4);DELAY_NOP;}
(0069) #define SDA_CLR		{cbi(PORTD,4);DELAY_NOP;}
(0070) #define SDA_PIN		gbi(PIND,4)
(0071) 
(0072) //SCL端口定义
(0073) #define SCL_IN  	{cbi(DDRD,5);DELAY_NOP;}
(0074) #define SCL_OUT		{sbi(DDRD,5);DELAY_NOP;}
(0075) #define SCL_SET		{sbi(PORTD,5);DELAY_NOP;}
(0076) #define SCL_CLR		{cbi(PORTD,5);DELAY_NOP;}
(0077) #define SCL_PIN		gbi(PIND,5)
(0078) 
(0079) 
(0080) #include "D:\ICC_H\DVK501_IIC_sim.h"
(0081) #include "D:\ICC_H\PCF8591_sim.H"  
(0082) 
(0083) #define DISP_DDR	DDRB
(0084) #define DISP_PORT	PORTB
(0085) 
(0086) void delay250ms(void)
(0087) {
(0088) 	uchar delay_num1,delay_num2;
(0089) 	for(delay_num1=0;delay_num1<=250;delay_num1++)
_delay250ms:
  delay_num1           --> R16
  delay_num2           --> R18
    00358 2700      CLR	R16
    00359 C007      RJMP	0x0361
(0090) 		for(delay_num2=0;delay_num2<=250;delay_num2++) {}  //1ms
    0035A 2722      CLR	R18
    0035B C001      RJMP	0x035D
    0035C 9523      INC	R18
    0035D EF8A      LDI	R24,0xFA
    0035E 1782      CP	R24,R18
    0035F F7E0      BCC	0x035C
    00360 9503      INC	R16
    00361 EF8A      LDI	R24,0xFA
    00362 1780      CP	R24,R16
    00363 F7B0      BCC	0x035A
    00364 9508      RET
_main:
  ad_tmp1              --> R10
  ad_tmp0              --> R12
  ad_tmp2              --> R14
    00365 9725      SBIW	R28,5
(0091) }
(0092) 
(0093) 
(0094) /*--------------------------------------------------------------------
(0095) 函数名称：
(0096) 函数功能：
(0097) 注意事项：
(0098) 提示说明：
(0099) 输    入：
(0100) 返    回：
(0101) --------------------------------------------------------------------*/
(0102) void main(void)
(0103) {
(0104)     unsigned char ad_tmp2;
(0105) 	unsigned int ad_tmp0,ad_tmp1;
(0106) 	//DDRF=0xFF;
(0107) 	//TWBR = 0X12;
(0108) 	lcd_init();
    00366 DF28      RCALL	_lcd_init
(0109) 	lcd_clr();
    00367 DF21      RCALL	_lcd_clr
(0110) 	lcd_puts(1,1,"AD测试程序");
    00368 E184      LDI	R24,0x14
    00369 E091      LDI	R25,1
    0036A 8399      STD	Y+1,R25
    0036B 8388      ST	Y,R24
    0036C E021      LDI	R18,1
    0036D E001      LDI	R16,1
    0036E DED5      RCALL	_lcd_puts
(0111) 	lcd_puts(2,1,"PCF8591");
    0036F E08C      LDI	R24,0xC
    00370 E091      LDI	R25,1
    00371 8399      STD	Y+1,R25
    00372 8388      ST	Y,R24
    00373 E021      LDI	R18,1
    00374 E002      LDI	R16,2
    00375 DECE      RCALL	_lcd_puts
(0112) 	lcd_puts(3,1,"当前电压为:");	
    00376 E080      LDI	R24,0
    00377 E091      LDI	R25,1
    00378 8399      STD	Y+1,R25
    00379 8388      ST	Y,R24
    0037A E021      LDI	R18,1
    0037B E003      LDI	R16,3
    0037C DEC7      RCALL	_lcd_puts
    0037D C040      RJMP	0x03BE
(0113)  	 while(1)
(0114) 	 {
(0115) 			ad_tmp2=PCF8591_getAD(0x00);
    0037E 2700      CLR	R16
    0037F DFBB      RCALL	_PCF8591_getAD
    00380 2EE0      MOV	R14,R16
(0116) 			ad_tmp0=(unsigned int)ad_tmp2;
    00381 2CCE      MOV	R12,R14
    00382 24DD      CLR	R13
(0117) 			if(ad_tmp0!=ad_tmp1)
    00383 14CA      CP	R12,R10
    00384 04DB      CPC	R13,R11
    00385 F199      BEQ	0x03B9
(0118) 			{
(0119) 			 	ad_tmp2=(unsigned char)((ad_tmp0*5)>>8);
    00386 E005      LDI	R16,5
    00387 E010      LDI	R17,0
    00388 0196      MOVW	R18,R12
    00389 940E 0430 CALL	empy16s
    0038B 0178      MOVW	R14,R16
    0038C 2CEF      MOV	R14,R15
    0038D 24FF      CLR	R15
(0120) 			 	lcd_putd(4,4,ad_tmp2,0);
    0038E 2422      CLR	R2
    0038F 822C      STD	Y+4,R2
    00390 2C2E      MOV	R2,R14
    00391 2433      CLR	R3
    00392 2444      CLR	R4
    00393 2455      CLR	R5
    00394 8228      ST	Y,R2
    00395 8239      STD	Y+1,R3
    00396 824A      STD	Y+2,R4
    00397 825B      STD	Y+3,R5
    00398 E024      LDI	R18,4
    00399 E004      LDI	R16,4
    0039A DE00      RCALL	_lcd_putd
(0121) 				lcd_putc(4,5,'.');
    0039B E28E      LDI	R24,0x2E
    0039C 8388      ST	Y,R24
    0039D E025      LDI	R18,5
    0039E E004      LDI	R16,4
    0039F DDB0      RCALL	_lcd_putc
(0122) 				ad_tmp2=(unsigned char)(ad_tmp0*5);
    003A0 E005      LDI	R16,5
    003A1 E010      LDI	R17,0
    003A2 0196      MOVW	R18,R12
    003A3 940E 0430 CALL	empy16s
    003A5 2EE0      MOV	R14,R16
(0123) 				lcd_putd(4,6,ad_tmp2,0);
    003A6 2422      CLR	R2
    003A7 822C      STD	Y+4,R2
    003A8 2C2E      MOV	R2,R14
    003A9 2433      CLR	R3
    003AA 2444      CLR	R4
    003AB 2455      CLR	R5
    003AC 8228      ST	Y,R2
    003AD 8239      STD	Y+1,R3
    003AE 824A      STD	Y+2,R4
    003AF 825B      STD	Y+3,R5
    003B0 E026      LDI	R18,6
    003B1 E004      LDI	R16,4
    003B2 DDE8      RCALL	_lcd_putd
(0124) 				lcd_putc(4,7,'V');
    003B3 E586      LDI	R24,0x56
    003B4 8388      ST	Y,R24
    003B5 E027      LDI	R18,7
    003B6 E004      LDI	R16,4
    003B7 DD98      RCALL	_lcd_putc
(0125) 				ad_tmp1 = ad_tmp0;
    003B8 0156      MOVW	R10,R12
(0126) 			}
(0127) 			ad_tmp0=(unsigned int)ad_tmp2;
    003B9 2CCE      MOV	R12,R14
    003BA 24DD      CLR	R13
(0128) 			delay50ms(1);
FILE: <library>
    003BB E001      LDI	R16,1
    003BC E010      LDI	R17,0
    003BD DD16      RCALL	_delay50ms
    003BE CFBF      RJMP	0x037E
    003BF 9625      ADIW	R28,5
    003C0 9508      RET
push_arg4:
    003C1 933A      ST	-Y,R19
    003C2 932A      ST	-Y,R18
push_arg2:
    003C3 931A      ST	-Y,R17
    003C4 930A      ST	-Y,R16
    003C5 9508      RET
div32u:
    003C6 94E8      BCLR	6
    003C7 C001      RJMP	0x03C9
mod32u:
    003C8 9468      BSET	6
    003C9 D030      RCALL	long_div_prolog
    003CA 24CC      CLR	R12
    003CB C009      RJMP	0x03D5
div32s:
    003CC 94E8      BCLR	6
    003CD C001      RJMP	0x03CF
mod32s:
    003CE 9468      BSET	6
    003CF D02A      RCALL	long_div_prolog
    003D0 FD37      SBRC	R19,7
    003D1 940E 04C1 CALL	neg32
    003D3 FDB7      SBRC	R27,7
    003D4 D052      RCALL	neg_R24_R27
    003D5 2477      CLR	R7
    003D6 2488      CLR	R8
    003D7 2499      CLR	R9
    003D8 24AA      CLR	R10
    003D9 24BB      CLR	R11
    003DA D042      RCALL	tst_R16_R19
    003DB F0C1      BEQ	0x03F4
    003DC D045      RCALL	tst_R24_R27
    003DD F0B1      BEQ	0x03F4
    003DE E2E8      LDI	R30,0x28
    003DF 0F00      LSL	R16
    003E0 1F11      ROL	R17
    003E1 1F22      ROL	R18
    003E2 1F33      ROL	R19
    003E3 1C77      ROL	R7
    003E4 1C88      ROL	R8
    003E5 1C99      ROL	R9
    003E6 1CAA      ROL	R10
    003E7 1CBB      ROL	R11
    003E8 1688      CP	R8,R24
    003E9 0699      CPC	R9,R25
    003EA 06AA      CPC	R10,R26
    003EB 06BB      CPC	R11,R27
    003EC F028      BCS	0x03F2
    003ED 1A88      SUB	R8,R24
    003EE 0A99      SBC	R9,R25
    003EF 0AAA      SBC	R10,R26
    003F0 0ABB      SBC	R11,R27
    003F1 9503      INC	R16
    003F2 95EA      DEC	R30
    003F3 F759      BNE	0x03DF
    003F4 F426      BRTC	0x03F9
    003F5 2D08      MOV	R16,R8
    003F6 2D19      MOV	R17,R9
    003F7 2D2A      MOV	R18,R10
    003F8 2D3B      MOV	R19,R11
    003F9 C013      RJMP	long_div_epilog
long_div_prolog:
    003FA 927A      ST	-Y,R7
    003FB 928A      ST	-Y,R8
    003FC 929A      ST	-Y,R9
    003FD 92AA      ST	-Y,R10
    003FE 92BA      ST	-Y,R11
    003FF 92CA      ST	-Y,R12
    00400 93EA      ST	-Y,R30
    00401 938A      ST	-Y,R24
    00402 939A      ST	-Y,R25
    00403 93AA      ST	-Y,R26
    00404 93BA      ST	-Y,R27
    00405 858B      LDD	R24,Y+11
    00406 859C      LDD	R25,Y+12
    00407 85AD      LDD	R26,Y+13
    00408 85BE      LDD	R27,Y+14
    00409 2EC3      MOV	R12,R19
    0040A F00E      BRTS	0x040C
    0040B 26CB      EOR	R12,R27
    0040C 9508      RET
long_div_epilog:
    0040D FCC7      SBRC	R12,7
    0040E 940E 04C1 CALL	neg32
    00410 91B9      LD	R27,Y+
    00411 91A9      LD	R26,Y+
    00412 9199      LD	R25,Y+
    00413 9189      LD	R24,Y+
    00414 91E9      LD	R30,Y+
    00415 90C9      LD	R12,Y+
    00416 90B9      LD	R11,Y+
    00417 90A9      LD	R10,Y+
    00418 9099      LD	R9,Y+
    00419 9089      LD	R8,Y+
    0041A 9079      LD	R7,Y+
    0041B 9624      ADIW	R28,4
    0041C 9508      RET
tst_R16_R19:
    0041D 2FE0      MOV	R30,R16
    0041E 2BE1      OR	R30,R17
    0041F 2BE2      OR	R30,R18
    00420 2BE3      OR	R30,R19
    00421 9508      RET
tst_R24_R27:
    00422 2FE8      MOV	R30,R24
    00423 2BE9      OR	R30,R25
    00424 2BEA      OR	R30,R26
    00425 2BEB      OR	R30,R27
    00426 9508      RET
neg_R24_R27:
    00427 9580      COM	R24
    00428 9590      COM	R25
    00429 95A0      COM	R26
    0042A 95B0      COM	R27
    0042B 5F8F      SUBI	R24,0xFF
    0042C 4F9F      SBCI	R25,0xFF
    0042D 4FAF      SBCI	R26,0xFF
    0042E 4FBF      SBCI	R27,0xFF
    0042F 9508      RET
empy16s:
    00430 920A      ST	-Y,R0
    00431 921A      ST	-Y,R1
    00432 938A      ST	-Y,R24
    00433 939A      ST	-Y,R25
    00434 9F02      MUL	R16,R18
    00435 01C0      MOVW	R24,R0
    00436 9F12      MUL	R17,R18
    00437 0D90      ADD	R25,R0
    00438 9F03      MUL	R16,R19
    00439 0D90      ADD	R25,R0
    0043A 018C      MOVW	R16,R24
    0043B 9199      LD	R25,Y+
    0043C 9189      LD	R24,Y+
    0043D 9019      LD	R1,Y+
    0043E 9009      LD	R0,Y+
    0043F 9508      RET
empy32u|empy32s:
    00440 940E 04CA CALL	long_prolog
    00442 927A      ST	-Y,R7
    00443 940E 04E3 CALL	tstzero1
    00445 F159      BEQ	0x0471
    00446 2477      CLR	R7
    00447 940E 04E9 CALL	tstzero2
    00449 F419      BNE	0x044D
    0044A 018C      MOVW	R16,R24
    0044B 019D      MOVW	R18,R26
    0044C C024      RJMP	0x0471
    0044D 920A      ST	-Y,R0
    0044E 921A      ST	-Y,R1
    0044F 9F08      MUL	R16,R24
    00450 2CB0      MOV	R11,R0
    00451 2CA1      MOV	R10,R1
    00452 9F28      MUL	R18,R24
    00453 2C90      MOV	R9,R0
    00454 2C81      MOV	R8,R1
    00455 9F18      MUL	R17,R24
    00456 0CA0      ADD	R10,R0
    00457 1C91      ADC	R9,R1
    00458 1C87      ADC	R8,R7
    00459 9F09      MUL	R16,R25
    0045A 0CA0      ADD	R10,R0
    0045B 1C91      ADC	R9,R1
    0045C 1C87      ADC	R8,R7
    0045D 9F19      MUL	R17,R25
    0045E 0C90      ADD	R9,R0
    0045F 1C81      ADC	R8,R1
    00460 9F0A      MUL	R16,R26
    00461 0C90      ADD	R9,R0
    00462 1C81      ADC	R8,R1
    00463 9F38      MUL	R19,R24
    00464 0C80      ADD	R8,R0
    00465 9F29      MUL	R18,R25
    00466 0C80      ADD	R8,R0
    00467 9F1A      MUL	R17,R26
    00468 0C80      ADD	R8,R0
    00469 9F0B      MUL	R16,R27
    0046A 0C80      ADD	R8,R0
    0046B 9019      LD	R1,Y+
    0046C 9009      LD	R0,Y+
    0046D 2D0B      MOV	R16,R11
    0046E 2D1A      MOV	R17,R10
    0046F 2D29      MOV	R18,R9
    00470 2D38      MOV	R19,R8
    00471 9079      LD	R7,Y+
    00472 940C 04D8 JMP	long_epilog
pop_xgset30FC:
    00474 90A9      LD	R10,Y+
    00475 90B9      LD	R11,Y+
    00476 90C9      LD	R12,Y+
    00477 90D9      LD	R13,Y+
    00478 90E9      LD	R14,Y+
    00479 90F9      LD	R15,Y+
    0047A 9149      LD	R20,Y+
    0047B 9159      LD	R21,Y+
    0047C 9508      RET
pop_xgsetF0FC:
    0047D 90A9      LD	R10,Y+
    0047E 90B9      LD	R11,Y+
    0047F 90C9      LD	R12,Y+
    00480 90D9      LD	R13,Y+
    00481 90E9      LD	R14,Y+
    00482 90F9      LD	R15,Y+
    00483 9149      LD	R20,Y+
    00484 9159      LD	R21,Y+
    00485 9169      LD	R22,Y+
    00486 9179      LD	R23,Y+
    00487 9508      RET
push_xgsetF0FC:
    00488 937A      ST	-Y,R23
    00489 936A      ST	-Y,R22
push_xgset30FC:
    0048A 935A      ST	-Y,R21
    0048B 934A      ST	-Y,R20
push_xgset00FC:
    0048C 92FA      ST	-Y,R15
    0048D 92EA      ST	-Y,R14
push_xgset003C:
    0048E 92DA      ST	-Y,R13
    0048F 92CA      ST	-Y,R12
    00490 92BA      ST	-Y,R11
    00491 92AA      ST	-Y,R10
    00492 9508      RET
push_xgsetF00C:
    00493 937A      ST	-Y,R23
    00494 936A      ST	-Y,R22
    00495 935A      ST	-Y,R21
    00496 934A      ST	-Y,R20
    00497 92BA      ST	-Y,R11
    00498 92AA      ST	-Y,R10
    00499 9508      RET
pop_xgsetF00C:
    0049A 90A9      LD	R10,Y+
    0049B 90B9      LD	R11,Y+
    0049C 9149      LD	R20,Y+
    0049D 9159      LD	R21,Y+
    0049E 9169      LD	R22,Y+
    0049F 9179      LD	R23,Y+
    004A0 9508      RET
push_xgset303C:
    004A1 935A      ST	-Y,R21
    004A2 934A      ST	-Y,R20
    004A3 92DA      ST	-Y,R13
    004A4 92CA      ST	-Y,R12
    004A5 92BA      ST	-Y,R11
    004A6 92AA      ST	-Y,R10
    004A7 9508      RET
pop_xgset303C:
    004A8 90A9      LD	R10,Y+
    004A9 90B9      LD	R11,Y+
    004AA 90C9      LD	R12,Y+
    004AB 90D9      LD	R13,Y+
    004AC 9149      LD	R20,Y+
    004AD 9159      LD	R21,Y+
    004AE 9508      RET
push_xgsetF03C:
    004AF 937A      ST	-Y,R23
    004B0 936A      ST	-Y,R22
    004B1 935A      ST	-Y,R21
    004B2 934A      ST	-Y,R20
    004B3 92DA      ST	-Y,R13
    004B4 92CA      ST	-Y,R12
    004B5 92BA      ST	-Y,R11
    004B6 92AA      ST	-Y,R10
    004B7 9508      RET
pop_xgsetF03C:
    004B8 90A9      LD	R10,Y+
    004B9 90B9      LD	R11,Y+
    004BA 90C9      LD	R12,Y+
    004BB 90D9      LD	R13,Y+
    004BC 9149      LD	R20,Y+
    004BD 9159      LD	R21,Y+
    004BE 9169      LD	R22,Y+
    004BF 9179      LD	R23,Y+
    004C0 9508      RET
neg32:
    004C1 9500      COM	R16
    004C2 9510      COM	R17
    004C3 9520      COM	R18
    004C4 9530      COM	R19
    004C5 5F0F      SUBI	R16,0xFF
    004C6 4F1F      SBCI	R17,0xFF
    004C7 4F2F      SBCI	R18,0xFF
    004C8 4F3F      SBCI	R19,0xFF
    004C9 9508      RET
long_prolog:
    004CA 928A      ST	-Y,R8
    004CB 929A      ST	-Y,R9
    004CC 92AA      ST	-Y,R10
    004CD 92BA      ST	-Y,R11
    004CE 93EA      ST	-Y,R30
    004CF 938A      ST	-Y,R24
    004D0 939A      ST	-Y,R25
    004D1 93AA      ST	-Y,R26
    004D2 93BA      ST	-Y,R27
    004D3 8589      LDD	R24,Y+9
    004D4 859A      LDD	R25,Y+10
    004D5 85AB      LDD	R26,Y+11
    004D6 85BC      LDD	R27,Y+12
    004D7 9508      RET
long_epilog:
    004D8 91B9      LD	R27,Y+
    004D9 91A9      LD	R26,Y+
    004DA 9199      LD	R25,Y+
    004DB 9189      LD	R24,Y+
    004DC 91E9      LD	R30,Y+
    004DD 90B9      LD	R11,Y+
    004DE 90A9      LD	R10,Y+
    004DF 9099      LD	R9,Y+
    004E0 9089      LD	R8,Y+
    004E1 9624      ADIW	R28,4
    004E2 9508      RET
tstzero1:
    004E3 27EE      CLR	R30
    004E4 2BE0      OR	R30,R16
    004E5 2BE1      OR	R30,R17
    004E6 2BE2      OR	R30,R18
    004E7 2BE3      OR	R30,R19
    004E8 9508      RET
tstzero2:
    004E9 27EE      CLR	R30
    004EA 2BE8      OR	R30,R24
    004EB 2BE9      OR	R30,R25
    004EC 2BEA      OR	R30,R26
    004ED 2BEB      OR	R30,R27
    004EE 9508      RET
