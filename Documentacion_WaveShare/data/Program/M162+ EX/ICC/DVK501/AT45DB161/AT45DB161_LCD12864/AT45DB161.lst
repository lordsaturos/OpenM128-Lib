Interrupt Vectors
    00000 940C 004C JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0004C EFCF      LDI	R28,0xFF
    0004D E0D4      LDI	R29,4
    0004E BFCD      OUT	0x3D,R28
    0004F BFDE      OUT	0x3E,R29
    00050 51C0      SUBI	R28,0x10
    00051 40D0      SBCI	R29,0
    00052 EA0A      LDI	R16,0xAA
    00053 8308      ST	Y,R16
    00054 2400      CLR	R0
    00055 E2E8      LDI	R30,0x28
    00056 E0F1      LDI	R31,1
    00057 E011      LDI	R17,1
    00058 32EE      CPI	R30,0x2E
    00059 07F1      CPC	R31,R17
    0005A F011      BEQ	0x005D
    0005B 9201      ST	Z+,R0
    0005C CFFB      RJMP	0x0058
    0005D 8300      ST	Z,R16
    0005E E7E0      LDI	R30,0x70
    0005F E0F0      LDI	R31,0
    00060 E0A0      LDI	R26,0
    00061 E0B1      LDI	R27,1
    00062 E010      LDI	R17,0
    00063 E000      LDI	R16,0
    00064 BF0B      OUT	0x3B,R16
    00065 39E8      CPI	R30,0x98
    00066 07F1      CPC	R31,R17
    00067 F021      BEQ	0x006C
    00068 95C8      LPM
    00069 9631      ADIW	R30,1
    0006A 920D      ST	X+,R0
    0006B CFF9      RJMP	0x0065
    0006C 940E 02E2 CALL	_main
_exit:
    0006E CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0006F 940E 035B CALL	push_arg4
    00071 940E 043E CALL	push_xgsetF03C
    00073 9728      SBIW	R28,0x8
    00074 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00075 24AA      CLR	R10
    00076 E081      LDI	R24,1
    00077 8388      ST	Y,R24
    00078 E080      LDI	R24,0
    00079 8389      STD	Y+1,R24
    0007A 838A      STD	Y+2,R24
    0007B 838B      STD	Y+3,R24
    0007C C03C      RJMP	0x00B9
(0120)     {
(0121)         y=dat/j;
    0007D 8028      LD	R2,Y
    0007E 8039      LDD	R3,Y+1
    0007F 804A      LDD	R4,Y+2
    00080 805B      LDD	R5,Y+3
    00081 8908      LDD	R16,Y+16
    00082 8919      LDD	R17,Y+17
    00083 892A      LDD	R18,Y+18
    00084 893B      LDD	R19,Y+19
    00085 925A      ST	-Y,R5
    00086 924A      ST	-Y,R4
    00087 923A      ST	-Y,R3
    00088 922A      ST	-Y,R2
    00089 940E 0360 CALL	div32u
    0008B 830C      STD	Y+4,R16
    0008C 831D      STD	Y+5,R17
    0008D 832E      STD	Y+6,R18
    0008E 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0008F E04A      LDI	R20,0xA
    00090 E050      LDI	R21,0
    00091 E060      LDI	R22,0
    00092 E070      LDI	R23,0
    00093 810C      LDD	R16,Y+4
    00094 811D      LDD	R17,Y+5
    00095 812E      LDD	R18,Y+6
    00096 813F      LDD	R19,Y+7
    00097 937A      ST	-Y,R23
    00098 936A      ST	-Y,R22
    00099 935A      ST	-Y,R21
    0009A 934A      ST	-Y,R20
    0009B 940E 0362 CALL	mod32u
    0009D E288      LDI	R24,0x28
    0009E E091      LDI	R25,1
    0009F 2DEA      MOV	R30,R10
    000A0 27FF      CLR	R31
    000A1 0FE8      ADD	R30,R24
    000A2 1FF9      ADC	R31,R25
    000A3 8300      ST	Z,R16
(0123)         j*=10;
    000A4 8028      LD	R2,Y
    000A5 8039      LDD	R3,Y+1
    000A6 804A      LDD	R4,Y+2
    000A7 805B      LDD	R5,Y+3
    000A8 E04A      LDI	R20,0xA
    000A9 E050      LDI	R21,0
    000AA E060      LDI	R22,0
    000AB E070      LDI	R23,0
    000AC 925A      ST	-Y,R5
    000AD 924A      ST	-Y,R4
    000AE 923A      ST	-Y,R3
    000AF 922A      ST	-Y,R2
    000B0 018A      MOVW	R16,R20
    000B1 019B      MOVW	R18,R22
    000B2 940E 03CA CALL	empy32u|empy32s
    000B4 8308      ST	Y,R16
    000B5 8319      STD	Y+1,R17
    000B6 832A      STD	Y+2,R18
    000B7 833B      STD	Y+3,R19
    000B8 94A3      INC	R10
    000B9 2C2C      MOV	R2,R12
    000BA 2433      CLR	R3
    000BB FC27      SBRC	R2,7
    000BC 9430      COM	R3
    000BD 2C4A      MOV	R4,R10
    000BE 2455      CLR	R5
    000BF 1442      CP	R4,R2
    000C0 0453      CPC	R5,R3
    000C1 F40C      BGE	0x00C3
    000C2 CFBA      RJMP	0x007D
    000C3 9628      ADIW	R28,0x8
    000C4 940E 0447 CALL	pop_xgsetF03C
    000C6 9624      ADIW	R28,4
    000C7 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    000C8 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    000C9 C007      RJMP	0x00D1
(0108)         for(j=0;j<70;j++)	
    000CA 2744      CLR	R20
    000CB C001      RJMP	0x00CD
    000CC 9543      INC	R20
    000CD 3446      CPI	R20,0x46
    000CE F3E8      BCS	0x00CC
    000CF 5001      SUBI	R16,1
    000D0 4010      SBCI	R17,0
    000D1 2422      CLR	R2
    000D2 2433      CLR	R3
    000D3 1620      CP	R2,R16
    000D4 0631      CPC	R3,R17
    000D5 F3A4      BLT	0x00CA
    000D6 9149      LD	R20,Y+
    000D7 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    000D8 934A      ST	-Y,R20
    000D9 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    000DA C013      RJMP	0x00EE
(0123) 		for(i=0;i<52642;i++)
    000DB 2744      CLR	R20
    000DC 2755      CLR	R21
    000DD C002      RJMP	0x00E0
    000DE 5F4F      SUBI	R20,0xFF
    000DF 4F5F      SBCI	R21,0xFF
    000E0 EA82      LDI	R24,0xA2
    000E1 EC9D      LDI	R25,0xCD
    000E2 E0A0      LDI	R26,0
    000E3 E0B0      LDI	R27,0
    000E4 011A      MOVW	R2,R20
    000E5 2444      CLR	R4
    000E6 2455      CLR	R5
    000E7 1628      CP	R2,R24
    000E8 0639      CPC	R3,R25
    000E9 064A      CPC	R4,R26
    000EA 065B      CPC	R5,R27
    000EB F394      BLT	0x00DE
    000EC 5001      SUBI	R16,1
    000ED 4010      SBCI	R17,0
    000EE 2422      CLR	R2
    000EF 2433      CLR	R3
    000F0 1620      CP	R2,R16
    000F1 0631      CPC	R3,R17
    000F2 F344      BLT	0x00DB
    000F3 9159      LD	R21,Y+
    000F4 9149      LD	R20,Y+
    000F5 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    000F6 934A      ST	-Y,R20
    000F7 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    000F8 2744      CLR	R20
    000F9 2755      CLR	R21
    000FA C002      RJMP	0x00FD
    000FB 5F4F      SUBI	R20,0xFF
    000FC 4F5F      SBCI	R21,0xFF
    000FD 1740      CP	R20,R16
    000FE 0751      CPC	R21,R17
    000FF F3D8      BCS	0x00FB
    00100 9159      LD	R21,Y+
    00101 9149      LD	R20,Y+
    00102 9508      RET
FILE: D:\ICC_H\LCD12864_ST7920_M48.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 	                                                        
(0004) 目    的:   建立LCD12864_ST7920的串模式操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 	                                                                
(0008) 应用软件:   ICCAVR                                               
(0009) 	                                                                
(0010) 版    本:   Version 1.0
(0011) 	                                                                
(0012) 圆版时间:   2005-09-06
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) 
(0026) 
(0027) ----------------------------------------------------------------------
(0028) 入口参数说明：
(0029) 	//#define OUT_LCD_CS	sbi(DDRD,0)
(0030) 	//#define SET_LCD_CS	sbi(PORTD,0)
(0031) 	//#define CLR_LCD_CS	cbi(PORTD,0)
(0032) 
(0033) ----------------------------------------------------------------------
(0034) 待定参数说明：
(0035) 	
(0036) 
(0037) ----------------------------------------------------------------------	
(0038) 对外变量说明：
(0039) 
(0040) ----------------------------------------------------------------------
(0041) 对外函数说明：
(0042) 
(0043) ----------------------------------------------------------------------
(0044) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0045) 
(0046) 
(0047) /*--------------------------------------------------------------------
(0048) 接口定义：
(0049) 
(0050) LCD12864_ST7920			ATmega16
(0051) 1.GND		--------	GND
(0052) 2.VCC		--------	VCC
(0053) 3.V0		--------	V0
(0054) 4.RS(CS)	--------	VCC
(0055) 5.R/W(SID)	--------	MOSI/PB5
(0056) 6.E(SCLK)	--------	SCK/PB7
(0057) 7.D0		--------	NC
(0058) 8.D1		--------	NC
(0059) 9.D2		--------	NC
(0060) 10.D3		--------	NC
(0061) 11.D4		--------	NC
(0062) 12.D5		--------	NC
(0063) 13.D6		--------	NC
(0064) 14.D7		--------	NC
(0065) 15.PSB		--------	GND
(0066) 16.NC		--------	NC
(0067) 17.RST		--------	NC
(0068) 18.NC		--------	NC
(0069) 19.LED+		--------	VCC
(0070) 20.LED-		--------	GND
(0071) 
(0072) 说明：
(0073) （1）使用ATmega16的硬件SPI操作LCD12864_ST7920
(0074) （2）PIN4/CS接VCC，其实也可接到特定的IO口，但外部程序需要指定
(0075) --------------------------------------------------------------------*/
(0076) 
(0077) #ifndef LCD12864_ST7920_H
(0078) #define LCD12864_ST7920_H
(0079) 
(0080) #include "D:\ICC_H\CmmIcc.h"
(0081) 
(0082) void SPI_init()
(0083) {
(0084) 	DDRB =0xFF;
_SPI_init:
    00103 EF8F      LDI	R24,0xFF
    00104 BB87      OUT	0x17,R24
(0085) 	SPCR = 0x50;	//setup SPI
    00105 E580      LDI	R24,0x50
    00106 B98D      OUT	0x0D,R24
(0086) 	SPSR = 0x01;	//setup SPI
    00107 E081      LDI	R24,1
    00108 B98E      OUT	0x0E,R24
(0087) 	SEI();			
    00109 9478      BSET	7
    0010A 9508      RET
(0088) }
(0089) 
(0090) void lcd_wrByte(uint8 data)
(0091) {  
(0092) 	SPDR = data;        
_lcd_wrByte:
  data                 --> R16
    0010B B90F      OUT	0x0F,R16
(0093) 	while ((SPSR & 0x80) == 0);  
    0010C 9B77      SBIS	0x0E,7
    0010D CFFE      RJMP	0x010C
    0010E 9508      RET
_lcd_wrCmd:
  LC                   --> R10
  HC                   --> R12
    0010F 92AA      ST	-Y,R10
    00110 92CA      ST	-Y,R12
    00111 2EA2      MOV	R10,R18
    00112 2EC0      MOV	R12,R16
(0094) }
(0095) 
(0096) void lcd_wrCmd(uint8 HC,uint8 LC)
(0097) {
(0098) 	lcd_wrByte(0xF8);
    00113 EF08      LDI	R16,0xF8
    00114 DFF6      RCALL	_lcd_wrByte
(0099) 	lcd_wrByte(HC);		//传输高四位
    00115 2D0C      MOV	R16,R12
    00116 DFF4      RCALL	_lcd_wrByte
(0100) 	lcd_wrByte(LC);		//传输低四位
    00117 2D0A      MOV	R16,R10
    00118 DFF2      RCALL	_lcd_wrByte
    00119 90C9      LD	R12,Y+
    0011A 90A9      LD	R10,Y+
    0011B 9508      RET
_lcd_wrDat:
  LD                   --> R10
  HD                   --> R12
    0011C 92AA      ST	-Y,R10
    0011D 92CA      ST	-Y,R12
    0011E 2EA2      MOV	R10,R18
    0011F 2EC0      MOV	R12,R16
(0101) }
(0102) 
(0103) void lcd_wrDat(uint8 HD,uint8 LD)
(0104) {
(0105) 	lcd_wrByte(0xFA);
    00120 EF0A      LDI	R16,0xFA
    00121 DFE9      RCALL	_lcd_wrByte
(0106) 	lcd_wrByte(HD);		//传输高四位
    00122 2D0C      MOV	R16,R12
    00123 DFE7      RCALL	_lcd_wrByte
(0107) 	lcd_wrByte(LD);		//传输低四位
    00124 2D0A      MOV	R16,R10
    00125 DFE5      RCALL	_lcd_wrByte
    00126 90C9      LD	R12,Y+
    00127 90A9      LD	R10,Y+
    00128 9508      RET
_lcd_set_xy:
  adr                  --> R20
  y                    --> R22
  x                    --> R10
    00129 940E 0422 CALL	push_xgsetF00C
    0012B 2F62      MOV	R22,R18
    0012C 2EA0      MOV	R10,R16
(0108) } 
(0109) 
(0110) /*
(0111) x表示在第几行显示，y表示在第几列显示
(0112) */
(0113) void lcd_set_xy(uint8 x,uint8 y) 
(0114) {
(0115) 	uint8 adr;
(0116) 
(0117) 	switch(x)
    0012D 24BB      CLR	R11
    0012E 01C5      MOVW	R24,R10
    0012F 3081      CPI	R24,1
    00130 E0E0      LDI	R30,0
    00131 079E      CPC	R25,R30
    00132 F069      BEQ	0x0140
    00133 3082      CPI	R24,2
    00134 E0E0      LDI	R30,0
    00135 079E      CPC	R25,R30
    00136 F061      BEQ	0x0143
    00137 3083      CPI	R24,3
    00138 E0E0      LDI	R30,0
    00139 079E      CPC	R25,R30
    0013A F059      BEQ	0x0146
    0013B 3084      CPI	R24,4
    0013C E0E0      LDI	R30,0
    0013D 079E      CPC	R25,R30
    0013E F051      BEQ	0x0149
    0013F C00B      RJMP	0x014B
(0118) 	{
(0119) 	case 1: adr = 0x7F + y;
    00140 2F46      MOV	R20,R22
    00141 5841      SUBI	R20,0x81
(0120) 		break;		//在第1行y列显示
    00142 C008      RJMP	0x014B
(0121) 	case 2: adr = 0x8F + y;
    00143 2F46      MOV	R20,R22
    00144 5741      SUBI	R20,0x71
(0122) 		break;		//在第2行y列显示
    00145 C005      RJMP	0x014B
(0123) 	case 3: adr = 0x87 + y;
    00146 2F46      MOV	R20,R22
    00147 5749      SUBI	R20,0x79
(0124) 		break;		//在第3行y列显示
    00148 C002      RJMP	0x014B
(0125) 	case 4: adr = 0x97 + y;
    00149 2F46      MOV	R20,R22
    0014A 5649      SUBI	R20,0x69
(0126) 		break;		//在第4行y列显示
(0127) 	default:	;
(0128) 	}
(0129) 	lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
    0014B 2F24      MOV	R18,R20
    0014C 702F      ANDI	R18,0xF
    0014D 702F      ANDI	R18,0xF
    0014E 9522      SWAP	R18
    0014F 2F04      MOV	R16,R20
    00150 7F00      ANDI	R16,0xF0
    00151 DFBD      RCALL	_lcd_wrCmd
    00152 940C 0429 JMP	pop_xgsetF00C
_lcd_putc:
  ch                   --> R20
  y                    --> R12
  x                    --> R10
    00154 940E 0430 CALL	push_xgset303C
    00156 2EC2      MOV	R12,R18
    00157 2EA0      MOV	R10,R16
    00158 814E      LDD	R20,Y+6
(0130) }
(0131) 
(0132) void lcd_putc(uint8 x,uint8 y,uint8 ch)
(0133) {
(0134) 	lcd_set_xy(x,y);
    00159 2D2C      MOV	R18,R12
    0015A 2D0A      MOV	R16,R10
    0015B DFCD      RCALL	_lcd_set_xy
(0135) 	delay50us(20); 
    0015C E104      LDI	R16,0x14
    0015D E010      LDI	R17,0
    0015E DF69      RCALL	_delay50us
(0136) 	lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
    0015F 2F24      MOV	R18,R20
    00160 702F      ANDI	R18,0xF
    00161 702F      ANDI	R18,0xF
    00162 9522      SWAP	R18
    00163 2F04      MOV	R16,R20
    00164 7F00      ANDI	R16,0xF0
    00165 DFB6      RCALL	_lcd_wrDat
    00166 940C 0437 JMP	pop_xgset303C
_lcd_putd0:
  i                    --> R20
  length               --> R20
  dat                  --> Y,+7
  y                    --> R12
  x                    --> R10
    00168 940E 0430 CALL	push_xgset303C
    0016A 2EC2      MOV	R12,R18
    0016B 2EA0      MOV	R10,R16
    0016C 9721      SBIW	R28,1
    0016D 854B      LDD	R20,Y+11
(0137) }
(0138) 
(0139) void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
(0140) {
(0141) 	sint8 i;
(0142) 
(0143) 	speaData(dat,length);
    0016E 8348      ST	Y,R20
    0016F 810F      LDD	R16,Y+7
    00170 8518      LDD	R17,Y+8
    00171 8529      LDD	R18,Y+9
    00172 853A      LDD	R19,Y+10
    00173 DEFB      RCALL	_speaData
(0144) 	lcd_set_xy(x,y);
    00174 2D2C      MOV	R18,R12
    00175 2D0A      MOV	R16,R10
    00176 DFB2      RCALL	_lcd_set_xy
(0145) 	delay50us(40);
    00177 E208      LDI	R16,0x28
    00178 E010      LDI	R17,0
    00179 DF4E      RCALL	_delay50us
(0146) 	for(i=length-1;i>=0;i--)
    0017A 5041      SUBI	R20,1
    0017B C01E      RJMP	0x019A
(0147) 	{
(0148) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    0017C E288      LDI	R24,0x28
    0017D E091      LDI	R25,1
    0017E 2FE4      MOV	R30,R20
    0017F 27FF      CLR	R31
    00180 FDE7      SBRC	R30,7
    00181 95F0      COM	R31
    00182 0FE8      ADD	R30,R24
    00183 1FF9      ADC	R31,R25
    00184 8180      LD	R24,Z
    00185 2799      CLR	R25
    00186 96C0      ADIW	R24,0x30
    00187 019C      MOVW	R18,R24
    00188 702F      ANDI	R18,0xF
    00189 7030      ANDI	R19,0
    0018A 0F22      LSL	R18
    0018B 1F33      ROL	R19
    0018C 0F22      LSL	R18
    0018D 1F33      ROL	R19
    0018E 0F22      LSL	R18
    0018F 1F33      ROL	R19
    00190 0F22      LSL	R18
    00191 1F33      ROL	R19
    00192 018C      MOVW	R16,R24
    00193 7F00      ANDI	R16,0xF0
    00194 7010      ANDI	R17,0
    00195 DF86      RCALL	_lcd_wrDat
(0149) 		delay50us(40); 
    00196 E208      LDI	R16,0x28
    00197 E010      LDI	R17,0
    00198 DF2F      RCALL	_delay50us
    00199 954A      DEC	R20
    0019A 3040      CPI	R20,0
    0019B F704      BGE	0x017C
    0019C 9621      ADIW	R28,1
    0019D 940C 0437 JMP	pop_xgset303C
_lcd_putd:
  effectLen            --> R22
  i                    --> R20
  length               --> R10
  dat                  --> Y,+11
  y                    --> R14
  x                    --> R12
    0019F 940E 0417 CALL	push_xgsetF0FC
    001A1 2EE2      MOV	R14,R18
    001A2 2EC0      MOV	R12,R16
    001A3 9721      SBIW	R28,1
    001A4 84AF      LDD	R10,Y+15
(0150) 	}
(0151) }
(0152) 
(0153) void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
(0154) {
(0155) 	sint8 i;
(0156) 	sint8 effectLen;
(0157) 
(0158) 	if(dat>999999)
    001A5 E38F      LDI	R24,0x3F
    001A6 E492      LDI	R25,0x42
    001A7 E0AF      LDI	R26,0xF
    001A8 E0B0      LDI	R27,0
    001A9 842B      LDD	R2,Y+11
    001AA 843C      LDD	R3,Y+12
    001AB 844D      LDD	R4,Y+13
    001AC 845E      LDD	R5,Y+14
    001AD 1582      CP	R24,R2
    001AE 0593      CPC	R25,R3
    001AF 05A4      CPC	R26,R4
    001B0 05B5      CPC	R27,R5
    001B1 F410      BCC	0x01B4
(0159) 		effectLen=7;
    001B2 E067      LDI	R22,7
    001B3 C04C      RJMP	0x0200
(0160) 	else if(dat>99999)
    001B4 E98F      LDI	R24,0x9F
    001B5 E896      LDI	R25,0x86
    001B6 E0A1      LDI	R26,1
    001B7 E0B0      LDI	R27,0
    001B8 842B      LDD	R2,Y+11
    001B9 843C      LDD	R3,Y+12
    001BA 844D      LDD	R4,Y+13
    001BB 845E      LDD	R5,Y+14
    001BC 1582      CP	R24,R2
    001BD 0593      CPC	R25,R3
    001BE 05A4      CPC	R26,R4
    001BF 05B5      CPC	R27,R5
    001C0 F410      BCC	0x01C3
(0161) 		effectLen=6;
    001C1 E066      LDI	R22,6
    001C2 C03D      RJMP	0x0200
(0162) 	else if(dat>9999)
    001C3 E08F      LDI	R24,0xF
    001C4 E297      LDI	R25,0x27
    001C5 E0A0      LDI	R26,0
    001C6 E0B0      LDI	R27,0
    001C7 842B      LDD	R2,Y+11
    001C8 843C      LDD	R3,Y+12
    001C9 844D      LDD	R4,Y+13
    001CA 845E      LDD	R5,Y+14
    001CB 1582      CP	R24,R2
    001CC 0593      CPC	R25,R3
    001CD 05A4      CPC	R26,R4
    001CE 05B5      CPC	R27,R5
    001CF F410      BCC	0x01D2
(0163) 		effectLen=5;
    001D0 E065      LDI	R22,5
    001D1 C02E      RJMP	0x0200
(0164) 	else if(dat>999)
    001D2 EE87      LDI	R24,0xE7
    001D3 E093      LDI	R25,3
    001D4 E0A0      LDI	R26,0
    001D5 E0B0      LDI	R27,0
    001D6 842B      LDD	R2,Y+11
    001D7 843C      LDD	R3,Y+12
    001D8 844D      LDD	R4,Y+13
    001D9 845E      LDD	R5,Y+14
    001DA 1582      CP	R24,R2
    001DB 0593      CPC	R25,R3
    001DC 05A4      CPC	R26,R4
    001DD 05B5      CPC	R27,R5
    001DE F410      BCC	0x01E1
(0165) 		effectLen=4;
    001DF E064      LDI	R22,4
    001E0 C01F      RJMP	0x0200
(0166) 	else if(dat>99)
    001E1 E683      LDI	R24,0x63
    001E2 E090      LDI	R25,0
    001E3 E0A0      LDI	R26,0
    001E4 E0B0      LDI	R27,0
    001E5 842B      LDD	R2,Y+11
    001E6 843C      LDD	R3,Y+12
    001E7 844D      LDD	R4,Y+13
    001E8 845E      LDD	R5,Y+14
    001E9 1582      CP	R24,R2
    001EA 0593      CPC	R25,R3
    001EB 05A4      CPC	R26,R4
    001EC 05B5      CPC	R27,R5
    001ED F410      BCC	0x01F0
(0167) 		effectLen=3;
    001EE E063      LDI	R22,3
    001EF C010      RJMP	0x0200
(0168) 	else if(dat>9)
    001F0 E089      LDI	R24,0x9
    001F1 E090      LDI	R25,0
    001F2 E0A0      LDI	R26,0
    001F3 E0B0      LDI	R27,0
    001F4 842B      LDD	R2,Y+11
    001F5 843C      LDD	R3,Y+12
    001F6 844D      LDD	R4,Y+13
    001F7 845E      LDD	R5,Y+14
    001F8 1582      CP	R24,R2
    001F9 0593      CPC	R25,R3
    001FA 05A4      CPC	R26,R4
    001FB 05B5      CPC	R27,R5
    001FC F410      BCC	0x01FF
(0169) 		effectLen=2;
    001FD E062      LDI	R22,2
    001FE C001      RJMP	0x0200
(0170) 	else
(0171) 		effectLen=1;
    001FF E061      LDI	R22,1
(0172) 	speaData(dat,effectLen);
    00200 8368      ST	Y,R22
    00201 850B      LDD	R16,Y+11
    00202 851C      LDD	R17,Y+12
    00203 852D      LDD	R18,Y+13
    00204 853E      LDD	R19,Y+14
    00205 DE69      RCALL	_speaData
(0173) 
(0174) 	lcd_set_xy(x,y);
    00206 2D2E      MOV	R18,R14
    00207 2D0C      MOV	R16,R12
    00208 DF20      RCALL	_lcd_set_xy
(0175) 	delay50us(40); 
    00209 E208      LDI	R16,0x28
    0020A E010      LDI	R17,0
    0020B DEBC      RCALL	_delay50us
(0176) 	if(length>effectLen)
    0020C 2E26      MOV	R2,R22
    0020D 2433      CLR	R3
    0020E FC27      SBRC	R2,7
    0020F 9430      COM	R3
    00210 2C4A      MOV	R4,R10
    00211 2455      CLR	R5
    00212 1424      CP	R2,R4
    00213 0435      CPC	R3,R5
    00214 F46C      BGE	0x0222
(0177) 	{
(0178) 		for(i=length-effectLen-1;i>=0;i--)
    00215 2D44      MOV	R20,R4
    00216 1B46      SUB	R20,R22
    00217 5041      SUBI	R20,1
    00218 C007      RJMP	0x0220
(0179) 		{
(0180) 			lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
    00219 2722      CLR	R18
    0021A E200      LDI	R16,0x20
    0021B DF00      RCALL	_lcd_wrDat
(0181) 			delay50us(40); 
    0021C E208      LDI	R16,0x28
    0021D E010      LDI	R17,0
    0021E DEA9      RCALL	_delay50us
    0021F 954A      DEC	R20
    00220 3040      CPI	R20,0
    00221 F7BC      BGE	0x0219
(0182) 		}
(0183) 	}
(0184) 	for(i=effectLen-1;i>=0;i--)
    00222 2F46      MOV	R20,R22
    00223 5041      SUBI	R20,1
    00224 C01E      RJMP	0x0243
(0185) 	{
(0186) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    00225 E288      LDI	R24,0x28
    00226 E091      LDI	R25,1
    00227 2FE4      MOV	R30,R20
    00228 27FF      CLR	R31
    00229 FDE7      SBRC	R30,7
    0022A 95F0      COM	R31
    0022B 0FE8      ADD	R30,R24
    0022C 1FF9      ADC	R31,R25
    0022D 8180      LD	R24,Z
    0022E 2799      CLR	R25
    0022F 96C0      ADIW	R24,0x30
    00230 019C      MOVW	R18,R24
    00231 702F      ANDI	R18,0xF
    00232 7030      ANDI	R19,0
    00233 0F22      LSL	R18
    00234 1F33      ROL	R19
    00235 0F22      LSL	R18
    00236 1F33      ROL	R19
    00237 0F22      LSL	R18
    00238 1F33      ROL	R19
    00239 0F22      LSL	R18
    0023A 1F33      ROL	R19
    0023B 018C      MOVW	R16,R24
    0023C 7F00      ANDI	R16,0xF0
    0023D 7010      ANDI	R17,0
    0023E DEDD      RCALL	_lcd_wrDat
(0187) 		delay50us(40);
    0023F E208      LDI	R16,0x28
    00240 E010      LDI	R17,0
    00241 DE86      RCALL	_delay50us
    00242 954A      DEC	R20
    00243 3040      CPI	R20,0
    00244 F704      BGE	0x0225
    00245 9621      ADIW	R28,1
    00246 940C 040C JMP	pop_xgsetF0FC
_lcd_puts:
  str                  --> R20
  y                    --> R12
  x                    --> R10
    00248 940E 0430 CALL	push_xgset303C
    0024A 2EC2      MOV	R12,R18
    0024B 2EA0      MOV	R10,R16
    0024C 814E      LDD	R20,Y+6
    0024D 815F      LDD	R21,Y+7
(0188) 	}
(0189) }
(0190) 
(0191) void lcd_puts(uint8 x,uint8 y,uint8 *str)
(0192) { 
(0193) 	lcd_set_xy(x,y);
    0024E 2D2C      MOV	R18,R12
    0024F 2D0A      MOV	R16,R10
    00250 DED8      RCALL	_lcd_set_xy
(0194) 	delay50us(20);   
    00251 E104      LDI	R16,0x14
    00252 E010      LDI	R17,0
    00253 DE74      RCALL	_delay50us
    00254 C00F      RJMP	0x0264
(0195) 	while(*str)
(0196) 	{
(0197) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    00255 01FA      MOVW	R30,R20
    00256 8020      LD	R2,Z
    00257 2433      CLR	R3
    00258 2D22      MOV	R18,R2
    00259 702F      ANDI	R18,0xF
    0025A 702F      ANDI	R18,0xF
    0025B 9522      SWAP	R18
    0025C 2D02      MOV	R16,R2
    0025D 7F00      ANDI	R16,0xF0
    0025E DEBD      RCALL	_lcd_wrDat
(0198) 		str++;
    0025F 5F4F      SUBI	R20,0xFF
    00260 4F5F      SBCI	R21,0xFF
(0199) 		delay50us(20);
    00261 E104      LDI	R16,0x14
    00262 E010      LDI	R17,0
    00263 DE64      RCALL	_delay50us
    00264 01FA      MOVW	R30,R20
    00265 8020      LD	R2,Z
    00266 2022      TST	R2
    00267 F769      BNE	0x0255
    00268 940C 0437 JMP	pop_xgset303C
_lcd_puts_:
  dlyMs                --> R10
  str                  --> R20
  y                    --> R14
  x                    --> R12
    0026A 940E 0419 CALL	push_xgset30FC
    0026C 2EE2      MOV	R14,R18
    0026D 2EC0      MOV	R12,R16
    0026E 8548      LDD	R20,Y+8
    0026F 8559      LDD	R21,Y+9
    00270 84AA      LDD	R10,Y+10
(0200) 	} 
(0201) }
(0202) 
(0203) void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
(0204) { 
(0205) 	lcd_set_xy(x,y);
    00271 2D2E      MOV	R18,R14
    00272 2D0C      MOV	R16,R12
    00273 DEB5      RCALL	_lcd_set_xy
(0206) 	delay50us(20);   
    00274 E104      LDI	R16,0x14
    00275 E010      LDI	R17,0
    00276 DE51      RCALL	_delay50us
    00277 C00F      RJMP	0x0287
(0207) 	while(*str)
(0208) 	{
(0209) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    00278 01FA      MOVW	R30,R20
    00279 8020      LD	R2,Z
    0027A 2433      CLR	R3
    0027B 2D22      MOV	R18,R2
    0027C 702F      ANDI	R18,0xF
    0027D 702F      ANDI	R18,0xF
    0027E 9522      SWAP	R18
    0027F 2D02      MOV	R16,R2
    00280 7F00      ANDI	R16,0xF0
    00281 DE9A      RCALL	_lcd_wrDat
(0210) 		str++;
    00282 5F4F      SUBI	R20,0xFF
    00283 4F5F      SBCI	R21,0xFF
(0211) 		delay50ms(dlyMs);
    00284 2D0A      MOV	R16,R10
    00285 2711      CLR	R17
    00286 DE51      RCALL	_delay50ms
    00287 01FA      MOVW	R30,R20
    00288 8020      LD	R2,Z
    00289 2022      TST	R2
    0028A F769      BNE	0x0278
    0028B 940C 0403 JMP	pop_xgset30FC
(0212) 	} 
(0213) }
(0214) 
(0215) void lcd_clr()
(0216) {
(0217) 	lcd_wrCmd(0x00,0x10);
_lcd_clr:
    0028D E120      LDI	R18,0x10
    0028E 2700      CLR	R16
    0028F DE7F      RCALL	_lcd_wrCmd
(0218) 	delay50us(200);
    00290 EC08      LDI	R16,0xC8
    00291 E010      LDI	R17,0
    00292 CE35      RJMP	_delay50us
(0219) }
(0220) 
(0221) void lcd_init(void)
(0222) {
(0223) 	SPI_init();	
_lcd_init:
    00293 DE6F      RCALL	_SPI_init
(0224) 	//OUT_LCD_CS;		//若LCD_CS
(0225) 	//SET_LCD_CS;		
(0226) 	delay50ms(1);
    00294 E001      LDI	R16,1
    00295 E010      LDI	R17,0
    00296 DE41      RCALL	_delay50ms
(0227) 	lcd_wrCmd(0x30,0x30);	//使用8位控制界面,使用基本指令集
    00297 E320      LDI	R18,0x30
    00298 E300      LDI	R16,0x30
    00299 DE75      RCALL	_lcd_wrCmd
(0228) 	//lcd_wrCmd(0x00,0xF0);	//整体显示ON
(0229) 	lcd_wrCmd(0x00,0xC0);	//整体显示ON
    0029A EC20      LDI	R18,0xC0
    0029B 2700      CLR	R16
    0029C DE72      RCALL	_lcd_wrCmd
(0230) 	lcd_wrCmd(0x00,0x10);	//清屏
    0029D E120      LDI	R18,0x10
    0029E 2700      CLR	R16
    0029F DE6F      RCALL	_lcd_wrCmd
(0231) 	//lcd_wrCmd(0x10,0x00);	//光标
(0232) 	lcd_wrCmd(0x00,0x60);
    002A0 E620      LDI	R18,0x60
    002A1 2700      CLR	R16
    002A2 DE6C      RCALL	_lcd_wrCmd
(0233) 	//lcd_wrCmd(0x00,0x70);	//显示右移
(0234) 	delay50ms(1);		//不可省去！！！
    002A3 E001      LDI	R16,1
    002A4 E010      LDI	R17,0
    002A5 CE32      RJMP	_delay50ms
FILE: D:\ICC_H\AT45DB161.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立使用AT45DB161的示例程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-03-1
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) /*01010101010101010101010101010101010101010101010101010101010101010101
(0021) --------------------------------------------------------------------*/    			
(0022) //==================================   				
(0023) void spi_init(void)
(0024) {
(0025) 	SPCR=0x5C;    
_spi_init:
    002A6 E58C      LDI	R24,0x5C
    002A7 B98D      OUT	0x0D,R24
    002A8 9508      RET
(0026) }
(0027) //==================================
(0028) void spi_transmit_byte(uchar Data)
(0029) {	
(0030) 	SPDR=Data;								
_spi_transmit_byte:
  Data                 --> R16
    002A9 B90F      OUT	0x0F,R16
(0031)     while(!(SPSR&0x80));
    002AA 9B77      SBIS	0x0E,7
    002AB CFFE      RJMP	0x02AA
    002AC 9508      RET
_write_buffer:
  data                 --> R10
  BufferOffset         --> R12
    002AD 940E 041D CALL	push_xgset003C
    002AF 2EA2      MOV	R10,R18
    002B0 0168      MOVW	R12,R16
(0032) }
(0033) //============================================================
(0034) void write_buffer(uint BufferOffset,uchar data)
(0035) {					
(0036) 	spi_transmit_byte(0x84);			  						
    002B1 E804      LDI	R16,0x84
    002B2 DFF6      RCALL	_spi_transmit_byte
(0037) 	spi_transmit_byte(0xff);						
    002B3 EF0F      LDI	R16,0xFF
    002B4 DFF4      RCALL	_spi_transmit_byte
(0038) 	spi_transmit_byte(BufferOffset>>8);	
    002B5 0186      MOVW	R16,R12
    002B6 2F01      MOV	R16,R17
    002B7 2711      CLR	R17
    002B8 DFF0      RCALL	_spi_transmit_byte
(0039) 	spi_transmit_byte(BufferOffset);		
    002B9 2D0C      MOV	R16,R12
    002BA DFEE      RCALL	_spi_transmit_byte
(0040) 	spi_transmit_byte(data);			
    002BB 2D0A      MOV	R16,R10
    002BC DFEC      RCALL	_spi_transmit_byte
    002BD 940C 03FE JMP	pop_xgset003C
_read_buffer:
  temp                 --> R10
  BufferOffset         --> R10
    002BF 92AA      ST	-Y,R10
    002C0 92BA      ST	-Y,R11
    002C1 0158      MOVW	R10,R16
(0041) }
(0042) //================================================================
(0043) uchar read_buffer(uint BufferOffset)
(0044) {		
(0045)     uchar temp;	 	
(0046)  	spi_transmit_byte(0x54);			
    002C2 E504      LDI	R16,0x54
    002C3 DFE5      RCALL	_spi_transmit_byte
(0047) 	spi_transmit_byte(0xff);						
    002C4 EF0F      LDI	R16,0xFF
    002C5 DFE3      RCALL	_spi_transmit_byte
(0048) 	spi_transmit_byte(BufferOffset>>8);	
    002C6 0185      MOVW	R16,R10
    002C7 2F01      MOV	R16,R17
    002C8 2711      CLR	R17
    002C9 DFDF      RCALL	_spi_transmit_byte
(0049) 	spi_transmit_byte(BufferOffset);		
    002CA 2D0A      MOV	R16,R10
    002CB DFDD      RCALL	_spi_transmit_byte
(0050) 	spi_transmit_byte(0xff);						
    002CC EF0F      LDI	R16,0xFF
    002CD DFDB      RCALL	_spi_transmit_byte
(0051) 	spi_transmit_byte(0xff);					
    002CE EF0F      LDI	R16,0xFF
    002CF DFD9      RCALL	_spi_transmit_byte
(0052) 	temp=SPDR;	  
    002D0 B0AF      IN	R10,0x0F
(0053)     return temp;								
    002D1 2D0A      MOV	R16,R10
    002D2 90B9      LD	R11,Y+
    002D3 90A9      LD	R10,Y+
    002D4 9508      RET
FILE: E:\吴泽备份\DVK501光盘内容\DVK501_ICC\M162_E~1\AT45DB~1\AT45DB161_LCD12864\AT45DB161.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立使用AT45DBxx的示例程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-03-1
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 硬件连接： 	  DVK500				 STK162+
(0024) 				VCC		---------	  VCC
(0025) 				GND		---------	  GND
(0026) 				RST		---------	  PB2
(0027) 				WP		---------	  PB3		
(0028) 				CS		---------	  PB4
(0029) 				SI		---------	  PB5
(0030) 				SO		---------	  PB6
(0031) 				SCK		---------	  PB7
(0032) 				
(0033) 		 	  DVK500				 STK162+
(0034) 				CS		---------	  VCC
(0035) 				PSB	    ---------	  GND
(0036) 				SID		---------	  PB5
(0037) 				CLK		---------	  PB7
(0038) ----------------------------------------------------------------------
(0039) 实验内容：
(0040) 把256个数据写入dataflash缓存器1，再读出，使用LCD12864观测是否与写入一致。
(0041) 由于其命令较多，这里不作详细介绍，其它读写方式可参照本示例程序
(0042) ---------------------------------------------------------------------
(0043) ----------------------------------------------------------------------
(0044) 注意事项： 
(0045) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0046) （2）请详细阅读“使用必读”及相关资料。
(0047) ----------------------------------------------------------------------
(0048) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0049) #include <iom162v.h>
(0050) #define NO_INCLUDE_I2C_H 1
(0051) #include "D:\ICC_H\CmmICC.H"
(0052) #include "D:\ICC_H\LCD12864_ST7920_M48.H"
(0053) 
(0054) #include "D:\ICC_H\AT45DB161.H"
(0055) void port_init(void)
(0056) {
(0057)     PORTA = 0x00;
_port_init:
    002D5 2422      CLR	R2
    002D6 BA2B      OUT	0x1B,R2
(0058)     DDRA  = 0xff;
    002D7 EF8F      LDI	R24,0xFF
    002D8 BB8A      OUT	0x1A,R24
(0059)     PORTB = 0xff;
    002D9 BB88      OUT	0x18,R24
(0060)     DDRB  = 0xbf;
    002DA EB8F      LDI	R24,0xBF
    002DB BB87      OUT	0x17,R24
(0061)     PORTC = 0x00;
    002DC BA25      OUT	0x15,R2
(0062)     DDRC  = 0xff;
    002DD EF8F      LDI	R24,0xFF
    002DE BB84      OUT	0x14,R24
(0063)     PORTD = 0x00;
    002DF BA22      OUT	0x12,R2
(0064)     DDRD  = 0xff;   
    002E0 BB81      OUT	0x11,R24
    002E1 9508      RET
_main:
  tmp                  --> Y,+5
  i                    --> R20
    002E2 97EF      SBIW	R28,0x3F
    002E3 97EF      SBIW	R28,0x3F
    002E4 97EF      SBIW	R28,0x3F
    002E5 97EF      SBIW	R28,0x3F
    002E6 9729      SBIW	R28,0x9
(0065) }
(0066) 
(0067) 
(0068) void main(void)
(0069) {	
(0070) 	uint i;
(0071) 	uchar tmp[256];
(0072) 	DDRA=0xFF;
    002E7 EF8F      LDI	R24,0xFF
    002E8 BB8A      OUT	0x1A,R24
(0073) 
(0074) 	 port_init();
    002E9 DFEB      RCALL	_port_init
(0075)     spi_init();  
    002EA DFBB      RCALL	_spi_init
(0076)     sbi(DDRB,3);
    002EB 9ABB      SBI	0x17,3
(0077) 	 cbi(PORTB,3); //屏蔽液晶
    002EC 98C3      CBI	0x18,3
(0078)     //PORTB&=0xfb;      //PB2为低        rst
(0079)     delay50ms(1); 
    002ED E001      LDI	R16,1
    002EE E010      LDI	R17,0
    002EF DDE8      RCALL	_delay50ms
(0080)     //PORTB|=0x08;	    //PB3为高        wp
(0081)     //PORTB|=0x04;     //  //PB2为高        rst	           
(0082)     for(i=0;i<256;i++)
    002F0 2744      CLR	R20
    002F1 2755      CLR	R21
    002F2 C00C      RJMP	0x02FF
(0083)     {  
(0084)         PORTB&=0xef;	   //PB4为低      cs
    002F3 B388      IN	R24,0x18
    002F4 7E8F      ANDI	R24,0xEF
    002F5 BB88      OUT	0x18,R24
(0085)         write_buffer(i,i);	    //把256个数据写入dataflash缓存器 
    002F6 2F24      MOV	R18,R20
    002F7 018A      MOVW	R16,R20
    002F8 DFB4      RCALL	_write_buffer
(0086)     	PORTB|=0x10;        //  PB4为高     cs
    002F9 9AC4      SBI	0x18,4
(0087) 		delay50us(10);
    002FA E00A      LDI	R16,0xA
    002FB E010      LDI	R17,0
    002FC DDCB      RCALL	_delay50us
    002FD 5F4F      SUBI	R20,0xFF
    002FE 4F5F      SBCI	R21,0xFF
    002FF 3040      CPI	R20,0
    00300 E0E1      LDI	R30,1
    00301 075E      CPC	R21,R30
    00302 F380      BCS	0x02F3
(0088)     }                                 
(0089)     delay50ms(2);                   
    00303 E002      LDI	R16,2
    00304 E010      LDI	R17,0
    00305 DDD2      RCALL	_delay50ms
(0090)    	for(i=0;i<256;i++)           //从dataflash缓存器把256个数据读出
    00306 2744      CLR	R20
    00307 2755      CLR	R21
    00308 C011      RJMP	0x031A
(0091) 	{	
(0092)     	PORTB&=0xef;	
    00309 B388      IN	R24,0x18
    0030A 7E8F      ANDI	R24,0xEF
    0030B BB88      OUT	0x18,R24
(0093) 		tmp[i]=read_buffer(i);   
    0030C 018A      MOVW	R16,R20
    0030D DFB1      RCALL	_read_buffer
    0030E 01CE      MOVW	R24,R28
    0030F 9605      ADIW	R24,5
    00310 01FA      MOVW	R30,R20
    00311 0FE8      ADD	R30,R24
    00312 1FF9      ADC	R31,R25
    00313 8300      ST	Z,R16
(0094)         PORTB|=0x10;	
    00314 9AC4      SBI	0x18,4
(0095) 		delay50us(10);
    00315 E00A      LDI	R16,0xA
    00316 E010      LDI	R17,0
    00317 DDB0      RCALL	_delay50us
    00318 5F4F      SUBI	R20,0xFF
    00319 4F5F      SBCI	R21,0xFF
    0031A 3040      CPI	R20,0
    0031B E0E1      LDI	R30,1
    0031C 075E      CPC	R21,R30
    0031D F358      BCS	0x0309
(0096) 	}    
(0097) 	   
(0098)     //PORTB&=0xf7;
(0099) 	
(0100) 	sbi(PORTB,3); //开液晶
    0031E 9AC3      SBI	0x18,3
(0101) 	lcd_init();
    0031F DF73      RCALL	_lcd_init
(0102) 	lcd_clr();
    00320 DF6C      RCALL	_lcd_clr
(0103) 	lcd_puts(1,1,"AT45DBX-LCD12864");
    00321 E187      LDI	R24,0x17
    00322 E091      LDI	R25,1
    00323 8399      STD	Y+1,R25
    00324 8388      ST	Y,R24
    00325 E021      LDI	R18,1
    00326 E001      LDI	R16,1
    00327 DF20      RCALL	_lcd_puts
(0104) 	lcd_puts(2,1,"FLASH   液晶显示");
    00328 E086      LDI	R24,6
    00329 E091      LDI	R25,1
    0032A 8399      STD	Y+1,R25
    0032B 8388      ST	Y,R24
    0032C E021      LDI	R18,1
    0032D E002      LDI	R16,2
    0032E DF19      RCALL	_lcd_puts
(0105) 	lcd_puts(3,1,"内容:");
    0032F E080      LDI	R24,0
    00330 E091      LDI	R25,1
    00331 8399      STD	Y+1,R25
    00332 8388      ST	Y,R24
    00333 E021      LDI	R18,1
    00334 E003      LDI	R16,3
    00335 DF12      RCALL	_lcd_puts
(0106) 	
(0107) 	for(i=0;i<256;i++)
    00336 2744      CLR	R20
    00337 2755      CLR	R21
    00338 C017      RJMP	0x0350
(0108) 	{
(0109) 	    lcd_putd(3,5,tmp[i],1);  //将刚刚从FLASH内读到的内容显示出来
    00339 E081      LDI	R24,1
    0033A 838C      STD	Y+4,R24
    0033B 01CE      MOVW	R24,R28
    0033C 9605      ADIW	R24,5
    0033D 01FA      MOVW	R30,R20
    0033E 0FE8      ADD	R30,R24
    0033F 1FF9      ADC	R31,R25
    00340 8020      LD	R2,Z
    00341 2433      CLR	R3
    00342 2444      CLR	R4
    00343 2455      CLR	R5
    00344 8228      ST	Y,R2
    00345 8239      STD	Y+1,R3
    00346 824A      STD	Y+2,R4
    00347 825B      STD	Y+3,R5
    00348 E025      LDI	R18,5
    00349 E003      LDI	R16,3
    0034A DE54      RCALL	_lcd_putd
(0110) 		delay50ms(20); //延时1秒
    0034B E104      LDI	R16,0x14
    0034C E010      LDI	R17,0
    0034D DD8A      RCALL	_delay50ms
    0034E 5F4F      SUBI	R20,0xFF
    0034F 4F5F      SBCI	R21,0xFF
    00350 3040      CPI	R20,0
    00351 E0E1      LDI	R30,1
    00352 075E      CPC	R21,R30
    00353 F328      BCS	0x0339
(0111) 	}
(0112) 	
(0113) 	while(1);
FILE: <library>
    00354 CFFF      RJMP	0x0354
    00355 96EF      ADIW	R28,0x3F
    00356 96EF      ADIW	R28,0x3F
    00357 96EF      ADIW	R28,0x3F
    00358 96EF      ADIW	R28,0x3F
    00359 9629      ADIW	R28,0x9
    0035A 9508      RET
push_arg4:
    0035B 933A      ST	-Y,R19
    0035C 932A      ST	-Y,R18
push_arg2:
    0035D 931A      ST	-Y,R17
    0035E 930A      ST	-Y,R16
    0035F 9508      RET
div32u:
    00360 94E8      BCLR	6
    00361 C001      RJMP	0x0363
mod32u:
    00362 9468      BSET	6
    00363 D030      RCALL	long_div_prolog
    00364 24CC      CLR	R12
    00365 C009      RJMP	0x036F
div32s:
    00366 94E8      BCLR	6
    00367 C001      RJMP	0x0369
mod32s:
    00368 9468      BSET	6
    00369 D02A      RCALL	long_div_prolog
    0036A FD37      SBRC	R19,7
    0036B 940E 0450 CALL	neg32
    0036D FDB7      SBRC	R27,7
    0036E D052      RCALL	neg_R24_R27
    0036F 2477      CLR	R7
    00370 2488      CLR	R8
    00371 2499      CLR	R9
    00372 24AA      CLR	R10
    00373 24BB      CLR	R11
    00374 D042      RCALL	tst_R16_R19
    00375 F0C1      BEQ	0x038E
    00376 D045      RCALL	tst_R24_R27
    00377 F0B1      BEQ	0x038E
    00378 E2E8      LDI	R30,0x28
    00379 0F00      LSL	R16
    0037A 1F11      ROL	R17
    0037B 1F22      ROL	R18
    0037C 1F33      ROL	R19
    0037D 1C77      ROL	R7
    0037E 1C88      ROL	R8
    0037F 1C99      ROL	R9
    00380 1CAA      ROL	R10
    00381 1CBB      ROL	R11
    00382 1688      CP	R8,R24
    00383 0699      CPC	R9,R25
    00384 06AA      CPC	R10,R26
    00385 06BB      CPC	R11,R27
    00386 F028      BCS	0x038C
    00387 1A88      SUB	R8,R24
    00388 0A99      SBC	R9,R25
    00389 0AAA      SBC	R10,R26
    0038A 0ABB      SBC	R11,R27
    0038B 9503      INC	R16
    0038C 95EA      DEC	R30
    0038D F759      BNE	0x0379
    0038E F426      BRTC	0x0393
    0038F 2D08      MOV	R16,R8
    00390 2D19      MOV	R17,R9
    00391 2D2A      MOV	R18,R10
    00392 2D3B      MOV	R19,R11
    00393 C013      RJMP	long_div_epilog
long_div_prolog:
    00394 927A      ST	-Y,R7
    00395 928A      ST	-Y,R8
    00396 929A      ST	-Y,R9
    00397 92AA      ST	-Y,R10
    00398 92BA      ST	-Y,R11
    00399 92CA      ST	-Y,R12
    0039A 93EA      ST	-Y,R30
    0039B 938A      ST	-Y,R24
    0039C 939A      ST	-Y,R25
    0039D 93AA      ST	-Y,R26
    0039E 93BA      ST	-Y,R27
    0039F 858B      LDD	R24,Y+11
    003A0 859C      LDD	R25,Y+12
    003A1 85AD      LDD	R26,Y+13
    003A2 85BE      LDD	R27,Y+14
    003A3 2EC3      MOV	R12,R19
    003A4 F00E      BRTS	0x03A6
    003A5 26CB      EOR	R12,R27
    003A6 9508      RET
long_div_epilog:
    003A7 FCC7      SBRC	R12,7
    003A8 940E 0450 CALL	neg32
    003AA 91B9      LD	R27,Y+
    003AB 91A9      LD	R26,Y+
    003AC 9199      LD	R25,Y+
    003AD 9189      LD	R24,Y+
    003AE 91E9      LD	R30,Y+
    003AF 90C9      LD	R12,Y+
    003B0 90B9      LD	R11,Y+
    003B1 90A9      LD	R10,Y+
    003B2 9099      LD	R9,Y+
    003B3 9089      LD	R8,Y+
    003B4 9079      LD	R7,Y+
    003B5 9624      ADIW	R28,4
    003B6 9508      RET
tst_R16_R19:
    003B7 2FE0      MOV	R30,R16
    003B8 2BE1      OR	R30,R17
    003B9 2BE2      OR	R30,R18
    003BA 2BE3      OR	R30,R19
    003BB 9508      RET
tst_R24_R27:
    003BC 2FE8      MOV	R30,R24
    003BD 2BE9      OR	R30,R25
    003BE 2BEA      OR	R30,R26
    003BF 2BEB      OR	R30,R27
    003C0 9508      RET
neg_R24_R27:
    003C1 9580      COM	R24
    003C2 9590      COM	R25
    003C3 95A0      COM	R26
    003C4 95B0      COM	R27
    003C5 5F8F      SUBI	R24,0xFF
    003C6 4F9F      SBCI	R25,0xFF
    003C7 4FAF      SBCI	R26,0xFF
    003C8 4FBF      SBCI	R27,0xFF
    003C9 9508      RET
empy32u|empy32s:
    003CA 940E 0459 CALL	long_prolog
    003CC 927A      ST	-Y,R7
    003CD 940E 0472 CALL	tstzero1
    003CF F159      BEQ	0x03FB
    003D0 2477      CLR	R7
    003D1 940E 0478 CALL	tstzero2
    003D3 F419      BNE	0x03D7
    003D4 018C      MOVW	R16,R24
    003D5 019D      MOVW	R18,R26
    003D6 C024      RJMP	0x03FB
    003D7 920A      ST	-Y,R0
    003D8 921A      ST	-Y,R1
    003D9 9F08      MUL	R16,R24
    003DA 2CB0      MOV	R11,R0
    003DB 2CA1      MOV	R10,R1
    003DC 9F28      MUL	R18,R24
    003DD 2C90      MOV	R9,R0
    003DE 2C81      MOV	R8,R1
    003DF 9F18      MUL	R17,R24
    003E0 0CA0      ADD	R10,R0
    003E1 1C91      ADC	R9,R1
    003E2 1C87      ADC	R8,R7
    003E3 9F09      MUL	R16,R25
    003E4 0CA0      ADD	R10,R0
    003E5 1C91      ADC	R9,R1
    003E6 1C87      ADC	R8,R7
    003E7 9F19      MUL	R17,R25
    003E8 0C90      ADD	R9,R0
    003E9 1C81      ADC	R8,R1
    003EA 9F0A      MUL	R16,R26
    003EB 0C90      ADD	R9,R0
    003EC 1C81      ADC	R8,R1
    003ED 9F38      MUL	R19,R24
    003EE 0C80      ADD	R8,R0
    003EF 9F29      MUL	R18,R25
    003F0 0C80      ADD	R8,R0
    003F1 9F1A      MUL	R17,R26
    003F2 0C80      ADD	R8,R0
    003F3 9F0B      MUL	R16,R27
    003F4 0C80      ADD	R8,R0
    003F5 9019      LD	R1,Y+
    003F6 9009      LD	R0,Y+
    003F7 2D0B      MOV	R16,R11
    003F8 2D1A      MOV	R17,R10
    003F9 2D29      MOV	R18,R9
    003FA 2D38      MOV	R19,R8
    003FB 9079      LD	R7,Y+
    003FC 940C 0467 JMP	long_epilog
pop_xgset003C:
    003FE 90A9      LD	R10,Y+
    003FF 90B9      LD	R11,Y+
    00400 90C9      LD	R12,Y+
    00401 90D9      LD	R13,Y+
    00402 9508      RET
pop_xgset30FC:
    00403 90A9      LD	R10,Y+
    00404 90B9      LD	R11,Y+
    00405 90C9      LD	R12,Y+
    00406 90D9      LD	R13,Y+
    00407 90E9      LD	R14,Y+
    00408 90F9      LD	R15,Y+
    00409 9149      LD	R20,Y+
    0040A 9159      LD	R21,Y+
    0040B 9508      RET
pop_xgsetF0FC:
    0040C 90A9      LD	R10,Y+
    0040D 90B9      LD	R11,Y+
    0040E 90C9      LD	R12,Y+
    0040F 90D9      LD	R13,Y+
    00410 90E9      LD	R14,Y+
    00411 90F9      LD	R15,Y+
    00412 9149      LD	R20,Y+
    00413 9159      LD	R21,Y+
    00414 9169      LD	R22,Y+
    00415 9179      LD	R23,Y+
    00416 9508      RET
push_xgsetF0FC:
    00417 937A      ST	-Y,R23
    00418 936A      ST	-Y,R22
push_xgset30FC:
    00419 935A      ST	-Y,R21
    0041A 934A      ST	-Y,R20
push_xgset00FC:
    0041B 92FA      ST	-Y,R15
    0041C 92EA      ST	-Y,R14
push_xgset003C:
    0041D 92DA      ST	-Y,R13
    0041E 92CA      ST	-Y,R12
    0041F 92BA      ST	-Y,R11
    00420 92AA      ST	-Y,R10
    00421 9508      RET
push_xgsetF00C:
    00422 937A      ST	-Y,R23
    00423 936A      ST	-Y,R22
    00424 935A      ST	-Y,R21
    00425 934A      ST	-Y,R20
    00426 92BA      ST	-Y,R11
    00427 92AA      ST	-Y,R10
    00428 9508      RET
pop_xgsetF00C:
    00429 90A9      LD	R10,Y+
    0042A 90B9      LD	R11,Y+
    0042B 9149      LD	R20,Y+
    0042C 9159      LD	R21,Y+
    0042D 9169      LD	R22,Y+
    0042E 9179      LD	R23,Y+
    0042F 9508      RET
push_xgset303C:
    00430 935A      ST	-Y,R21
    00431 934A      ST	-Y,R20
    00432 92DA      ST	-Y,R13
    00433 92CA      ST	-Y,R12
    00434 92BA      ST	-Y,R11
    00435 92AA      ST	-Y,R10
    00436 9508      RET
pop_xgset303C:
    00437 90A9      LD	R10,Y+
    00438 90B9      LD	R11,Y+
    00439 90C9      LD	R12,Y+
    0043A 90D9      LD	R13,Y+
    0043B 9149      LD	R20,Y+
    0043C 9159      LD	R21,Y+
    0043D 9508      RET
push_xgsetF03C:
    0043E 937A      ST	-Y,R23
    0043F 936A      ST	-Y,R22
    00440 935A      ST	-Y,R21
    00441 934A      ST	-Y,R20
    00442 92DA      ST	-Y,R13
    00443 92CA      ST	-Y,R12
    00444 92BA      ST	-Y,R11
    00445 92AA      ST	-Y,R10
    00446 9508      RET
pop_xgsetF03C:
    00447 90A9      LD	R10,Y+
    00448 90B9      LD	R11,Y+
    00449 90C9      LD	R12,Y+
    0044A 90D9      LD	R13,Y+
    0044B 9149      LD	R20,Y+
    0044C 9159      LD	R21,Y+
    0044D 9169      LD	R22,Y+
    0044E 9179      LD	R23,Y+
    0044F 9508      RET
neg32:
    00450 9500      COM	R16
    00451 9510      COM	R17
    00452 9520      COM	R18
    00453 9530      COM	R19
    00454 5F0F      SUBI	R16,0xFF
    00455 4F1F      SBCI	R17,0xFF
    00456 4F2F      SBCI	R18,0xFF
    00457 4F3F      SBCI	R19,0xFF
    00458 9508      RET
long_prolog:
    00459 928A      ST	-Y,R8
    0045A 929A      ST	-Y,R9
    0045B 92AA      ST	-Y,R10
    0045C 92BA      ST	-Y,R11
    0045D 93EA      ST	-Y,R30
    0045E 938A      ST	-Y,R24
    0045F 939A      ST	-Y,R25
    00460 93AA      ST	-Y,R26
    00461 93BA      ST	-Y,R27
    00462 8589      LDD	R24,Y+9
    00463 859A      LDD	R25,Y+10
    00464 85AB      LDD	R26,Y+11
    00465 85BC      LDD	R27,Y+12
    00466 9508      RET
long_epilog:
    00467 91B9      LD	R27,Y+
    00468 91A9      LD	R26,Y+
    00469 9199      LD	R25,Y+
    0046A 9189      LD	R24,Y+
    0046B 91E9      LD	R30,Y+
    0046C 90B9      LD	R11,Y+
    0046D 90A9      LD	R10,Y+
    0046E 9099      LD	R9,Y+
    0046F 9089      LD	R8,Y+
    00470 9624      ADIW	R28,4
    00471 9508      RET
tstzero1:
    00472 27EE      CLR	R30
    00473 2BE0      OR	R30,R16
    00474 2BE1      OR	R30,R17
    00475 2BE2      OR	R30,R18
    00476 2BE3      OR	R30,R19
    00477 9508      RET
tstzero2:
    00478 27EE      CLR	R30
    00479 2BE8      OR	R30,R24
    0047A 2BE9      OR	R30,R25
    0047B 2BEA      OR	R30,R26
    0047C 2BEB      OR	R30,R27
    0047D 9508      RET
