Interrupt Vectors
    00000 940C 0038 JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    00038 EFCF      LDI	R28,0xFF
    00039 E0D4      LDI	R29,4
    0003A BFCD      OUT	0x3D,R28
    0003B BFDE      OUT	0x3E,R29
    0003C 51C0      SUBI	R28,0x10
    0003D 40D0      SBCI	R29,0
    0003E EA0A      LDI	R16,0xAA
    0003F 8308      ST	Y,R16
    00040 2400      CLR	R0
    00041 E0E0      LDI	R30,0
    00042 E0F1      LDI	R31,1
    00043 E011      LDI	R17,1
    00044 30E6      CPI	R30,6
    00045 07F1      CPC	R31,R17
    00046 F011      BEQ	0x0049
    00047 9201      ST	Z+,R0
    00048 CFFB      RJMP	0x0044
    00049 8300      ST	Z,R16
    0004A E7E0      LDI	R30,0x70
    0004B E0F0      LDI	R31,0
    0004C E0A0      LDI	R26,0
    0004D E0B1      LDI	R27,1
    0004E E010      LDI	R17,0
    0004F E000      LDI	R16,0
    00050 BF0B      OUT	0x3B,R16
    00051 37E0      CPI	R30,0x70
    00052 07F1      CPC	R31,R17
    00053 F021      BEQ	0x0058
    00054 95C8      LPM
    00055 9631      ADIW	R30,1
    00056 920D      ST	X+,R0
    00057 CFF9      RJMP	0x0051
    00058 940E 01AF CALL	_main
_exit:
    0005A CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0005B 940E 01C2 CALL	push_arg4
    0005D 940E 0273 CALL	push_xgsetF03C
    0005F 9728      SBIW	R28,0x8
    00060 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00061 24AA      CLR	R10
    00062 E081      LDI	R24,1
    00063 8388      ST	Y,R24
    00064 E080      LDI	R24,0
    00065 8389      STD	Y+1,R24
    00066 838A      STD	Y+2,R24
    00067 838B      STD	Y+3,R24
    00068 C03C      RJMP	0x00A5
(0120)     {
(0121)         y=dat/j;
    00069 8028      LD	R2,Y
    0006A 8039      LDD	R3,Y+1
    0006B 804A      LDD	R4,Y+2
    0006C 805B      LDD	R5,Y+3
    0006D 8908      LDD	R16,Y+16
    0006E 8919      LDD	R17,Y+17
    0006F 892A      LDD	R18,Y+18
    00070 893B      LDD	R19,Y+19
    00071 925A      ST	-Y,R5
    00072 924A      ST	-Y,R4
    00073 923A      ST	-Y,R3
    00074 922A      ST	-Y,R2
    00075 940E 01C7 CALL	div32u
    00077 830C      STD	Y+4,R16
    00078 831D      STD	Y+5,R17
    00079 832E      STD	Y+6,R18
    0007A 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0007B E04A      LDI	R20,0xA
    0007C E050      LDI	R21,0
    0007D E060      LDI	R22,0
    0007E E070      LDI	R23,0
    0007F 810C      LDD	R16,Y+4
    00080 811D      LDD	R17,Y+5
    00081 812E      LDD	R18,Y+6
    00082 813F      LDD	R19,Y+7
    00083 937A      ST	-Y,R23
    00084 936A      ST	-Y,R22
    00085 935A      ST	-Y,R21
    00086 934A      ST	-Y,R20
    00087 940E 01C9 CALL	mod32u
    00089 E080      LDI	R24,0
    0008A E091      LDI	R25,1
    0008B 2DEA      MOV	R30,R10
    0008C 27FF      CLR	R31
    0008D 0FE8      ADD	R30,R24
    0008E 1FF9      ADC	R31,R25
    0008F 8300      ST	Z,R16
(0123)         j*=10;
    00090 8028      LD	R2,Y
    00091 8039      LDD	R3,Y+1
    00092 804A      LDD	R4,Y+2
    00093 805B      LDD	R5,Y+3
    00094 E04A      LDI	R20,0xA
    00095 E050      LDI	R21,0
    00096 E060      LDI	R22,0
    00097 E070      LDI	R23,0
    00098 925A      ST	-Y,R5
    00099 924A      ST	-Y,R4
    0009A 923A      ST	-Y,R3
    0009B 922A      ST	-Y,R2
    0009C 018A      MOVW	R16,R20
    0009D 019B      MOVW	R18,R22
    0009E 940E 0231 CALL	empy32u|empy32s
    000A0 8308      ST	Y,R16
    000A1 8319      STD	Y+1,R17
    000A2 832A      STD	Y+2,R18
    000A3 833B      STD	Y+3,R19
    000A4 94A3      INC	R10
    000A5 2C2C      MOV	R2,R12
    000A6 2433      CLR	R3
    000A7 FC27      SBRC	R2,7
    000A8 9430      COM	R3
    000A9 2C4A      MOV	R4,R10
    000AA 2455      CLR	R5
    000AB 1442      CP	R4,R2
    000AC 0453      CPC	R5,R3
    000AD F40C      BGE	0x00AF
    000AE CFBA      RJMP	0x0069
    000AF 9628      ADIW	R28,0x8
    000B0 940E 027C CALL	pop_xgsetF03C
    000B2 9624      ADIW	R28,4
    000B3 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    000B4 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    000B5 C007      RJMP	0x00BD
(0108)         for(j=0;j<70;j++)	
    000B6 2744      CLR	R20
    000B7 C001      RJMP	0x00B9
    000B8 9543      INC	R20
    000B9 3446      CPI	R20,0x46
    000BA F3E8      BCS	0x00B8
    000BB 5001      SUBI	R16,1
    000BC 4010      SBCI	R17,0
    000BD 2422      CLR	R2
    000BE 2433      CLR	R3
    000BF 1620      CP	R2,R16
    000C0 0631      CPC	R3,R17
    000C1 F3A4      BLT	0x00B6
    000C2 9149      LD	R20,Y+
    000C3 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    000C4 934A      ST	-Y,R20
    000C5 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    000C6 C013      RJMP	0x00DA
(0123) 		for(i=0;i<52642;i++)
    000C7 2744      CLR	R20
    000C8 2755      CLR	R21
    000C9 C002      RJMP	0x00CC
    000CA 5F4F      SUBI	R20,0xFF
    000CB 4F5F      SBCI	R21,0xFF
    000CC EA82      LDI	R24,0xA2
    000CD EC9D      LDI	R25,0xCD
    000CE E0A0      LDI	R26,0
    000CF E0B0      LDI	R27,0
    000D0 011A      MOVW	R2,R20
    000D1 2444      CLR	R4
    000D2 2455      CLR	R5
    000D3 1628      CP	R2,R24
    000D4 0639      CPC	R3,R25
    000D5 064A      CPC	R4,R26
    000D6 065B      CPC	R5,R27
    000D7 F394      BLT	0x00CA
    000D8 5001      SUBI	R16,1
    000D9 4010      SBCI	R17,0
    000DA 2422      CLR	R2
    000DB 2433      CLR	R3
    000DC 1620      CP	R2,R16
    000DD 0631      CPC	R3,R17
    000DE F344      BLT	0x00C7
    000DF 9159      LD	R21,Y+
    000E0 9149      LD	R20,Y+
    000E1 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    000E2 934A      ST	-Y,R20
    000E3 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    000E4 2744      CLR	R20
    000E5 2755      CLR	R21
    000E6 C002      RJMP	0x00E9
    000E7 5F4F      SUBI	R20,0xFF
    000E8 4F5F      SBCI	R21,0xFF
    000E9 1740      CP	R20,R16
    000EA 0751      CPC	R21,R17
    000EB F3D8      BCS	0x00E7
    000EC 9159      LD	R21,Y+
    000ED 9149      LD	R20,Y+
    000EE 9508      RET
FILE: E:\吴泽备份\DVK501光盘内容\STK162~1.0\PCF8574_IO扩展设备\PCF8574\PCF8574.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立使用PCF8574的示例程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 先把写数据并显示在LED0~7上显示，然后把读P0~P7的数据用PD口通过LED0~7显示
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：将PCF8574的A0、A1、A2使用短路帽短接至“－”。
(0030) 		 	  DVK501				 M162+ EX
(0031) 				VCC		---------	  VCC
(0032) 				GND		---------	  GND
(0033) 				SCK	    ---------	  PD5(SCL)
(0034) 				SDA		---------	  PD4(SDA)
(0035) 		 
(0036) 写操作时：  DVK501     			M162+ EX
(0037) 			   P0~P7	---------   LED0~7
(0038) 
(0039) 读操作时：  DVK501     			M162+ EX
(0040) 			   P0~P7	---------   VCC/GND(不要悬空)
(0041) ----------------------------------------------------------------------
(0042) 注意事项： 
(0043) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0044) （2）请详细阅读“使用必读”及相关资料。
(0045) ----------------------------------------------------------------------
(0046) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0047) 
(0048) #include <iom162v.h>
(0049) #define NO_INCLUDE_I2C_H 1
(0050) #include "D:\ICC_H\CmmICC.h"
(0051) 
(0052) #define LED_DDR		DDRB
(0053) #define LED_PORT	PORTB
(0054) 
(0055) void sDelay()
(0056) {
(0057)    unsigned char n=0x07;
_sDelay:
  n                    --> R16
    000EF E007      LDI	R16,7
(0058)    while(n--);
    000F0 2E20      MOV	R2,R16
    000F1 2433      CLR	R3
    000F2 5001      SUBI	R16,1
    000F3 2022      TST	R2
    000F4 F7D9      BNE	0x00F0
    000F5 9508      RET
_I2C_Start:
    000F6 9A8D      SBI	0x11,5
    000F7 DFF7      RCALL	_sDelay
    000F8 9A8C      SBI	0x11,4
    000F9 DFF5      RCALL	_sDelay
    000FA 9A94      SBI	0x12,4
    000FB DFF3      RCALL	_sDelay
    000FC 9A95      SBI	0x12,5
    000FD DFF1      RCALL	_sDelay
    000FE 9894      CBI	0x12,4
    000FF DFEF      RCALL	_sDelay
    00100 9895      CBI	0x12,5
    00101 CFED      RJMP	_sDelay
_I2C_Stop:
    00102 9A8D      SBI	0x11,5
    00103 DFEB      RCALL	_sDelay
    00104 9A8C      SBI	0x11,4
    00105 DFE9      RCALL	_sDelay
    00106 9894      CBI	0x12,4
    00107 DFE7      RCALL	_sDelay
    00108 9A95      SBI	0x12,5
    00109 DFE5      RCALL	_sDelay
    0010A 9A94      SBI	0x12,4
    0010B DFE3      RCALL	_sDelay
    0010C 9895      CBI	0x12,5
    0010D CFE1      RJMP	_sDelay
_I2C_Send_DataAddr:
  I2C_n                --> R10
  wrDAdr               --> R20
    0010E 92AA      ST	-Y,R10
    0010F 934A      ST	-Y,R20
    00110 2F40      MOV	R20,R16
    00111 9A8D      SBI	0x11,5
    00112 DFDC      RCALL	_sDelay
    00113 9A8C      SBI	0x11,4
    00114 DFDA      RCALL	_sDelay
    00115 24AA      CLR	R10
    00116 C00F      RJMP	0x0126
    00117 2F84      MOV	R24,R20
    00118 7880      ANDI	R24,0x80
    00119 3880      CPI	R24,0x80
    0011A F419      BNE	0x011E
    0011B 9A94      SBI	0x12,4
    0011C DFD2      RCALL	_sDelay
    0011D C002      RJMP	0x0120
    0011E 9894      CBI	0x12,4
    0011F DFCF      RCALL	_sDelay
    00120 9A95      SBI	0x12,5
    00121 DFCD      RCALL	_sDelay
    00122 9895      CBI	0x12,5
    00123 DFCB      RCALL	_sDelay
    00124 0F44      LSL	R20
    00125 94A3      INC	R10
    00126 E087      LDI	R24,7
    00127 158A      CP	R24,R10
    00128 F770      BCC	0x0117
    00129 988C      CBI	0x11,4
    0012A DFC4      RCALL	_sDelay
    0012B 9A94      SBI	0x12,4
    0012C DFC2      RCALL	_sDelay
    0012D 9A95      SBI	0x12,5
    0012E DFC0      RCALL	_sDelay
    0012F 9984      SBIC	0x10,4
    00130 CFFE      RJMP	0x012F
    00131 9895      CBI	0x12,5
    00132 DFBC      RCALL	_sDelay
    00133 9149      LD	R20,Y+
    00134 90A9      LD	R10,Y+
    00135 9508      RET
_I2C_Read_DataAddr:
  rdDAdr               --> R20
  n                    --> R12
  bAct                 --> R10
    00136 940E 0265 CALL	push_xgset303C
    00138 2EA0      MOV	R10,R16
    00139 2744      CLR	R20
    0013A 9895      CBI	0x12,5
    0013B DFB3      RCALL	_sDelay
    0013C 9A8D      SBI	0x11,5
    0013D DFB1      RCALL	_sDelay
    0013E 988C      CBI	0x11,4
    0013F DFAF      RCALL	_sDelay
    00140 24CC      CLR	R12
    00141 C00A      RJMP	0x014C
    00142 0F44      LSL	R20
    00143 9A95      SBI	0x12,5
    00144 DFAA      RCALL	_sDelay
    00145 DFA9      RCALL	_sDelay
    00146 9B84      SBIS	0x10,4
    00147 C001      RJMP	0x0149
    00148 6041      ORI	R20,1
    00149 9895      CBI	0x12,5
    0014A DFA4      RCALL	_sDelay
    0014B 94C3      INC	R12
    0014C E087      LDI	R24,7
    0014D 158C      CP	R24,R12
    0014E F798      BCC	0x0142
    0014F 9A8C      SBI	0x11,4
    00150 DF9E      RCALL	_sDelay
    00151 20AA      TST	R10
    00152 F019      BEQ	0x0156
    00153 9A94      SBI	0x12,4
    00154 DF9A      RCALL	_sDelay
    00155 C002      RJMP	0x0158
    00156 9894      CBI	0x12,4
    00157 DF97      RCALL	_sDelay
    00158 9A95      SBI	0x12,5
    00159 DF95      RCALL	_sDelay
    0015A 9895      CBI	0x12,5
    0015B DF93      RCALL	_sDelay
    0015C 2F04      MOV	R16,R20
    0015D 940C 026C JMP	pop_xgset303C
_I2C_ReadBusy:
  n                    --> R10
  wrDAdr               --> R20
    0015F 92AA      ST	-Y,R10
    00160 934A      ST	-Y,R20
    00161 2F40      MOV	R20,R16
    00162 9A8D      SBI	0x11,5
    00163 DF8B      RCALL	_sDelay
    00164 9A8C      SBI	0x11,4
    00165 DF89      RCALL	_sDelay
    00166 24AA      CLR	R10
    00167 C00F      RJMP	0x0177
    00168 2F84      MOV	R24,R20
    00169 7880      ANDI	R24,0x80
    0016A 3880      CPI	R24,0x80
    0016B F419      BNE	0x016F
    0016C 9A94      SBI	0x12,4
    0016D DF81      RCALL	_sDelay
    0016E C002      RJMP	0x0171
    0016F 9894      CBI	0x12,4
    00170 DF7E      RCALL	_sDelay
    00171 9A95      SBI	0x12,5
    00172 DF7C      RCALL	_sDelay
    00173 9895      CBI	0x12,5
    00174 DF7A      RCALL	_sDelay
    00175 0F44      LSL	R20
    00176 94A3      INC	R10
    00177 E087      LDI	R24,7
    00178 158A      CP	R24,R10
    00179 F770      BCC	0x0168
    0017A 988C      CBI	0x11,4
    0017B DF73      RCALL	_sDelay
    0017C 9A94      SBI	0x12,4
    0017D DF71      RCALL	_sDelay
    0017E 9A95      SBI	0x12,5
    0017F DF6F      RCALL	_sDelay
    00180 B340      IN	R20,0x10
    00181 7140      ANDI	R20,0x10
    00182 9895      CBI	0x12,5
    00183 DF6B      RCALL	_sDelay
    00184 2F04      MOV	R16,R20
    00185 9149      LD	R20,Y+
    00186 90A9      LD	R10,Y+
    00187 9508      RET
_PCF8574_wByte:
  dat                  --> R10
    00188 92AA      ST	-Y,R10
    00189 2EA0      MOV	R10,R16
    0018A DF6B      RCALL	_I2C_Start
    0018B E400      LDI	R16,0x40
    0018C DF81      RCALL	_I2C_Send_DataAddr
    0018D 2D0A      MOV	R16,R10
    0018E DF7F      RCALL	_I2C_Send_DataAddr
    0018F DF72      RCALL	_I2C_Stop
    00190 90A9      LD	R10,Y+
    00191 9508      RET
_PCF8574_rByte:
  PCF8574_dat          --> R10
    00192 92AA      ST	-Y,R10
    00193 DF62      RCALL	_I2C_Start
    00194 E400      LDI	R16,0x40
    00195 DF78      RCALL	_I2C_Send_DataAddr
    00196 DF5F      RCALL	_I2C_Start
    00197 E401      LDI	R16,0x41
    00198 DF75      RCALL	_I2C_Send_DataAddr
    00199 2700      CLR	R16
    0019A DF9B      RCALL	_I2C_Read_DataAddr
    0019B 2EA0      MOV	R10,R16
    0019C DF65      RCALL	_I2C_Stop
    0019D 2D0A      MOV	R16,R10
    0019E 90A9      LD	R10,Y+
    0019F 9508      RET
(0059) }
(0060) 
(0061) #define DELAY_NOP  sDelay()
(0062) 
(0063) //SDA端口定义
(0064) #define SDA_IN		{cbi(DDRD,4);DELAY_NOP;}
(0065) #define SDA_OUT		{sbi(DDRD,4);DELAY_NOP;}
(0066) #define SDA_SET		{sbi(PORTD,4);DELAY_NOP;}
(0067) #define SDA_CLR		{cbi(PORTD,4);DELAY_NOP;}
(0068) #define SDA_PIN		gbi(PIND,4)
(0069) 
(0070) //SCL端口定义
(0071) #define SCL_IN  	{cbi(DDRD,5);DELAY_NOP;}
(0072) #define SCL_OUT		{sbi(DDRD,5);DELAY_NOP;}
(0073) #define SCL_SET		{sbi(PORTD,5);DELAY_NOP;}
(0074) #define SCL_CLR		{cbi(PORTD,5);DELAY_NOP;}
(0075) #define SCL_PIN		gbi(PIND,5)
(0076) 
(0077) 
(0078) #include "D:\ICC_H\DVK501_IIC_sim.h"
(0079) #include "D:\ICC_H\PCF8574_sim.H"
(0080) 
(0081) void port_init(void)
(0082) {
(0083)     PORTA = 0x00;
_port_init:
    001A0 2422      CLR	R2
    001A1 BA2B      OUT	0x1B,R2
(0084)     DDRA  = 0xFF;
    001A2 EF8F      LDI	R24,0xFF
    001A3 BB8A      OUT	0x1A,R24
(0085)     PORTB = 0x01;
    001A4 E081      LDI	R24,1
    001A5 BB88      OUT	0x18,R24
(0086)     DDRB  = 0xFE;
    001A6 EF8E      LDI	R24,0xFE
    001A7 BB87      OUT	0x17,R24
(0087)     PORTC = 0x03; 
    001A8 E083      LDI	R24,3
    001A9 BB85      OUT	0x15,R24
(0088)     DDRC  = 0x00;
    001AA BA24      OUT	0x14,R2
(0089)     PORTD = 0x00;
    001AB BA22      OUT	0x12,R2
(0090)     DDRD  = 0xFF;
    001AC EF8F      LDI	R24,0xFF
    001AD BB81      OUT	0x11,R24
    001AE 9508      RET
(0091) }
(0092) void main(void)
(0093) {
(0094) 	unsigned char NO;
(0095) 	port_init();
_main:
  NO                   --> R20
    001AF DFF0      RCALL	_port_init
(0096) 	for(NO=0;NO<255;NO++)		//写数据
    001B0 2744      CLR	R20
    001B1 C006      RJMP	0x01B8
(0097) 	{
(0098) 		PCF8574_wByte(NO);
    001B2 2F04      MOV	R16,R20
    001B3 DFD4      RCALL	_PCF8574_wByte
(0099) 		delay50ms(5);
    001B4 E005      LDI	R16,5
    001B5 E010      LDI	R17,0
    001B6 DF0D      RCALL	_delay50ms
    001B7 9543      INC	R20
    001B8 3F4F      CPI	R20,0xFF
    001B9 F3C0      BCS	0x01B2
    001BA C005      RJMP	0x01C0
(0100) 	}
(0101) 	while(1)
(0102) 	{
(0103) 		PORTD=PCF8574_rByte();	//读数据(在PD口显示出来)
    001BB DFD6      RCALL	_PCF8574_rByte
    001BC BB02      OUT	0x12,R16
(0104) 		delay50ms(5);
FILE: <library>
    001BD E005      LDI	R16,5
    001BE E010      LDI	R17,0
    001BF DF04      RCALL	_delay50ms
    001C0 CFFA      RJMP	0x01BB
    001C1 9508      RET
push_arg4:
    001C2 933A      ST	-Y,R19
    001C3 932A      ST	-Y,R18
push_arg2:
    001C4 931A      ST	-Y,R17
    001C5 930A      ST	-Y,R16
    001C6 9508      RET
div32u:
    001C7 94E8      BCLR	6
    001C8 C001      RJMP	0x01CA
mod32u:
    001C9 9468      BSET	6
    001CA D030      RCALL	long_div_prolog
    001CB 24CC      CLR	R12
    001CC C009      RJMP	0x01D6
div32s:
    001CD 94E8      BCLR	6
    001CE C001      RJMP	0x01D0
mod32s:
    001CF 9468      BSET	6
    001D0 D02A      RCALL	long_div_prolog
    001D1 FD37      SBRC	R19,7
    001D2 940E 0285 CALL	neg32
    001D4 FDB7      SBRC	R27,7
    001D5 D052      RCALL	neg_R24_R27
    001D6 2477      CLR	R7
    001D7 2488      CLR	R8
    001D8 2499      CLR	R9
    001D9 24AA      CLR	R10
    001DA 24BB      CLR	R11
    001DB D042      RCALL	tst_R16_R19
    001DC F0C1      BEQ	0x01F5
    001DD D045      RCALL	tst_R24_R27
    001DE F0B1      BEQ	0x01F5
    001DF E2E8      LDI	R30,0x28
    001E0 0F00      LSL	R16
    001E1 1F11      ROL	R17
    001E2 1F22      ROL	R18
    001E3 1F33      ROL	R19
    001E4 1C77      ROL	R7
    001E5 1C88      ROL	R8
    001E6 1C99      ROL	R9
    001E7 1CAA      ROL	R10
    001E8 1CBB      ROL	R11
    001E9 1688      CP	R8,R24
    001EA 0699      CPC	R9,R25
    001EB 06AA      CPC	R10,R26
    001EC 06BB      CPC	R11,R27
    001ED F028      BCS	0x01F3
    001EE 1A88      SUB	R8,R24
    001EF 0A99      SBC	R9,R25
    001F0 0AAA      SBC	R10,R26
    001F1 0ABB      SBC	R11,R27
    001F2 9503      INC	R16
    001F3 95EA      DEC	R30
    001F4 F759      BNE	0x01E0
    001F5 F426      BRTC	0x01FA
    001F6 2D08      MOV	R16,R8
    001F7 2D19      MOV	R17,R9
    001F8 2D2A      MOV	R18,R10
    001F9 2D3B      MOV	R19,R11
    001FA C013      RJMP	long_div_epilog
long_div_prolog:
    001FB 927A      ST	-Y,R7
    001FC 928A      ST	-Y,R8
    001FD 929A      ST	-Y,R9
    001FE 92AA      ST	-Y,R10
    001FF 92BA      ST	-Y,R11
    00200 92CA      ST	-Y,R12
    00201 93EA      ST	-Y,R30
    00202 938A      ST	-Y,R24
    00203 939A      ST	-Y,R25
    00204 93AA      ST	-Y,R26
    00205 93BA      ST	-Y,R27
    00206 858B      LDD	R24,Y+11
    00207 859C      LDD	R25,Y+12
    00208 85AD      LDD	R26,Y+13
    00209 85BE      LDD	R27,Y+14
    0020A 2EC3      MOV	R12,R19
    0020B F00E      BRTS	0x020D
    0020C 26CB      EOR	R12,R27
    0020D 9508      RET
long_div_epilog:
    0020E FCC7      SBRC	R12,7
    0020F 940E 0285 CALL	neg32
    00211 91B9      LD	R27,Y+
    00212 91A9      LD	R26,Y+
    00213 9199      LD	R25,Y+
    00214 9189      LD	R24,Y+
    00215 91E9      LD	R30,Y+
    00216 90C9      LD	R12,Y+
    00217 90B9      LD	R11,Y+
    00218 90A9      LD	R10,Y+
    00219 9099      LD	R9,Y+
    0021A 9089      LD	R8,Y+
    0021B 9079      LD	R7,Y+
    0021C 9624      ADIW	R28,4
    0021D 9508      RET
tst_R16_R19:
    0021E 2FE0      MOV	R30,R16
    0021F 2BE1      OR	R30,R17
    00220 2BE2      OR	R30,R18
    00221 2BE3      OR	R30,R19
    00222 9508      RET
tst_R24_R27:
    00223 2FE8      MOV	R30,R24
    00224 2BE9      OR	R30,R25
    00225 2BEA      OR	R30,R26
    00226 2BEB      OR	R30,R27
    00227 9508      RET
neg_R24_R27:
    00228 9580      COM	R24
    00229 9590      COM	R25
    0022A 95A0      COM	R26
    0022B 95B0      COM	R27
    0022C 5F8F      SUBI	R24,0xFF
    0022D 4F9F      SBCI	R25,0xFF
    0022E 4FAF      SBCI	R26,0xFF
    0022F 4FBF      SBCI	R27,0xFF
    00230 9508      RET
empy32u|empy32s:
    00231 940E 028E CALL	long_prolog
    00233 927A      ST	-Y,R7
    00234 940E 02A7 CALL	tstzero1
    00236 F159      BEQ	0x0262
    00237 2477      CLR	R7
    00238 940E 02AD CALL	tstzero2
    0023A F419      BNE	0x023E
    0023B 018C      MOVW	R16,R24
    0023C 019D      MOVW	R18,R26
    0023D C024      RJMP	0x0262
    0023E 920A      ST	-Y,R0
    0023F 921A      ST	-Y,R1
    00240 9F08      MUL	R16,R24
    00241 2CB0      MOV	R11,R0
    00242 2CA1      MOV	R10,R1
    00243 9F28      MUL	R18,R24
    00244 2C90      MOV	R9,R0
    00245 2C81      MOV	R8,R1
    00246 9F18      MUL	R17,R24
    00247 0CA0      ADD	R10,R0
    00248 1C91      ADC	R9,R1
    00249 1C87      ADC	R8,R7
    0024A 9F09      MUL	R16,R25
    0024B 0CA0      ADD	R10,R0
    0024C 1C91      ADC	R9,R1
    0024D 1C87      ADC	R8,R7
    0024E 9F19      MUL	R17,R25
    0024F 0C90      ADD	R9,R0
    00250 1C81      ADC	R8,R1
    00251 9F0A      MUL	R16,R26
    00252 0C90      ADD	R9,R0
    00253 1C81      ADC	R8,R1
    00254 9F38      MUL	R19,R24
    00255 0C80      ADD	R8,R0
    00256 9F29      MUL	R18,R25
    00257 0C80      ADD	R8,R0
    00258 9F1A      MUL	R17,R26
    00259 0C80      ADD	R8,R0
    0025A 9F0B      MUL	R16,R27
    0025B 0C80      ADD	R8,R0
    0025C 9019      LD	R1,Y+
    0025D 9009      LD	R0,Y+
    0025E 2D0B      MOV	R16,R11
    0025F 2D1A      MOV	R17,R10
    00260 2D29      MOV	R18,R9
    00261 2D38      MOV	R19,R8
    00262 9079      LD	R7,Y+
    00263 940C 029C JMP	long_epilog
push_xgset303C:
    00265 935A      ST	-Y,R21
    00266 934A      ST	-Y,R20
    00267 92DA      ST	-Y,R13
    00268 92CA      ST	-Y,R12
    00269 92BA      ST	-Y,R11
    0026A 92AA      ST	-Y,R10
    0026B 9508      RET
pop_xgset303C:
    0026C 90A9      LD	R10,Y+
    0026D 90B9      LD	R11,Y+
    0026E 90C9      LD	R12,Y+
    0026F 90D9      LD	R13,Y+
    00270 9149      LD	R20,Y+
    00271 9159      LD	R21,Y+
    00272 9508      RET
push_xgsetF03C:
    00273 937A      ST	-Y,R23
    00274 936A      ST	-Y,R22
    00275 935A      ST	-Y,R21
    00276 934A      ST	-Y,R20
    00277 92DA      ST	-Y,R13
    00278 92CA      ST	-Y,R12
    00279 92BA      ST	-Y,R11
    0027A 92AA      ST	-Y,R10
    0027B 9508      RET
pop_xgsetF03C:
    0027C 90A9      LD	R10,Y+
    0027D 90B9      LD	R11,Y+
    0027E 90C9      LD	R12,Y+
    0027F 90D9      LD	R13,Y+
    00280 9149      LD	R20,Y+
    00281 9159      LD	R21,Y+
    00282 9169      LD	R22,Y+
    00283 9179      LD	R23,Y+
    00284 9508      RET
neg32:
    00285 9500      COM	R16
    00286 9510      COM	R17
    00287 9520      COM	R18
    00288 9530      COM	R19
    00289 5F0F      SUBI	R16,0xFF
    0028A 4F1F      SBCI	R17,0xFF
    0028B 4F2F      SBCI	R18,0xFF
    0028C 4F3F      SBCI	R19,0xFF
    0028D 9508      RET
long_prolog:
    0028E 928A      ST	-Y,R8
    0028F 929A      ST	-Y,R9
    00290 92AA      ST	-Y,R10
    00291 92BA      ST	-Y,R11
    00292 93EA      ST	-Y,R30
    00293 938A      ST	-Y,R24
    00294 939A      ST	-Y,R25
    00295 93AA      ST	-Y,R26
    00296 93BA      ST	-Y,R27
    00297 8589      LDD	R24,Y+9
    00298 859A      LDD	R25,Y+10
    00299 85AB      LDD	R26,Y+11
    0029A 85BC      LDD	R27,Y+12
    0029B 9508      RET
long_epilog:
    0029C 91B9      LD	R27,Y+
    0029D 91A9      LD	R26,Y+
    0029E 9199      LD	R25,Y+
    0029F 9189      LD	R24,Y+
    002A0 91E9      LD	R30,Y+
    002A1 90B9      LD	R11,Y+
    002A2 90A9      LD	R10,Y+
    002A3 9099      LD	R9,Y+
    002A4 9089      LD	R8,Y+
    002A5 9624      ADIW	R28,4
    002A6 9508      RET
tstzero1:
    002A7 27EE      CLR	R30
    002A8 2BE0      OR	R30,R16
    002A9 2BE1      OR	R30,R17
    002AA 2BE2      OR	R30,R18
    002AB 2BE3      OR	R30,R19
    002AC 9508      RET
tstzero2:
    002AD 27EE      CLR	R30
    002AE 2BE8      OR	R30,R24
    002AF 2BE9      OR	R30,R25
    002B0 2BEA      OR	R30,R26
    002B1 2BEB      OR	R30,R27
    002B2 9508      RET
