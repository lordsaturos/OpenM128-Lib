Interrupt Vectors
    00000 940C 0038 JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    00038 EFCF      LDI	R28,0xFF
    00039 E0D4      LDI	R29,4
    0003A BFCD      OUT	0x3D,R28
    0003B BFDE      OUT	0x3E,R29
    0003C 51C0      SUBI	R28,0x10
    0003D 40D0      SBCI	R29,0
    0003E EA0A      LDI	R16,0xAA
    0003F 8308      ST	Y,R16
    00040 2400      CLR	R0
    00041 E0E0      LDI	R30,0
    00042 E0F1      LDI	R31,1
    00043 E011      LDI	R17,1
    00044 30E6      CPI	R30,6
    00045 07F1      CPC	R31,R17
    00046 F011      BEQ	0x0049
    00047 9201      ST	Z+,R0
    00048 CFFB      RJMP	0x0044
    00049 8300      ST	Z,R16
    0004A E7E0      LDI	R30,0x70
    0004B E0F0      LDI	R31,0
    0004C E0A0      LDI	R26,0
    0004D E0B1      LDI	R27,1
    0004E E010      LDI	R17,0
    0004F E000      LDI	R16,0
    00050 BF0B      OUT	0x3B,R16
    00051 37E0      CPI	R30,0x70
    00052 07F1      CPC	R31,R17
    00053 F021      BEQ	0x0058
    00054 95C8      LPM
    00055 9631      ADIW	R30,1
    00056 920D      ST	X+,R0
    00057 CFF9      RJMP	0x0051
    00058 940E 00F3 CALL	_main
_exit:
    0005A CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0005B 940E 0100 CALL	push_arg4
    0005D 940E 01A3 CALL	push_xgsetF03C
    0005F 9728      SBIW	R28,0x8
    00060 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00061 24AA      CLR	R10
    00062 E081      LDI	R24,1
    00063 8388      ST	Y,R24
    00064 E080      LDI	R24,0
    00065 8389      STD	Y+1,R24
    00066 838A      STD	Y+2,R24
    00067 838B      STD	Y+3,R24
    00068 C03C      RJMP	0x00A5
(0120)     {
(0121)         y=dat/j;
    00069 8028      LD	R2,Y
    0006A 8039      LDD	R3,Y+1
    0006B 804A      LDD	R4,Y+2
    0006C 805B      LDD	R5,Y+3
    0006D 8908      LDD	R16,Y+16
    0006E 8919      LDD	R17,Y+17
    0006F 892A      LDD	R18,Y+18
    00070 893B      LDD	R19,Y+19
    00071 925A      ST	-Y,R5
    00072 924A      ST	-Y,R4
    00073 923A      ST	-Y,R3
    00074 922A      ST	-Y,R2
    00075 940E 0105 CALL	div32u
    00077 830C      STD	Y+4,R16
    00078 831D      STD	Y+5,R17
    00079 832E      STD	Y+6,R18
    0007A 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0007B E04A      LDI	R20,0xA
    0007C E050      LDI	R21,0
    0007D E060      LDI	R22,0
    0007E E070      LDI	R23,0
    0007F 810C      LDD	R16,Y+4
    00080 811D      LDD	R17,Y+5
    00081 812E      LDD	R18,Y+6
    00082 813F      LDD	R19,Y+7
    00083 937A      ST	-Y,R23
    00084 936A      ST	-Y,R22
    00085 935A      ST	-Y,R21
    00086 934A      ST	-Y,R20
    00087 940E 0107 CALL	mod32u
    00089 E080      LDI	R24,0
    0008A E091      LDI	R25,1
    0008B 2DEA      MOV	R30,R10
    0008C 27FF      CLR	R31
    0008D 0FE8      ADD	R30,R24
    0008E 1FF9      ADC	R31,R25
    0008F 8300      ST	Z,R16
(0123)         j*=10;
    00090 8028      LD	R2,Y
    00091 8039      LDD	R3,Y+1
    00092 804A      LDD	R4,Y+2
    00093 805B      LDD	R5,Y+3
    00094 E04A      LDI	R20,0xA
    00095 E050      LDI	R21,0
    00096 E060      LDI	R22,0
    00097 E070      LDI	R23,0
    00098 925A      ST	-Y,R5
    00099 924A      ST	-Y,R4
    0009A 923A      ST	-Y,R3
    0009B 922A      ST	-Y,R2
    0009C 018A      MOVW	R16,R20
    0009D 019B      MOVW	R18,R22
    0009E 940E 016F CALL	empy32u|empy32s
    000A0 8308      ST	Y,R16
    000A1 8319      STD	Y+1,R17
    000A2 832A      STD	Y+2,R18
    000A3 833B      STD	Y+3,R19
    000A4 94A3      INC	R10
    000A5 2C2C      MOV	R2,R12
    000A6 2433      CLR	R3
    000A7 FC27      SBRC	R2,7
    000A8 9430      COM	R3
    000A9 2C4A      MOV	R4,R10
    000AA 2455      CLR	R5
    000AB 1442      CP	R4,R2
    000AC 0453      CPC	R5,R3
    000AD F40C      BGE	0x00AF
    000AE CFBA      RJMP	0x0069
    000AF 9628      ADIW	R28,0x8
    000B0 940E 01AC CALL	pop_xgsetF03C
    000B2 9624      ADIW	R28,4
    000B3 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    000B4 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    000B5 C007      RJMP	0x00BD
(0108)         for(j=0;j<70;j++)	
    000B6 2744      CLR	R20
    000B7 C001      RJMP	0x00B9
    000B8 9543      INC	R20
    000B9 3446      CPI	R20,0x46
    000BA F3E8      BCS	0x00B8
    000BB 5001      SUBI	R16,1
    000BC 4010      SBCI	R17,0
    000BD 2422      CLR	R2
    000BE 2433      CLR	R3
    000BF 1620      CP	R2,R16
    000C0 0631      CPC	R3,R17
    000C1 F3A4      BLT	0x00B6
    000C2 9149      LD	R20,Y+
    000C3 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    000C4 934A      ST	-Y,R20
    000C5 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    000C6 C013      RJMP	0x00DA
(0123) 		for(i=0;i<52642;i++)
    000C7 2744      CLR	R20
    000C8 2755      CLR	R21
    000C9 C002      RJMP	0x00CC
    000CA 5F4F      SUBI	R20,0xFF
    000CB 4F5F      SBCI	R21,0xFF
    000CC EA82      LDI	R24,0xA2
    000CD EC9D      LDI	R25,0xCD
    000CE E0A0      LDI	R26,0
    000CF E0B0      LDI	R27,0
    000D0 011A      MOVW	R2,R20
    000D1 2444      CLR	R4
    000D2 2455      CLR	R5
    000D3 1628      CP	R2,R24
    000D4 0639      CPC	R3,R25
    000D5 064A      CPC	R4,R26
    000D6 065B      CPC	R5,R27
    000D7 F394      BLT	0x00CA
    000D8 5001      SUBI	R16,1
    000D9 4010      SBCI	R17,0
    000DA 2422      CLR	R2
    000DB 2433      CLR	R3
    000DC 1620      CP	R2,R16
    000DD 0631      CPC	R3,R17
    000DE F344      BLT	0x00C7
    000DF 9159      LD	R21,Y+
    000E0 9149      LD	R20,Y+
    000E1 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    000E2 934A      ST	-Y,R20
    000E3 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    000E4 2744      CLR	R20
    000E5 2755      CLR	R21
    000E6 C002      RJMP	0x00E9
    000E7 5F4F      SUBI	R20,0xFF
    000E8 4F5F      SBCI	R21,0xFF
    000E9 1740      CP	R20,R16
    000EA 0751      CPC	R21,R17
    000EB F3D8      BCS	0x00E7
    000EC 9159      LD	R21,Y+
    000ED 9149      LD	R20,Y+
    000EE 9508      RET
FILE: D:\DVK501_ICC\KERNEL~1\ATmega162\内核－WDT\WDT\WDT.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立使用WDT的示例程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 观察喂狗与不喂狗的区别，使用PB口的LED指示灯做状态指示。
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：	
(0030) 将PB口的LED指示灯使能开关切换到"ON"状态。
(0031) ----------------------------------------------------------------------
(0032) 注意事项： 
(0033) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0034) （2）请详细阅读“使用必读”及相关资料。
(0035) ----------------------------------------------------------------------
(0036) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0037) #define NO_INCLUDE_I2C_H 1
(0038) #include <iom162v.h>
(0039) #include "D:\ICC_H\CmmICC.H"
(0040) 
(0041) #define DISP_DDR	DDRB
(0042) #define DISP_PORT	PORTB
(0043) 
(0044) /*--------------------------------------------------------------------
(0045) 函数名称：
(0046) 函数功能：
(0047) 注意事项：
(0048) 提示说明：
(0049) 输    入：
(0050) 返    回：
(0051) --------------------------------------------------------------------*/
(0052) void wdt_init(void)
(0053) {
(0054) 	asm("wdr");			//clr wdt
_wdt_init:
    000EF 95A8      WDR
(0055) 	WDTCR=0x0F;			//enable wdt,clk = 2048，2.1S
    000F0 E08F      LDI	R24,0xF
    000F1 BD81      OUT	0x21,R24
    000F2 9508      RET
(0056) } 
(0057) /*--------------------------------------------------------------------
(0058) 函数名称：
(0059) 函数功能：
(0060) 注意事项：
(0061) 提示说明：
(0062) 输    入：
(0063) 返    回：
(0064) --------------------------------------------------------------------*/
(0065) void main(void) 
(0066) {
(0067) 	uint8 i;
(0068) 	
(0069) 	DISP_DDR = 0XFF;
_main:
  i                    --> Y,+1
    000F3 EF8F      LDI	R24,0xFF
    000F4 BB87      OUT	0x17,R24
(0070) 	wdt_init();
    000F5 DFF9      RCALL	_wdt_init
    000F6 C007      RJMP	0x00FE
(0071) 
(0072) 	while(1)
(0073) 	{
(0074) 		DISP_PORT++;
    000F7 B388      IN	R24,0x18
    000F8 5F8F      SUBI	R24,0xFF
    000F9 BB88      OUT	0x18,R24
(0075) 		asm("wdr");	   //喂狗，去除此句将导致MCU复位，从而数据不会向上加
    000FA 95A8      WDR
(0076) 		delay50ms(20);	
FILE: <library>
    000FB E104      LDI	R16,0x14
    000FC E010      LDI	R17,0
    000FD DFC6      RCALL	_delay50ms
    000FE CFF8      RJMP	0x00F7
    000FF 9508      RET
push_arg4:
    00100 933A      ST	-Y,R19
    00101 932A      ST	-Y,R18
push_arg2:
    00102 931A      ST	-Y,R17
    00103 930A      ST	-Y,R16
    00104 9508      RET
div32u:
    00105 94E8      BCLR	6
    00106 C001      RJMP	0x0108
mod32u:
    00107 9468      BSET	6
    00108 D030      RCALL	long_div_prolog
    00109 24CC      CLR	R12
    0010A C009      RJMP	0x0114
div32s:
    0010B 94E8      BCLR	6
    0010C C001      RJMP	0x010E
mod32s:
    0010D 9468      BSET	6
    0010E D02A      RCALL	long_div_prolog
    0010F FD37      SBRC	R19,7
    00110 940E 01B5 CALL	neg32
    00112 FDB7      SBRC	R27,7
    00113 D052      RCALL	neg_R24_R27
    00114 2477      CLR	R7
    00115 2488      CLR	R8
    00116 2499      CLR	R9
    00117 24AA      CLR	R10
    00118 24BB      CLR	R11
    00119 D042      RCALL	tst_R16_R19
    0011A F0C1      BEQ	0x0133
    0011B D045      RCALL	tst_R24_R27
    0011C F0B1      BEQ	0x0133
    0011D E2E8      LDI	R30,0x28
    0011E 0F00      LSL	R16
    0011F 1F11      ROL	R17
    00120 1F22      ROL	R18
    00121 1F33      ROL	R19
    00122 1C77      ROL	R7
    00123 1C88      ROL	R8
    00124 1C99      ROL	R9
    00125 1CAA      ROL	R10
    00126 1CBB      ROL	R11
    00127 1688      CP	R8,R24
    00128 0699      CPC	R9,R25
    00129 06AA      CPC	R10,R26
    0012A 06BB      CPC	R11,R27
    0012B F028      BCS	0x0131
    0012C 1A88      SUB	R8,R24
    0012D 0A99      SBC	R9,R25
    0012E 0AAA      SBC	R10,R26
    0012F 0ABB      SBC	R11,R27
    00130 9503      INC	R16
    00131 95EA      DEC	R30
    00132 F759      BNE	0x011E
    00133 F426      BRTC	0x0138
    00134 2D08      MOV	R16,R8
    00135 2D19      MOV	R17,R9
    00136 2D2A      MOV	R18,R10
    00137 2D3B      MOV	R19,R11
    00138 C013      RJMP	long_div_epilog
long_div_prolog:
    00139 927A      ST	-Y,R7
    0013A 928A      ST	-Y,R8
    0013B 929A      ST	-Y,R9
    0013C 92AA      ST	-Y,R10
    0013D 92BA      ST	-Y,R11
    0013E 92CA      ST	-Y,R12
    0013F 93EA      ST	-Y,R30
    00140 938A      ST	-Y,R24
    00141 939A      ST	-Y,R25
    00142 93AA      ST	-Y,R26
    00143 93BA      ST	-Y,R27
    00144 858B      LDD	R24,Y+11
    00145 859C      LDD	R25,Y+12
    00146 85AD      LDD	R26,Y+13
    00147 85BE      LDD	R27,Y+14
    00148 2EC3      MOV	R12,R19
    00149 F00E      BRTS	0x014B
    0014A 26CB      EOR	R12,R27
    0014B 9508      RET
long_div_epilog:
    0014C FCC7      SBRC	R12,7
    0014D 940E 01B5 CALL	neg32
    0014F 91B9      LD	R27,Y+
    00150 91A9      LD	R26,Y+
    00151 9199      LD	R25,Y+
    00152 9189      LD	R24,Y+
    00153 91E9      LD	R30,Y+
    00154 90C9      LD	R12,Y+
    00155 90B9      LD	R11,Y+
    00156 90A9      LD	R10,Y+
    00157 9099      LD	R9,Y+
    00158 9089      LD	R8,Y+
    00159 9079      LD	R7,Y+
    0015A 9624      ADIW	R28,4
    0015B 9508      RET
tst_R16_R19:
    0015C 2FE0      MOV	R30,R16
    0015D 2BE1      OR	R30,R17
    0015E 2BE2      OR	R30,R18
    0015F 2BE3      OR	R30,R19
    00160 9508      RET
tst_R24_R27:
    00161 2FE8      MOV	R30,R24
    00162 2BE9      OR	R30,R25
    00163 2BEA      OR	R30,R26
    00164 2BEB      OR	R30,R27
    00165 9508      RET
neg_R24_R27:
    00166 9580      COM	R24
    00167 9590      COM	R25
    00168 95A0      COM	R26
    00169 95B0      COM	R27
    0016A 5F8F      SUBI	R24,0xFF
    0016B 4F9F      SBCI	R25,0xFF
    0016C 4FAF      SBCI	R26,0xFF
    0016D 4FBF      SBCI	R27,0xFF
    0016E 9508      RET
empy32u|empy32s:
    0016F 940E 01BE CALL	long_prolog
    00171 927A      ST	-Y,R7
    00172 940E 01D7 CALL	tstzero1
    00174 F159      BEQ	0x01A0
    00175 2477      CLR	R7
    00176 940E 01DD CALL	tstzero2
    00178 F419      BNE	0x017C
    00179 018C      MOVW	R16,R24
    0017A 019D      MOVW	R18,R26
    0017B C024      RJMP	0x01A0
    0017C 920A      ST	-Y,R0
    0017D 921A      ST	-Y,R1
    0017E 9F08      MUL	R16,R24
    0017F 2CB0      MOV	R11,R0
    00180 2CA1      MOV	R10,R1
    00181 9F28      MUL	R18,R24
    00182 2C90      MOV	R9,R0
    00183 2C81      MOV	R8,R1
    00184 9F18      MUL	R17,R24
    00185 0CA0      ADD	R10,R0
    00186 1C91      ADC	R9,R1
    00187 1C87      ADC	R8,R7
    00188 9F09      MUL	R16,R25
    00189 0CA0      ADD	R10,R0
    0018A 1C91      ADC	R9,R1
    0018B 1C87      ADC	R8,R7
    0018C 9F19      MUL	R17,R25
    0018D 0C90      ADD	R9,R0
    0018E 1C81      ADC	R8,R1
    0018F 9F0A      MUL	R16,R26
    00190 0C90      ADD	R9,R0
    00191 1C81      ADC	R8,R1
    00192 9F38      MUL	R19,R24
    00193 0C80      ADD	R8,R0
    00194 9F29      MUL	R18,R25
    00195 0C80      ADD	R8,R0
    00196 9F1A      MUL	R17,R26
    00197 0C80      ADD	R8,R0
    00198 9F0B      MUL	R16,R27
    00199 0C80      ADD	R8,R0
    0019A 9019      LD	R1,Y+
    0019B 9009      LD	R0,Y+
    0019C 2D0B      MOV	R16,R11
    0019D 2D1A      MOV	R17,R10
    0019E 2D29      MOV	R18,R9
    0019F 2D38      MOV	R19,R8
    001A0 9079      LD	R7,Y+
    001A1 940C 01CC JMP	long_epilog
push_xgsetF03C:
    001A3 937A      ST	-Y,R23
    001A4 936A      ST	-Y,R22
    001A5 935A      ST	-Y,R21
    001A6 934A      ST	-Y,R20
    001A7 92DA      ST	-Y,R13
    001A8 92CA      ST	-Y,R12
    001A9 92BA      ST	-Y,R11
    001AA 92AA      ST	-Y,R10
    001AB 9508      RET
pop_xgsetF03C:
    001AC 90A9      LD	R10,Y+
    001AD 90B9      LD	R11,Y+
    001AE 90C9      LD	R12,Y+
    001AF 90D9      LD	R13,Y+
    001B0 9149      LD	R20,Y+
    001B1 9159      LD	R21,Y+
    001B2 9169      LD	R22,Y+
    001B3 9179      LD	R23,Y+
    001B4 9508      RET
neg32:
    001B5 9500      COM	R16
    001B6 9510      COM	R17
    001B7 9520      COM	R18
    001B8 9530      COM	R19
    001B9 5F0F      SUBI	R16,0xFF
    001BA 4F1F      SBCI	R17,0xFF
    001BB 4F2F      SBCI	R18,0xFF
    001BC 4F3F      SBCI	R19,0xFF
    001BD 9508      RET
long_prolog:
    001BE 928A      ST	-Y,R8
    001BF 929A      ST	-Y,R9
    001C0 92AA      ST	-Y,R10
    001C1 92BA      ST	-Y,R11
    001C2 93EA      ST	-Y,R30
    001C3 938A      ST	-Y,R24
    001C4 939A      ST	-Y,R25
    001C5 93AA      ST	-Y,R26
    001C6 93BA      ST	-Y,R27
    001C7 8589      LDD	R24,Y+9
    001C8 859A      LDD	R25,Y+10
    001C9 85AB      LDD	R26,Y+11
    001CA 85BC      LDD	R27,Y+12
    001CB 9508      RET
long_epilog:
    001CC 91B9      LD	R27,Y+
    001CD 91A9      LD	R26,Y+
    001CE 9199      LD	R25,Y+
    001CF 9189      LD	R24,Y+
    001D0 91E9      LD	R30,Y+
    001D1 90B9      LD	R11,Y+
    001D2 90A9      LD	R10,Y+
    001D3 9099      LD	R9,Y+
    001D4 9089      LD	R8,Y+
    001D5 9624      ADIW	R28,4
    001D6 9508      RET
tstzero1:
    001D7 27EE      CLR	R30
    001D8 2BE0      OR	R30,R16
    001D9 2BE1      OR	R30,R17
    001DA 2BE2      OR	R30,R18
    001DB 2BE3      OR	R30,R19
    001DC 9508      RET
tstzero2:
    001DD 27EE      CLR	R30
    001DE 2BE8      OR	R30,R24
    001DF 2BE9      OR	R30,R25
    001E0 2BEA      OR	R30,R26
    001E1 2BEB      OR	R30,R27
    001E2 9508      RET
