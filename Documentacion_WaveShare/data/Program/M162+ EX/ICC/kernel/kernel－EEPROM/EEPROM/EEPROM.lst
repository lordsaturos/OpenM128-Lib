Interrupt Vectors
    00000 940C 003C JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0003C EFCF      LDI	R28,0xFF
    0003D E0D4      LDI	R29,4
    0003E BFCD      OUT	0x3D,R28
    0003F BFDE      OUT	0x3E,R29
    00040 51C0      SUBI	R28,0x10
    00041 40D0      SBCI	R29,0
    00042 EA0A      LDI	R16,0xAA
    00043 8308      ST	Y,R16
    00044 2400      CLR	R0
    00045 E0E8      LDI	R30,0x8
    00046 E0F1      LDI	R31,1
    00047 E011      LDI	R17,1
    00048 30EE      CPI	R30,0xE
    00049 07F1      CPC	R31,R17
    0004A F011      BEQ	0x004D
    0004B 9201      ST	Z+,R0
    0004C CFFB      RJMP	0x0048
    0004D 8300      ST	Z,R16
    0004E E7E0      LDI	R30,0x70
    0004F E0F0      LDI	R31,0
    00050 E0A0      LDI	R26,0
    00051 E0B1      LDI	R27,1
    00052 E010      LDI	R17,0
    00053 E000      LDI	R16,0
    00054 BF0B      OUT	0x3B,R16
    00055 37E8      CPI	R30,0x78
    00056 07F1      CPC	R31,R17
    00057 F021      BEQ	0x005C
    00058 95C8      LPM
    00059 9631      ADIW	R30,1
    0005A 920D      ST	X+,R0
    0005B CFF9      RJMP	0x0055
    0005C 940E 00F3 CALL	_main
_exit:
    0005E CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0005F 940E 0139 CALL	push_arg4
    00061 940E 01DC CALL	push_xgsetF03C
    00063 9728      SBIW	R28,0x8
    00064 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00065 24AA      CLR	R10
    00066 E081      LDI	R24,1
    00067 8388      ST	Y,R24
    00068 E080      LDI	R24,0
    00069 8389      STD	Y+1,R24
    0006A 838A      STD	Y+2,R24
    0006B 838B      STD	Y+3,R24
    0006C C03C      RJMP	0x00A9
(0120)     {
(0121)         y=dat/j;
    0006D 8028      LD	R2,Y
    0006E 8039      LDD	R3,Y+1
    0006F 804A      LDD	R4,Y+2
    00070 805B      LDD	R5,Y+3
    00071 8908      LDD	R16,Y+16
    00072 8919      LDD	R17,Y+17
    00073 892A      LDD	R18,Y+18
    00074 893B      LDD	R19,Y+19
    00075 925A      ST	-Y,R5
    00076 924A      ST	-Y,R4
    00077 923A      ST	-Y,R3
    00078 922A      ST	-Y,R2
    00079 940E 013E CALL	div32u
    0007B 830C      STD	Y+4,R16
    0007C 831D      STD	Y+5,R17
    0007D 832E      STD	Y+6,R18
    0007E 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0007F E04A      LDI	R20,0xA
    00080 E050      LDI	R21,0
    00081 E060      LDI	R22,0
    00082 E070      LDI	R23,0
    00083 810C      LDD	R16,Y+4
    00084 811D      LDD	R17,Y+5
    00085 812E      LDD	R18,Y+6
    00086 813F      LDD	R19,Y+7
    00087 937A      ST	-Y,R23
    00088 936A      ST	-Y,R22
    00089 935A      ST	-Y,R21
    0008A 934A      ST	-Y,R20
    0008B 940E 0140 CALL	mod32u
    0008D E088      LDI	R24,0x8
    0008E E091      LDI	R25,1
    0008F 2DEA      MOV	R30,R10
    00090 27FF      CLR	R31
    00091 0FE8      ADD	R30,R24
    00092 1FF9      ADC	R31,R25
    00093 8300      ST	Z,R16
(0123)         j*=10;
    00094 8028      LD	R2,Y
    00095 8039      LDD	R3,Y+1
    00096 804A      LDD	R4,Y+2
    00097 805B      LDD	R5,Y+3
    00098 E04A      LDI	R20,0xA
    00099 E050      LDI	R21,0
    0009A E060      LDI	R22,0
    0009B E070      LDI	R23,0
    0009C 925A      ST	-Y,R5
    0009D 924A      ST	-Y,R4
    0009E 923A      ST	-Y,R3
    0009F 922A      ST	-Y,R2
    000A0 018A      MOVW	R16,R20
    000A1 019B      MOVW	R18,R22
    000A2 940E 01A8 CALL	empy32s|empy32u
    000A4 8308      ST	Y,R16
    000A5 8319      STD	Y+1,R17
    000A6 832A      STD	Y+2,R18
    000A7 833B      STD	Y+3,R19
    000A8 94A3      INC	R10
    000A9 2C2C      MOV	R2,R12
    000AA 2433      CLR	R3
    000AB FC27      SBRC	R2,7
    000AC 9430      COM	R3
    000AD 2C4A      MOV	R4,R10
    000AE 2455      CLR	R5
    000AF 1442      CP	R4,R2
    000B0 0453      CPC	R5,R3
    000B1 F40C      BGE	0x00B3
    000B2 CFBA      RJMP	0x006D
    000B3 9628      ADIW	R28,0x8
    000B4 940E 01E5 CALL	pop_xgsetF03C
    000B6 9624      ADIW	R28,4
    000B7 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    000B8 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    000B9 C007      RJMP	0x00C1
(0108)         for(j=0;j<70;j++)	
    000BA 2744      CLR	R20
    000BB C001      RJMP	0x00BD
    000BC 9543      INC	R20
    000BD 3446      CPI	R20,0x46
    000BE F3E8      BCS	0x00BC
    000BF 5001      SUBI	R16,1
    000C0 4010      SBCI	R17,0
    000C1 2422      CLR	R2
    000C2 2433      CLR	R3
    000C3 1620      CP	R2,R16
    000C4 0631      CPC	R3,R17
    000C5 F3A4      BLT	0x00BA
    000C6 9149      LD	R20,Y+
    000C7 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    000C8 934A      ST	-Y,R20
    000C9 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    000CA C013      RJMP	0x00DE
(0123) 		for(i=0;i<52642;i++)
    000CB 2744      CLR	R20
    000CC 2755      CLR	R21
    000CD C002      RJMP	0x00D0
    000CE 5F4F      SUBI	R20,0xFF
    000CF 4F5F      SBCI	R21,0xFF
    000D0 EA82      LDI	R24,0xA2
    000D1 EC9D      LDI	R25,0xCD
    000D2 E0A0      LDI	R26,0
    000D3 E0B0      LDI	R27,0
    000D4 011A      MOVW	R2,R20
    000D5 2444      CLR	R4
    000D6 2455      CLR	R5
    000D7 1628      CP	R2,R24
    000D8 0639      CPC	R3,R25
    000D9 064A      CPC	R4,R26
    000DA 065B      CPC	R5,R27
    000DB F394      BLT	0x00CE
    000DC 5001      SUBI	R16,1
    000DD 4010      SBCI	R17,0
    000DE 2422      CLR	R2
    000DF 2433      CLR	R3
    000E0 1620      CP	R2,R16
    000E1 0631      CPC	R3,R17
    000E2 F344      BLT	0x00CB
    000E3 9159      LD	R21,Y+
    000E4 9149      LD	R20,Y+
    000E5 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    000E6 934A      ST	-Y,R20
    000E7 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    000E8 2744      CLR	R20
    000E9 2755      CLR	R21
    000EA C002      RJMP	0x00ED
    000EB 5F4F      SUBI	R20,0xFF
    000EC 4F5F      SBCI	R21,0xFF
    000ED 1740      CP	R20,R16
    000EE 0751      CPC	R21,R17
    000EF F3D8      BCS	0x00EB
    000F0 9159      LD	R21,Y+
    000F1 9149      LD	R20,Y+
    000F2 9508      RET
_main:
  wrDat_               --> Y,+10
  wrDat                --> R20
  rdDat_               --> Y,+2
  i                    --> R20
    000F3 9762      SBIW	R28,0x12
FILE: D:\DVK501_ICC\KERNEL~1\ATmega162\内核－EEPROM\EEPROM\EEPROM.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net	
(0003) 
(0004) 功能目的:   建立EEPROM操作示例程序
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 
(0008) 应用软件:   ICCAVR                                               
(0009) 
(0010) 版    本:   Version 1.0
(0011) 
(0012) 圆版时间:   2005-03-01
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ---------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 写入一些测试数据进EEPROM，再读出，使用PB口的LED做指示，观测是否与写入一致。
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：	
(0030) 将PB口的LED指示灯使能开关切换到"ON"状态。
(0031) ----------------------------------------------------------------------
(0032) 注意事项： 
(0033) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0034) （2）请详细阅读“使用必读”及相关资料。
(0035) 		
(0036) ----------------------------------------------------------------------
(0037) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0038) #define NO_INCLUDE_I2C_H 1
(0039) #include <iom162v.h>
(0040) #include "D:\ICC_H\CmmICC.H"
(0041) 
(0042) #define DISP_DDR   DDRB
(0043) #define DISP_PORT  PORTB
(0044) 
(0045) /*--------------------------------------------------------------------
(0046) 函数名称：
(0047) 函数功能：
(0048) 注意事项：
(0049) 提示说明：
(0050) 输    入：
(0051) 返    回：
(0052) --------------------------------------------------------------------*/
(0053) void main(void) 
(0054) {
(0055) 	uint8 i;
(0056) 	uint8 wrDat=0xAA;
    000F4 EA4A      LDI	R20,0xAA
(0057) 	uint8 wrDat_[]={1,2,3,4,5,6,7,8},rdDat_[8];
    000F5 E080      LDI	R24,0
    000F6 E091      LDI	R25,1
    000F7 01FE      MOVW	R30,R28
    000F8 963A      ADIW	R30,0xA
    000F9 E008      LDI	R16,0x8
    000FA E010      LDI	R17,0
    000FB 93FA      ST	-Y,R31
    000FC 93EA      ST	-Y,R30
    000FD 939A      ST	-Y,R25
    000FE 938A      ST	-Y,R24
    000FF 940E 021C CALL	asgnblk
(0058) 	DISP_DDR=0xFF;
    00101 EF8F      LDI	R24,0xFF
    00102 BB87      OUT	0x17,R24
(0059) 	EEPROMwrite(0x01,wrDat);		//写入单个数据
    00103 2F24      MOV	R18,R20
    00104 E001      LDI	R16,1
    00105 E010      LDI	R17,0
    00106 940E 023B CALL	_EEPROMwrite
(0060) 	DISP_PORT=EEPROMread(0x01);		//读出用指示灯验证是否正确
    00108 E001      LDI	R16,1
    00109 E010      LDI	R17,0
    0010A 940E 0234 CALL	_EEPROMread
    0010C BB08      OUT	0x18,R16
(0061) 	delay50ms(40);				//有2S的观察时间
    0010D E208      LDI	R16,0x28
    0010E E010      LDI	R17,0
    0010F DFB8      RCALL	_delay50ms
(0062) 	EEPROMWriteBytes(1,wrDat_,8);	//写入数组						  
    00110 E088      LDI	R24,0x8
    00111 E090      LDI	R25,0
    00112 8399      STD	Y+1,R25
    00113 8388      ST	Y,R24
    00114 019E      MOVW	R18,R28
    00115 5F26      SUBI	R18,0xF6
    00116 4F3F      SBCI	R19,0xFF
    00117 E001      LDI	R16,1
    00118 E010      LDI	R17,0
    00119 940E 026D CALL	_EEPROMWriteBytes
(0063) 	EEPROMReadBytes(1,rdDat_,8);	
    0011B E088      LDI	R24,0x8
    0011C E090      LDI	R25,0
    0011D 8399      STD	Y+1,R25
    0011E 8388      ST	Y,R24
    0011F 019E      MOVW	R18,R28
    00120 5F2E      SUBI	R18,0xFE
    00121 4F3F      SBCI	R19,0xFF
    00122 E001      LDI	R16,1
    00123 E010      LDI	R17,0
    00124 940E 024A CALL	_EEPROMReadBytes
(0064) 	for(i=0;i<7;i++)
    00126 2744      CLR	R20
    00127 C00C      RJMP	0x0134
(0065) 	{
(0066) 		delay50ms(40);			//有2S的观察时间
    00128 E208      LDI	R16,0x28
    00129 E010      LDI	R17,0
    0012A DF9D      RCALL	_delay50ms
(0067) 		DISP_PORT=rdDat_[i];		//读出用指示灯验证是否正确
    0012B 01CE      MOVW	R24,R28
    0012C 9602      ADIW	R24,2
    0012D 2FE4      MOV	R30,R20
    0012E 27FF      CLR	R31
    0012F 0FE8      ADD	R30,R24
    00130 1FF9      ADC	R31,R25
    00131 8020      LD	R2,Z
    00132 BA28      OUT	0x18,R2
    00133 9543      INC	R20
    00134 3047      CPI	R20,7
    00135 F390      BCS	0x0128
(0068) 	} 			
(0069) 	while(1);
FILE: <library>
    00136 CFFF      RJMP	0x0136
    00137 9662      ADIW	R28,0x12
    00138 9508      RET
push_arg4:
    00139 933A      ST	-Y,R19
    0013A 932A      ST	-Y,R18
push_arg2:
    0013B 931A      ST	-Y,R17
    0013C 930A      ST	-Y,R16
    0013D 9508      RET
div32u:
    0013E 94E8      BCLR	6
    0013F C001      RJMP	0x0141
mod32u:
    00140 9468      BSET	6
    00141 D030      RCALL	long_div_prolog
    00142 24CC      CLR	R12
    00143 C009      RJMP	0x014D
div32s:
    00144 94E8      BCLR	6
    00145 C001      RJMP	0x0147
mod32s:
    00146 9468      BSET	6
    00147 D02A      RCALL	long_div_prolog
    00148 FD37      SBRC	R19,7
    00149 940E 01EE CALL	neg32
    0014B FDB7      SBRC	R27,7
    0014C D052      RCALL	neg_R24_R27
    0014D 2477      CLR	R7
    0014E 2488      CLR	R8
    0014F 2499      CLR	R9
    00150 24AA      CLR	R10
    00151 24BB      CLR	R11
    00152 D042      RCALL	tst_R16_R19
    00153 F0C1      BEQ	0x016C
    00154 D045      RCALL	tst_R24_R27
    00155 F0B1      BEQ	0x016C
    00156 E2E8      LDI	R30,0x28
    00157 0F00      LSL	R16
    00158 1F11      ROL	R17
    00159 1F22      ROL	R18
    0015A 1F33      ROL	R19
    0015B 1C77      ROL	R7
    0015C 1C88      ROL	R8
    0015D 1C99      ROL	R9
    0015E 1CAA      ROL	R10
    0015F 1CBB      ROL	R11
    00160 1688      CP	R8,R24
    00161 0699      CPC	R9,R25
    00162 06AA      CPC	R10,R26
    00163 06BB      CPC	R11,R27
    00164 F028      BCS	0x016A
    00165 1A88      SUB	R8,R24
    00166 0A99      SBC	R9,R25
    00167 0AAA      SBC	R10,R26
    00168 0ABB      SBC	R11,R27
    00169 9503      INC	R16
    0016A 95EA      DEC	R30
    0016B F759      BNE	0x0157
    0016C F426      BRTC	0x0171
    0016D 2D08      MOV	R16,R8
    0016E 2D19      MOV	R17,R9
    0016F 2D2A      MOV	R18,R10
    00170 2D3B      MOV	R19,R11
    00171 C013      RJMP	long_div_epilog
long_div_prolog:
    00172 927A      ST	-Y,R7
    00173 928A      ST	-Y,R8
    00174 929A      ST	-Y,R9
    00175 92AA      ST	-Y,R10
    00176 92BA      ST	-Y,R11
    00177 92CA      ST	-Y,R12
    00178 93EA      ST	-Y,R30
    00179 938A      ST	-Y,R24
    0017A 939A      ST	-Y,R25
    0017B 93AA      ST	-Y,R26
    0017C 93BA      ST	-Y,R27
    0017D 858B      LDD	R24,Y+11
    0017E 859C      LDD	R25,Y+12
    0017F 85AD      LDD	R26,Y+13
    00180 85BE      LDD	R27,Y+14
    00181 2EC3      MOV	R12,R19
    00182 F00E      BRTS	0x0184
    00183 26CB      EOR	R12,R27
    00184 9508      RET
long_div_epilog:
    00185 FCC7      SBRC	R12,7
    00186 940E 01EE CALL	neg32
    00188 91B9      LD	R27,Y+
    00189 91A9      LD	R26,Y+
    0018A 9199      LD	R25,Y+
    0018B 9189      LD	R24,Y+
    0018C 91E9      LD	R30,Y+
    0018D 90C9      LD	R12,Y+
    0018E 90B9      LD	R11,Y+
    0018F 90A9      LD	R10,Y+
    00190 9099      LD	R9,Y+
    00191 9089      LD	R8,Y+
    00192 9079      LD	R7,Y+
    00193 9624      ADIW	R28,4
    00194 9508      RET
tst_R16_R19:
    00195 2FE0      MOV	R30,R16
    00196 2BE1      OR	R30,R17
    00197 2BE2      OR	R30,R18
    00198 2BE3      OR	R30,R19
    00199 9508      RET
tst_R24_R27:
    0019A 2FE8      MOV	R30,R24
    0019B 2BE9      OR	R30,R25
    0019C 2BEA      OR	R30,R26
    0019D 2BEB      OR	R30,R27
    0019E 9508      RET
neg_R24_R27:
    0019F 9580      COM	R24
    001A0 9590      COM	R25
    001A1 95A0      COM	R26
    001A2 95B0      COM	R27
    001A3 5F8F      SUBI	R24,0xFF
    001A4 4F9F      SBCI	R25,0xFF
    001A5 4FAF      SBCI	R26,0xFF
    001A6 4FBF      SBCI	R27,0xFF
    001A7 9508      RET
empy32s|empy32u:
    001A8 940E 01F7 CALL	long_prolog
    001AA 927A      ST	-Y,R7
    001AB 940E 0210 CALL	tstzero1
    001AD F159      BEQ	0x01D9
    001AE 2477      CLR	R7
    001AF 940E 0216 CALL	tstzero2
    001B1 F419      BNE	0x01B5
    001B2 018C      MOVW	R16,R24
    001B3 019D      MOVW	R18,R26
    001B4 C024      RJMP	0x01D9
    001B5 920A      ST	-Y,R0
    001B6 921A      ST	-Y,R1
    001B7 9F08      MUL	R16,R24
    001B8 2CB0      MOV	R11,R0
    001B9 2CA1      MOV	R10,R1
    001BA 9F28      MUL	R18,R24
    001BB 2C90      MOV	R9,R0
    001BC 2C81      MOV	R8,R1
    001BD 9F18      MUL	R17,R24
    001BE 0CA0      ADD	R10,R0
    001BF 1C91      ADC	R9,R1
    001C0 1C87      ADC	R8,R7
    001C1 9F09      MUL	R16,R25
    001C2 0CA0      ADD	R10,R0
    001C3 1C91      ADC	R9,R1
    001C4 1C87      ADC	R8,R7
    001C5 9F19      MUL	R17,R25
    001C6 0C90      ADD	R9,R0
    001C7 1C81      ADC	R8,R1
    001C8 9F0A      MUL	R16,R26
    001C9 0C90      ADD	R9,R0
    001CA 1C81      ADC	R8,R1
    001CB 9F38      MUL	R19,R24
    001CC 0C80      ADD	R8,R0
    001CD 9F29      MUL	R18,R25
    001CE 0C80      ADD	R8,R0
    001CF 9F1A      MUL	R17,R26
    001D0 0C80      ADD	R8,R0
    001D1 9F0B      MUL	R16,R27
    001D2 0C80      ADD	R8,R0
    001D3 9019      LD	R1,Y+
    001D4 9009      LD	R0,Y+
    001D5 2D0B      MOV	R16,R11
    001D6 2D1A      MOV	R17,R10
    001D7 2D29      MOV	R18,R9
    001D8 2D38      MOV	R19,R8
    001D9 9079      LD	R7,Y+
    001DA 940C 0205 JMP	long_epilog
push_xgsetF03C:
    001DC 937A      ST	-Y,R23
    001DD 936A      ST	-Y,R22
    001DE 935A      ST	-Y,R21
    001DF 934A      ST	-Y,R20
    001E0 92DA      ST	-Y,R13
    001E1 92CA      ST	-Y,R12
    001E2 92BA      ST	-Y,R11
    001E3 92AA      ST	-Y,R10
    001E4 9508      RET
pop_xgsetF03C:
    001E5 90A9      LD	R10,Y+
    001E6 90B9      LD	R11,Y+
    001E7 90C9      LD	R12,Y+
    001E8 90D9      LD	R13,Y+
    001E9 9149      LD	R20,Y+
    001EA 9159      LD	R21,Y+
    001EB 9169      LD	R22,Y+
    001EC 9179      LD	R23,Y+
    001ED 9508      RET
neg32:
    001EE 9500      COM	R16
    001EF 9510      COM	R17
    001F0 9520      COM	R18
    001F1 9530      COM	R19
    001F2 5F0F      SUBI	R16,0xFF
    001F3 4F1F      SBCI	R17,0xFF
    001F4 4F2F      SBCI	R18,0xFF
    001F5 4F3F      SBCI	R19,0xFF
    001F6 9508      RET
long_prolog:
    001F7 928A      ST	-Y,R8
    001F8 929A      ST	-Y,R9
    001F9 92AA      ST	-Y,R10
    001FA 92BA      ST	-Y,R11
    001FB 93EA      ST	-Y,R30
    001FC 938A      ST	-Y,R24
    001FD 939A      ST	-Y,R25
    001FE 93AA      ST	-Y,R26
    001FF 93BA      ST	-Y,R27
    00200 8589      LDD	R24,Y+9
    00201 859A      LDD	R25,Y+10
    00202 85AB      LDD	R26,Y+11
    00203 85BC      LDD	R27,Y+12
    00204 9508      RET
long_epilog:
    00205 91B9      LD	R27,Y+
    00206 91A9      LD	R26,Y+
    00207 9199      LD	R25,Y+
    00208 9189      LD	R24,Y+
    00209 91E9      LD	R30,Y+
    0020A 90B9      LD	R11,Y+
    0020B 90A9      LD	R10,Y+
    0020C 9099      LD	R9,Y+
    0020D 9089      LD	R8,Y+
    0020E 9624      ADIW	R28,4
    0020F 9508      RET
tstzero1:
    00210 27EE      CLR	R30
    00211 2BE0      OR	R30,R16
    00212 2BE1      OR	R30,R17
    00213 2BE2      OR	R30,R18
    00214 2BE3      OR	R30,R19
    00215 9508      RET
tstzero2:
    00216 27EE      CLR	R30
    00217 2BE8      OR	R30,R24
    00218 2BE9      OR	R30,R25
    00219 2BEA      OR	R30,R26
    0021A 2BEB      OR	R30,R27
    0021B 9508      RET
asgnblk:
    0021C 93AA      ST	-Y,R26
    0021D 93BA      ST	-Y,R27
    0021E 93EA      ST	-Y,R30
    0021F 93FA      ST	-Y,R31
    00220 920A      ST	-Y,R0
    00221 81AF      LDD	R26,Y+7
    00222 85B8      LDD	R27,Y+8
    00223 81ED      LDD	R30,Y+5
    00224 81FE      LDD	R31,Y+6
    00225 3000      CPI	R16,0
    00226 0701      CPC	R16,R17
    00227 F029      BEQ	0x022D
    00228 9001      LD	R0,Z+
    00229 920D      ST	X+,R0
    0022A 5001      SUBI	R16,1
    0022B 4010      SBCI	R17,0
    0022C CFF8      RJMP	0x0225
    0022D 9009      LD	R0,Y+
    0022E 91F9      LD	R31,Y+
    0022F 91E9      LD	R30,Y+
    00230 91B9      LD	R27,Y+
    00231 91A9      LD	R26,Y+
    00232 9624      ADIW	R28,4
    00233 9508      RET
_EEPROMread:
    00234 99E1      SBIC	0x1C,1
    00235 CFFE      RJMP	_EEPROMread
    00236 BB1F      OUT	0x1F,R17
    00237 BB0E      OUT	0x1E,R16
    00238 9AE0      SBI	0x1C,0
    00239 B30D      IN	R16,0x1D
    0023A 9508      RET
_EEPROMwrite:
    0023B 92AA      ST	-Y,R10
    0023C 99E1      SBIC	0x1C,1
    0023D CFFE      RJMP	0x023C
    0023E BB1F      OUT	0x1F,R17
    0023F BB0E      OUT	0x1E,R16
    00240 BB2D      OUT	0x1D,R18
    00241 B6AF      IN	R10,0x3F
    00242 94F8      BCLR	7
    00243 9AE2      SBI	0x1C,2
    00244 9AE1      SBI	0x1C,1
    00245 BEAF      OUT	0x3F,R10
    00246 2700      CLR	R16
    00247 2711      CLR	R17
    00248 90A9      LD	R10,Y+
    00249 9508      RET
_EEPROMReadBytes:
    0024A 940E 01DC CALL	push_xgsetF03C
    0024C 2EC2      MOV	R12,R18
    0024D 2ED3      MOV	R13,R19
    0024E 2F60      MOV	R22,R16
    0024F 2F71      MOV	R23,R17
    00250 84A8      LDD	R10,Y+8
    00251 84B9      LDD	R11,Y+9
    00252 2D4C      MOV	R20,R12
    00253 2D5D      MOV	R21,R13
    00254 C00B      RJMP	0x0260
    00255 2F06      MOV	R16,R22
    00256 2F17      MOV	R17,R23
    00257 940E 0234 CALL	_EEPROMread
    00259 2FE4      MOV	R30,R20
    0025A 2FF5      MOV	R31,R21
    0025B 8300      ST	Z,R16
    0025C 5F6F      SUBI	R22,0xFF
    0025D 4F7F      SBCI	R23,0xFF
    0025E 5F4F      SUBI	R20,0xFF
    0025F 4F5F      SBCI	R21,0xFF
    00260 2C2A      MOV	R2,R10
    00261 2C3B      MOV	R3,R11
    00262 2D82      MOV	R24,R2
    00263 2D93      MOV	R25,R3
    00264 9701      SBIW	R24,1
    00265 2EA8      MOV	R10,R24
    00266 2EB9      MOV	R11,R25
    00267 2022      TST	R2
    00268 F761      BNE	0x0255
    00269 2033      TST	R3
    0026A F751      BNE	0x0255
    0026B 940C 01E5 JMP	pop_xgsetF03C
_EEPROMWriteBytes:
    0026D 940E 01DC CALL	push_xgsetF03C
    0026F 2EC2      MOV	R12,R18
    00270 2ED3      MOV	R13,R19
    00271 2F60      MOV	R22,R16
    00272 2F71      MOV	R23,R17
    00273 84A8      LDD	R10,Y+8
    00274 84B9      LDD	R11,Y+9
    00275 2D4C      MOV	R20,R12
    00276 2D5D      MOV	R21,R13
    00277 C00B      RJMP	0x0283
    00278 2FE4      MOV	R30,R20
    00279 2FF5      MOV	R31,R21
    0027A 8120      LD	R18,Z
    0027B 2F06      MOV	R16,R22
    0027C 2F17      MOV	R17,R23
    0027D 940E 023B CALL	_EEPROMwrite
    0027F 5F6F      SUBI	R22,0xFF
    00280 4F7F      SBCI	R23,0xFF
    00281 5F4F      SUBI	R20,0xFF
    00282 4F5F      SBCI	R21,0xFF
    00283 2C2A      MOV	R2,R10
    00284 2C3B      MOV	R3,R11
    00285 2D82      MOV	R24,R2
    00286 2D93      MOV	R25,R3
    00287 9701      SBIW	R24,1
    00288 2EA8      MOV	R10,R24
    00289 2EB9      MOV	R11,R25
    0028A 2022      TST	R2
    0028B F761      BNE	0x0278
    0028C 2033      TST	R3
    0028D F751      BNE	0x0278
    0028E 940C 01E5 JMP	pop_xgsetF03C
