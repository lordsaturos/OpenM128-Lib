
PS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000286  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800176  00800176  00000390  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e3  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000022d  00000000  00000000  00000493  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000134  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011f  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e8       	ldi	r30, 0x86	; 134
  84:	f2 e0       	ldi	r31, 0x02	; 2
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a6 37       	cpi	r26, 0x76	; 118
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a6 e7       	ldi	r26, 0x76	; 118
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 38       	cpi	r26, 0x84	; 132
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  a6:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ps2IntInit>:
// INT0 Mode: Falling Edge
// INT1: Off
// INT2: Off
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-15: Off
GICR|=0x40;
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8b bf       	out	0x3b, r24	; 59
MCUCR=0x02;
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	85 bf       	out	0x35, r24	; 53
EMCUCR=0x00;
  b8:	16 be       	out	0x36, r1	; 54
GIFR=0x40;
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	8a bf       	out	0x3a, r24	; 58
}
  be:	08 95       	ret

000000c0 <__vector_1>:
*	ISR_BLOCK为GCC interrupt.h库的中断参数
*
*-------------------------------------------------------------------------------------------------------
*/
ISR(PS2_INT_VECTOR,ISR_BLOCK)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
   ps2_status++;	/*状态寄存器*/
  d0:	80 91 82 01 	lds	r24, 0x0182
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 82 01 	sts	0x0182, r24
	if(ps2_status==1)
  da:	80 91 82 01 	lds	r24, 0x0182
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	29 f4       	brne	.+10     	; 0xec <__vector_1+0x2c>
   { 
        if(GET_PS2_DA()) 
  e2:	83 9b       	sbis	0x10, 3	; 16
  e4:	54 c0       	rjmp	.+168    	; 0x18e <__vector_1+0xce>
            ps2_status=0;		/*判断起始位是否为0，不为0则清零计数器*/
  e6:	10 92 82 01 	sts	0x0182, r1
  ea:	51 c0       	rjmp	.+162    	; 0x18e <__vector_1+0xce>
   }
   else if(ps2_status<10 && ps2_status>0)
  ec:	80 91 82 01 	lds	r24, 0x0182
  f0:	8a 30       	cpi	r24, 0x0A	; 10
  f2:	b8 f4       	brcc	.+46     	; 0x122 <__vector_1+0x62>
  f4:	80 91 82 01 	lds	r24, 0x0182
  f8:	88 23       	and	r24, r24
  fa:	99 f0       	breq	.+38     	; 0x122 <__vector_1+0x62>
   {
      ps2_data=ps2_data>>1;
  fc:	80 91 80 01 	lds	r24, 0x0180
 100:	86 95       	lsr	r24
 102:	80 93 80 01 	sts	0x0180, r24
			if(GET_PS2_DA()) {ps2_data |= 0x80;ps2_parity++;}	/*接受8bit数据位*/
 106:	83 9b       	sbis	0x10, 3	; 16
 108:	06 c0       	rjmp	.+12     	; 0x116 <__vector_1+0x56>
 10a:	80 91 80 01 	lds	r24, 0x0180
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	80 93 80 01 	sts	0x0180, r24
 114:	0c c0       	rjmp	.+24     	; 0x12e <__vector_1+0x6e>
			else ps2_data &= 0x7F;
 116:	80 91 80 01 	lds	r24, 0x0180
 11a:	8f 77       	andi	r24, 0x7F	; 127
 11c:	80 93 80 01 	sts	0x0180, r24
 120:	36 c0       	rjmp	.+108    	; 0x18e <__vector_1+0xce>
   }
   else if(ps2_status==10) 
 122:	80 91 82 01 	lds	r24, 0x0182
 126:	8a 30       	cpi	r24, 0x0A	; 10
 128:	41 f4       	brne	.+16     	; 0x13a <__vector_1+0x7a>
   {
        if(GET_PS2_DA()) 	
 12a:	83 9b       	sbis	0x10, 3	; 16
 12c:	30 c0       	rjmp	.+96     	; 0x18e <__vector_1+0xce>
            ps2_parity++;	/*接收奇偶校验位*/
 12e:	80 91 81 01 	lds	r24, 0x0181
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 81 01 	sts	0x0181, r24
 138:	2a c0       	rjmp	.+84     	; 0x18e <__vector_1+0xce>
   }
   else if((ps2_status==11))
 13a:	80 91 82 01 	lds	r24, 0x0182
 13e:	8b 30       	cpi	r24, 0x0B	; 11
 140:	11 f5       	brne	.+68     	; 0x186 <__vector_1+0xc6>
   {
        if((ps2_parity & 0x01))	/*奇偶校验*/
 142:	80 91 81 01 	lds	r24, 0x0181
 146:	80 ff       	sbrs	r24, 0
 148:	22 c0       	rjmp	.+68     	; 0x18e <__vector_1+0xce>
        {
        ps2_buffer[ps2_wr_index]=ps2_data;	/*刷新PS2数据缓冲器*/
 14a:	e0 91 76 01 	lds	r30, 0x0176
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 91 80 01 	lds	r24, 0x0180
 154:	e9 58       	subi	r30, 0x89	; 137
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	80 83       	st	Z, r24
        if (++ps2_wr_index == PS2_BUFFER_SIZE) ps2_wr_index=0;	
 15a:	80 91 76 01 	lds	r24, 0x0176
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 76 01 	sts	0x0176, r24
 164:	80 91 76 01 	lds	r24, 0x0176
 168:	88 30       	cpi	r24, 0x08	; 8
 16a:	11 f4       	brne	.+4      	; 0x170 <__vector_1+0xb0>
 16c:	10 92 76 01 	sts	0x0176, r1
        if (++ps2_counter == PS2_BUFFER_SIZE) ps2_counter=0;	
 170:	80 91 7f 01 	lds	r24, 0x017F
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 7f 01 	sts	0x017F, r24
 17a:	80 91 7f 01 	lds	r24, 0x017F
 17e:	88 30       	cpi	r24, 0x08	; 8
 180:	11 f4       	brne	.+4      	; 0x186 <__vector_1+0xc6>
 182:	10 92 7f 01 	sts	0x017F, r1
        ps2_parity=0;
        }
   }
   else
   {
        ps2_status=0;	/*接收完数据后清空寄存器*/
 186:	10 92 82 01 	sts	0x0182, r1
        ps2_parity=0;
 18a:	10 92 81 01 	sts	0x0181, r1
   } 
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <ps2GetCode>:
*-------------------------------------------------------------------------------------------------------
*/
uint8_t ps2GetCode(void)
{
uint8_t data;
while(!ps2_counter);
 19e:	80 91 7f 01 	lds	r24, 0x017F
 1a2:	88 23       	and	r24, r24
 1a4:	e1 f3       	breq	.-8      	; 0x19e <ps2GetCode>
data=ps2_buffer[ps2_rd_index];	/*从缓冲器读取数据*/
 1a6:	e0 91 83 01 	lds	r30, 0x0183
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	e9 58       	subi	r30, 0x89	; 137
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	e0 81       	ld	r30, Z
if (++ps2_rd_index == PS2_BUFFER_SIZE) ps2_rd_index=0;	
 1b2:	80 91 83 01 	lds	r24, 0x0183
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	80 93 83 01 	sts	0x0183, r24
 1bc:	80 91 83 01 	lds	r24, 0x0183
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <ps2GetCode+0x2a>
 1c4:	10 92 83 01 	sts	0x0183, r1
cli();
 1c8:	f8 94       	cli
--ps2_counter;
 1ca:	80 91 7f 01 	lds	r24, 0x017F
 1ce:	81 50       	subi	r24, 0x01	; 1
 1d0:	80 93 7f 01 	sts	0x017F, r24
sei();
 1d4:	78 94       	sei
return data;
}
 1d6:	8e 2f       	mov	r24, r30
 1d8:	08 95       	ret

000001da <ps2Init>:

void ps2Init(void)
{
ps2_status=0;
 1da:	10 92 82 01 	sts	0x0182, r1
ps2_data=0;
 1de:	10 92 80 01 	sts	0x0180, r1
ps2_parity=0;
 1e2:	10 92 81 01 	sts	0x0181, r1

ps2_wr_index=0;
 1e6:	10 92 76 01 	sts	0x0176, r1
ps2_rd_index=0;
 1ea:	10 92 83 01 	sts	0x0183, r1
ps2_counter=0; 
 1ee:	10 92 7f 01 	sts	0x017F, r1

IN_PS2_CL();
 1f2:	8a 98       	cbi	0x11, 2	; 17
SET_PS2_CL();
 1f4:	92 9a       	sbi	0x12, 2	; 18
IN_PS2_DA();
 1f6:	8b 98       	cbi	0x11, 3	; 17
SET_PS2_DA();
 1f8:	93 9a       	sbi	0x12, 3	; 18
}
 1fa:	08 95       	ret

000001fc <ps2GetChar>:
*-------------------------------------------------------------------------------------------------------
*/
uint8_t ps2GetCode(void)
{
uint8_t data;
while(!ps2_counter);
 1fc:	80 91 7f 01 	lds	r24, 0x017F
 200:	88 23       	and	r24, r24
 202:	e1 f3       	breq	.-8      	; 0x1fc <ps2GetChar>
data=ps2_buffer[ps2_rd_index];	/*从缓冲器读取数据*/
 204:	e0 91 83 01 	lds	r30, 0x0183
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	e9 58       	subi	r30, 0x89	; 137
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	90 81       	ld	r25, Z
if (++ps2_rd_index == PS2_BUFFER_SIZE) ps2_rd_index=0;	
 210:	80 91 83 01 	lds	r24, 0x0183
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 83 01 	sts	0x0183, r24
 21a:	80 91 83 01 	lds	r24, 0x0183
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	11 f4       	brne	.+4      	; 0x226 <ps2GetChar+0x2a>
 222:	10 92 83 01 	sts	0x0183, r1
cli();
 226:	f8 94       	cli
--ps2_counter;
 228:	80 91 7f 01 	lds	r24, 0x017F
 22c:	81 50       	subi	r24, 0x01	; 1
 22e:	80 93 7f 01 	sts	0x017F, r24
sei();
 232:	78 94       	sei
 234:	e0 e0       	ldi	r30, 0x00	; 0
 236:	f1 e0       	ldi	r31, 0x01	; 1
 238:	a0 e0       	ldi	r26, 0x00	; 0
 23a:	b0 e0       	ldi	r27, 0x00	; 0
	ps2char = ps2GetCode();
	while(1)
	{
		if(ps2num > ((sizeof(keyboardToAscii)) >> 1)) 
			return(0);
		else if(keyboardToAscii[ps2num][0] == ps2char) 
 23c:	80 81       	ld	r24, Z
 23e:	89 17       	cp	r24, r25
 240:	39 f4       	brne	.+14     	; 0x250 <ps2GetChar+0x54>
			return(keyboardToAscii[ps2num][1]);
 242:	aa 0f       	add	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a0 50       	subi	r26, 0x00	; 0
 248:	bf 4f       	sbci	r27, 0xFF	; 255
 24a:	11 96       	adiw	r26, 0x01	; 1
 24c:	8c 91       	ld	r24, X
 24e:	08 95       	ret
 250:	11 96       	adiw	r26, 0x01	; 1
 252:	32 96       	adiw	r30, 0x02	; 2
	uint8_t ps2num = 0x00;

	ps2char = ps2GetCode();
	while(1)
	{
		if(ps2num > ((sizeof(keyboardToAscii)) >> 1)) 
 254:	ac 33       	cpi	r26, 0x3C	; 60
 256:	b1 05       	cpc	r27, r1
 258:	89 f7       	brne	.-30     	; 0x23c <ps2GetChar+0x40>
 25a:	80 e0       	ldi	r24, 0x00	; 0
			return(0);
		else if(keyboardToAscii[ps2num][0] == ps2char) 
			return(keyboardToAscii[ps2num][1]);
		ps2num++;
	}
}
 25c:	08 95       	ret

0000025e <main>:
#define PORT_LED PORTA

int main(void)
{
/*IO initialization*/
DDR_LED = 0xFF; 
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	8a bb       	out	0x1a, r24	; 26
PORT_LED = 0x00;
 262:	1b ba       	out	0x1b, r1	; 27
// INT0 Mode: Falling Edge
// INT1: Off
// INT2: Off
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-15: Off
GICR|=0x40;
 264:	8b b7       	in	r24, 0x3b	; 59
 266:	80 64       	ori	r24, 0x40	; 64
 268:	8b bf       	out	0x3b, r24	; 59
MCUCR=0x02;
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	85 bf       	out	0x35, r24	; 53
EMCUCR=0x00;
 26e:	16 be       	out	0x36, r1	; 54
GIFR=0x40;
 270:	80 e4       	ldi	r24, 0x40	; 64
 272:	8a bf       	out	0x3a, r24	; 58

ps2IntInit();

/*PS2 initialization*/
ps2Init();
 274:	0e 94 ed 00 	call	0x1da	; 0x1da <ps2Init>

sei();
 278:	78 94       	sei
while(1)
{
	PORT_LED = ps2GetChar();
 27a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ps2GetChar>
 27e:	8b bb       	out	0x1b, r24	; 27
 280:	fc cf       	rjmp	.-8      	; 0x27a <main+0x1c>

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
