
PS2_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000690  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000690  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800192  00800192  000007b6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000165  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a45  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023a  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000090a  00000000  00000000  000015ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024a  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000271  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0000245f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e9       	ldi	r30, 0x90	; 144
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a2 39       	cpi	r26, 0x92	; 146
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a2 e9       	ldi	r26, 0x92	; 146
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 3e       	cpi	r26, 0xE0	; 224
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 b9 02 	call	0x572	; 0x572 <main>
  a6:	0c 94 46 03 	jmp	0x68c	; 0x68c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ps2IntInit>:
// INT0 Mode: Falling Edge
// INT1: Off
// INT2: Off
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-15: Off
GICR|=0x40;
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8b bf       	out	0x3b, r24	; 59
MCUCR=0x02;
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	85 bf       	out	0x35, r24	; 53
EMCUCR=0x00;
  b8:	16 be       	out	0x36, r1	; 54
GIFR=0x40;
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	8a bf       	out	0x3a, r24	; 58
}
  be:	08 95       	ret

000000c0 <__vector_1>:
*	ISR_BLOCK为GCC interrupt.h库的中断参数
*
*-------------------------------------------------------------------------------------------------------
*/
ISR(PS2_INT_VECTOR,ISR_BLOCK)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
   ps2_status++;	/*状态寄存器*/
  d0:	80 91 de 01 	lds	r24, 0x01DE
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 de 01 	sts	0x01DE, r24
	if(ps2_status==1)
  da:	80 91 de 01 	lds	r24, 0x01DE
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	29 f4       	brne	.+10     	; 0xec <__vector_1+0x2c>
   { 
        if(GET_PS2_DA()) 
  e2:	83 9b       	sbis	0x10, 3	; 16
  e4:	54 c0       	rjmp	.+168    	; 0x18e <__vector_1+0xce>
            ps2_status=0;		/*判断起始位是否为0，不为0则清零计数器*/
  e6:	10 92 de 01 	sts	0x01DE, r1
  ea:	51 c0       	rjmp	.+162    	; 0x18e <__vector_1+0xce>
   }
   else if(ps2_status<10 && ps2_status>0)
  ec:	80 91 de 01 	lds	r24, 0x01DE
  f0:	8a 30       	cpi	r24, 0x0A	; 10
  f2:	b8 f4       	brcc	.+46     	; 0x122 <__vector_1+0x62>
  f4:	80 91 de 01 	lds	r24, 0x01DE
  f8:	88 23       	and	r24, r24
  fa:	99 f0       	breq	.+38     	; 0x122 <__vector_1+0x62>
   {
      ps2_data=ps2_data>>1;
  fc:	80 91 dc 01 	lds	r24, 0x01DC
 100:	86 95       	lsr	r24
 102:	80 93 dc 01 	sts	0x01DC, r24
			if(GET_PS2_DA()) {ps2_data |= 0x80;ps2_parity++;}	/*接受8bit数据位*/
 106:	83 9b       	sbis	0x10, 3	; 16
 108:	06 c0       	rjmp	.+12     	; 0x116 <__vector_1+0x56>
 10a:	80 91 dc 01 	lds	r24, 0x01DC
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	80 93 dc 01 	sts	0x01DC, r24
 114:	0c c0       	rjmp	.+24     	; 0x12e <__vector_1+0x6e>
			else ps2_data &= 0x7F;
 116:	80 91 dc 01 	lds	r24, 0x01DC
 11a:	8f 77       	andi	r24, 0x7F	; 127
 11c:	80 93 dc 01 	sts	0x01DC, r24
 120:	36 c0       	rjmp	.+108    	; 0x18e <__vector_1+0xce>
   }
   else if(ps2_status==10) 
 122:	80 91 de 01 	lds	r24, 0x01DE
 126:	8a 30       	cpi	r24, 0x0A	; 10
 128:	41 f4       	brne	.+16     	; 0x13a <__vector_1+0x7a>
   {
        if(GET_PS2_DA()) 	
 12a:	83 9b       	sbis	0x10, 3	; 16
 12c:	30 c0       	rjmp	.+96     	; 0x18e <__vector_1+0xce>
            ps2_parity++;	/*接收奇偶校验位*/
 12e:	80 91 dd 01 	lds	r24, 0x01DD
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 dd 01 	sts	0x01DD, r24
 138:	2a c0       	rjmp	.+84     	; 0x18e <__vector_1+0xce>
   }
   else if((ps2_status==11))
 13a:	80 91 de 01 	lds	r24, 0x01DE
 13e:	8b 30       	cpi	r24, 0x0B	; 11
 140:	11 f5       	brne	.+68     	; 0x186 <__vector_1+0xc6>
   {
        if((ps2_parity & 0x01))	/*奇偶校验*/
 142:	80 91 dd 01 	lds	r24, 0x01DD
 146:	80 ff       	sbrs	r24, 0
 148:	22 c0       	rjmp	.+68     	; 0x18e <__vector_1+0xce>
        {
        ps2_buffer[ps2_wr_index]=ps2_data;	/*刷新PS2数据缓冲器*/
 14a:	e0 91 92 01 	lds	r30, 0x0192
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 91 dc 01 	lds	r24, 0x01DC
 154:	ed 56       	subi	r30, 0x6D	; 109
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	80 83       	st	Z, r24
        if (++ps2_wr_index == PS2_BUFFER_SIZE) ps2_wr_index=0;	
 15a:	80 91 92 01 	lds	r24, 0x0192
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 92 01 	sts	0x0192, r24
 164:	80 91 92 01 	lds	r24, 0x0192
 168:	88 30       	cpi	r24, 0x08	; 8
 16a:	11 f4       	brne	.+4      	; 0x170 <__vector_1+0xb0>
 16c:	10 92 92 01 	sts	0x0192, r1
        if (++ps2_counter == PS2_BUFFER_SIZE) ps2_counter=0;	
 170:	80 91 9b 01 	lds	r24, 0x019B
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 9b 01 	sts	0x019B, r24
 17a:	80 91 9b 01 	lds	r24, 0x019B
 17e:	88 30       	cpi	r24, 0x08	; 8
 180:	11 f4       	brne	.+4      	; 0x186 <__vector_1+0xc6>
 182:	10 92 9b 01 	sts	0x019B, r1
        ps2_parity=0;
        }
   }
   else
   {
        ps2_status=0;	/*接收完数据后清空寄存器*/
 186:	10 92 de 01 	sts	0x01DE, r1
        ps2_parity=0;
 18a:	10 92 dd 01 	sts	0x01DD, r1
   } 
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <ps2GetCode>:
*-------------------------------------------------------------------------------------------------------
*/
uint8_t ps2GetCode(void)
{
uint8_t data;
while(!ps2_counter);
 19e:	80 91 9b 01 	lds	r24, 0x019B
 1a2:	88 23       	and	r24, r24
 1a4:	e1 f3       	breq	.-8      	; 0x19e <ps2GetCode>
data=ps2_buffer[ps2_rd_index];	/*从缓冲器读取数据*/
 1a6:	e0 91 df 01 	lds	r30, 0x01DF
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ed 56       	subi	r30, 0x6D	; 109
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	e0 81       	ld	r30, Z
if (++ps2_rd_index == PS2_BUFFER_SIZE) ps2_rd_index=0;	
 1b2:	80 91 df 01 	lds	r24, 0x01DF
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	80 93 df 01 	sts	0x01DF, r24
 1bc:	80 91 df 01 	lds	r24, 0x01DF
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <ps2GetCode+0x2a>
 1c4:	10 92 df 01 	sts	0x01DF, r1
cli();
 1c8:	f8 94       	cli
--ps2_counter;
 1ca:	80 91 9b 01 	lds	r24, 0x019B
 1ce:	81 50       	subi	r24, 0x01	; 1
 1d0:	80 93 9b 01 	sts	0x019B, r24
sei();
 1d4:	78 94       	sei
return data;
}
 1d6:	8e 2f       	mov	r24, r30
 1d8:	08 95       	ret

000001da <ps2Init>:

void ps2Init(void)
{
ps2_status=0;
 1da:	10 92 de 01 	sts	0x01DE, r1
ps2_data=0;
 1de:	10 92 dc 01 	sts	0x01DC, r1
ps2_parity=0;
 1e2:	10 92 dd 01 	sts	0x01DD, r1

ps2_wr_index=0;
 1e6:	10 92 92 01 	sts	0x0192, r1
ps2_rd_index=0;
 1ea:	10 92 df 01 	sts	0x01DF, r1
ps2_counter=0; 
 1ee:	10 92 9b 01 	sts	0x019B, r1

IN_PS2_CL();
 1f2:	8a 98       	cbi	0x11, 2	; 17
SET_PS2_CL();
 1f4:	92 9a       	sbi	0x12, 2	; 18
IN_PS2_DA();
 1f6:	8b 98       	cbi	0x11, 3	; 17
SET_PS2_DA();
 1f8:	93 9a       	sbi	0x12, 3	; 18
}
 1fa:	08 95       	ret

000001fc <ps2GetChar>:
*-------------------------------------------------------------------------------------------------------
*/
uint8_t ps2GetCode(void)
{
uint8_t data;
while(!ps2_counter);
 1fc:	80 91 9b 01 	lds	r24, 0x019B
 200:	88 23       	and	r24, r24
 202:	e1 f3       	breq	.-8      	; 0x1fc <ps2GetChar>
data=ps2_buffer[ps2_rd_index];	/*从缓冲器读取数据*/
 204:	e0 91 df 01 	lds	r30, 0x01DF
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ed 56       	subi	r30, 0x6D	; 109
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	90 81       	ld	r25, Z
if (++ps2_rd_index == PS2_BUFFER_SIZE) ps2_rd_index=0;	
 210:	80 91 df 01 	lds	r24, 0x01DF
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 df 01 	sts	0x01DF, r24
 21a:	80 91 df 01 	lds	r24, 0x01DF
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	11 f4       	brne	.+4      	; 0x226 <ps2GetChar+0x2a>
 222:	10 92 df 01 	sts	0x01DF, r1
cli();
 226:	f8 94       	cli
--ps2_counter;
 228:	80 91 9b 01 	lds	r24, 0x019B
 22c:	81 50       	subi	r24, 0x01	; 1
 22e:	80 93 9b 01 	sts	0x019B, r24
sei();
 232:	78 94       	sei
 234:	ec e1       	ldi	r30, 0x1C	; 28
 236:	f1 e0       	ldi	r31, 0x01	; 1
 238:	a0 e0       	ldi	r26, 0x00	; 0
 23a:	b0 e0       	ldi	r27, 0x00	; 0
	ps2char = ps2GetCode();
	while(1)
	{
		if(ps2num > ((sizeof(keyboardToAscii)) >> 1)) 
			return(0);
		else if(keyboardToAscii[ps2num][0] == ps2char) 
 23c:	80 81       	ld	r24, Z
 23e:	89 17       	cp	r24, r25
 240:	39 f4       	brne	.+14     	; 0x250 <ps2GetChar+0x54>
			return(keyboardToAscii[ps2num][1]);
 242:	aa 0f       	add	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a4 5e       	subi	r26, 0xE4	; 228
 248:	be 4f       	sbci	r27, 0xFE	; 254
 24a:	11 96       	adiw	r26, 0x01	; 1
 24c:	8c 91       	ld	r24, X
 24e:	08 95       	ret
 250:	11 96       	adiw	r26, 0x01	; 1
 252:	32 96       	adiw	r30, 0x02	; 2
	uint8_t ps2num = 0x00;

	ps2char = ps2GetCode();
	while(1)
	{
		if(ps2num > ((sizeof(keyboardToAscii)) >> 1)) 
 254:	ac 33       	cpi	r26, 0x3C	; 60
 256:	b1 05       	cpc	r27, r1
 258:	89 f7       	brne	.-30     	; 0x23c <ps2GetChar+0x40>
 25a:	80 e0       	ldi	r24, 0x00	; 0
			return(0);
		else if(keyboardToAscii[ps2num][0] == ps2char) 
			return(keyboardToAscii[ps2num][1]);
		ps2num++;
	}
}
 25c:	08 95       	ret

0000025e <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 25e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 260:	77 9b       	sbis	0x0e, 7	; 14
 262:	fe cf       	rjmp	.-4      	; 0x260 <spiSendChar+0x2>
}
 264:	08 95       	ret

00000266 <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 266:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 268:	88 ef       	ldi	r24, 0xF8	; 248
 26a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 26c:	77 9b       	sbis	0x0e, 7	; 14
 26e:	fe cf       	rjmp	.-4      	; 0x26c <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 270:	89 2f       	mov	r24, r25
 272:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 274:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 276:	77 9b       	sbis	0x0e, 7	; 14
 278:	fe cf       	rjmp	.-4      	; 0x276 <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 27a:	92 95       	swap	r25
 27c:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 27e:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 280:	77 9b       	sbis	0x0e, 7	; 14
 282:	fe cf       	rjmp	.-4      	; 0x280 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 284:	88 eb       	ldi	r24, 0xB8	; 184
 286:	8a 95       	dec	r24
 288:	f1 f7       	brne	.-4      	; 0x286 <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 28a:	08 95       	ret

0000028c <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 28c:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 28e:	8a ef       	ldi	r24, 0xFA	; 250
 290:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 292:	77 9b       	sbis	0x0e, 7	; 14
 294:	fe cf       	rjmp	.-4      	; 0x292 <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 296:	89 2f       	mov	r24, r25
 298:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 29a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 29c:	77 9b       	sbis	0x0e, 7	; 14
 29e:	fe cf       	rjmp	.-4      	; 0x29c <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 2a0:	92 95       	swap	r25
 2a2:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2a4:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 2a6:	77 9b       	sbis	0x0e, 7	; 14
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <sendDataST7920+0x1a>
 2aa:	88 eb       	ldi	r24, 0xB8	; 184
 2ac:	8a 95       	dec	r24
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 2b0:	08 95       	ret

000002b2 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 2b2:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2b4:	88 ef       	ldi	r24, 0xF8	; 248
 2b6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2b8:	77 9b       	sbis	0x0e, 7	; 14
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2bc:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 2be:	77 9b       	sbis	0x0e, 7	; 14
 2c0:	fe cf       	rjmp	.-4      	; 0x2be <refreshLCD+0xc>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2c2:	80 e2       	ldi	r24, 0x20	; 32
 2c4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2c6:	77 9b       	sbis	0x0e, 7	; 14
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <refreshLCD+0x14>
 2ca:	88 eb       	ldi	r24, 0xB8	; 184
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <refreshLCD+0x1a>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2d4:	6a ef       	ldi	r22, 0xFA	; 250
 2d6:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 2d8:	fa 01       	movw	r30, r20
 2da:	e2 0f       	add	r30, r18
 2dc:	f3 1f       	adc	r31, r19
 2de:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2e0:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));
 2e2:	77 9b       	sbis	0x0e, 7	; 14
 2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <refreshLCD+0x30>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 2e6:	8e 2f       	mov	r24, r30
 2e8:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2ea:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2ec:	77 9b       	sbis	0x0e, 7	; 14
 2ee:	fe cf       	rjmp	.-4      	; 0x2ec <refreshLCD+0x3a>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 2f0:	e2 95       	swap	r30
 2f2:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2f4:	ef b9       	out	0x0f, r30	; 15
	while (!(SPSR & (1<<SPIF)));
 2f6:	77 9b       	sbis	0x0e, 7	; 14
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <refreshLCD+0x44>
 2fa:	89 2f       	mov	r24, r25
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <refreshLCD+0x4a>
 300:	2f 5f       	subi	r18, 0xFF	; 255
 302:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 304:	20 31       	cpi	r18, 0x10	; 16
 306:	31 05       	cpc	r19, r1
 308:	39 f7       	brne	.-50     	; 0x2d8 <refreshLCD+0x26>
 30a:	da 01       	movw	r26, r20
 30c:	fa 01       	movw	r30, r20
 30e:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 310:	3a ef       	ldi	r19, 0xFA	; 250
 312:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 314:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 316:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 318:	77 9b       	sbis	0x0e, 7	; 14
 31a:	fe cf       	rjmp	.-4      	; 0x318 <refreshLCD+0x66>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 31c:	82 2f       	mov	r24, r18
 31e:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 320:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 322:	77 9b       	sbis	0x0e, 7	; 14
 324:	fe cf       	rjmp	.-4      	; 0x322 <refreshLCD+0x70>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 326:	22 95       	swap	r18
 328:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 32a:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 32c:	77 9b       	sbis	0x0e, 7	; 14
 32e:	fe cf       	rjmp	.-4      	; 0x32c <refreshLCD+0x7a>
 330:	89 2f       	mov	r24, r25
 332:	8a 95       	dec	r24
 334:	f1 f7       	brne	.-4      	; 0x332 <refreshLCD+0x80>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 336:	6f 5f       	subi	r22, 0xFF	; 255
 338:	31 96       	adiw	r30, 0x01	; 1
 33a:	60 33       	cpi	r22, 0x30	; 48
 33c:	59 f7       	brne	.-42     	; 0x314 <refreshLCD+0x62>
 33e:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 340:	7a ef       	ldi	r23, 0xFA	; 250
 342:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 344:	50 96       	adiw	r26, 0x10	; 16
 346:	2c 91       	ld	r18, X
 348:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 34a:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));
 34c:	77 9b       	sbis	0x0e, 7	; 14
 34e:	fe cf       	rjmp	.-4      	; 0x34c <refreshLCD+0x9a>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 350:	82 2f       	mov	r24, r18
 352:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 354:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 356:	77 9b       	sbis	0x0e, 7	; 14
 358:	fe cf       	rjmp	.-4      	; 0x356 <refreshLCD+0xa4>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 35a:	22 95       	swap	r18
 35c:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 35e:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 360:	77 9b       	sbis	0x0e, 7	; 14
 362:	fe cf       	rjmp	.-4      	; 0x360 <refreshLCD+0xae>
 364:	89 2f       	mov	r24, r25
 366:	8a 95       	dec	r24
 368:	f1 f7       	brne	.-4      	; 0x366 <refreshLCD+0xb4>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 36a:	3f 5f       	subi	r19, 0xFF	; 255
 36c:	11 96       	adiw	r26, 0x01	; 1
 36e:	30 32       	cpi	r19, 0x20	; 32
 370:	49 f7       	brne	.-46     	; 0x344 <refreshLCD+0x92>
 372:	fa 01       	movw	r30, r20
 374:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 376:	3a ef       	ldi	r19, 0xFA	; 250
 378:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 37a:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 37c:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 37e:	77 9b       	sbis	0x0e, 7	; 14
 380:	fe cf       	rjmp	.-4      	; 0x37e <refreshLCD+0xcc>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 382:	89 2f       	mov	r24, r25
 384:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 386:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 388:	77 9b       	sbis	0x0e, 7	; 14
 38a:	fe cf       	rjmp	.-4      	; 0x388 <refreshLCD+0xd6>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 38c:	92 95       	swap	r25
 38e:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 390:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 392:	77 9b       	sbis	0x0e, 7	; 14
 394:	fe cf       	rjmp	.-4      	; 0x392 <refreshLCD+0xe0>
 396:	82 2f       	mov	r24, r18
 398:	8a 95       	dec	r24
 39a:	f1 f7       	brne	.-4      	; 0x398 <refreshLCD+0xe6>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
 39c:	6f 5f       	subi	r22, 0xFF	; 255
 39e:	31 96       	adiw	r30, 0x01	; 1
 3a0:	6f 33       	cpi	r22, 0x3F	; 63
 3a2:	59 f7       	brne	.-42     	; 0x37a <refreshLCD+0xc8>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 3a4:	08 95       	ret

000003a6 <decToAscii>:
*	width是转换宽度
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	fb 01       	movw	r30, r22
 3ac:	ec 01       	movw	r28, r24
			case 1:
			{
				*(str+num) = (dec+'0');
				break;
			}
			default: *(str+num) = '0';
 3ae:	20 e3       	ldi	r18, 0x30	; 48
 3b0:	43 c0       	rjmp	.+134    	; 0x438 <decToAscii+0x92>
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
	{
		switch(width)
 3b2:	43 30       	cpi	r20, 0x03	; 3
 3b4:	21 f1       	breq	.+72     	; 0x3fe <decToAscii+0x58>
 3b6:	44 30       	cpi	r20, 0x04	; 4
 3b8:	28 f4       	brcc	.+10     	; 0x3c4 <decToAscii+0x1e>
 3ba:	41 30       	cpi	r20, 0x01	; 1
 3bc:	b1 f1       	breq	.+108    	; 0x42a <decToAscii+0x84>
 3be:	42 30       	cpi	r20, 0x02	; 2
 3c0:	c1 f5       	brne	.+112    	; 0x432 <decToAscii+0x8c>
 3c2:	28 c0       	rjmp	.+80     	; 0x414 <decToAscii+0x6e>
 3c4:	44 30       	cpi	r20, 0x04	; 4
 3c6:	69 f0       	breq	.+26     	; 0x3e2 <decToAscii+0x3c>
 3c8:	45 30       	cpi	r20, 0x05	; 5
 3ca:	99 f5       	brne	.+102    	; 0x432 <decToAscii+0x8c>
		{
			case 5:
			{
				*(str+num) = (dec/10000+'0');
 3cc:	cf 01       	movw	r24, r30
 3ce:	60 e1       	ldi	r22, 0x10	; 16
 3d0:	77 e2       	ldi	r23, 0x27	; 39
 3d2:	0e 94 32 03 	call	0x664	; 0x664 <__udivmodhi4>
 3d6:	60 5d       	subi	r22, 0xD0	; 208
 3d8:	68 83       	st	Y, r22
				dec%=10000;
 3da:	cf 01       	movw	r24, r30
 3dc:	60 e1       	ldi	r22, 0x10	; 16
 3de:	77 e2       	ldi	r23, 0x27	; 39
 3e0:	0a c0       	rjmp	.+20     	; 0x3f6 <decToAscii+0x50>
				break;
			}			
			case 4:
			{
				*(str+num) = (dec/1000+'0');
 3e2:	cf 01       	movw	r24, r30
 3e4:	68 ee       	ldi	r22, 0xE8	; 232
 3e6:	73 e0       	ldi	r23, 0x03	; 3
 3e8:	0e 94 32 03 	call	0x664	; 0x664 <__udivmodhi4>
 3ec:	60 5d       	subi	r22, 0xD0	; 208
 3ee:	68 83       	st	Y, r22
				dec%=1000;
 3f0:	cf 01       	movw	r24, r30
 3f2:	68 ee       	ldi	r22, 0xE8	; 232
 3f4:	73 e0       	ldi	r23, 0x03	; 3
 3f6:	0e 94 32 03 	call	0x664	; 0x664 <__udivmodhi4>
 3fa:	fc 01       	movw	r30, r24
 3fc:	1b c0       	rjmp	.+54     	; 0x434 <decToAscii+0x8e>
				break;
			}
			case 3:
			{
				*(str+num) = (dec/100+'0');
 3fe:	cf 01       	movw	r24, r30
 400:	64 e6       	ldi	r22, 0x64	; 100
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	0e 94 32 03 	call	0x664	; 0x664 <__udivmodhi4>
 408:	60 5d       	subi	r22, 0xD0	; 208
 40a:	68 83       	st	Y, r22
				dec%=100;
 40c:	cf 01       	movw	r24, r30
 40e:	64 e6       	ldi	r22, 0x64	; 100
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	f1 cf       	rjmp	.-30     	; 0x3f6 <decToAscii+0x50>
				break;
			}
			case 2:
			{
				*(str+num) = (dec/10+'0');
 414:	cf 01       	movw	r24, r30
 416:	6a e0       	ldi	r22, 0x0A	; 10
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	0e 94 32 03 	call	0x664	; 0x664 <__udivmodhi4>
 41e:	60 5d       	subi	r22, 0xD0	; 208
 420:	68 83       	st	Y, r22
				dec%=10;
 422:	cf 01       	movw	r24, r30
 424:	6a e0       	ldi	r22, 0x0A	; 10
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	e6 cf       	rjmp	.-52     	; 0x3f6 <decToAscii+0x50>
				break;
			}
			case 1:
			{
				*(str+num) = (dec+'0');
 42a:	e0 5d       	subi	r30, 0xD0	; 208
 42c:	e8 83       	st	Y, r30
 42e:	e0 53       	subi	r30, 0x30	; 48
 430:	01 c0       	rjmp	.+2      	; 0x434 <decToAscii+0x8e>
				break;
			}
			default: *(str+num) = '0';
 432:	28 83       	st	Y, r18
		}
		width--;
 434:	41 50       	subi	r20, 0x01	; 1
 436:	21 96       	adiw	r28, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
 438:	44 23       	and	r20, r20
 43a:	09 f0       	breq	.+2      	; 0x43e <decToAscii+0x98>
 43c:	ba cf       	rjmp	.-140    	; 0x3b2 <decToAscii+0xc>
			default: *(str+num) = '0';
		}
		width--;
		num++;
	}
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <st7920LcdInit>:

/*Hardware Environment：DVK501 && M162+ EX*/
#elif defined(_DVK501_M162_EX_)
void st7920LcdInit(void)
{
DDRB|=0xF0;
 444:	87 b3       	in	r24, 0x17	; 23
 446:	80 6f       	ori	r24, 0xF0	; 240
 448:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 44a:	80 e5       	ldi	r24, 0x50	; 80
 44c:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	8e b9       	out	0x0e, r24	; 14
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 452:	88 ef       	ldi	r24, 0xF8	; 248
 454:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 456:	77 9b       	sbis	0x0e, 7	; 14
 458:	fe cf       	rjmp	.-4      	; 0x456 <st7920LcdInit+0x12>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 45a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 45c:	77 9b       	sbis	0x0e, 7	; 14
 45e:	fe cf       	rjmp	.-4      	; 0x45c <st7920LcdInit+0x18>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 460:	80 ec       	ldi	r24, 0xC0	; 192
 462:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 464:	77 9b       	sbis	0x0e, 7	; 14
 466:	fe cf       	rjmp	.-4      	; 0x464 <st7920LcdInit+0x20>
 468:	88 eb       	ldi	r24, 0xB8	; 184
 46a:	8a 95       	dec	r24
 46c:	f1 f7       	brne	.-4      	; 0x46a <st7920LcdInit+0x26>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 46e:	88 ef       	ldi	r24, 0xF8	; 248
 470:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 472:	77 9b       	sbis	0x0e, 7	; 14
 474:	fe cf       	rjmp	.-4      	; 0x472 <st7920LcdInit+0x2e>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 476:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 478:	77 9b       	sbis	0x0e, 7	; 14
 47a:	fe cf       	rjmp	.-4      	; 0x478 <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 47c:	80 e1       	ldi	r24, 0x10	; 16
 47e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 480:	77 9b       	sbis	0x0e, 7	; 14
 482:	fe cf       	rjmp	.-4      	; 0x480 <st7920LcdInit+0x3c>
 484:	88 eb       	ldi	r24, 0xB8	; 184
 486:	8a 95       	dec	r24
 488:	f1 f7       	brne	.-4      	; 0x486 <st7920LcdInit+0x42>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 48a:	86 e6       	ldi	r24, 0x66	; 102
 48c:	9e e0       	ldi	r25, 0x0E	; 14
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <st7920LcdInit+0x4a>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 492:	8c e9       	ldi	r24, 0x9C	; 156
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	60 e2       	ldi	r22, 0x20	; 32
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	40 e4       	ldi	r20, 0x40	; 64
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	0e 94 2b 03 	call	0x656	; 0x656 <memset>
}
 4a2:	08 95       	ret

000004a4 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 4a4:	af 92       	push	r10
 4a6:	bf 92       	push	r11
 4a8:	cf 92       	push	r12
 4aa:	df 92       	push	r13
 4ac:	ef 92       	push	r14
 4ae:	ff 92       	push	r15
 4b0:	0f 93       	push	r16
 4b2:	df 93       	push	r29
 4b4:	cf 93       	push	r28
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
 4ba:	0d 85       	ldd	r16, Y+13	; 0x0d
 4bc:	ae 84       	ldd	r10, Y+14	; 0x0e
 4be:	bf 84       	ldd	r11, Y+15	; 0x0f
 4c0:	e8 88       	ldd	r14, Y+16	; 0x10
 4c2:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 4c4:	02 95       	swap	r16
 4c6:	00 7f       	andi	r16, 0xF0	; 240
 4c8:	8c 85       	ldd	r24, Y+12	; 0x0c
 4ca:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 4cc:	de 01       	movw	r26, r28
 4ce:	52 96       	adiw	r26, 0x12	; 18
 4d0:	41 c0       	rjmp	.+130    	; 0x554 <__stack+0x55>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 4d2:	01 34       	cpi	r16, 0x41	; 65
 4d4:	08 f0       	brcs	.+2      	; 0x4d8 <showLine+0x34>
 4d6:	43 c0       	rjmp	.+134    	; 0x55e <__stack+0x5f>

		if(*str == '\\')
 4d8:	8c 35       	cpi	r24, 0x5C	; 92
 4da:	51 f4       	brne	.+20     	; 0x4f0 <showLine+0x4c>
		{
			str++;
 4dc:	08 94       	sec
 4de:	e1 1c       	adc	r14, r1
 4e0:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 4e2:	95 01       	movw	r18, r10
 4e4:	20 0f       	add	r18, r16
 4e6:	31 1d       	adc	r19, r1
 4e8:	f7 01       	movw	r30, r14
 4ea:	80 81       	ld	r24, Z
 4ec:	f9 01       	movw	r30, r18
 4ee:	2d c0       	rjmp	.+90     	; 0x54a <__stack+0x4b>
		}
		else if(*str == '%')
 4f0:	85 32       	cpi	r24, 0x25	; 37
 4f2:	41 f5       	brne	.+80     	; 0x544 <__stack+0x45>
		{
			str++;
 4f4:	08 94       	sec
 4f6:	e1 1c       	adc	r14, r1
 4f8:	f1 1c       	adc	r15, r1
			if (*str=='d')
 4fa:	f7 01       	movw	r30, r14
 4fc:	80 81       	ld	r24, Z
 4fe:	84 36       	cpi	r24, 0x64	; 100
 500:	c1 f4       	brne	.+48     	; 0x532 <__stack+0x33>
			{
				str++;
 502:	08 94       	sec
 504:	e1 1c       	adc	r14, r1
 506:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 508:	92 e0       	ldi	r25, 0x02	; 2
 50a:	c9 2e       	mov	r12, r25
 50c:	d1 2c       	mov	r13, r1
 50e:	ca 0e       	add	r12, r26
 510:	db 1e       	adc	r13, r27
 512:	6d 91       	ld	r22, X+
 514:	7c 91       	ld	r23, X
 516:	f7 01       	movw	r30, r14
 518:	40 81       	ld	r20, Z
 51a:	40 53       	subi	r20, 0x30	; 48
 51c:	c5 01       	movw	r24, r10
 51e:	80 0f       	add	r24, r16
 520:	91 1d       	adc	r25, r1
 522:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <decToAscii>
				coordinate+=(*str-'0'-1);
 526:	01 53       	subi	r16, 0x31	; 49
 528:	f7 01       	movw	r30, r14
 52a:	80 81       	ld	r24, Z
 52c:	08 0f       	add	r16, r24
 52e:	d6 01       	movw	r26, r12
 530:	0d c0       	rjmp	.+26     	; 0x54c <__stack+0x4d>
			}
			else if(*str=='c')
 532:	83 36       	cpi	r24, 0x63	; 99
 534:	59 f4       	brne	.+22     	; 0x54c <__stack+0x4d>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 536:	f5 01       	movw	r30, r10
 538:	e0 0f       	add	r30, r16
 53a:	f1 1d       	adc	r31, r1
 53c:	8c 91       	ld	r24, X
 53e:	80 83       	st	Z, r24
 540:	12 96       	adiw	r26, 0x02	; 2
 542:	04 c0       	rjmp	.+8      	; 0x54c <__stack+0x4d>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 544:	f5 01       	movw	r30, r10
 546:	e0 0f       	add	r30, r16
 548:	f1 1d       	adc	r31, r1
 54a:	80 83       	st	Z, r24
		}
		str++;
 54c:	08 94       	sec
 54e:	e1 1c       	adc	r14, r1
 550:	f1 1c       	adc	r15, r1
		coordinate++;
 552:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 554:	f7 01       	movw	r30, r14
 556:	80 81       	ld	r24, Z
 558:	88 23       	and	r24, r24
 55a:	09 f0       	breq	.+2      	; 0x55e <__stack+0x5f>
 55c:	ba cf       	rjmp	.-140    	; 0x4d2 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 55e:	cf 91       	pop	r28
 560:	df 91       	pop	r29
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	bf 90       	pop	r11
 56e:	af 90       	pop	r10
 570:	08 95       	ret

00000572 <main>:
#include <ws_ps2port.h>
#include <ws_ps2_code.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
// INT0 Mode: Falling Edge
// INT1: Off
// INT2: Off
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-15: Off
GICR|=0x40;
 57e:	8b b7       	in	r24, 0x3b	; 59
 580:	80 64       	ori	r24, 0x40	; 64
 582:	8b bf       	out	0x3b, r24	; 59
MCUCR=0x02;
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	85 bf       	out	0x35, r24	; 53
EMCUCR=0x00;
 588:	16 be       	out	0x36, r1	; 54
GIFR=0x40;
 58a:	80 e4       	ldi	r24, 0x40	; 64
 58c:	8a bf       	out	0x3a, r24	; 58
ps2IntInit();
st7920LcdInit();
 58e:	0e 94 22 02 	call	0x444	; 0x444 <st7920LcdInit>

showLine(0,0,lcd_buffer,"键盘--LCD12864");
 592:	00 d0       	rcall	.+0      	; 0x594 <main+0x22>
 594:	00 d0       	rcall	.+0      	; 0x596 <main+0x24>
 596:	00 d0       	rcall	.+0      	; 0x598 <main+0x26>
 598:	ed b7       	in	r30, 0x3d	; 61
 59a:	fe b7       	in	r31, 0x3e	; 62
 59c:	31 96       	adiw	r30, 0x01	; 1
 59e:	ad b7       	in	r26, 0x3d	; 61
 5a0:	be b7       	in	r27, 0x3e	; 62
 5a2:	11 96       	adiw	r26, 0x01	; 1
 5a4:	1c 92       	st	X, r1
 5a6:	11 82       	std	Z+1, r1	; 0x01
 5a8:	0c e9       	ldi	r16, 0x9C	; 156
 5aa:	11 e0       	ldi	r17, 0x01	; 1
 5ac:	13 83       	std	Z+3, r17	; 0x03
 5ae:	02 83       	std	Z+2, r16	; 0x02
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	95 83       	std	Z+5, r25	; 0x05
 5b6:	84 83       	std	Z+4, r24	; 0x04
 5b8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <showLine>
showLine(0,1,lcd_buffer,"请按键盘:");
 5bc:	ed b7       	in	r30, 0x3d	; 61
 5be:	fe b7       	in	r31, 0x3e	; 62
 5c0:	31 96       	adiw	r30, 0x01	; 1
 5c2:	ad b7       	in	r26, 0x3d	; 61
 5c4:	be b7       	in	r27, 0x3e	; 62
 5c6:	11 96       	adiw	r26, 0x01	; 1
 5c8:	1c 92       	st	X, r1
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	81 83       	std	Z+1, r24	; 0x01
 5ce:	13 83       	std	Z+3, r17	; 0x03
 5d0:	02 83       	std	Z+2, r16	; 0x02
 5d2:	8f e0       	ldi	r24, 0x0F	; 15
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	95 83       	std	Z+5, r25	; 0x05
 5d8:	84 83       	std	Z+4, r24	; 0x04
 5da:	0e 94 52 02 	call	0x4a4	; 0x4a4 <showLine>
refreshLCD(lcd_buffer);
 5de:	2d b7       	in	r18, 0x3d	; 61
 5e0:	3e b7       	in	r19, 0x3e	; 62
 5e2:	2a 5f       	subi	r18, 0xFA	; 250
 5e4:	3f 4f       	sbci	r19, 0xFF	; 255
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	f8 94       	cli
 5ea:	3e bf       	out	0x3e, r19	; 62
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	2d bf       	out	0x3d, r18	; 61
 5f0:	c8 01       	movw	r24, r16
 5f2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <refreshLCD>
/*PS2 initialization*/
ps2Init();
 5f6:	0e 94 ed 00 	call	0x1da	; 0x1da <ps2Init>

sei();
 5fa:	78 94       	sei
while(1)
{
	showLine(10,1,lcd_buffer,"%c",ps2GetChar());
 5fc:	2a e0       	ldi	r18, 0x0A	; 10
 5fe:	e2 2e       	mov	r14, r18
 600:	ff 24       	eor	r15, r15
 602:	f3 94       	inc	r15
 604:	cc e9       	ldi	r28, 0x9C	; 156
 606:	d1 e0       	ldi	r29, 0x01	; 1
 608:	09 e1       	ldi	r16, 0x19	; 25
 60a:	11 e0       	ldi	r17, 0x01	; 1
 60c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ps2GetChar>
 610:	ad b7       	in	r26, 0x3d	; 61
 612:	be b7       	in	r27, 0x3e	; 62
 614:	18 97       	sbiw	r26, 0x08	; 8
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	f8 94       	cli
 61a:	be bf       	out	0x3e, r27	; 62
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	ad bf       	out	0x3d, r26	; 61
 620:	ed b7       	in	r30, 0x3d	; 61
 622:	fe b7       	in	r31, 0x3e	; 62
 624:	31 96       	adiw	r30, 0x01	; 1
 626:	11 96       	adiw	r26, 0x01	; 1
 628:	ec 92       	st	X, r14
 62a:	f1 82       	std	Z+1, r15	; 0x01
 62c:	d3 83       	std	Z+3, r29	; 0x03
 62e:	c2 83       	std	Z+2, r28	; 0x02
 630:	15 83       	std	Z+5, r17	; 0x05
 632:	04 83       	std	Z+4, r16	; 0x04
 634:	86 83       	std	Z+6, r24	; 0x06
 636:	17 82       	std	Z+7, r1	; 0x07
 638:	0e 94 52 02 	call	0x4a4	; 0x4a4 <showLine>
	refreshLCD(lcd_buffer);
 63c:	2d b7       	in	r18, 0x3d	; 61
 63e:	3e b7       	in	r19, 0x3e	; 62
 640:	28 5f       	subi	r18, 0xF8	; 248
 642:	3f 4f       	sbci	r19, 0xFF	; 255
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	f8 94       	cli
 648:	3e bf       	out	0x3e, r19	; 62
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	2d bf       	out	0x3d, r18	; 61
 64e:	ce 01       	movw	r24, r28
 650:	0e 94 59 01 	call	0x2b2	; 0x2b2 <refreshLCD>
 654:	db cf       	rjmp	.-74     	; 0x60c <main+0x9a>

00000656 <memset>:
 656:	dc 01       	movw	r26, r24
 658:	01 c0       	rjmp	.+2      	; 0x65c <memset+0x6>
 65a:	6d 93       	st	X+, r22
 65c:	41 50       	subi	r20, 0x01	; 1
 65e:	50 40       	sbci	r21, 0x00	; 0
 660:	e0 f7       	brcc	.-8      	; 0x65a <memset+0x4>
 662:	08 95       	ret

00000664 <__udivmodhi4>:
 664:	aa 1b       	sub	r26, r26
 666:	bb 1b       	sub	r27, r27
 668:	51 e1       	ldi	r21, 0x11	; 17
 66a:	07 c0       	rjmp	.+14     	; 0x67a <__udivmodhi4_ep>

0000066c <__udivmodhi4_loop>:
 66c:	aa 1f       	adc	r26, r26
 66e:	bb 1f       	adc	r27, r27
 670:	a6 17       	cp	r26, r22
 672:	b7 07       	cpc	r27, r23
 674:	10 f0       	brcs	.+4      	; 0x67a <__udivmodhi4_ep>
 676:	a6 1b       	sub	r26, r22
 678:	b7 0b       	sbc	r27, r23

0000067a <__udivmodhi4_ep>:
 67a:	88 1f       	adc	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	5a 95       	dec	r21
 680:	a9 f7       	brne	.-22     	; 0x66c <__udivmodhi4_loop>
 682:	80 95       	com	r24
 684:	90 95       	com	r25
 686:	bc 01       	movw	r22, r24
 688:	cd 01       	movw	r24, r26
 68a:	08 95       	ret

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
