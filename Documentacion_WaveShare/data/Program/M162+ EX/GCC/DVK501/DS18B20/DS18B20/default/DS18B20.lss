
DS18B20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000066  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000413  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000180  00000000  00000000  0000066b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000037a  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000130  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000013f  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000168  00000000  00000000  00000e47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  80:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <resetOnewire>:
#define _WS_ONEWIRE_H_
#include <util/delay.h>
//-----复位-----
void resetOnewire(void) 
{
	OUT_DQ();
  88:	ba 9a       	sbi	0x17, 2	; 23
    CLR_DQ();
  8a:	c2 98       	cbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	89 e9       	ldi	r24, 0x99	; 153
  8e:	93 e0       	ldi	r25, 0x03	; 3
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <resetOnewire+0x8>
    _delay_us(500);
    SET_DQ(); 
  94:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  96:	86 e5       	ldi	r24, 0x56	; 86
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <resetOnewire+0x10>
    _delay_us(35);
	IN_DQ();
  9c:	ba 98       	cbi	0x17, 2	; 23
	while(GET_DQ());
  9e:	b2 99       	sbic	0x16, 2	; 22
  a0:	fe cf       	rjmp	.-4      	; 0x9e <resetOnewire+0x16>
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <resetOnewire+0x1e>
	while(!(GET_DQ()))
	OUT_DQ();
  a4:	ba 9a       	sbi	0x17, 2	; 23
    _delay_us(500);
    SET_DQ(); 
    _delay_us(35);
	IN_DQ();
	while(GET_DQ());
	while(!(GET_DQ()))
  a6:	b2 9b       	sbis	0x16, 2	; 22
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <resetOnewire+0x1c>
	OUT_DQ();
}
  aa:	08 95       	ret

000000ac <rOnewire>:

//-----读数据-----
uint8_t rOnewire(void)
{
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	37 e0       	ldi	r19, 0x07	; 7
    uint8_t data=0,i=0;
    for(i=0;i<8;i++) 
    {
    	SET_DQ();
  b2:	43 e9       	ldi	r20, 0x93	; 147
  b4:	c2 9a       	sbi	0x18, 2	; 24
		OUT_DQ();
  b6:	ba 9a       	sbi	0x17, 2	; 23
        CLR_DQ();
  b8:	c2 98       	cbi	0x18, 2	; 24
        data=data>>1;
  ba:	86 95       	lsr	r24
  bc:	93 2f       	mov	r25, r19
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <rOnewire+0x12>
        _delay_us(3);
		IN_DQ();
  c2:	ba 98       	cbi	0x17, 2	; 23
		SET_DQ();
  c4:	c2 9a       	sbi	0x18, 2	; 24
  c6:	93 2f       	mov	r25, r19
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <rOnewire+0x1c>
		_delay_us(3);
        if(GET_DQ()) data|=0x80;
  cc:	b2 99       	sbic	0x16, 2	; 22
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	94 2f       	mov	r25, r20
  d2:	9a 95       	dec	r25
  d4:	f1 f7       	brne	.-4      	; 0xd2 <rOnewire+0x26>

//-----读数据-----
uint8_t rOnewire(void)
{
    uint8_t data=0,i=0;
    for(i=0;i<8;i++) 
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	28 30       	cpi	r18, 0x08	; 8
  da:	61 f7       	brne	.-40     	; 0xb4 <rOnewire+0x8>
		_delay_us(3);
        if(GET_DQ()) data|=0x80;
        _delay_us(60);
	} 
	return(data); 
} 
  dc:	08 95       	ret

000000de <wOnewire>:
//-----写数据-----
void wOnewire(uint8_t data) 
{ 
    uint8_t i=0; 
	OUT_DQ();
  de:	ba 9a       	sbi	0x17, 2	; 23
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	4f e9       	ldi	r20, 0x9F	; 159
    for(i=0;i<8;i++) 
    { 
        if(data&0x01)
  e4:	3c e0       	ldi	r19, 0x0C	; 12
  e6:	80 ff       	sbrs	r24, 0
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <wOnewire+0x1a>
		{ 
            CLR_DQ(); 
  ea:	c2 98       	cbi	0x18, 2	; 24
  ec:	93 2f       	mov	r25, r19
  ee:	9a 95       	dec	r25
  f0:	f1 f7       	brne	.-4      	; 0xee <wOnewire+0x10>
            _delay_us(5);
            SET_DQ(); 
  f2:	c2 9a       	sbi	0x18, 2	; 24
  f4:	94 2f       	mov	r25, r20
  f6:	06 c0       	rjmp	.+12     	; 0x104 <wOnewire+0x26>
            _delay_us(65);
		}	 
   	 	else 
   	 	{ 
       		CLR_DQ(); 
  f8:	c2 98       	cbi	0x18, 2	; 24
  fa:	94 2f       	mov	r25, r20
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <wOnewire+0x1e>
        	_delay_us(65);
        	SET_DQ(); 
 100:	c2 9a       	sbi	0x18, 2	; 24
 102:	93 2f       	mov	r25, r19
 104:	9a 95       	dec	r25
 106:	f1 f7       	brne	.-4      	; 0x104 <wOnewire+0x26>
//-----写数据-----
void wOnewire(uint8_t data) 
{ 
    uint8_t i=0; 
	OUT_DQ();
    for(i=0;i<8;i++) 
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	28 30       	cpi	r18, 0x08	; 8
 10c:	11 f0       	breq	.+4      	; 0x112 <wOnewire+0x34>
       		CLR_DQ(); 
        	_delay_us(65);
        	SET_DQ(); 
        	_delay_us(5);
    	} 
    	data=data>>1; 
 10e:	86 95       	lsr	r24
 110:	ea cf       	rjmp	.-44     	; 0xe6 <wOnewire+0x8>
 112:	08 95       	ret

00000114 <convertDs18b20>:
#include <ws_onewire_port.h>

//-----DS18B20转换温度-----
void convertDs18b20(void) 
{ 
    resetOnewire(); 
 114:	0e 94 44 00 	call	0x88	; 0x88 <resetOnewire>
    wOnewire(0xcc); 
 118:	8c ec       	ldi	r24, 0xCC	; 204
 11a:	0e 94 6f 00 	call	0xde	; 0xde <wOnewire>
    wOnewire(0x44); 
 11e:	84 e4       	ldi	r24, 0x44	; 68
 120:	0e 94 6f 00 	call	0xde	; 0xde <wOnewire>
} 
 124:	08 95       	ret

00000126 <readTemp>:
//------------DS18BB0读温度----------
uint8_t readTemp(void) 
{ 
 126:	1f 93       	push	r17
	uint8_t temp1,temp2;
	convertDs18b20();
 128:	0e 94 8a 00 	call	0x114	; 0x114 <convertDs18b20>
    resetOnewire(); 
 12c:	0e 94 44 00 	call	0x88	; 0x88 <resetOnewire>
    wOnewire(0xcc); 
 130:	8c ec       	ldi	r24, 0xCC	; 204
 132:	0e 94 6f 00 	call	0xde	; 0xde <wOnewire>
    wOnewire(0xbe); 	
 136:	8e eb       	ldi	r24, 0xBE	; 190
 138:	0e 94 6f 00 	call	0xde	; 0xde <wOnewire>
    temp1=rOnewire(); 
 13c:	0e 94 56 00 	call	0xac	; 0xac <rOnewire>
 140:	18 2f       	mov	r17, r24
    temp2=rOnewire(); 
 142:	0e 94 56 00 	call	0xac	; 0xac <rOnewire>
	temp2=temp2<<4;
 146:	82 95       	swap	r24
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	12 95       	swap	r17
 14c:	1f 70       	andi	r17, 0x0F	; 15
 14e:	18 2b       	or	r17, r24
	temp1=temp1>>4;
	temp2|=temp1;

	return (temp2&0x7F);
}
 150:	81 2f       	mov	r24, r17
 152:	8f 77       	andi	r24, 0x7F	; 127
 154:	1f 91       	pop	r17
 156:	08 95       	ret

00000158 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <ws_ds18b20.h>

int main(void)
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
	DDRA=0xFF;
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	8a bb       	out	0x1a, r24	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 160:	c8 eb       	ldi	r28, 0xB8	; 184
 162:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		PORTA=readTemp();
 164:	0e 94 93 00 	call	0x126	; 0x126 <readTemp>
 168:	8b bb       	out	0x1b, r24	; 27
 16a:	80 e1       	ldi	r24, 0x10	; 16
 16c:	97 e2       	ldi	r25, 0x27	; 39
 16e:	fe 01       	movw	r30, r28
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 176:	d9 f7       	brne	.-10     	; 0x16e <main+0x16>
 178:	f5 cf       	rjmp	.-22     	; 0x164 <main+0xc>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
