
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000054  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000295  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001a2  00000000  00000000  00000481  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002cc  00000000  00000000  00000623  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f6  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000094  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000ada  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  80:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <usartInit>:
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSR0A=0x00;
  88:	1b b8       	out	0x0b, r1	; 11
UCSR0B=0x18;
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	8a b9       	out	0x0a, r24	; 10
UCSR0C=0x86;
  8e:	86 e8       	ldi	r24, 0x86	; 134
  90:	80 bd       	out	0x20, r24	; 32
UBRR0H=0x00;
  92:	10 bc       	out	0x20, r1	; 32
UBRR0L=0x2F;
  94:	8f e2       	ldi	r24, 0x2F	; 47
  96:	89 b9       	out	0x09, r24	; 9
}
  98:	08 95       	ret

0000009a <putUsart0>:


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
    while(!(WS_UCSR0A & 0x20));
  9a:	5d 9b       	sbis	0x0b, 5	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <putUsart0>
    WS_UDR0 = c;
  9e:	8c b9       	out	0x0c, r24	; 12
}
  a0:	08 95       	ret

000000a2 <getUsart0>:
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  a2:	5f 9b       	sbis	0x0b, 7	; 11
  a4:	07 c0       	rjmp	.+14     	; 0xb4 <getUsart0+0x12>
    status = WS_UCSR0A;
  a6:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
  a8:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  aa:	8c 71       	andi	r24, 0x1C	; 28
  ac:	19 f4       	brne	.+6      	; 0xb4 <getUsart0+0x12>
    return res;
  ae:	29 2f       	mov	r18, r25
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <getUsart0+0x16>
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	3f ef       	ldi	r19, 0xFF	; 255
}
  b8:	c9 01       	movw	r24, r18
  ba:	08 95       	ret

000000bc <waitUsart0>:
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  bc:	5f 9b       	sbis	0x0b, 7	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <waitUsart0>
    status = WS_UCSR0A;
  c0:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
  c2:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  c4:	8c 71       	andi	r24, 0x1C	; 28
  c6:	d1 f7       	brne	.-12     	; 0xbc <waitUsart0>
uint8_t waitUsart0(void)
{
    uint16_t c;
    while((c=getUsart0())==0xFFFF);
    return (uint8_t)c;
}
  c8:	89 2f       	mov	r24, r25
  ca:	08 95       	ret

000000cc <main>:
#include <ws_usart_port.h>

int main(void)
{
	uint8_t tmp=0;
	DDRA=0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
  d0:	1b ba       	out	0x1b, r1	; 27
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSR0A=0x00;
  d2:	1b b8       	out	0x0b, r1	; 11
UCSR0B=0x18;
  d4:	88 e1       	ldi	r24, 0x18	; 24
  d6:	8a b9       	out	0x0a, r24	; 10
UCSR0C=0x86;
  d8:	86 e8       	ldi	r24, 0x86	; 134
  da:	80 bd       	out	0x20, r24	; 32
UBRR0H=0x00;
  dc:	10 bc       	out	0x20, r1	; 32
UBRR0L=0x2F;
  de:	8f e2       	ldi	r24, 0x2F	; 47
  e0:	89 b9       	out	0x09, r24	; 9
  e2:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	78 e4       	ldi	r23, 0x48	; 72


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
    while(!(WS_UCSR0A & 0x20));
  e8:	48 eb       	ldi	r20, 0xB8	; 184
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <main+0x20>
    WS_UDR0 = c;
  f0:	2c b9       	out	0x0c, r18	; 12
  f2:	cb 01       	movw	r24, r22
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x28>
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  f8:	5f 9b       	sbis	0x0b, 7	; 11
  fa:	06 c0       	rjmp	.+12     	; 0x108 <main+0x3c>
    status = WS_UCSR0A;
  fc:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
  fe:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 100:	8c 71       	andi	r24, 0x1C	; 28
 102:	11 f4       	brne	.+4      	; 0x108 <main+0x3c>
    return res;
 104:	89 2f       	mov	r24, r25
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x40>
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	9f ef       	ldi	r25, 0xFF	; 255
	usartInit();
	while(1)
	{
		putUsart0(tmp);
		_delay_ms(10);
		PORTA=(uint8_t)getUsart0();
 10c:	8b bb       	out	0x1b, r24	; 27
 10e:	88 e8       	ldi	r24, 0x88	; 136
 110:	93 e1       	ldi	r25, 0x13	; 19
 112:	fa 01       	movw	r30, r20
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11a:	d9 f7       	brne	.-10     	; 0x112 <main+0x46>
		tmp++;
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	e6 cf       	rjmp	.-52     	; 0xec <main+0x20>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
