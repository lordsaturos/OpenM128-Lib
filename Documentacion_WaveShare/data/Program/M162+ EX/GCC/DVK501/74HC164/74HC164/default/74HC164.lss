
74HC164.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000039  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000017f  00000000  00000000  00000183  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000114  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ed  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e1  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000050  00000000  00000000  00000725  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000775  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <hc164SetDat>:
#ifndef _WS_74HC164_H_
#define _WS_74HC164_H_
#include <stdint.h>

void hc164SetDat(uint8_t dat)
{
  88:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
	{
		HC164_CLR_CLK;
  8a:	c0 98       	cbi	0x18, 0	; 24
		if(dat&0x80)
  8c:	87 ff       	sbrs	r24, 7
  8e:	02 c0       	rjmp	.+4      	; 0x94 <hc164SetDat+0xc>
			HC164_SET_DATA;
  90:	c1 9a       	sbi	0x18, 1	; 24
  92:	01 c0       	rjmp	.+2      	; 0x96 <hc164SetDat+0xe>
		else
			HC164_CLR_DATA;
  94:	c1 98       	cbi	0x18, 1	; 24
		HC164_SET_CLK;
  96:	c0 9a       	sbi	0x18, 0	; 24
#include <stdint.h>

void hc164SetDat(uint8_t dat)
{
	uint8_t i;
	for(i=0;i<8;i++)
  98:	9f 5f       	subi	r25, 0xFF	; 255
  9a:	98 30       	cpi	r25, 0x08	; 8
  9c:	11 f0       	breq	.+4      	; 0xa2 <hc164SetDat+0x1a>
		if(dat&0x80)
			HC164_SET_DATA;
		else
			HC164_CLR_DATA;
		HC164_SET_CLK;
		dat = dat<<1;
  9e:	88 0f       	add	r24, r24
  a0:	f4 cf       	rjmp	.-24     	; 0x8a <hc164SetDat+0x2>
  a2:	08 95       	ret

000000a4 <hc164Init>:
	}
}

void hc164Init(void)
{
	HC164_OUT_DATA;
  a4:	b9 9a       	sbi	0x17, 1	; 23
	HC164_OUT_CLK;
  a6:	b8 9a       	sbi	0x17, 0	; 23
}
  a8:	08 95       	ret

000000aa <main>:
#include <avr/io.h>
#include <ws_74hc164_port.h>
#include <util/delay.h>

int main(void)
{
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
	}
}

void hc164Init(void)
{
	HC164_OUT_DATA;
  b0:	b9 9a       	sbi	0x17, 1	; 23
	HC164_OUT_CLK;
  b2:	b8 9a       	sbi	0x17, 0	; 23
  b4:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	c8 eb       	ldi	r28, 0xB8	; 184
  b8:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t tmp=0;
	hc164Init();
	while(1)
	{
		hc164SetDat(tmp);
  ba:	81 2f       	mov	r24, r17
  bc:	0e 94 44 00 	call	0x88	; 0x88 <hc164SetDat>
		tmp++;
  c0:	1f 5f       	subi	r17, 0xFF	; 255
  c2:	88 e8       	ldi	r24, 0x88	; 136
  c4:	93 e1       	ldi	r25, 0x13	; 19
  c6:	fe 01       	movw	r30, r28
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x1c>
  d0:	f4 cf       	rjmp	.-24     	; 0xba <main+0x10>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
