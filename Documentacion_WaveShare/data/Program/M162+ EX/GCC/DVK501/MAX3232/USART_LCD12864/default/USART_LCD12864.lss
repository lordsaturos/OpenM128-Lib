
USART_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000058a  0000061e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800126  00800126  00000644  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d6  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a57  00000000  00000000  0000073a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000234  00000000  00000000  00001191  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088b  00000000  00000000  000013c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e4  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000340  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e8       	ldi	r30, 0x8A	; 138
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a6 32       	cpi	r26, 0x26	; 38
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a6 e2       	ldi	r26, 0x26	; 38
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 36       	cpi	r26, 0x66	; 102
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 03 02 	call	0x406	; 0x406 <main>
  a6:	0c 94 c3 02 	jmp	0x586	; 0x586 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <usartInit>:
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSR0A=0x00;
  ae:	1b b8       	out	0x0b, r1	; 11
UCSR0B=0x18;
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	8a b9       	out	0x0a, r24	; 10
UCSR0C=0x86;
  b4:	86 e8       	ldi	r24, 0x86	; 134
  b6:	80 bd       	out	0x20, r24	; 32
UBRR0H=0x00;
  b8:	10 bc       	out	0x20, r1	; 32
UBRR0L=0x2F;
  ba:	8f e2       	ldi	r24, 0x2F	; 47
  bc:	89 b9       	out	0x09, r24	; 9
}
  be:	08 95       	ret

000000c0 <putUsart0>:


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
    while(!(WS_UCSR0A & 0x20));
  c0:	5d 9b       	sbis	0x0b, 5	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <putUsart0>
    WS_UDR0 = c;
  c4:	8c b9       	out	0x0c, r24	; 12
}
  c6:	08 95       	ret

000000c8 <getUsart0>:
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  c8:	5f 9b       	sbis	0x0b, 7	; 11
  ca:	07 c0       	rjmp	.+14     	; 0xda <getUsart0+0x12>
    status = WS_UCSR0A;
  cc:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
  ce:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  d0:	8c 71       	andi	r24, 0x1C	; 28
  d2:	19 f4       	brne	.+6      	; 0xda <getUsart0+0x12>
    return res;
  d4:	29 2f       	mov	r18, r25
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <getUsart0+0x16>
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	3f ef       	ldi	r19, 0xFF	; 255
}
  de:	c9 01       	movw	r24, r18
  e0:	08 95       	ret

000000e2 <waitUsart0>:
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  e2:	5f 9b       	sbis	0x0b, 7	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <waitUsart0>
    status = WS_UCSR0A;
  e6:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
  e8:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  ea:	8c 71       	andi	r24, 0x1C	; 28
  ec:	d1 f7       	brne	.-12     	; 0xe2 <waitUsart0>
uint8_t waitUsart0(void)
{
    uint16_t c;
    while((c=getUsart0())==0xFFFF);
    return (uint8_t)c;
}
  ee:	89 2f       	mov	r24, r25
  f0:	08 95       	ret

000000f2 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  f2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  f4:	77 9b       	sbis	0x0e, 7	; 14
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <spiSendChar+0x2>
}
  f8:	08 95       	ret

000000fa <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
  fa:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  fc:	88 ef       	ldi	r24, 0xF8	; 248
  fe:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 100:	77 9b       	sbis	0x0e, 7	; 14
 102:	fe cf       	rjmp	.-4      	; 0x100 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 104:	89 2f       	mov	r24, r25
 106:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 108:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 10a:	77 9b       	sbis	0x0e, 7	; 14
 10c:	fe cf       	rjmp	.-4      	; 0x10a <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 10e:	92 95       	swap	r25
 110:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 112:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 114:	77 9b       	sbis	0x0e, 7	; 14
 116:	fe cf       	rjmp	.-4      	; 0x114 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 118:	88 eb       	ldi	r24, 0xB8	; 184
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 11e:	08 95       	ret

00000120 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 120:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 122:	8a ef       	ldi	r24, 0xFA	; 250
 124:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 126:	77 9b       	sbis	0x0e, 7	; 14
 128:	fe cf       	rjmp	.-4      	; 0x126 <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 12a:	89 2f       	mov	r24, r25
 12c:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 12e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 130:	77 9b       	sbis	0x0e, 7	; 14
 132:	fe cf       	rjmp	.-4      	; 0x130 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 134:	92 95       	swap	r25
 136:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 138:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 13a:	77 9b       	sbis	0x0e, 7	; 14
 13c:	fe cf       	rjmp	.-4      	; 0x13a <sendDataST7920+0x1a>
 13e:	88 eb       	ldi	r24, 0xB8	; 184
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 144:	08 95       	ret

00000146 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 146:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 148:	88 ef       	ldi	r24, 0xF8	; 248
 14a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 14c:	77 9b       	sbis	0x0e, 7	; 14
 14e:	fe cf       	rjmp	.-4      	; 0x14c <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 150:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 152:	77 9b       	sbis	0x0e, 7	; 14
 154:	fe cf       	rjmp	.-4      	; 0x152 <refreshLCD+0xc>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 156:	80 e2       	ldi	r24, 0x20	; 32
 158:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 15a:	77 9b       	sbis	0x0e, 7	; 14
 15c:	fe cf       	rjmp	.-4      	; 0x15a <refreshLCD+0x14>
 15e:	88 eb       	ldi	r24, 0xB8	; 184
 160:	8a 95       	dec	r24
 162:	f1 f7       	brne	.-4      	; 0x160 <refreshLCD+0x1a>
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 168:	6a ef       	ldi	r22, 0xFA	; 250
 16a:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 16c:	fa 01       	movw	r30, r20
 16e:	e2 0f       	add	r30, r18
 170:	f3 1f       	adc	r31, r19
 172:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 174:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));
 176:	77 9b       	sbis	0x0e, 7	; 14
 178:	fe cf       	rjmp	.-4      	; 0x176 <refreshLCD+0x30>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 17a:	8e 2f       	mov	r24, r30
 17c:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 17e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 180:	77 9b       	sbis	0x0e, 7	; 14
 182:	fe cf       	rjmp	.-4      	; 0x180 <refreshLCD+0x3a>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 184:	e2 95       	swap	r30
 186:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 188:	ef b9       	out	0x0f, r30	; 15
	while (!(SPSR & (1<<SPIF)));
 18a:	77 9b       	sbis	0x0e, 7	; 14
 18c:	fe cf       	rjmp	.-4      	; 0x18a <refreshLCD+0x44>
 18e:	89 2f       	mov	r24, r25
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <refreshLCD+0x4a>
 194:	2f 5f       	subi	r18, 0xFF	; 255
 196:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 198:	20 31       	cpi	r18, 0x10	; 16
 19a:	31 05       	cpc	r19, r1
 19c:	39 f7       	brne	.-50     	; 0x16c <refreshLCD+0x26>
 19e:	da 01       	movw	r26, r20
 1a0:	fa 01       	movw	r30, r20
 1a2:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1a4:	3a ef       	ldi	r19, 0xFA	; 250
 1a6:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1a8:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1aa:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 1ac:	77 9b       	sbis	0x0e, 7	; 14
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <refreshLCD+0x66>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1b0:	82 2f       	mov	r24, r18
 1b2:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1b4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1b6:	77 9b       	sbis	0x0e, 7	; 14
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <refreshLCD+0x70>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1ba:	22 95       	swap	r18
 1bc:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1be:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 1c0:	77 9b       	sbis	0x0e, 7	; 14
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <refreshLCD+0x7a>
 1c4:	89 2f       	mov	r24, r25
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <refreshLCD+0x80>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 1ca:	6f 5f       	subi	r22, 0xFF	; 255
 1cc:	31 96       	adiw	r30, 0x01	; 1
 1ce:	60 33       	cpi	r22, 0x30	; 48
 1d0:	59 f7       	brne	.-42     	; 0x1a8 <refreshLCD+0x62>
 1d2:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1d4:	7a ef       	ldi	r23, 0xFA	; 250
 1d6:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1d8:	50 96       	adiw	r26, 0x10	; 16
 1da:	2c 91       	ld	r18, X
 1dc:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1de:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));
 1e0:	77 9b       	sbis	0x0e, 7	; 14
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <refreshLCD+0x9a>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1e4:	82 2f       	mov	r24, r18
 1e6:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1e8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1ea:	77 9b       	sbis	0x0e, 7	; 14
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <refreshLCD+0xa4>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1ee:	22 95       	swap	r18
 1f0:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1f2:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 1f4:	77 9b       	sbis	0x0e, 7	; 14
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <refreshLCD+0xae>
 1f8:	89 2f       	mov	r24, r25
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <refreshLCD+0xb4>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 1fe:	3f 5f       	subi	r19, 0xFF	; 255
 200:	11 96       	adiw	r26, 0x01	; 1
 202:	30 32       	cpi	r19, 0x20	; 32
 204:	49 f7       	brne	.-46     	; 0x1d8 <refreshLCD+0x92>
 206:	fa 01       	movw	r30, r20
 208:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 20a:	3a ef       	ldi	r19, 0xFA	; 250
 20c:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 20e:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 210:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 212:	77 9b       	sbis	0x0e, 7	; 14
 214:	fe cf       	rjmp	.-4      	; 0x212 <refreshLCD+0xcc>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 216:	89 2f       	mov	r24, r25
 218:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 21a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 21c:	77 9b       	sbis	0x0e, 7	; 14
 21e:	fe cf       	rjmp	.-4      	; 0x21c <refreshLCD+0xd6>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 220:	92 95       	swap	r25
 222:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 224:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 226:	77 9b       	sbis	0x0e, 7	; 14
 228:	fe cf       	rjmp	.-4      	; 0x226 <refreshLCD+0xe0>
 22a:	82 2f       	mov	r24, r18
 22c:	8a 95       	dec	r24
 22e:	f1 f7       	brne	.-4      	; 0x22c <refreshLCD+0xe6>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
 230:	6f 5f       	subi	r22, 0xFF	; 255
 232:	31 96       	adiw	r30, 0x01	; 1
 234:	6f 33       	cpi	r22, 0x3F	; 63
 236:	59 f7       	brne	.-42     	; 0x20e <refreshLCD+0xc8>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 238:	08 95       	ret

0000023a <decToAscii>:
*	width是转换宽度
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	fb 01       	movw	r30, r22
 240:	ec 01       	movw	r28, r24
			case 1:
			{
				*(str+num) = (dec+'0');
				break;
			}
			default: *(str+num) = '0';
 242:	20 e3       	ldi	r18, 0x30	; 48
 244:	43 c0       	rjmp	.+134    	; 0x2cc <decToAscii+0x92>
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
	{
		switch(width)
 246:	43 30       	cpi	r20, 0x03	; 3
 248:	21 f1       	breq	.+72     	; 0x292 <decToAscii+0x58>
 24a:	44 30       	cpi	r20, 0x04	; 4
 24c:	28 f4       	brcc	.+10     	; 0x258 <decToAscii+0x1e>
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	b1 f1       	breq	.+108    	; 0x2be <decToAscii+0x84>
 252:	42 30       	cpi	r20, 0x02	; 2
 254:	c1 f5       	brne	.+112    	; 0x2c6 <decToAscii+0x8c>
 256:	28 c0       	rjmp	.+80     	; 0x2a8 <decToAscii+0x6e>
 258:	44 30       	cpi	r20, 0x04	; 4
 25a:	69 f0       	breq	.+26     	; 0x276 <decToAscii+0x3c>
 25c:	45 30       	cpi	r20, 0x05	; 5
 25e:	99 f5       	brne	.+102    	; 0x2c6 <decToAscii+0x8c>
		{
			case 5:
			{
				*(str+num) = (dec/10000+'0');
 260:	cf 01       	movw	r24, r30
 262:	60 e1       	ldi	r22, 0x10	; 16
 264:	77 e2       	ldi	r23, 0x27	; 39
 266:	0e 94 af 02 	call	0x55e	; 0x55e <__udivmodhi4>
 26a:	60 5d       	subi	r22, 0xD0	; 208
 26c:	68 83       	st	Y, r22
				dec%=10000;
 26e:	cf 01       	movw	r24, r30
 270:	60 e1       	ldi	r22, 0x10	; 16
 272:	77 e2       	ldi	r23, 0x27	; 39
 274:	0a c0       	rjmp	.+20     	; 0x28a <decToAscii+0x50>
				break;
			}			
			case 4:
			{
				*(str+num) = (dec/1000+'0');
 276:	cf 01       	movw	r24, r30
 278:	68 ee       	ldi	r22, 0xE8	; 232
 27a:	73 e0       	ldi	r23, 0x03	; 3
 27c:	0e 94 af 02 	call	0x55e	; 0x55e <__udivmodhi4>
 280:	60 5d       	subi	r22, 0xD0	; 208
 282:	68 83       	st	Y, r22
				dec%=1000;
 284:	cf 01       	movw	r24, r30
 286:	68 ee       	ldi	r22, 0xE8	; 232
 288:	73 e0       	ldi	r23, 0x03	; 3
 28a:	0e 94 af 02 	call	0x55e	; 0x55e <__udivmodhi4>
 28e:	fc 01       	movw	r30, r24
 290:	1b c0       	rjmp	.+54     	; 0x2c8 <decToAscii+0x8e>
				break;
			}
			case 3:
			{
				*(str+num) = (dec/100+'0');
 292:	cf 01       	movw	r24, r30
 294:	64 e6       	ldi	r22, 0x64	; 100
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	0e 94 af 02 	call	0x55e	; 0x55e <__udivmodhi4>
 29c:	60 5d       	subi	r22, 0xD0	; 208
 29e:	68 83       	st	Y, r22
				dec%=100;
 2a0:	cf 01       	movw	r24, r30
 2a2:	64 e6       	ldi	r22, 0x64	; 100
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	f1 cf       	rjmp	.-30     	; 0x28a <decToAscii+0x50>
				break;
			}
			case 2:
			{
				*(str+num) = (dec/10+'0');
 2a8:	cf 01       	movw	r24, r30
 2aa:	6a e0       	ldi	r22, 0x0A	; 10
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	0e 94 af 02 	call	0x55e	; 0x55e <__udivmodhi4>
 2b2:	60 5d       	subi	r22, 0xD0	; 208
 2b4:	68 83       	st	Y, r22
				dec%=10;
 2b6:	cf 01       	movw	r24, r30
 2b8:	6a e0       	ldi	r22, 0x0A	; 10
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	e6 cf       	rjmp	.-52     	; 0x28a <decToAscii+0x50>
				break;
			}
			case 1:
			{
				*(str+num) = (dec+'0');
 2be:	e0 5d       	subi	r30, 0xD0	; 208
 2c0:	e8 83       	st	Y, r30
 2c2:	e0 53       	subi	r30, 0x30	; 48
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <decToAscii+0x8e>
				break;
			}
			default: *(str+num) = '0';
 2c6:	28 83       	st	Y, r18
		}
		width--;
 2c8:	41 50       	subi	r20, 0x01	; 1
 2ca:	21 96       	adiw	r28, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
 2cc:	44 23       	and	r20, r20
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <decToAscii+0x98>
 2d0:	ba cf       	rjmp	.-140    	; 0x246 <decToAscii+0xc>
			default: *(str+num) = '0';
		}
		width--;
		num++;
	}
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <st7920LcdInit>:

/*Hardware Environment：DVK501 && M162+ EX*/
#elif defined(_DVK501_M162_EX_)
void st7920LcdInit(void)
{
DDRB|=0xF0;
 2d8:	87 b3       	in	r24, 0x17	; 23
 2da:	80 6f       	ori	r24, 0xF0	; 240
 2dc:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 2de:	80 e5       	ldi	r24, 0x50	; 80
 2e0:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	8e b9       	out	0x0e, r24	; 14
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2e6:	88 ef       	ldi	r24, 0xF8	; 248
 2e8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2ea:	77 9b       	sbis	0x0e, 7	; 14
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <st7920LcdInit+0x12>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2ee:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 2f0:	77 9b       	sbis	0x0e, 7	; 14
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <st7920LcdInit+0x18>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2f4:	80 ec       	ldi	r24, 0xC0	; 192
 2f6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2f8:	77 9b       	sbis	0x0e, 7	; 14
 2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <st7920LcdInit+0x20>
 2fc:	88 eb       	ldi	r24, 0xB8	; 184
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <st7920LcdInit+0x26>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 302:	88 ef       	ldi	r24, 0xF8	; 248
 304:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 306:	77 9b       	sbis	0x0e, 7	; 14
 308:	fe cf       	rjmp	.-4      	; 0x306 <st7920LcdInit+0x2e>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 30a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 30c:	77 9b       	sbis	0x0e, 7	; 14
 30e:	fe cf       	rjmp	.-4      	; 0x30c <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 310:	80 e1       	ldi	r24, 0x10	; 16
 312:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 314:	77 9b       	sbis	0x0e, 7	; 14
 316:	fe cf       	rjmp	.-4      	; 0x314 <st7920LcdInit+0x3c>
 318:	88 eb       	ldi	r24, 0xB8	; 184
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <st7920LcdInit+0x42>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 31e:	86 e6       	ldi	r24, 0x66	; 102
 320:	9e e0       	ldi	r25, 0x0E	; 14
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <st7920LcdInit+0x4a>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 326:	86 e2       	ldi	r24, 0x26	; 38
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	60 e2       	ldi	r22, 0x20	; 32
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	40 e4       	ldi	r20, 0x40	; 64
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	0e 94 a8 02 	call	0x550	; 0x550 <memset>
}
 336:	08 95       	ret

00000338 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 338:	af 92       	push	r10
 33a:	bf 92       	push	r11
 33c:	cf 92       	push	r12
 33e:	df 92       	push	r13
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
 346:	df 93       	push	r29
 348:	cf 93       	push	r28
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	0d 85       	ldd	r16, Y+13	; 0x0d
 350:	ae 84       	ldd	r10, Y+14	; 0x0e
 352:	bf 84       	ldd	r11, Y+15	; 0x0f
 354:	e8 88       	ldd	r14, Y+16	; 0x10
 356:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 358:	02 95       	swap	r16
 35a:	00 7f       	andi	r16, 0xF0	; 240
 35c:	8c 85       	ldd	r24, Y+12	; 0x0c
 35e:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 360:	de 01       	movw	r26, r28
 362:	52 96       	adiw	r26, 0x12	; 18
 364:	41 c0       	rjmp	.+130    	; 0x3e8 <showLine+0xb0>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 366:	01 34       	cpi	r16, 0x41	; 65
 368:	08 f0       	brcs	.+2      	; 0x36c <showLine+0x34>
 36a:	43 c0       	rjmp	.+134    	; 0x3f2 <showLine+0xba>

		if(*str == '\\')
 36c:	8c 35       	cpi	r24, 0x5C	; 92
 36e:	51 f4       	brne	.+20     	; 0x384 <showLine+0x4c>
		{
			str++;
 370:	08 94       	sec
 372:	e1 1c       	adc	r14, r1
 374:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 376:	95 01       	movw	r18, r10
 378:	20 0f       	add	r18, r16
 37a:	31 1d       	adc	r19, r1
 37c:	f7 01       	movw	r30, r14
 37e:	80 81       	ld	r24, Z
 380:	f9 01       	movw	r30, r18
 382:	2d c0       	rjmp	.+90     	; 0x3de <showLine+0xa6>
		}
		else if(*str == '%')
 384:	85 32       	cpi	r24, 0x25	; 37
 386:	41 f5       	brne	.+80     	; 0x3d8 <showLine+0xa0>
		{
			str++;
 388:	08 94       	sec
 38a:	e1 1c       	adc	r14, r1
 38c:	f1 1c       	adc	r15, r1
			if (*str=='d')
 38e:	f7 01       	movw	r30, r14
 390:	80 81       	ld	r24, Z
 392:	84 36       	cpi	r24, 0x64	; 100
 394:	c1 f4       	brne	.+48     	; 0x3c6 <showLine+0x8e>
			{
				str++;
 396:	08 94       	sec
 398:	e1 1c       	adc	r14, r1
 39a:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	c8 2e       	mov	r12, r24
 3a0:	d1 2c       	mov	r13, r1
 3a2:	ca 0e       	add	r12, r26
 3a4:	db 1e       	adc	r13, r27
 3a6:	6d 91       	ld	r22, X+
 3a8:	7c 91       	ld	r23, X
 3aa:	f7 01       	movw	r30, r14
 3ac:	40 81       	ld	r20, Z
 3ae:	40 53       	subi	r20, 0x30	; 48
 3b0:	c5 01       	movw	r24, r10
 3b2:	80 0f       	add	r24, r16
 3b4:	91 1d       	adc	r25, r1
 3b6:	0e 94 1d 01 	call	0x23a	; 0x23a <decToAscii>
				coordinate+=(*str-'0'-1);
 3ba:	01 53       	subi	r16, 0x31	; 49
 3bc:	f7 01       	movw	r30, r14
 3be:	80 81       	ld	r24, Z
 3c0:	08 0f       	add	r16, r24
 3c2:	d6 01       	movw	r26, r12
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <showLine+0xa8>
			}
			else if(*str=='c')
 3c6:	83 36       	cpi	r24, 0x63	; 99
 3c8:	59 f4       	brne	.+22     	; 0x3e0 <showLine+0xa8>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 3ca:	f5 01       	movw	r30, r10
 3cc:	e0 0f       	add	r30, r16
 3ce:	f1 1d       	adc	r31, r1
 3d0:	8c 91       	ld	r24, X
 3d2:	80 83       	st	Z, r24
 3d4:	12 96       	adiw	r26, 0x02	; 2
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <showLine+0xa8>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 3d8:	f5 01       	movw	r30, r10
 3da:	e0 0f       	add	r30, r16
 3dc:	f1 1d       	adc	r31, r1
 3de:	80 83       	st	Z, r24
		}
		str++;
 3e0:	08 94       	sec
 3e2:	e1 1c       	adc	r14, r1
 3e4:	f1 1c       	adc	r15, r1
		coordinate++;
 3e6:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 3e8:	f7 01       	movw	r30, r14
 3ea:	80 81       	ld	r24, Z
 3ec:	88 23       	and	r24, r24
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <showLine+0xba>
 3f0:	ba cf       	rjmp	.-140    	; 0x366 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	bf 90       	pop	r11
 402:	af 90       	pop	r10
 404:	08 95       	ret

00000406 <main>:
#include <util/delay.h>
#include <ws_usart_port.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 406:	8f 92       	push	r8
 408:	9f 92       	push	r9
 40a:	af 92       	push	r10
 40c:	bf 92       	push	r11
 40e:	cf 92       	push	r12
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSR0A=0x00;
 41e:	1b b8       	out	0x0b, r1	; 11
UCSR0B=0x18;
 420:	88 e1       	ldi	r24, 0x18	; 24
 422:	8a b9       	out	0x0a, r24	; 10
UCSR0C=0x86;
 424:	86 e8       	ldi	r24, 0x86	; 134
 426:	80 bd       	out	0x20, r24	; 32
UBRR0H=0x00;
 428:	10 bc       	out	0x20, r1	; 32
UBRR0L=0x2F;
 42a:	8f e2       	ldi	r24, 0x2F	; 47
 42c:	89 b9       	out	0x09, r24	; 9
	uint8_t tmp=0;
	usartInit();
	st7920LcdInit(); /*LCD初始化*/
 42e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <st7920LcdInit>
	showLine(0,0,lcd_buffer,"MAX232实验");
 432:	00 d0       	rcall	.+0      	; 0x434 <main+0x2e>
 434:	00 d0       	rcall	.+0      	; 0x436 <main+0x30>
 436:	00 d0       	rcall	.+0      	; 0x438 <main+0x32>
 438:	ed b7       	in	r30, 0x3d	; 61
 43a:	fe b7       	in	r31, 0x3e	; 62
 43c:	31 96       	adiw	r30, 0x01	; 1
 43e:	ad b7       	in	r26, 0x3d	; 61
 440:	be b7       	in	r27, 0x3e	; 62
 442:	11 96       	adiw	r26, 0x01	; 1
 444:	1c 92       	st	X, r1
 446:	11 82       	std	Z+1, r1	; 0x01
 448:	06 e2       	ldi	r16, 0x26	; 38
 44a:	11 e0       	ldi	r17, 0x01	; 1
 44c:	13 83       	std	Z+3, r17	; 0x03
 44e:	02 83       	std	Z+2, r16	; 0x02
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	95 83       	std	Z+5, r25	; 0x05
 456:	84 83       	std	Z+4, r24	; 0x04
 458:	0e 94 9c 01 	call	0x338	; 0x338 <showLine>
	showLine(0,1,lcd_buffer,"USART 自发自收");
 45c:	ed b7       	in	r30, 0x3d	; 61
 45e:	fe b7       	in	r31, 0x3e	; 62
 460:	31 96       	adiw	r30, 0x01	; 1
 462:	ad b7       	in	r26, 0x3d	; 61
 464:	be b7       	in	r27, 0x3e	; 62
 466:	11 96       	adiw	r26, 0x01	; 1
 468:	1c 92       	st	X, r1
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	81 83       	std	Z+1, r24	; 0x01
 46e:	13 83       	std	Z+3, r17	; 0x03
 470:	02 83       	std	Z+2, r16	; 0x02
 472:	8b e0       	ldi	r24, 0x0B	; 11
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	95 83       	std	Z+5, r25	; 0x05
 478:	84 83       	std	Z+4, r24	; 0x04
 47a:	0e 94 9c 01 	call	0x338	; 0x338 <showLine>
	showLine(0,2,lcd_buffer,"数据：");
 47e:	ed b7       	in	r30, 0x3d	; 61
 480:	fe b7       	in	r31, 0x3e	; 62
 482:	31 96       	adiw	r30, 0x01	; 1
 484:	ad b7       	in	r26, 0x3d	; 61
 486:	be b7       	in	r27, 0x3e	; 62
 488:	11 96       	adiw	r26, 0x01	; 1
 48a:	1c 92       	st	X, r1
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	81 83       	std	Z+1, r24	; 0x01
 490:	13 83       	std	Z+3, r17	; 0x03
 492:	02 83       	std	Z+2, r16	; 0x02
 494:	8a e1       	ldi	r24, 0x1A	; 26
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	95 83       	std	Z+5, r25	; 0x05
 49a:	84 83       	std	Z+4, r24	; 0x04
 49c:	0e 94 9c 01 	call	0x338	; 0x338 <showLine>
	refreshLCD(lcd_buffer); /*刷新LCD*/
 4a0:	2d b7       	in	r18, 0x3d	; 61
 4a2:	3e b7       	in	r19, 0x3e	; 62
 4a4:	2a 5f       	subi	r18, 0xFA	; 250
 4a6:	3f 4f       	sbci	r19, 0xFF	; 255
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	f8 94       	cli
 4ac:	3e bf       	out	0x3e, r19	; 62
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	2d bf       	out	0x3d, r18	; 61
 4b2:	c8 01       	movw	r24, r16
 4b4:	0e 94 a3 00 	call	0x146	; 0x146 <refreshLCD>
 4b8:	ff 24       	eor	r15, r15
 4ba:	a1 2c       	mov	r10, r1
 4bc:	48 e4       	ldi	r20, 0x48	; 72
 4be:	b4 2e       	mov	r11, r20
	while(1)
	{
		putUsart0(tmp);
		_delay_ms(10);
		showLine(6,2,lcd_buffer,"%d3",(uint8_t)getUsart0());
 4c0:	36 e0       	ldi	r19, 0x06	; 6
 4c2:	83 2e       	mov	r8, r19
 4c4:	22 e0       	ldi	r18, 0x02	; 2
 4c6:	92 2e       	mov	r9, r18
 4c8:	e0 2e       	mov	r14, r16
 4ca:	01 2f       	mov	r16, r17
 4cc:	91 e2       	ldi	r25, 0x21	; 33
 4ce:	c9 2e       	mov	r12, r25
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	d9 2e       	mov	r13, r25
 4d4:	c8 eb       	ldi	r28, 0xB8	; 184
 4d6:	d0 e0       	ldi	r29, 0x00	; 0


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
    while(!(WS_UCSR0A & 0x20));
 4d8:	5d 9b       	sbis	0x0b, 5	; 11
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <main+0xd2>
    WS_UDR0 = c;
 4dc:	fc b8       	out	0x0c, r15	; 12
 4de:	c5 01       	movw	r24, r10
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <main+0xda>
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 4e4:	5f 9b       	sbis	0x0b, 7	; 11
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <main+0xee>
    status = WS_UCSR0A;
 4e8:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
 4ea:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 4ec:	8c 71       	andi	r24, 0x1C	; 28
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <main+0xee>
    return res;
 4f0:	89 2f       	mov	r24, r25
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <main+0xf2>
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	9f ef       	ldi	r25, 0xFF	; 255
 4f8:	ad b7       	in	r26, 0x3d	; 61
 4fa:	be b7       	in	r27, 0x3e	; 62
 4fc:	18 97       	sbiw	r26, 0x08	; 8
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	f8 94       	cli
 502:	be bf       	out	0x3e, r27	; 62
 504:	0f be       	out	0x3f, r0	; 63
 506:	ad bf       	out	0x3d, r26	; 61
 508:	ed b7       	in	r30, 0x3d	; 61
 50a:	fe b7       	in	r31, 0x3e	; 62
 50c:	31 96       	adiw	r30, 0x01	; 1
 50e:	11 96       	adiw	r26, 0x01	; 1
 510:	8c 92       	st	X, r8
 512:	91 82       	std	Z+1, r9	; 0x01
 514:	e2 82       	std	Z+2, r14	; 0x02
 516:	03 83       	std	Z+3, r16	; 0x03
 518:	d5 82       	std	Z+5, r13	; 0x05
 51a:	c4 82       	std	Z+4, r12	; 0x04
 51c:	86 83       	std	Z+6, r24	; 0x06
 51e:	17 82       	std	Z+7, r1	; 0x07
 520:	0e 94 9c 01 	call	0x338	; 0x338 <showLine>
		refreshLCD(lcd_buffer); /*刷新LCD*/
 524:	2d b7       	in	r18, 0x3d	; 61
 526:	3e b7       	in	r19, 0x3e	; 62
 528:	28 5f       	subi	r18, 0xF8	; 248
 52a:	3f 4f       	sbci	r19, 0xFF	; 255
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	3e bf       	out	0x3e, r19	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	2d bf       	out	0x3d, r18	; 61
 536:	8e 2d       	mov	r24, r14
 538:	90 2f       	mov	r25, r16
 53a:	0e 94 a3 00 	call	0x146	; 0x146 <refreshLCD>
 53e:	80 e1       	ldi	r24, 0x10	; 16
 540:	97 e2       	ldi	r25, 0x27	; 39
 542:	fe 01       	movw	r30, r28
 544:	31 97       	sbiw	r30, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <__stack+0x45>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 548:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 54a:	d9 f7       	brne	.-10     	; 0x542 <__stack+0x43>
		tmp++;
 54c:	f3 94       	inc	r15
 54e:	c4 cf       	rjmp	.-120    	; 0x4d8 <main+0xd2>

00000550 <memset>:
 550:	dc 01       	movw	r26, r24
 552:	01 c0       	rjmp	.+2      	; 0x556 <memset+0x6>
 554:	6d 93       	st	X+, r22
 556:	41 50       	subi	r20, 0x01	; 1
 558:	50 40       	sbci	r21, 0x00	; 0
 55a:	e0 f7       	brcc	.-8      	; 0x554 <memset+0x4>
 55c:	08 95       	ret

0000055e <__udivmodhi4>:
 55e:	aa 1b       	sub	r26, r26
 560:	bb 1b       	sub	r27, r27
 562:	51 e1       	ldi	r21, 0x11	; 17
 564:	07 c0       	rjmp	.+14     	; 0x574 <__udivmodhi4_ep>

00000566 <__udivmodhi4_loop>:
 566:	aa 1f       	adc	r26, r26
 568:	bb 1f       	adc	r27, r27
 56a:	a6 17       	cp	r26, r22
 56c:	b7 07       	cpc	r27, r23
 56e:	10 f0       	brcs	.+4      	; 0x574 <__udivmodhi4_ep>
 570:	a6 1b       	sub	r26, r22
 572:	b7 0b       	sbc	r27, r23

00000574 <__udivmodhi4_ep>:
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	5a 95       	dec	r21
 57a:	a9 f7       	brne	.-22     	; 0x566 <__udivmodhi4_loop>
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	bc 01       	movw	r22, r24
 582:	cd 01       	movw	r24, r26
 584:	08 95       	ret

00000586 <_exit>:
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
