
matkey_lcd12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000055c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800126  00800126  00000616  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c3  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000947  00000000  00000000  000006f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f9  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000766  00000000  00000000  00001239  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e7  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ad  00000000  00000000  00001c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e5       	ldi	r30, 0x5C	; 92
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a6 32       	cpi	r26, 0x26	; 38
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a6 e2       	ldi	r26, 0x26	; 38
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 36       	cpi	r26, 0x66	; 102
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 09 02 	call	0x412	; 0x412 <main>
  a6:	0c 94 ac 02 	jmp	0x558	; 0x558 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <getKeyVal>:
const uint8_t getSta_[4]={0x70,0xb0,0xd0,0xe0};  

uint8_t getKeyVal()
{
    uint8_t i,j,getSta,keyVal;
	MATKEY_PORT=0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8b bb       	out	0x1b, r24	; 27
    MATKEY_DDR=0x0F;
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	8a bb       	out	0x1a, r24	; 26
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
    for(i=0;i<4;i++)              
    {               			
        MATKEY_PORT = setSta_[i];
  ba:	f9 01       	movw	r30, r18
  bc:	e3 5e       	subi	r30, 0xE3	; 227
  be:	fe 4f       	sbci	r31, 0xFE	; 254
  c0:	90 81       	ld	r25, Z
  c2:	9b bb       	out	0x1b, r25	; 27
        if(MATKEY_PIN!=setSta_[i])
  c4:	89 b3       	in	r24, 0x19	; 25
  c6:	89 17       	cp	r24, r25
  c8:	99 f0       	breq	.+38     	; 0xf0 <getKeyVal+0x42>
        {
            getSta=MATKEY_PIN&0xf0;
  ca:	49 b3       	in	r20, 0x19	; 25
  cc:	40 7f       	andi	r20, 0xF0	; 240
  ce:	e1 e2       	ldi	r30, 0x21	; 33
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
            for(j=0;j<4;j++)    
                if(getSta==getSta_[j])                                 
  d4:	80 81       	ld	r24, Z
  d6:	48 17       	cp	r20, r24
  d8:	39 f4       	brne	.+14     	; 0xe8 <getKeyVal+0x3a>
            	{
                    keyVal=j+i*4;
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	89 2f       	mov	r24, r25
  e4:	82 0f       	add	r24, r18
  e6:	08 95       	ret
    {               			
        MATKEY_PORT = setSta_[i];
        if(MATKEY_PIN!=setSta_[i])
        {
            getSta=MATKEY_PIN&0xf0;
            for(j=0;j<4;j++)    
  e8:	9f 5f       	subi	r25, 0xFF	; 255
  ea:	31 96       	adiw	r30, 0x01	; 1
  ec:	94 30       	cpi	r25, 0x04	; 4
  ee:	91 f7       	brne	.-28     	; 0xd4 <getKeyVal+0x26>
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t getKeyVal()
{
    uint8_t i,j,getSta,keyVal;
	MATKEY_PORT=0xFF;
    MATKEY_DDR=0x0F;
    for(i=0;i<4;i++)              
  f4:	24 30       	cpi	r18, 0x04	; 4
  f6:	31 05       	cpc	r19, r1
  f8:	01 f7       	brne	.-64     	; 0xba <getKeyVal+0xc>
  fa:	8f ef       	ldi	r24, 0xFF	; 255
                    return keyVal;
            	}
        }
    }
    return 0xFF;
}
  fc:	08 95       	ret

000000fe <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  fe:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 100:	77 9b       	sbis	0x0e, 7	; 14
 102:	fe cf       	rjmp	.-4      	; 0x100 <spiSendChar+0x2>
}
 104:	08 95       	ret

00000106 <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 106:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 108:	88 ef       	ldi	r24, 0xF8	; 248
 10a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 10c:	77 9b       	sbis	0x0e, 7	; 14
 10e:	fe cf       	rjmp	.-4      	; 0x10c <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 110:	89 2f       	mov	r24, r25
 112:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 114:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 116:	77 9b       	sbis	0x0e, 7	; 14
 118:	fe cf       	rjmp	.-4      	; 0x116 <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 11a:	92 95       	swap	r25
 11c:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 11e:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 120:	77 9b       	sbis	0x0e, 7	; 14
 122:	fe cf       	rjmp	.-4      	; 0x120 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 124:	88 eb       	ldi	r24, 0xB8	; 184
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 12a:	08 95       	ret

0000012c <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 12c:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 12e:	8a ef       	ldi	r24, 0xFA	; 250
 130:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 132:	77 9b       	sbis	0x0e, 7	; 14
 134:	fe cf       	rjmp	.-4      	; 0x132 <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 136:	89 2f       	mov	r24, r25
 138:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 13a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 13c:	77 9b       	sbis	0x0e, 7	; 14
 13e:	fe cf       	rjmp	.-4      	; 0x13c <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 140:	92 95       	swap	r25
 142:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 144:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 146:	77 9b       	sbis	0x0e, 7	; 14
 148:	fe cf       	rjmp	.-4      	; 0x146 <sendDataST7920+0x1a>
 14a:	88 eb       	ldi	r24, 0xB8	; 184
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 150:	08 95       	ret

00000152 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 152:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 154:	88 ef       	ldi	r24, 0xF8	; 248
 156:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 158:	77 9b       	sbis	0x0e, 7	; 14
 15a:	fe cf       	rjmp	.-4      	; 0x158 <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 15c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 15e:	77 9b       	sbis	0x0e, 7	; 14
 160:	fe cf       	rjmp	.-4      	; 0x15e <refreshLCD+0xc>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 162:	80 e2       	ldi	r24, 0x20	; 32
 164:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 166:	77 9b       	sbis	0x0e, 7	; 14
 168:	fe cf       	rjmp	.-4      	; 0x166 <refreshLCD+0x14>
 16a:	88 eb       	ldi	r24, 0xB8	; 184
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <refreshLCD+0x1a>
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 174:	6a ef       	ldi	r22, 0xFA	; 250
 176:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 178:	fa 01       	movw	r30, r20
 17a:	e2 0f       	add	r30, r18
 17c:	f3 1f       	adc	r31, r19
 17e:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 180:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));
 182:	77 9b       	sbis	0x0e, 7	; 14
 184:	fe cf       	rjmp	.-4      	; 0x182 <refreshLCD+0x30>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 186:	8e 2f       	mov	r24, r30
 188:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 18a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 18c:	77 9b       	sbis	0x0e, 7	; 14
 18e:	fe cf       	rjmp	.-4      	; 0x18c <refreshLCD+0x3a>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 190:	e2 95       	swap	r30
 192:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 194:	ef b9       	out	0x0f, r30	; 15
	while (!(SPSR & (1<<SPIF)));
 196:	77 9b       	sbis	0x0e, 7	; 14
 198:	fe cf       	rjmp	.-4      	; 0x196 <refreshLCD+0x44>
 19a:	89 2f       	mov	r24, r25
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <refreshLCD+0x4a>
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 1a4:	20 31       	cpi	r18, 0x10	; 16
 1a6:	31 05       	cpc	r19, r1
 1a8:	39 f7       	brne	.-50     	; 0x178 <refreshLCD+0x26>
 1aa:	da 01       	movw	r26, r20
 1ac:	fa 01       	movw	r30, r20
 1ae:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1b0:	3a ef       	ldi	r19, 0xFA	; 250
 1b2:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1b4:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1b6:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 1b8:	77 9b       	sbis	0x0e, 7	; 14
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <refreshLCD+0x66>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1bc:	82 2f       	mov	r24, r18
 1be:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1c0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1c2:	77 9b       	sbis	0x0e, 7	; 14
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <refreshLCD+0x70>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1c6:	22 95       	swap	r18
 1c8:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ca:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 1cc:	77 9b       	sbis	0x0e, 7	; 14
 1ce:	fe cf       	rjmp	.-4      	; 0x1cc <refreshLCD+0x7a>
 1d0:	89 2f       	mov	r24, r25
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <refreshLCD+0x80>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 1d6:	6f 5f       	subi	r22, 0xFF	; 255
 1d8:	31 96       	adiw	r30, 0x01	; 1
 1da:	60 33       	cpi	r22, 0x30	; 48
 1dc:	59 f7       	brne	.-42     	; 0x1b4 <refreshLCD+0x62>
 1de:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1e0:	7a ef       	ldi	r23, 0xFA	; 250
 1e2:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1e4:	50 96       	adiw	r26, 0x10	; 16
 1e6:	2c 91       	ld	r18, X
 1e8:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ea:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));
 1ec:	77 9b       	sbis	0x0e, 7	; 14
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <refreshLCD+0x9a>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1f0:	82 2f       	mov	r24, r18
 1f2:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1f4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1f6:	77 9b       	sbis	0x0e, 7	; 14
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <refreshLCD+0xa4>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1fa:	22 95       	swap	r18
 1fc:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1fe:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 200:	77 9b       	sbis	0x0e, 7	; 14
 202:	fe cf       	rjmp	.-4      	; 0x200 <refreshLCD+0xae>
 204:	89 2f       	mov	r24, r25
 206:	8a 95       	dec	r24
 208:	f1 f7       	brne	.-4      	; 0x206 <refreshLCD+0xb4>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 20a:	3f 5f       	subi	r19, 0xFF	; 255
 20c:	11 96       	adiw	r26, 0x01	; 1
 20e:	30 32       	cpi	r19, 0x20	; 32
 210:	49 f7       	brne	.-46     	; 0x1e4 <refreshLCD+0x92>
 212:	fa 01       	movw	r30, r20
 214:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 216:	3a ef       	ldi	r19, 0xFA	; 250
 218:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 21a:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 21c:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 21e:	77 9b       	sbis	0x0e, 7	; 14
 220:	fe cf       	rjmp	.-4      	; 0x21e <refreshLCD+0xcc>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 222:	89 2f       	mov	r24, r25
 224:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 226:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 228:	77 9b       	sbis	0x0e, 7	; 14
 22a:	fe cf       	rjmp	.-4      	; 0x228 <refreshLCD+0xd6>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 22c:	92 95       	swap	r25
 22e:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 230:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 232:	77 9b       	sbis	0x0e, 7	; 14
 234:	fe cf       	rjmp	.-4      	; 0x232 <refreshLCD+0xe0>
 236:	82 2f       	mov	r24, r18
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <refreshLCD+0xe6>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
 23c:	6f 5f       	subi	r22, 0xFF	; 255
 23e:	31 96       	adiw	r30, 0x01	; 1
 240:	6f 33       	cpi	r22, 0x3F	; 63
 242:	59 f7       	brne	.-42     	; 0x21a <refreshLCD+0xc8>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 244:	08 95       	ret

00000246 <decToAscii>:
*	width是转换宽度
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	fb 01       	movw	r30, r22
 24c:	ec 01       	movw	r28, r24
			case 1:
			{
				*(str+num) = (dec+'0');
				break;
			}
			default: *(str+num) = '0';
 24e:	20 e3       	ldi	r18, 0x30	; 48
 250:	43 c0       	rjmp	.+134    	; 0x2d8 <decToAscii+0x92>
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
	{
		switch(width)
 252:	43 30       	cpi	r20, 0x03	; 3
 254:	21 f1       	breq	.+72     	; 0x29e <decToAscii+0x58>
 256:	44 30       	cpi	r20, 0x04	; 4
 258:	28 f4       	brcc	.+10     	; 0x264 <decToAscii+0x1e>
 25a:	41 30       	cpi	r20, 0x01	; 1
 25c:	b1 f1       	breq	.+108    	; 0x2ca <decToAscii+0x84>
 25e:	42 30       	cpi	r20, 0x02	; 2
 260:	c1 f5       	brne	.+112    	; 0x2d2 <decToAscii+0x8c>
 262:	28 c0       	rjmp	.+80     	; 0x2b4 <decToAscii+0x6e>
 264:	44 30       	cpi	r20, 0x04	; 4
 266:	69 f0       	breq	.+26     	; 0x282 <decToAscii+0x3c>
 268:	45 30       	cpi	r20, 0x05	; 5
 26a:	99 f5       	brne	.+102    	; 0x2d2 <decToAscii+0x8c>
		{
			case 5:
			{
				*(str+num) = (dec/10000+'0');
 26c:	cf 01       	movw	r24, r30
 26e:	60 e1       	ldi	r22, 0x10	; 16
 270:	77 e2       	ldi	r23, 0x27	; 39
 272:	0e 94 98 02 	call	0x530	; 0x530 <__udivmodhi4>
 276:	60 5d       	subi	r22, 0xD0	; 208
 278:	68 83       	st	Y, r22
				dec%=10000;
 27a:	cf 01       	movw	r24, r30
 27c:	60 e1       	ldi	r22, 0x10	; 16
 27e:	77 e2       	ldi	r23, 0x27	; 39
 280:	0a c0       	rjmp	.+20     	; 0x296 <decToAscii+0x50>
				break;
			}			
			case 4:
			{
				*(str+num) = (dec/1000+'0');
 282:	cf 01       	movw	r24, r30
 284:	68 ee       	ldi	r22, 0xE8	; 232
 286:	73 e0       	ldi	r23, 0x03	; 3
 288:	0e 94 98 02 	call	0x530	; 0x530 <__udivmodhi4>
 28c:	60 5d       	subi	r22, 0xD0	; 208
 28e:	68 83       	st	Y, r22
				dec%=1000;
 290:	cf 01       	movw	r24, r30
 292:	68 ee       	ldi	r22, 0xE8	; 232
 294:	73 e0       	ldi	r23, 0x03	; 3
 296:	0e 94 98 02 	call	0x530	; 0x530 <__udivmodhi4>
 29a:	fc 01       	movw	r30, r24
 29c:	1b c0       	rjmp	.+54     	; 0x2d4 <decToAscii+0x8e>
				break;
			}
			case 3:
			{
				*(str+num) = (dec/100+'0');
 29e:	cf 01       	movw	r24, r30
 2a0:	64 e6       	ldi	r22, 0x64	; 100
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	0e 94 98 02 	call	0x530	; 0x530 <__udivmodhi4>
 2a8:	60 5d       	subi	r22, 0xD0	; 208
 2aa:	68 83       	st	Y, r22
				dec%=100;
 2ac:	cf 01       	movw	r24, r30
 2ae:	64 e6       	ldi	r22, 0x64	; 100
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	f1 cf       	rjmp	.-30     	; 0x296 <decToAscii+0x50>
				break;
			}
			case 2:
			{
				*(str+num) = (dec/10+'0');
 2b4:	cf 01       	movw	r24, r30
 2b6:	6a e0       	ldi	r22, 0x0A	; 10
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	0e 94 98 02 	call	0x530	; 0x530 <__udivmodhi4>
 2be:	60 5d       	subi	r22, 0xD0	; 208
 2c0:	68 83       	st	Y, r22
				dec%=10;
 2c2:	cf 01       	movw	r24, r30
 2c4:	6a e0       	ldi	r22, 0x0A	; 10
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	e6 cf       	rjmp	.-52     	; 0x296 <decToAscii+0x50>
				break;
			}
			case 1:
			{
				*(str+num) = (dec+'0');
 2ca:	e0 5d       	subi	r30, 0xD0	; 208
 2cc:	e8 83       	st	Y, r30
 2ce:	e0 53       	subi	r30, 0x30	; 48
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <decToAscii+0x8e>
				break;
			}
			default: *(str+num) = '0';
 2d2:	28 83       	st	Y, r18
		}
		width--;
 2d4:	41 50       	subi	r20, 0x01	; 1
 2d6:	21 96       	adiw	r28, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
 2d8:	44 23       	and	r20, r20
 2da:	09 f0       	breq	.+2      	; 0x2de <decToAscii+0x98>
 2dc:	ba cf       	rjmp	.-140    	; 0x252 <decToAscii+0xc>
			default: *(str+num) = '0';
		}
		width--;
		num++;
	}
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <st7920LcdInit>:

/*Hardware Environment：DVK501 && M162+ EX*/
#elif defined(_DVK501_M162_EX_)
void st7920LcdInit(void)
{
DDRB|=0xF0;
 2e4:	87 b3       	in	r24, 0x17	; 23
 2e6:	80 6f       	ori	r24, 0xF0	; 240
 2e8:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 2ea:	80 e5       	ldi	r24, 0x50	; 80
 2ec:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	8e b9       	out	0x0e, r24	; 14
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2f2:	88 ef       	ldi	r24, 0xF8	; 248
 2f4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2f6:	77 9b       	sbis	0x0e, 7	; 14
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <st7920LcdInit+0x12>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2fa:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 2fc:	77 9b       	sbis	0x0e, 7	; 14
 2fe:	fe cf       	rjmp	.-4      	; 0x2fc <st7920LcdInit+0x18>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 300:	80 ec       	ldi	r24, 0xC0	; 192
 302:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 304:	77 9b       	sbis	0x0e, 7	; 14
 306:	fe cf       	rjmp	.-4      	; 0x304 <st7920LcdInit+0x20>
 308:	88 eb       	ldi	r24, 0xB8	; 184
 30a:	8a 95       	dec	r24
 30c:	f1 f7       	brne	.-4      	; 0x30a <st7920LcdInit+0x26>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 30e:	88 ef       	ldi	r24, 0xF8	; 248
 310:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 312:	77 9b       	sbis	0x0e, 7	; 14
 314:	fe cf       	rjmp	.-4      	; 0x312 <st7920LcdInit+0x2e>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 316:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 318:	77 9b       	sbis	0x0e, 7	; 14
 31a:	fe cf       	rjmp	.-4      	; 0x318 <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 320:	77 9b       	sbis	0x0e, 7	; 14
 322:	fe cf       	rjmp	.-4      	; 0x320 <st7920LcdInit+0x3c>
 324:	88 eb       	ldi	r24, 0xB8	; 184
 326:	8a 95       	dec	r24
 328:	f1 f7       	brne	.-4      	; 0x326 <st7920LcdInit+0x42>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 32a:	86 e6       	ldi	r24, 0x66	; 102
 32c:	9e e0       	ldi	r25, 0x0E	; 14
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <st7920LcdInit+0x4a>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 332:	86 e2       	ldi	r24, 0x26	; 38
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	60 e2       	ldi	r22, 0x20	; 32
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	40 e4       	ldi	r20, 0x40	; 64
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	0e 94 91 02 	call	0x522	; 0x522 <memset>
}
 342:	08 95       	ret

00000344 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 344:	af 92       	push	r10
 346:	bf 92       	push	r11
 348:	cf 92       	push	r12
 34a:	df 92       	push	r13
 34c:	ef 92       	push	r14
 34e:	ff 92       	push	r15
 350:	0f 93       	push	r16
 352:	df 93       	push	r29
 354:	cf 93       	push	r28
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	0d 85       	ldd	r16, Y+13	; 0x0d
 35c:	ae 84       	ldd	r10, Y+14	; 0x0e
 35e:	bf 84       	ldd	r11, Y+15	; 0x0f
 360:	e8 88       	ldd	r14, Y+16	; 0x10
 362:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 364:	02 95       	swap	r16
 366:	00 7f       	andi	r16, 0xF0	; 240
 368:	8c 85       	ldd	r24, Y+12	; 0x0c
 36a:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 36c:	de 01       	movw	r26, r28
 36e:	52 96       	adiw	r26, 0x12	; 18
 370:	41 c0       	rjmp	.+130    	; 0x3f4 <showLine+0xb0>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 372:	01 34       	cpi	r16, 0x41	; 65
 374:	08 f0       	brcs	.+2      	; 0x378 <showLine+0x34>
 376:	43 c0       	rjmp	.+134    	; 0x3fe <showLine+0xba>

		if(*str == '\\')
 378:	8c 35       	cpi	r24, 0x5C	; 92
 37a:	51 f4       	brne	.+20     	; 0x390 <showLine+0x4c>
		{
			str++;
 37c:	08 94       	sec
 37e:	e1 1c       	adc	r14, r1
 380:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 382:	95 01       	movw	r18, r10
 384:	20 0f       	add	r18, r16
 386:	31 1d       	adc	r19, r1
 388:	f7 01       	movw	r30, r14
 38a:	80 81       	ld	r24, Z
 38c:	f9 01       	movw	r30, r18
 38e:	2d c0       	rjmp	.+90     	; 0x3ea <showLine+0xa6>
		}
		else if(*str == '%')
 390:	85 32       	cpi	r24, 0x25	; 37
 392:	41 f5       	brne	.+80     	; 0x3e4 <showLine+0xa0>
		{
			str++;
 394:	08 94       	sec
 396:	e1 1c       	adc	r14, r1
 398:	f1 1c       	adc	r15, r1
			if (*str=='d')
 39a:	f7 01       	movw	r30, r14
 39c:	80 81       	ld	r24, Z
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	c1 f4       	brne	.+48     	; 0x3d2 <showLine+0x8e>
			{
				str++;
 3a2:	08 94       	sec
 3a4:	e1 1c       	adc	r14, r1
 3a6:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3a8:	92 e0       	ldi	r25, 0x02	; 2
 3aa:	c9 2e       	mov	r12, r25
 3ac:	d1 2c       	mov	r13, r1
 3ae:	ca 0e       	add	r12, r26
 3b0:	db 1e       	adc	r13, r27
 3b2:	6d 91       	ld	r22, X+
 3b4:	7c 91       	ld	r23, X
 3b6:	f7 01       	movw	r30, r14
 3b8:	40 81       	ld	r20, Z
 3ba:	40 53       	subi	r20, 0x30	; 48
 3bc:	c5 01       	movw	r24, r10
 3be:	80 0f       	add	r24, r16
 3c0:	91 1d       	adc	r25, r1
 3c2:	0e 94 23 01 	call	0x246	; 0x246 <decToAscii>
				coordinate+=(*str-'0'-1);
 3c6:	01 53       	subi	r16, 0x31	; 49
 3c8:	f7 01       	movw	r30, r14
 3ca:	80 81       	ld	r24, Z
 3cc:	08 0f       	add	r16, r24
 3ce:	d6 01       	movw	r26, r12
 3d0:	0d c0       	rjmp	.+26     	; 0x3ec <showLine+0xa8>
			}
			else if(*str=='c')
 3d2:	83 36       	cpi	r24, 0x63	; 99
 3d4:	59 f4       	brne	.+22     	; 0x3ec <showLine+0xa8>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 3d6:	f5 01       	movw	r30, r10
 3d8:	e0 0f       	add	r30, r16
 3da:	f1 1d       	adc	r31, r1
 3dc:	8c 91       	ld	r24, X
 3de:	80 83       	st	Z, r24
 3e0:	12 96       	adiw	r26, 0x02	; 2
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <showLine+0xa8>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 3e4:	f5 01       	movw	r30, r10
 3e6:	e0 0f       	add	r30, r16
 3e8:	f1 1d       	adc	r31, r1
 3ea:	80 83       	st	Z, r24
		}
		str++;
 3ec:	08 94       	sec
 3ee:	e1 1c       	adc	r14, r1
 3f0:	f1 1c       	adc	r15, r1
		coordinate++;
 3f2:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 3f4:	f7 01       	movw	r30, r14
 3f6:	80 81       	ld	r24, Z
 3f8:	88 23       	and	r24, r24
 3fa:	09 f0       	breq	.+2      	; 0x3fe <showLine+0xba>
 3fc:	ba cf       	rjmp	.-140    	; 0x372 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 3fe:	cf 91       	pop	r28
 400:	df 91       	pop	r29
 402:	0f 91       	pop	r16
 404:	ff 90       	pop	r15
 406:	ef 90       	pop	r14
 408:	df 90       	pop	r13
 40a:	cf 90       	pop	r12
 40c:	bf 90       	pop	r11
 40e:	af 90       	pop	r10
 410:	08 95       	ret

00000412 <main>:
#include <avr/io.h>
#include <ws_matkey_port.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 412:	af 92       	push	r10
 414:	bf 92       	push	r11
 416:	cf 92       	push	r12
 418:	df 92       	push	r13
 41a:	ef 92       	push	r14
 41c:	ff 92       	push	r15
 41e:	0f 93       	push	r16
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
	uint8_t tmp1=0,tmp2=0;
	st7920LcdInit(); /*LCD初始化*/
 426:	0e 94 72 01 	call	0x2e4	; 0x2e4 <st7920LcdInit>
	showLine(0,0,lcd_buffer,"矩阵式键盘试验");
 42a:	00 d0       	rcall	.+0      	; 0x42c <main+0x1a>
 42c:	00 d0       	rcall	.+0      	; 0x42e <main+0x1c>
 42e:	00 d0       	rcall	.+0      	; 0x430 <main+0x1e>
 430:	ed b7       	in	r30, 0x3d	; 61
 432:	fe b7       	in	r31, 0x3e	; 62
 434:	31 96       	adiw	r30, 0x01	; 1
 436:	ad b7       	in	r26, 0x3d	; 61
 438:	be b7       	in	r27, 0x3e	; 62
 43a:	11 96       	adiw	r26, 0x01	; 1
 43c:	1c 92       	st	X, r1
 43e:	11 82       	std	Z+1, r1	; 0x01
 440:	06 e2       	ldi	r16, 0x26	; 38
 442:	11 e0       	ldi	r17, 0x01	; 1
 444:	13 83       	std	Z+3, r17	; 0x03
 446:	02 83       	std	Z+2, r16	; 0x02
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	95 83       	std	Z+5, r25	; 0x05
 44e:	84 83       	std	Z+4, r24	; 0x04
 450:	0e 94 a2 01 	call	0x344	; 0x344 <showLine>
	showLine(0,1,lcd_buffer,"键值：");
 454:	ed b7       	in	r30, 0x3d	; 61
 456:	fe b7       	in	r31, 0x3e	; 62
 458:	31 96       	adiw	r30, 0x01	; 1
 45a:	ad b7       	in	r26, 0x3d	; 61
 45c:	be b7       	in	r27, 0x3e	; 62
 45e:	11 96       	adiw	r26, 0x01	; 1
 460:	1c 92       	st	X, r1
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	81 83       	std	Z+1, r24	; 0x01
 466:	13 83       	std	Z+3, r17	; 0x03
 468:	02 83       	std	Z+2, r16	; 0x02
 46a:	8f e0       	ldi	r24, 0x0F	; 15
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	95 83       	std	Z+5, r25	; 0x05
 470:	84 83       	std	Z+4, r24	; 0x04
 472:	0e 94 a2 01 	call	0x344	; 0x344 <showLine>
 476:	ff 24       	eor	r15, r15
 478:	8d b7       	in	r24, 0x3d	; 61
 47a:	9e b7       	in	r25, 0x3e	; 62
 47c:	06 96       	adiw	r24, 0x06	; 6
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	9e bf       	out	0x3e, r25	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	8d bf       	out	0x3d, r24	; 61
 488:	e0 2e       	mov	r14, r16
 48a:	01 2f       	mov	r16, r17
	{
		tmp1=getKeyVal();
		if(tmp1!=tmp2)
		{
			if(tmp1==0xFF) showLine(6,1,lcd_buffer,"  ");
			else showLine(6,1,lcd_buffer,"%d2",tmp1);
 48c:	36 e0       	ldi	r19, 0x06	; 6
 48e:	a3 2e       	mov	r10, r19
 490:	bb 24       	eor	r11, r11
 492:	b3 94       	inc	r11
 494:	29 e1       	ldi	r18, 0x19	; 25
 496:	c2 2e       	mov	r12, r18
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	d2 2e       	mov	r13, r18
	while(1)
	{
		tmp1=getKeyVal();
		if(tmp1!=tmp2)
		{
			if(tmp1==0xFF) showLine(6,1,lcd_buffer,"  ");
 49c:	c6 e1       	ldi	r28, 0x16	; 22
 49e:	d1 e0       	ldi	r29, 0x01	; 1
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <main+0x92>
int main(void)
{
	uint8_t tmp1=0,tmp2=0;
	st7920LcdInit(); /*LCD初始化*/
	showLine(0,0,lcd_buffer,"矩阵式键盘试验");
	showLine(0,1,lcd_buffer,"键值：");
 4a2:	f1 2e       	mov	r15, r17
	while(1)
	{
		tmp1=getKeyVal();
 4a4:	0e 94 57 00 	call	0xae	; 0xae <getKeyVal>
 4a8:	18 2f       	mov	r17, r24
		if(tmp1!=tmp2)
 4aa:	8f 15       	cp	r24, r15
 4ac:	d1 f3       	breq	.-12     	; 0x4a2 <main+0x90>
		{
			if(tmp1==0xFF) showLine(6,1,lcd_buffer,"  ");
 4ae:	8f 3f       	cpi	r24, 0xFF	; 255
 4b0:	a9 f4       	brne	.+42     	; 0x4dc <main+0xca>
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <main+0xa2>
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <main+0xa4>
 4b6:	00 d0       	rcall	.+0      	; 0x4b8 <main+0xa6>
 4b8:	ed b7       	in	r30, 0x3d	; 61
 4ba:	fe b7       	in	r31, 0x3e	; 62
 4bc:	31 96       	adiw	r30, 0x01	; 1
 4be:	ad b7       	in	r26, 0x3d	; 61
 4c0:	be b7       	in	r27, 0x3e	; 62
 4c2:	11 96       	adiw	r26, 0x01	; 1
 4c4:	ac 92       	st	X, r10
 4c6:	b1 82       	std	Z+1, r11	; 0x01
 4c8:	e2 82       	std	Z+2, r14	; 0x02
 4ca:	03 83       	std	Z+3, r16	; 0x03
 4cc:	d5 83       	std	Z+5, r29	; 0x05
 4ce:	c4 83       	std	Z+4, r28	; 0x04
 4d0:	0e 94 a2 01 	call	0x344	; 0x344 <showLine>
 4d4:	8d b7       	in	r24, 0x3d	; 61
 4d6:	9e b7       	in	r25, 0x3e	; 62
 4d8:	06 96       	adiw	r24, 0x06	; 6
 4da:	19 c0       	rjmp	.+50     	; 0x50e <__stack+0xf>
			else showLine(6,1,lcd_buffer,"%d2",tmp1);
 4dc:	ad b7       	in	r26, 0x3d	; 61
 4de:	be b7       	in	r27, 0x3e	; 62
 4e0:	18 97       	sbiw	r26, 0x08	; 8
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	be bf       	out	0x3e, r27	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	ad bf       	out	0x3d, r26	; 61
 4ec:	ed b7       	in	r30, 0x3d	; 61
 4ee:	fe b7       	in	r31, 0x3e	; 62
 4f0:	31 96       	adiw	r30, 0x01	; 1
 4f2:	11 96       	adiw	r26, 0x01	; 1
 4f4:	ac 92       	st	X, r10
 4f6:	b1 82       	std	Z+1, r11	; 0x01
 4f8:	e2 82       	std	Z+2, r14	; 0x02
 4fa:	03 83       	std	Z+3, r16	; 0x03
 4fc:	d5 82       	std	Z+5, r13	; 0x05
 4fe:	c4 82       	std	Z+4, r12	; 0x04
 500:	86 83       	std	Z+6, r24	; 0x06
 502:	17 82       	std	Z+7, r1	; 0x07
 504:	0e 94 a2 01 	call	0x344	; 0x344 <showLine>
 508:	8d b7       	in	r24, 0x3d	; 61
 50a:	9e b7       	in	r25, 0x3e	; 62
 50c:	08 96       	adiw	r24, 0x08	; 8
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	9e bf       	out	0x3e, r25	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	8d bf       	out	0x3d, r24	; 61
			refreshLCD(lcd_buffer); /*刷新LCD*/
 518:	86 e2       	ldi	r24, 0x26	; 38
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	0e 94 a9 00 	call	0x152	; 0x152 <refreshLCD>
 520:	c0 cf       	rjmp	.-128    	; 0x4a2 <main+0x90>

00000522 <memset>:
 522:	dc 01       	movw	r26, r24
 524:	01 c0       	rjmp	.+2      	; 0x528 <memset+0x6>
 526:	6d 93       	st	X+, r22
 528:	41 50       	subi	r20, 0x01	; 1
 52a:	50 40       	sbci	r21, 0x00	; 0
 52c:	e0 f7       	brcc	.-8      	; 0x526 <memset+0x4>
 52e:	08 95       	ret

00000530 <__udivmodhi4>:
 530:	aa 1b       	sub	r26, r26
 532:	bb 1b       	sub	r27, r27
 534:	51 e1       	ldi	r21, 0x11	; 17
 536:	07 c0       	rjmp	.+14     	; 0x546 <__udivmodhi4_ep>

00000538 <__udivmodhi4_loop>:
 538:	aa 1f       	adc	r26, r26
 53a:	bb 1f       	adc	r27, r27
 53c:	a6 17       	cp	r26, r22
 53e:	b7 07       	cpc	r27, r23
 540:	10 f0       	brcs	.+4      	; 0x546 <__udivmodhi4_ep>
 542:	a6 1b       	sub	r26, r22
 544:	b7 0b       	sbc	r27, r23

00000546 <__udivmodhi4_ep>:
 546:	88 1f       	adc	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	5a 95       	dec	r21
 54c:	a9 f7       	brne	.-22     	; 0x538 <__udivmodhi4_loop>
 54e:	80 95       	com	r24
 550:	90 95       	com	r25
 552:	bc 01       	movw	r22, r24
 554:	cd 01       	movw	r24, r26
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>
