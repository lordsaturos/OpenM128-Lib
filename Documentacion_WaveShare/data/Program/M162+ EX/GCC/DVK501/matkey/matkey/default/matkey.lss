
matkey.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000106  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000041  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000124  00000000  00000000  000001e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d4  00000000  00000000  00000307  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000154  00000000  00000000  000003db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ad  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000005a  00000000  00000000  0000060d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  6c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e0       	ldi	r30, 0x06	; 6
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a8 30       	cpi	r26, 0x08	; 8
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>
  92:	0e 94 77 00 	call	0xee	; 0xee <main>
  96:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <getKeyVal>:
const uint8_t getSta_[4]={0x70,0xb0,0xd0,0xe0};  

uint8_t getKeyVal()
{
    uint8_t i,j,getSta,keyVal;
	MATKEY_PORT=0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8b bb       	out	0x1b, r24	; 27
    MATKEY_DDR=0x0F;
  a2:	8f e0       	ldi	r24, 0x0F	; 15
  a4:	8a bb       	out	0x1a, r24	; 26
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
    for(i=0;i<4;i++)              
    {               			
        MATKEY_PORT = setSta_[i];
  aa:	f9 01       	movw	r30, r18
  ac:	e0 50       	subi	r30, 0x00	; 0
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	90 81       	ld	r25, Z
  b2:	9b bb       	out	0x1b, r25	; 27
        if(MATKEY_PIN!=setSta_[i])
  b4:	89 b3       	in	r24, 0x19	; 25
  b6:	89 17       	cp	r24, r25
  b8:	99 f0       	breq	.+38     	; 0xe0 <getKeyVal+0x42>
        {
            getSta=MATKEY_PIN&0xf0;
  ba:	49 b3       	in	r20, 0x19	; 25
  bc:	40 7f       	andi	r20, 0xF0	; 240
  be:	e4 e0       	ldi	r30, 0x04	; 4
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
            for(j=0;j<4;j++)    
                if(getSta==getSta_[j])                                 
  c4:	80 81       	ld	r24, Z
  c6:	48 17       	cp	r20, r24
  c8:	39 f4       	brne	.+14     	; 0xd8 <getKeyVal+0x3a>
            	{
                    keyVal=j+i*4;
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	89 2f       	mov	r24, r25
  d4:	82 0f       	add	r24, r18
  d6:	08 95       	ret
    {               			
        MATKEY_PORT = setSta_[i];
        if(MATKEY_PIN!=setSta_[i])
        {
            getSta=MATKEY_PIN&0xf0;
            for(j=0;j<4;j++)    
  d8:	9f 5f       	subi	r25, 0xFF	; 255
  da:	31 96       	adiw	r30, 0x01	; 1
  dc:	94 30       	cpi	r25, 0x04	; 4
  de:	91 f7       	brne	.-28     	; 0xc4 <getKeyVal+0x26>
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t getKeyVal()
{
    uint8_t i,j,getSta,keyVal;
	MATKEY_PORT=0xFF;
    MATKEY_DDR=0x0F;
    for(i=0;i<4;i++)              
  e4:	24 30       	cpi	r18, 0x04	; 4
  e6:	31 05       	cpc	r19, r1
  e8:	01 f7       	brne	.-64     	; 0xaa <getKeyVal+0xc>
  ea:	8f ef       	ldi	r24, 0xFF	; 255
                    return keyVal;
            	}
        }
    }
    return 0xFF;
}
  ec:	08 95       	ret

000000ee <main>:
#include <ws_matkey_port.h>

int main(void)
{
	uint8_t tmp;
	DDRB=0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	87 bb       	out	0x17, r24	; 23
	while(1)
	{
		tmp=getKeyVal();
  f2:	0e 94 4f 00 	call	0x9e	; 0x9e <getKeyVal>
		if(tmp==0xFF) PORTB=0x00;
  f6:	8f 3f       	cpi	r24, 0xFF	; 255
  f8:	11 f4       	brne	.+4      	; 0xfe <main+0x10>
  fa:	18 ba       	out	0x18, r1	; 24
  fc:	fa cf       	rjmp	.-12     	; 0xf2 <main+0x4>
		else PORTB=tmp;
  fe:	88 bb       	out	0x18, r24	; 24
 100:	f8 cf       	rjmp	.-16     	; 0xf2 <main+0x4>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
