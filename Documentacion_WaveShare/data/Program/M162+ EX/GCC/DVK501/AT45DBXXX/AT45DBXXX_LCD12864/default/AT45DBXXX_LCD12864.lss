
AT45DBXXX_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000005fc  00000690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080011c  0080011c  000006ac  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e6  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b34  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000209  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000091e  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020e  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000354  00000000  00000000  000020ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b8  00000000  00000000  00002442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec ef       	ldi	r30, 0xFC	; 252
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	ac 31       	cpi	r26, 0x1C	; 28
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	ac e1       	ldi	r26, 0x1C	; 28
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 35       	cpi	r26, 0x5C	; 92
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
  a6:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <spiInitAt45db>:
#elif defined(_DVK501_M162_EX_)
#define CLR_SS_AT45DB() cbi(PORTB,4)
#define SET_SS_AT45DB() sbi(PORTB,4)
void spiInitAt45db(void)
{
	DDRB|=0xF0;
  ae:	87 b3       	in	r24, 0x17	; 23
  b0:	80 6f       	ori	r24, 0xF0	; 240
  b2:	87 bb       	out	0x17, r24	; 23
	SPCR=0x50;
  b4:	80 e5       	ldi	r24, 0x50	; 80
  b6:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x01;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	8e b9       	out	0x0e, r24	; 14
}
  bc:	08 95       	ret

000000be <spi_transmit_byte>:
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  be:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  c0:	77 9b       	sbis	0x0e, 7	; 14
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <spi_transmit_byte+0x2>
}
  c4:	08 95       	ret

000000c6 <write_buffer>:
//============================================================
void write_buffer(uint16_t BufferOffset,uint8_t data)
{			
  c6:	28 2f       	mov	r18, r24
	CLR_SS_AT45DB();		
  c8:	c4 98       	cbi	0x18, 4	; 24
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  ca:	84 e8       	ldi	r24, 0x84	; 132
  cc:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  ce:	77 9b       	sbis	0x0e, 7	; 14
  d0:	fe cf       	rjmp	.-4      	; 0xce <write_buffer+0x8>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  d6:	77 9b       	sbis	0x0e, 7	; 14
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <write_buffer+0x10>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  da:	9f b9       	out	0x0f, r25	; 15
    while(!(SPSR&0x80));
  dc:	77 9b       	sbis	0x0e, 7	; 14
  de:	fe cf       	rjmp	.-4      	; 0xdc <write_buffer+0x16>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  e0:	2f b9       	out	0x0f, r18	; 15
    while(!(SPSR&0x80));
  e2:	77 9b       	sbis	0x0e, 7	; 14
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <write_buffer+0x1c>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  e6:	6f b9       	out	0x0f, r22	; 15
    while(!(SPSR&0x80));
  e8:	77 9b       	sbis	0x0e, 7	; 14
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <write_buffer+0x22>
	spi_transmit_byte(0x84);//84			  						
	spi_transmit_byte(0xff);						
	spi_transmit_byte((uint8_t)(BufferOffset>>8));	
	spi_transmit_byte((uint8_t)BufferOffset);		
	spi_transmit_byte(data);		
	SET_SS_AT45DB();	
  ec:	c4 9a       	sbi	0x18, 4	; 24
}
  ee:	08 95       	ret

000000f0 <read_buffer>:
//================================================================
uint8_t read_buffer(uint16_t BufferOffset)
{		
  f0:	28 2f       	mov	r18, r24
    uint8_t temp;
	CLR_SS_AT45DB();
  f2:	c4 98       	cbi	0x18, 4	; 24
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  f4:	81 ed       	ldi	r24, 0xD1	; 209
  f6:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  f8:	77 9b       	sbis	0x0e, 7	; 14
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <read_buffer+0x8>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
 100:	77 9b       	sbis	0x0e, 7	; 14
 102:	fe cf       	rjmp	.-4      	; 0x100 <read_buffer+0x10>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
 104:	9f b9       	out	0x0f, r25	; 15
    while(!(SPSR&0x80));
 106:	77 9b       	sbis	0x0e, 7	; 14
 108:	fe cf       	rjmp	.-4      	; 0x106 <read_buffer+0x16>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
 10a:	2f b9       	out	0x0f, r18	; 15
    while(!(SPSR&0x80));
 10c:	77 9b       	sbis	0x0e, 7	; 14
 10e:	fe cf       	rjmp	.-4      	; 0x10c <read_buffer+0x1c>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
 114:	77 9b       	sbis	0x0e, 7	; 14
 116:	fe cf       	rjmp	.-4      	; 0x114 <read_buffer+0x24>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
 11c:	77 9b       	sbis	0x0e, 7	; 14
 11e:	fe cf       	rjmp	.-4      	; 0x11c <read_buffer+0x2c>
	spi_transmit_byte(0xff);
	spi_transmit_byte((uint8_t)(BufferOffset>>8));
	spi_transmit_byte((uint8_t)BufferOffset);
	spi_transmit_byte(0xff);
	spi_transmit_byte(0xff);
	temp=SPDR;	  
 120:	8f b1       	in	r24, 0x0f	; 15
	SET_SS_AT45DB();
 122:	c4 9a       	sbi	0x18, 4	; 24
    return temp;								
}
 124:	08 95       	ret

00000126 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 126:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 128:	77 9b       	sbis	0x0e, 7	; 14
 12a:	fe cf       	rjmp	.-4      	; 0x128 <spiSendChar+0x2>
}
 12c:	08 95       	ret

0000012e <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 12e:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 130:	88 ef       	ldi	r24, 0xF8	; 248
 132:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 134:	77 9b       	sbis	0x0e, 7	; 14
 136:	fe cf       	rjmp	.-4      	; 0x134 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 138:	89 2f       	mov	r24, r25
 13a:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 13c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 13e:	77 9b       	sbis	0x0e, 7	; 14
 140:	fe cf       	rjmp	.-4      	; 0x13e <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 142:	92 95       	swap	r25
 144:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 146:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 148:	77 9b       	sbis	0x0e, 7	; 14
 14a:	fe cf       	rjmp	.-4      	; 0x148 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 14c:	88 eb       	ldi	r24, 0xB8	; 184
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 152:	08 95       	ret

00000154 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 154:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 156:	8a ef       	ldi	r24, 0xFA	; 250
 158:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 15a:	77 9b       	sbis	0x0e, 7	; 14
 15c:	fe cf       	rjmp	.-4      	; 0x15a <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 15e:	89 2f       	mov	r24, r25
 160:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 162:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 164:	77 9b       	sbis	0x0e, 7	; 14
 166:	fe cf       	rjmp	.-4      	; 0x164 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 168:	92 95       	swap	r25
 16a:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 16c:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 16e:	77 9b       	sbis	0x0e, 7	; 14
 170:	fe cf       	rjmp	.-4      	; 0x16e <sendDataST7920+0x1a>
 172:	88 eb       	ldi	r24, 0xB8	; 184
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 178:	08 95       	ret

0000017a <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 17a:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 17c:	88 ef       	ldi	r24, 0xF8	; 248
 17e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 180:	77 9b       	sbis	0x0e, 7	; 14
 182:	fe cf       	rjmp	.-4      	; 0x180 <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 184:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 186:	77 9b       	sbis	0x0e, 7	; 14
 188:	fe cf       	rjmp	.-4      	; 0x186 <refreshLCD+0xc>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 18a:	80 e2       	ldi	r24, 0x20	; 32
 18c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 18e:	77 9b       	sbis	0x0e, 7	; 14
 190:	fe cf       	rjmp	.-4      	; 0x18e <refreshLCD+0x14>
 192:	88 eb       	ldi	r24, 0xB8	; 184
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <refreshLCD+0x1a>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 19c:	6a ef       	ldi	r22, 0xFA	; 250
 19e:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1a0:	fa 01       	movw	r30, r20
 1a2:	e2 0f       	add	r30, r18
 1a4:	f3 1f       	adc	r31, r19
 1a6:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1a8:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));
 1aa:	77 9b       	sbis	0x0e, 7	; 14
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <refreshLCD+0x30>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1ae:	8e 2f       	mov	r24, r30
 1b0:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1b2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1b4:	77 9b       	sbis	0x0e, 7	; 14
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <refreshLCD+0x3a>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1b8:	e2 95       	swap	r30
 1ba:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1bc:	ef b9       	out	0x0f, r30	; 15
	while (!(SPSR & (1<<SPIF)));
 1be:	77 9b       	sbis	0x0e, 7	; 14
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <refreshLCD+0x44>
 1c2:	89 2f       	mov	r24, r25
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <refreshLCD+0x4a>
 1c8:	2f 5f       	subi	r18, 0xFF	; 255
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 1cc:	20 31       	cpi	r18, 0x10	; 16
 1ce:	31 05       	cpc	r19, r1
 1d0:	39 f7       	brne	.-50     	; 0x1a0 <refreshLCD+0x26>
 1d2:	da 01       	movw	r26, r20
 1d4:	fa 01       	movw	r30, r20
 1d6:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1d8:	3a ef       	ldi	r19, 0xFA	; 250
 1da:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1dc:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1de:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 1e0:	77 9b       	sbis	0x0e, 7	; 14
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <refreshLCD+0x66>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1e4:	82 2f       	mov	r24, r18
 1e6:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1e8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1ea:	77 9b       	sbis	0x0e, 7	; 14
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <refreshLCD+0x70>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1ee:	22 95       	swap	r18
 1f0:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1f2:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 1f4:	77 9b       	sbis	0x0e, 7	; 14
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <refreshLCD+0x7a>
 1f8:	89 2f       	mov	r24, r25
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <refreshLCD+0x80>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 1fe:	6f 5f       	subi	r22, 0xFF	; 255
 200:	31 96       	adiw	r30, 0x01	; 1
 202:	60 33       	cpi	r22, 0x30	; 48
 204:	59 f7       	brne	.-42     	; 0x1dc <refreshLCD+0x62>
 206:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 208:	7a ef       	ldi	r23, 0xFA	; 250
 20a:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 20c:	50 96       	adiw	r26, 0x10	; 16
 20e:	2c 91       	ld	r18, X
 210:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 212:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));
 214:	77 9b       	sbis	0x0e, 7	; 14
 216:	fe cf       	rjmp	.-4      	; 0x214 <refreshLCD+0x9a>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 218:	82 2f       	mov	r24, r18
 21a:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 21c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 21e:	77 9b       	sbis	0x0e, 7	; 14
 220:	fe cf       	rjmp	.-4      	; 0x21e <refreshLCD+0xa4>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 222:	22 95       	swap	r18
 224:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 226:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));
 228:	77 9b       	sbis	0x0e, 7	; 14
 22a:	fe cf       	rjmp	.-4      	; 0x228 <refreshLCD+0xae>
 22c:	89 2f       	mov	r24, r25
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <refreshLCD+0xb4>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 232:	3f 5f       	subi	r19, 0xFF	; 255
 234:	11 96       	adiw	r26, 0x01	; 1
 236:	30 32       	cpi	r19, 0x20	; 32
 238:	49 f7       	brne	.-46     	; 0x20c <refreshLCD+0x92>
 23a:	fa 01       	movw	r30, r20
 23c:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 23e:	3a ef       	ldi	r19, 0xFA	; 250
 240:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 242:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 244:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));
 246:	77 9b       	sbis	0x0e, 7	; 14
 248:	fe cf       	rjmp	.-4      	; 0x246 <refreshLCD+0xcc>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 24a:	89 2f       	mov	r24, r25
 24c:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 24e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 250:	77 9b       	sbis	0x0e, 7	; 14
 252:	fe cf       	rjmp	.-4      	; 0x250 <refreshLCD+0xd6>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 254:	92 95       	swap	r25
 256:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 258:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 25a:	77 9b       	sbis	0x0e, 7	; 14
 25c:	fe cf       	rjmp	.-4      	; 0x25a <refreshLCD+0xe0>
 25e:	82 2f       	mov	r24, r18
 260:	8a 95       	dec	r24
 262:	f1 f7       	brne	.-4      	; 0x260 <refreshLCD+0xe6>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
 264:	6f 5f       	subi	r22, 0xFF	; 255
 266:	31 96       	adiw	r30, 0x01	; 1
 268:	6f 33       	cpi	r22, 0x3F	; 63
 26a:	59 f7       	brne	.-42     	; 0x242 <refreshLCD+0xc8>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 26c:	08 95       	ret

0000026e <decToAscii>:
*	width是转换宽度
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	fb 01       	movw	r30, r22
 274:	ec 01       	movw	r28, r24
			case 1:
			{
				*(str+num) = (dec+'0');
				break;
			}
			default: *(str+num) = '0';
 276:	20 e3       	ldi	r18, 0x30	; 48
 278:	43 c0       	rjmp	.+134    	; 0x300 <decToAscii+0x92>
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
	{
		switch(width)
 27a:	43 30       	cpi	r20, 0x03	; 3
 27c:	21 f1       	breq	.+72     	; 0x2c6 <decToAscii+0x58>
 27e:	44 30       	cpi	r20, 0x04	; 4
 280:	28 f4       	brcc	.+10     	; 0x28c <decToAscii+0x1e>
 282:	41 30       	cpi	r20, 0x01	; 1
 284:	b1 f1       	breq	.+108    	; 0x2f2 <decToAscii+0x84>
 286:	42 30       	cpi	r20, 0x02	; 2
 288:	c1 f5       	brne	.+112    	; 0x2fa <decToAscii+0x8c>
 28a:	28 c0       	rjmp	.+80     	; 0x2dc <decToAscii+0x6e>
 28c:	44 30       	cpi	r20, 0x04	; 4
 28e:	69 f0       	breq	.+26     	; 0x2aa <decToAscii+0x3c>
 290:	45 30       	cpi	r20, 0x05	; 5
 292:	99 f5       	brne	.+102    	; 0x2fa <decToAscii+0x8c>
		{
			case 5:
			{
				*(str+num) = (dec/10000+'0');
 294:	cf 01       	movw	r24, r30
 296:	60 e1       	ldi	r22, 0x10	; 16
 298:	77 e2       	ldi	r23, 0x27	; 39
 29a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__udivmodhi4>
 29e:	60 5d       	subi	r22, 0xD0	; 208
 2a0:	68 83       	st	Y, r22
				dec%=10000;
 2a2:	cf 01       	movw	r24, r30
 2a4:	60 e1       	ldi	r22, 0x10	; 16
 2a6:	77 e2       	ldi	r23, 0x27	; 39
 2a8:	0a c0       	rjmp	.+20     	; 0x2be <decToAscii+0x50>
				break;
			}			
			case 4:
			{
				*(str+num) = (dec/1000+'0');
 2aa:	cf 01       	movw	r24, r30
 2ac:	68 ee       	ldi	r22, 0xE8	; 232
 2ae:	73 e0       	ldi	r23, 0x03	; 3
 2b0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__udivmodhi4>
 2b4:	60 5d       	subi	r22, 0xD0	; 208
 2b6:	68 83       	st	Y, r22
				dec%=1000;
 2b8:	cf 01       	movw	r24, r30
 2ba:	68 ee       	ldi	r22, 0xE8	; 232
 2bc:	73 e0       	ldi	r23, 0x03	; 3
 2be:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__udivmodhi4>
 2c2:	fc 01       	movw	r30, r24
 2c4:	1b c0       	rjmp	.+54     	; 0x2fc <decToAscii+0x8e>
				break;
			}
			case 3:
			{
				*(str+num) = (dec/100+'0');
 2c6:	cf 01       	movw	r24, r30
 2c8:	64 e6       	ldi	r22, 0x64	; 100
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__udivmodhi4>
 2d0:	60 5d       	subi	r22, 0xD0	; 208
 2d2:	68 83       	st	Y, r22
				dec%=100;
 2d4:	cf 01       	movw	r24, r30
 2d6:	64 e6       	ldi	r22, 0x64	; 100
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	f1 cf       	rjmp	.-30     	; 0x2be <decToAscii+0x50>
				break;
			}
			case 2:
			{
				*(str+num) = (dec/10+'0');
 2dc:	cf 01       	movw	r24, r30
 2de:	6a e0       	ldi	r22, 0x0A	; 10
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__udivmodhi4>
 2e6:	60 5d       	subi	r22, 0xD0	; 208
 2e8:	68 83       	st	Y, r22
				dec%=10;
 2ea:	cf 01       	movw	r24, r30
 2ec:	6a e0       	ldi	r22, 0x0A	; 10
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	e6 cf       	rjmp	.-52     	; 0x2be <decToAscii+0x50>
				break;
			}
			case 1:
			{
				*(str+num) = (dec+'0');
 2f2:	e0 5d       	subi	r30, 0xD0	; 208
 2f4:	e8 83       	st	Y, r30
 2f6:	e0 53       	subi	r30, 0x30	; 48
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <decToAscii+0x8e>
				break;
			}
			default: *(str+num) = '0';
 2fa:	28 83       	st	Y, r18
		}
		width--;
 2fc:	41 50       	subi	r20, 0x01	; 1
 2fe:	21 96       	adiw	r28, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
 300:	44 23       	and	r20, r20
 302:	09 f0       	breq	.+2      	; 0x306 <decToAscii+0x98>
 304:	ba cf       	rjmp	.-140    	; 0x27a <decToAscii+0xc>
			default: *(str+num) = '0';
		}
		width--;
		num++;
	}
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <st7920LcdInit>:

/*Hardware Environment：DVK501 && M162+ EX*/
#elif defined(_DVK501_M162_EX_)
void st7920LcdInit(void)
{
DDRB|=0xF0;
 30c:	87 b3       	in	r24, 0x17	; 23
 30e:	80 6f       	ori	r24, 0xF0	; 240
 310:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 312:	80 e5       	ldi	r24, 0x50	; 80
 314:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	8e b9       	out	0x0e, r24	; 14
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 31a:	88 ef       	ldi	r24, 0xF8	; 248
 31c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 31e:	77 9b       	sbis	0x0e, 7	; 14
 320:	fe cf       	rjmp	.-4      	; 0x31e <st7920LcdInit+0x12>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 322:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 324:	77 9b       	sbis	0x0e, 7	; 14
 326:	fe cf       	rjmp	.-4      	; 0x324 <st7920LcdInit+0x18>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 328:	80 ec       	ldi	r24, 0xC0	; 192
 32a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 32c:	77 9b       	sbis	0x0e, 7	; 14
 32e:	fe cf       	rjmp	.-4      	; 0x32c <st7920LcdInit+0x20>
 330:	88 eb       	ldi	r24, 0xB8	; 184
 332:	8a 95       	dec	r24
 334:	f1 f7       	brne	.-4      	; 0x332 <st7920LcdInit+0x26>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 336:	88 ef       	ldi	r24, 0xF8	; 248
 338:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 33a:	77 9b       	sbis	0x0e, 7	; 14
 33c:	fe cf       	rjmp	.-4      	; 0x33a <st7920LcdInit+0x2e>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 33e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));
 340:	77 9b       	sbis	0x0e, 7	; 14
 342:	fe cf       	rjmp	.-4      	; 0x340 <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 344:	80 e1       	ldi	r24, 0x10	; 16
 346:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 348:	77 9b       	sbis	0x0e, 7	; 14
 34a:	fe cf       	rjmp	.-4      	; 0x348 <st7920LcdInit+0x3c>
 34c:	88 eb       	ldi	r24, 0xB8	; 184
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <st7920LcdInit+0x42>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 352:	86 e6       	ldi	r24, 0x66	; 102
 354:	9e e0       	ldi	r25, 0x0E	; 14
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <st7920LcdInit+0x4a>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 35a:	8c e1       	ldi	r24, 0x1C	; 28
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	60 e2       	ldi	r22, 0x20	; 32
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	40 e4       	ldi	r20, 0x40	; 64
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <memset>
}
 36a:	08 95       	ret

0000036c <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 36c:	af 92       	push	r10
 36e:	bf 92       	push	r11
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	df 93       	push	r29
 37c:	cf 93       	push	r28
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	0d 85       	ldd	r16, Y+13	; 0x0d
 384:	ae 84       	ldd	r10, Y+14	; 0x0e
 386:	bf 84       	ldd	r11, Y+15	; 0x0f
 388:	e8 88       	ldd	r14, Y+16	; 0x10
 38a:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 38c:	02 95       	swap	r16
 38e:	00 7f       	andi	r16, 0xF0	; 240
 390:	8c 85       	ldd	r24, Y+12	; 0x0c
 392:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 394:	de 01       	movw	r26, r28
 396:	52 96       	adiw	r26, 0x12	; 18
 398:	41 c0       	rjmp	.+130    	; 0x41c <showLine+0xb0>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 39a:	01 34       	cpi	r16, 0x41	; 65
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <showLine+0x34>
 39e:	43 c0       	rjmp	.+134    	; 0x426 <showLine+0xba>

		if(*str == '\\')
 3a0:	8c 35       	cpi	r24, 0x5C	; 92
 3a2:	51 f4       	brne	.+20     	; 0x3b8 <showLine+0x4c>
		{
			str++;
 3a4:	08 94       	sec
 3a6:	e1 1c       	adc	r14, r1
 3a8:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 3aa:	95 01       	movw	r18, r10
 3ac:	20 0f       	add	r18, r16
 3ae:	31 1d       	adc	r19, r1
 3b0:	f7 01       	movw	r30, r14
 3b2:	80 81       	ld	r24, Z
 3b4:	f9 01       	movw	r30, r18
 3b6:	2d c0       	rjmp	.+90     	; 0x412 <showLine+0xa6>
		}
		else if(*str == '%')
 3b8:	85 32       	cpi	r24, 0x25	; 37
 3ba:	41 f5       	brne	.+80     	; 0x40c <showLine+0xa0>
		{
			str++;
 3bc:	08 94       	sec
 3be:	e1 1c       	adc	r14, r1
 3c0:	f1 1c       	adc	r15, r1
			if (*str=='d')
 3c2:	f7 01       	movw	r30, r14
 3c4:	80 81       	ld	r24, Z
 3c6:	84 36       	cpi	r24, 0x64	; 100
 3c8:	c1 f4       	brne	.+48     	; 0x3fa <showLine+0x8e>
			{
				str++;
 3ca:	08 94       	sec
 3cc:	e1 1c       	adc	r14, r1
 3ce:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	c8 2e       	mov	r12, r24
 3d4:	d1 2c       	mov	r13, r1
 3d6:	ca 0e       	add	r12, r26
 3d8:	db 1e       	adc	r13, r27
 3da:	6d 91       	ld	r22, X+
 3dc:	7c 91       	ld	r23, X
 3de:	f7 01       	movw	r30, r14
 3e0:	40 81       	ld	r20, Z
 3e2:	40 53       	subi	r20, 0x30	; 48
 3e4:	c5 01       	movw	r24, r10
 3e6:	80 0f       	add	r24, r16
 3e8:	91 1d       	adc	r25, r1
 3ea:	0e 94 37 01 	call	0x26e	; 0x26e <decToAscii>
				coordinate+=(*str-'0'-1);
 3ee:	01 53       	subi	r16, 0x31	; 49
 3f0:	f7 01       	movw	r30, r14
 3f2:	80 81       	ld	r24, Z
 3f4:	08 0f       	add	r16, r24
 3f6:	d6 01       	movw	r26, r12
 3f8:	0d c0       	rjmp	.+26     	; 0x414 <showLine+0xa8>
			}
			else if(*str=='c')
 3fa:	83 36       	cpi	r24, 0x63	; 99
 3fc:	59 f4       	brne	.+22     	; 0x414 <showLine+0xa8>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 3fe:	f5 01       	movw	r30, r10
 400:	e0 0f       	add	r30, r16
 402:	f1 1d       	adc	r31, r1
 404:	8c 91       	ld	r24, X
 406:	80 83       	st	Z, r24
 408:	12 96       	adiw	r26, 0x02	; 2
 40a:	04 c0       	rjmp	.+8      	; 0x414 <showLine+0xa8>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 40c:	f5 01       	movw	r30, r10
 40e:	e0 0f       	add	r30, r16
 410:	f1 1d       	adc	r31, r1
 412:	80 83       	st	Z, r24
		}
		str++;
 414:	08 94       	sec
 416:	e1 1c       	adc	r14, r1
 418:	f1 1c       	adc	r15, r1
		coordinate++;
 41a:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 41c:	f7 01       	movw	r30, r14
 41e:	80 81       	ld	r24, Z
 420:	88 23       	and	r24, r24
 422:	09 f0       	breq	.+2      	; 0x426 <showLine+0xba>
 424:	ba cf       	rjmp	.-140    	; 0x39a <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 426:	cf 91       	pop	r28
 428:	df 91       	pop	r29
 42a:	0f 91       	pop	r16
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	df 90       	pop	r13
 432:	cf 90       	pop	r12
 434:	bf 90       	pop	r11
 436:	af 90       	pop	r10
 438:	08 95       	ret

0000043a <main>:
#include <util/delay.h>
#include <ws_at45dbxxx_port.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 43a:	5f 92       	push	r5
 43c:	6f 92       	push	r6
 43e:	7f 92       	push	r7
 440:	8f 92       	push	r8
 442:	9f 92       	push	r9
 444:	af 92       	push	r10
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
 45c:	cf 5f       	subi	r28, 0xFF	; 255
 45e:	d0 40       	sbci	r29, 0x00	; 0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	de bf       	out	0x3e, r29	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	cd bf       	out	0x3d, r28	; 61
	uint8_t num;
	uint8_t tmp[255];
	DDRA=0xFF;
 46a:	8f ef       	ldi	r24, 0xFF	; 255
 46c:	8a bb       	out	0x1a, r24	; 26
#elif defined(_DVK501_M162_EX_)
#define CLR_SS_AT45DB() cbi(PORTB,4)
#define SET_SS_AT45DB() sbi(PORTB,4)
void spiInitAt45db(void)
{
	DDRB|=0xF0;
 46e:	87 b3       	in	r24, 0x17	; 23
 470:	80 6f       	ori	r24, 0xF0	; 240
 472:	87 bb       	out	0x17, r24	; 23
	SPCR=0x50;
 474:	80 e5       	ldi	r24, 0x50	; 80
 476:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x01;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	8e b9       	out	0x0e, r24	; 14
 47c:	00 e0       	ldi	r16, 0x00	; 0
 47e:	10 e0       	ldi	r17, 0x00	; 0
 480:	63 e3       	ldi	r22, 0x33	; 51
 482:	e6 2e       	mov	r14, r22
 484:	67 e0       	ldi	r22, 0x07	; 7
 486:	f6 2e       	mov	r15, r22
	spiInitAt45db();
	for(num=0;num<255;num++) /*写入flash*/
	{
		write_buffer((uint16_t)num,num);
 488:	c8 01       	movw	r24, r16
 48a:	60 2f       	mov	r22, r16
 48c:	0e 94 63 00 	call	0xc6	; 0xc6 <write_buffer>
 490:	c7 01       	movw	r24, r14
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <main+0x58>
 496:	0f 5f       	subi	r16, 0xFF	; 255
 498:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint8_t num;
	uint8_t tmp[255];
	DDRA=0xFF;
	spiInitAt45db();
	for(num=0;num<255;num++) /*写入flash*/
 49a:	0f 3f       	cpi	r16, 0xFF	; 255
 49c:	11 05       	cpc	r17, r1
 49e:	a1 f7       	brne	.-24     	; 0x488 <main+0x4e>
 4a0:	00 e0       	ldi	r16, 0x00	; 0
 4a2:	10 e0       	ldi	r17, 0x00	; 0
		write_buffer((uint16_t)num,num);
		_delay_ms(1);
	}
	for(num=0;num<255;num++) /*读出flash*/
	{
		tmp[num]=read_buffer(num);
 4a4:	6e 01       	movw	r12, r28
 4a6:	08 94       	sec
 4a8:	c1 1c       	adc	r12, r1
 4aa:	d1 1c       	adc	r13, r1
 4ac:	53 e3       	ldi	r21, 0x33	; 51
 4ae:	e5 2e       	mov	r14, r21
 4b0:	57 e0       	ldi	r21, 0x07	; 7
 4b2:	f5 2e       	mov	r15, r21
 4b4:	c8 01       	movw	r24, r16
 4b6:	0e 94 78 00 	call	0xf0	; 0xf0 <read_buffer>
 4ba:	f6 01       	movw	r30, r12
 4bc:	e0 0f       	add	r30, r16
 4be:	f1 1f       	adc	r31, r17
 4c0:	80 83       	st	Z, r24
 4c2:	c7 01       	movw	r24, r14
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <main+0x8a>
 4c8:	0f 5f       	subi	r16, 0xFF	; 255
 4ca:	1f 4f       	sbci	r17, 0xFF	; 255
	for(num=0;num<255;num++) /*写入flash*/
	{
		write_buffer((uint16_t)num,num);
		_delay_ms(1);
	}
	for(num=0;num<255;num++) /*读出flash*/
 4cc:	0f 3f       	cpi	r16, 0xFF	; 255
 4ce:	11 05       	cpc	r17, r1
 4d0:	89 f7       	brne	.-30     	; 0x4b4 <main+0x7a>
	{
		tmp[num]=read_buffer(num);
		_delay_ms(1);
	}
	st7920LcdInit(); /*LCD初始化*/
 4d2:	0e 94 86 01 	call	0x30c	; 0x30c <st7920LcdInit>
	showLine(0,0,lcd_buffer,"深圳微雪电子");
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <main+0x9e>
 4d8:	00 d0       	rcall	.+0      	; 0x4da <main+0xa0>
 4da:	00 d0       	rcall	.+0      	; 0x4dc <main+0xa2>
 4dc:	ed b7       	in	r30, 0x3d	; 61
 4de:	fe b7       	in	r31, 0x3e	; 62
 4e0:	31 96       	adiw	r30, 0x01	; 1
 4e2:	ad b7       	in	r26, 0x3d	; 61
 4e4:	be b7       	in	r27, 0x3e	; 62
 4e6:	11 96       	adiw	r26, 0x01	; 1
 4e8:	1c 92       	st	X, r1
 4ea:	11 82       	std	Z+1, r1	; 0x01
 4ec:	0c e1       	ldi	r16, 0x1C	; 28
 4ee:	11 e0       	ldi	r17, 0x01	; 1
 4f0:	13 83       	std	Z+3, r17	; 0x03
 4f2:	02 83       	std	Z+2, r16	; 0x02
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	95 83       	std	Z+5, r25	; 0x05
 4fa:	84 83       	std	Z+4, r24	; 0x04
 4fc:	0e 94 b6 01 	call	0x36c	; 0x36c <showLine>
	showLine(0,1,lcd_buffer,"读取flash:");
 500:	ed b7       	in	r30, 0x3d	; 61
 502:	fe b7       	in	r31, 0x3e	; 62
 504:	31 96       	adiw	r30, 0x01	; 1
 506:	ad b7       	in	r26, 0x3d	; 61
 508:	be b7       	in	r27, 0x3e	; 62
 50a:	11 96       	adiw	r26, 0x01	; 1
 50c:	1c 92       	st	X, r1
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	81 83       	std	Z+1, r24	; 0x01
 512:	13 83       	std	Z+3, r17	; 0x03
 514:	02 83       	std	Z+2, r16	; 0x02
 516:	8d e0       	ldi	r24, 0x0D	; 13
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	95 83       	std	Z+5, r25	; 0x05
 51c:	84 83       	std	Z+4, r24	; 0x04
 51e:	0e 94 b6 01 	call	0x36c	; 0x36c <showLine>
	refreshLCD(lcd_buffer); /*刷新LCD*/
 522:	8d b7       	in	r24, 0x3d	; 61
 524:	9e b7       	in	r25, 0x3e	; 62
 526:	06 96       	adiw	r24, 0x06	; 6
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	9e bf       	out	0x3e, r25	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	8d bf       	out	0x3d, r24	; 61
 532:	c8 01       	movw	r24, r16
 534:	0e 94 bd 00 	call	0x17a	; 0x17a <refreshLCD>
 538:	76 01       	movw	r14, r12
	for(num=0;num<255;num++)
	{
		showLine(11,1,lcd_buffer,"%d3",tmp[num]);
 53a:	4b e0       	ldi	r20, 0x0B	; 11
 53c:	54 2e       	mov	r5, r20
 53e:	cc 24       	eor	r12, r12
 540:	c3 94       	inc	r12
 542:	d0 2e       	mov	r13, r16
 544:	01 2f       	mov	r16, r17
 546:	38 e1       	ldi	r19, 0x18	; 24
 548:	63 2e       	mov	r6, r19
 54a:	31 e0       	ldi	r19, 0x01	; 1
 54c:	73 2e       	mov	r7, r19
 54e:	28 eb       	ldi	r18, 0xB8	; 184
 550:	82 2e       	mov	r8, r18
 552:	91 2c       	mov	r9, r1
	}
	st7920LcdInit(); /*LCD初始化*/
	showLine(0,0,lcd_buffer,"深圳微雪电子");
	showLine(0,1,lcd_buffer,"读取flash:");
	refreshLCD(lcd_buffer); /*刷新LCD*/
	for(num=0;num<255;num++)
 554:	a1 2c       	mov	r10, r1
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	b9 2e       	mov	r11, r25
 55a:	ac 0e       	add	r10, r28
 55c:	bd 1e       	adc	r11, r29
	{
		showLine(11,1,lcd_buffer,"%d3",tmp[num]);
 55e:	ad b7       	in	r26, 0x3d	; 61
 560:	be b7       	in	r27, 0x3e	; 62
 562:	18 97       	sbiw	r26, 0x08	; 8
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	f8 94       	cli
 568:	be bf       	out	0x3e, r27	; 62
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	ad bf       	out	0x3d, r26	; 61
 56e:	ed b7       	in	r30, 0x3d	; 61
 570:	fe b7       	in	r31, 0x3e	; 62
 572:	31 96       	adiw	r30, 0x01	; 1
 574:	11 96       	adiw	r26, 0x01	; 1
 576:	5c 92       	st	X, r5
 578:	c1 82       	std	Z+1, r12	; 0x01
 57a:	d2 82       	std	Z+2, r13	; 0x02
 57c:	03 83       	std	Z+3, r16	; 0x03
 57e:	75 82       	std	Z+5, r7	; 0x05
 580:	64 82       	std	Z+4, r6	; 0x04
 582:	d7 01       	movw	r26, r14
 584:	8c 91       	ld	r24, X
 586:	86 83       	std	Z+6, r24	; 0x06
 588:	17 82       	std	Z+7, r1	; 0x07
 58a:	0e 94 b6 01 	call	0x36c	; 0x36c <showLine>
		refreshLCD(lcd_buffer); /*刷新LCD*/
 58e:	8d b7       	in	r24, 0x3d	; 61
 590:	9e b7       	in	r25, 0x3e	; 62
 592:	08 96       	adiw	r24, 0x08	; 8
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	9e bf       	out	0x3e, r25	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	8d bf       	out	0x3d, r24	; 61
 59e:	8d 2d       	mov	r24, r13
 5a0:	90 2f       	mov	r25, r16
 5a2:	0e 94 bd 00 	call	0x17a	; 0x17a <refreshLCD>
 5a6:	80 e1       	ldi	r24, 0x10	; 16
 5a8:	97 e2       	ldi	r25, 0x27	; 39
 5aa:	f4 01       	movw	r30, r8
 5ac:	31 97       	sbiw	r30, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <__stack+0xad>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5b2:	d9 f7       	brne	.-10     	; 0x5aa <__stack+0xab>
 5b4:	08 94       	sec
 5b6:	e1 1c       	adc	r14, r1
 5b8:	f1 1c       	adc	r15, r1
	}
	st7920LcdInit(); /*LCD初始化*/
	showLine(0,0,lcd_buffer,"深圳微雪电子");
	showLine(0,1,lcd_buffer,"读取flash:");
	refreshLCD(lcd_buffer); /*刷新LCD*/
	for(num=0;num<255;num++)
 5ba:	ea 14       	cp	r14, r10
 5bc:	fb 04       	cpc	r15, r11
 5be:	79 f6       	brne	.-98     	; 0x55e <__stack+0x5f>
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <__stack+0xc1>

000005c2 <memset>:
 5c2:	dc 01       	movw	r26, r24
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <memset+0x6>
 5c6:	6d 93       	st	X+, r22
 5c8:	41 50       	subi	r20, 0x01	; 1
 5ca:	50 40       	sbci	r21, 0x00	; 0
 5cc:	e0 f7       	brcc	.-8      	; 0x5c6 <memset+0x4>
 5ce:	08 95       	ret

000005d0 <__udivmodhi4>:
 5d0:	aa 1b       	sub	r26, r26
 5d2:	bb 1b       	sub	r27, r27
 5d4:	51 e1       	ldi	r21, 0x11	; 17
 5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <__udivmodhi4_ep>

000005d8 <__udivmodhi4_loop>:
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	a6 17       	cp	r26, r22
 5de:	b7 07       	cpc	r27, r23
 5e0:	10 f0       	brcs	.+4      	; 0x5e6 <__udivmodhi4_ep>
 5e2:	a6 1b       	sub	r26, r22
 5e4:	b7 0b       	sbc	r27, r23

000005e6 <__udivmodhi4_ep>:
 5e6:	88 1f       	adc	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	5a 95       	dec	r21
 5ec:	a9 f7       	brne	.-22     	; 0x5d8 <__udivmodhi4_loop>
 5ee:	80 95       	com	r24
 5f0:	90 95       	com	r25
 5f2:	bc 01       	movw	r22, r24
 5f4:	cd 01       	movw	r24, r26
 5f6:	08 95       	ret

000005f8 <_exit>:
 5f8:	f8 94       	cli

000005fa <__stop_program>:
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <__stop_program>
