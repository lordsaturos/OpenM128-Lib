
EEPROM_EXAMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000101  00000000  00000000  00000143  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b8  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000139  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c1  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  00000519  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <main>:
*/
#include <avr/io.h>
#include <avr/eeprom.h>

int main(void)
{
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
  78:	f9 99       	sbic	0x1f, 1	; 31
  7a:	fe cf       	rjmp	.-4      	; 0x78 <main+0x4>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
  7c:	92 bd       	out	0x22, r25	; 34
  7e:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
  80:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	f8 94       	cli
  86:	fa 9a       	sbi	0x1f, 2	; 31
  88:	f9 9a       	sbi	0x1f, 1	; 31
  8a:	0f be       	out	0x3f, r0	; 63
	int16_t tmp;
	for(tmp=0;tmp<255;tmp++)
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	8f 3f       	cpi	r24, 0xFF	; 255
  90:	91 05       	cpc	r25, r1
  92:	91 f7       	brne	.-28     	; 0x78 <main+0x4>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
  94:	f9 99       	sbic	0x1f, 1	; 31
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x20>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	92 bd       	out	0x22, r25	; 34
  9e:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	fa 9a       	sbi	0x1f, 2	; 31
  aa:	f9 9a       	sbi	0x1f, 1	; 31
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x3a>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
