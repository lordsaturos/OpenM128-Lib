
ADC_EXAMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000013  00800100  00800100  000001f2  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000083  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000185  00000000  00000000  00000295  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000120  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001f2  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ea  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000001e  00000000  00000000  00000866  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_19>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_clear_bss>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	a3 31       	cpi	r26, 0x13	; 19
  74:	b1 07       	cpc	r27, r17
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  7c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <adcInit>:
void adcInit(void)
{
#if (ADC_MODE==2)	//8bit模式下，对ADLAR初始化。
	ADMUX=(1<<REFS0); //参考电压使用AVCC，结果右对齐，通道为ADC0
#else
	ADMUX=(1<<REFS0)|(1<<ADLAR); //参考电压使用AVCC，结果默认左对齐，通道为ADC0
  84:	80 e6       	ldi	r24, 0x60	; 96
  86:	80 93 7c 00 	sts	0x007C, r24
#endif
ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1); //连续转换模式，中断时能，64分频
  8a:	8e ee       	ldi	r24, 0xEE	; 238
  8c:	80 93 7a 00 	sts	0x007A, r24
asm("SEI");
  90:	78 94       	sei
}
  92:	08 95       	ret

00000094 <__vector_19>:
*	ISR_BLOCK为GCC interrupt.h库的中断参数
* 
*-------------------------------------------------------------------------------------------------------
*/
ISR(ADC_vect,ISR_BLOCK)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
#if (ADC_MODE==1)
	adc_buffer[adc_wr_index]=ADCH;
  a4:	e0 91 00 01 	lds	r30, 0x0100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 91 79 00 	lds	r24, 0x0079
  ae:	ed 5f       	subi	r30, 0xFD	; 253
  b0:	fe 4f       	sbci	r31, 0xFE	; 254
  b2:	80 83       	st	Z, r24
#elif (ADC_MODE==2)
	adc_buffer[adc_wr_index]=ADC;
#endif

   if (++adc_wr_index == ADC_BUFFER_SIZE) adc_wr_index=0;
  b4:	80 91 00 01 	lds	r24, 0x0100
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 00 01 	sts	0x0100, r24
  be:	80 91 00 01 	lds	r24, 0x0100
  c2:	80 31       	cpi	r24, 0x10	; 16
  c4:	11 f4       	brne	.+4      	; 0xca <__vector_19+0x36>
  c6:	10 92 00 01 	sts	0x0100, r1
   if (++adc_counter == ADC_BUFFER_SIZE) adc_counter=0;
  ca:	80 91 02 01 	lds	r24, 0x0102
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 02 01 	sts	0x0102, r24
  d4:	80 91 02 01 	lds	r24, 0x0102
  d8:	80 31       	cpi	r24, 0x10	; 16
  da:	11 f4       	brne	.+4      	; 0xe0 <__vector_19+0x4c>
  dc:	10 92 02 01 	sts	0x0102, r1
}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <getADC>:
*-------------------------------------------------------------------------------------------------------
*/
adc_uint_t getADC(void)
{
adc_uint_t data;
while(!adc_counter);
  f0:	80 91 02 01 	lds	r24, 0x0102
  f4:	88 23       	and	r24, r24
  f6:	e1 f3       	breq	.-8      	; 0xf0 <getADC>
data=adc_buffer[adc_rd_index];	/*从缓冲器读取数据*/
  f8:	e0 91 01 01 	lds	r30, 0x0101
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	ed 5f       	subi	r30, 0xFD	; 253
 100:	fe 4f       	sbci	r31, 0xFE	; 254
 102:	e0 81       	ld	r30, Z
if (++adc_rd_index == ADC_BUFFER_SIZE) adc_rd_index=0;	
 104:	80 91 01 01 	lds	r24, 0x0101
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	80 93 01 01 	sts	0x0101, r24
 10e:	80 91 01 01 	lds	r24, 0x0101
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	11 f4       	brne	.+4      	; 0x11a <getADC+0x2a>
 116:	10 92 01 01 	sts	0x0101, r1
cli();
 11a:	f8 94       	cli
--adc_counter;
 11c:	80 91 02 01 	lds	r24, 0x0102
 120:	81 50       	subi	r24, 0x01	; 1
 122:	80 93 02 01 	sts	0x0102, r24
sei();
 126:	78 94       	sei
return data;
}
 128:	8e 2f       	mov	r24, r30
 12a:	08 95       	ret

0000012c <main>:
#include <avr/io.h>
#include <ws_adc_port.h>

int main(void)
{
	DDRB=0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	84 b9       	out	0x04, r24	; 4
void adcInit(void)
{
#if (ADC_MODE==2)	//8bit模式下，对ADLAR初始化。
	ADMUX=(1<<REFS0); //参考电压使用AVCC，结果右对齐，通道为ADC0
#else
	ADMUX=(1<<REFS0)|(1<<ADLAR); //参考电压使用AVCC，结果默认左对齐，通道为ADC0
 130:	80 e6       	ldi	r24, 0x60	; 96
 132:	80 93 7c 00 	sts	0x007C, r24
#endif
ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1); //连续转换模式，中断时能，64分频
 136:	8e ee       	ldi	r24, 0xEE	; 238
 138:	80 93 7a 00 	sts	0x007A, r24
asm("SEI");
 13c:	78 94       	sei
*-------------------------------------------------------------------------------------------------------
*/
adc_uint_t getADC(void)
{
adc_uint_t data;
while(!adc_counter);
 13e:	80 91 02 01 	lds	r24, 0x0102
 142:	88 23       	and	r24, r24
 144:	e1 f3       	breq	.-8      	; 0x13e <main+0x12>
data=adc_buffer[adc_rd_index];	/*从缓冲器读取数据*/
 146:	e0 91 01 01 	lds	r30, 0x0101
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ed 5f       	subi	r30, 0xFD	; 253
 14e:	fe 4f       	sbci	r31, 0xFE	; 254
 150:	e0 81       	ld	r30, Z
if (++adc_rd_index == ADC_BUFFER_SIZE) adc_rd_index=0;	
 152:	80 91 01 01 	lds	r24, 0x0101
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 01 01 	sts	0x0101, r24
 15c:	80 91 01 01 	lds	r24, 0x0101
 160:	80 31       	cpi	r24, 0x10	; 16
 162:	11 f4       	brne	.+4      	; 0x168 <main+0x3c>
 164:	10 92 01 01 	sts	0x0101, r1
cli();
 168:	f8 94       	cli
--adc_counter;
 16a:	80 91 02 01 	lds	r24, 0x0102
 16e:	81 50       	subi	r24, 0x01	; 1
 170:	80 93 02 01 	sts	0x0102, r24
sei();
 174:	78 94       	sei
	adcInit();
	while(1)
	{
		PORTB=getADC();
 176:	e5 b9       	out	0x05, r30	; 5
 178:	e2 cf       	rjmp	.-60     	; 0x13e <main+0x12>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
