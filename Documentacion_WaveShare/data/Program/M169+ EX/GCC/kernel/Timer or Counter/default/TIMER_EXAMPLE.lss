
TIMER_EXAMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008a  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000056  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000bf  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ab  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 3a 00 	jmp	0x74	; 0x74 <__vector_9>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <__vector_9>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
ISR(TIMER1_OVF_vect,ISR_BLOCK)
{
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
	TCNT1=58162;	//1024分频下延时1S.
  82:	82 e3       	ldi	r24, 0x32	; 50
  84:	93 ee       	ldi	r25, 0xE3	; 227
  86:	90 93 85 00 	sts	0x0085, r25
  8a:	80 93 84 00 	sts	0x0084, r24
	PORTA=~PORTA;
  8e:	82 b1       	in	r24, 0x02	; 2
  90:	80 95       	com	r24
  92:	82 b9       	out	0x02, r24	; 2
}
  94:	9f 91       	pop	r25
  96:	8f 91       	pop	r24
  98:	0f 90       	pop	r0
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	0f 90       	pop	r0
  9e:	1f 90       	pop	r1
  a0:	18 95       	reti

000000a2 <main>:

int main(void)
{
	DDRA=0xFF;	//将PA口接到LED上观察现象。
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	81 b9       	out	0x01, r24	; 1
	PORTA=0x00;
  a6:	12 b8       	out	0x02, r1	; 2
	TCCR1A=0x00;
  a8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=(1<<CS12)|(1<<CS10); //1024分频
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	80 93 81 00 	sts	0x0081, r24
	TCCR1C=0x00;
  b2:	10 92 82 00 	sts	0x0082, r1
	TCNT1=58162;
  b6:	82 e3       	ldi	r24, 0x32	; 50
  b8:	93 ee       	ldi	r25, 0xE3	; 227
  ba:	90 93 85 00 	sts	0x0085, r25
  be:	80 93 84 00 	sts	0x0084, r24
	TIMSK1=(1<<TOIE1);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 6f 00 	sts	0x006F, r24
	asm("SEI");
  c8:	78 94       	sei
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x28>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
