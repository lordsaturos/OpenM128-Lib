
WDT_EXAMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000029  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002a0  00000000  00000000  000001c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000104  00000000  00000000  00000463  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000021d  00000000  00000000  00000567  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000de  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c0  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <showReset>:
#include <util/delay.h>
#include <avr/wdt.h> 

void showReset(void)
{
	DDRB=0xFF;
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	84 b9       	out	0x04, r24	; 4
	PORTB=0x55;
  78:	85 e5       	ldi	r24, 0x55	; 85
  7a:	85 b9       	out	0x05, r24	; 5
  7c:	88 eb       	ldi	r24, 0xB8	; 184
  7e:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  80:	28 eb       	ldi	r18, 0xB8	; 184
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	f9 01       	movw	r30, r18
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <showReset+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8c:	d9 f7       	brne	.-10     	; 0x84 <showReset+0x10>
	_delay_ms(300);
	PORTB=~PORTB;
  8e:	85 b1       	in	r24, 0x05	; 5
  90:	80 95       	com	r24
  92:	85 b9       	out	0x05, r24	; 5
  94:	88 eb       	ldi	r24, 0xB8	; 184
  96:	9b e0       	ldi	r25, 0x0B	; 11
  98:	28 eb       	ldi	r18, 0xB8	; 184
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	f9 01       	movw	r30, r18
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <showReset+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a4:	d9 f7       	brne	.-10     	; 0x9c <showReset+0x28>
	_delay_ms(300);
	PORTB=~PORTB;
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	80 95       	com	r24
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	88 eb       	ldi	r24, 0xB8	; 184
  ae:	9b e0       	ldi	r25, 0x0B	; 11
  b0:	28 eb       	ldi	r18, 0xB8	; 184
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <showReset+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  bc:	d9 f7       	brne	.-10     	; 0xb4 <showReset+0x40>
	_delay_ms(300);
	PORTB=~PORTB;
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	80 95       	com	r24
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	88 eb       	ldi	r24, 0xB8	; 184
  c6:	9b e0       	ldi	r25, 0x0B	; 11
  c8:	28 eb       	ldi	r18, 0xB8	; 184
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	f9 01       	movw	r30, r18
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <showReset+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d9 f7       	brne	.-10     	; 0xcc <showReset+0x58>
	_delay_ms(300);
	PORTB=~PORTB;
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	80 95       	com	r24
  da:	85 b9       	out	0x05, r24	; 5
  dc:	88 eb       	ldi	r24, 0xB8	; 184
  de:	9b e0       	ldi	r25, 0x0B	; 11
  e0:	28 eb       	ldi	r18, 0xB8	; 184
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <showReset+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d9 f7       	brne	.-10     	; 0xe4 <showReset+0x70>
	_delay_ms(300);
	PORTB=0x00;
  ee:	15 b8       	out	0x05, r1	; 5
}
  f0:	08 95       	ret

000000f2 <main>:

int main(void)
{
	showReset();	//将PB口接到LED上
  f2:	0e 94 3a 00 	call	0x74	; 0x74 <showReset>
	wdt_enable(WDTO_500MS); //500MS只是一个大概值，具体时间请查看datasheet
  f6:	2d e0       	ldi	r18, 0x0D	; 13
  f8:	88 e1       	ldi	r24, 0x18	; 24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	a8 95       	wdr
 102:	80 93 60 00 	sts	0x0060, r24
 106:	0f be       	out	0x3f, r0	; 63
 108:	20 93 60 00 	sts	0x0060, r18
 10c:	28 eb       	ldi	r18, 0xB8	; 184
 10e:	30 e0       	ldi	r19, 0x00	; 0
	while(1)
	{
		wdt_reset();
 110:	a8 95       	wdr
 112:	8c ea       	ldi	r24, 0xAC	; 172
 114:	9d e0       	ldi	r25, 0x0D	; 13
 116:	f9 01       	movw	r30, r18
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11e:	d9 f7       	brne	.-10     	; 0x116 <main+0x24>
 120:	f7 cf       	rjmp	.-18     	; 0x110 <main+0x1e>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
