
LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000005b0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080013c  0080013c  00000680  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ac  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e4  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c4  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b2  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000019a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ab  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000399  00000000  00000000  00001bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 eb       	ldi	r30, 0xB0	; 176
  70:	f5 e0       	ldi	r31, 0x05	; 5
  72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
  78:	ac 33       	cpi	r26, 0x3C	; 60
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	ac e3       	ldi	r26, 0x3C	; 60
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ac 37       	cpi	r26, 0x7C	; 124
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <main>
  92:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  9a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
  9c:	0d b4       	in	r0, 0x2d	; 45
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <spiSendChar+0x2>
}
  a2:	08 95       	ret

000000a4 <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
  a4:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  a6:	88 ef       	ldi	r24, 0xF8	; 248
  a8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
  aa:	0d b4       	in	r0, 0x2d	; 45
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
  b0:	89 2f       	mov	r24, r25
  b2:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  b4:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <sendCodeST7920+0x12>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
  bc:	92 95       	swap	r25
  be:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  c0:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
  c2:	0d b4       	in	r0, 0x2d	; 45
  c4:	07 fe       	sbrs	r0, 7
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <sendCodeST7920+0x1e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  c8:	88 eb       	ldi	r24, 0xB8	; 184
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <sendCodeST7920+0x26>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
  ce:	08 95       	ret

000000d0 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
  d0:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  d2:	8a ef       	ldi	r24, 0xFA	; 250
  d4:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
  d6:	0d b4       	in	r0, 0x2d	; 45
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
  dc:	89 2f       	mov	r24, r25
  de:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  e0:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
  e2:	0d b4       	in	r0, 0x2d	; 45
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <sendDataST7920+0x12>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
  e8:	92 95       	swap	r25
  ea:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  ec:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
  ee:	0d b4       	in	r0, 0x2d	; 45
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <sendDataST7920+0x1e>
  f4:	88 eb       	ldi	r24, 0xB8	; 184
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <sendDataST7920+0x26>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
  fa:	08 95       	ret

000000fc <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
  fc:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  fe:	88 ef       	ldi	r24, 0xF8	; 248
 100:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 102:	0d b4       	in	r0, 0x2d	; 45
 104:	07 fe       	sbrs	r0, 7
 106:	fd cf       	rjmp	.-6      	; 0x102 <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 108:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 10a:	0d b4       	in	r0, 0x2d	; 45
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <refreshLCD+0xe>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 114:	0d b4       	in	r0, 0x2d	; 45
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <refreshLCD+0x18>
 11a:	88 eb       	ldi	r24, 0xB8	; 184
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <refreshLCD+0x20>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 124:	6a ef       	ldi	r22, 0xFA	; 250
 126:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 128:	fa 01       	movw	r30, r20
 12a:	e2 0f       	add	r30, r18
 12c:	f3 1f       	adc	r31, r19
 12e:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 130:	6e bd       	out	0x2e, r22	; 46
	while (!(SPSR & (1<<SPIF)));
 132:	0d b4       	in	r0, 0x2d	; 45
 134:	07 fe       	sbrs	r0, 7
 136:	fd cf       	rjmp	.-6      	; 0x132 <refreshLCD+0x36>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 138:	8e 2f       	mov	r24, r30
 13a:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 13c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 13e:	0d b4       	in	r0, 0x2d	; 45
 140:	07 fe       	sbrs	r0, 7
 142:	fd cf       	rjmp	.-6      	; 0x13e <refreshLCD+0x42>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 144:	e2 95       	swap	r30
 146:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 148:	ee bd       	out	0x2e, r30	; 46
	while (!(SPSR & (1<<SPIF)));
 14a:	0d b4       	in	r0, 0x2d	; 45
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <refreshLCD+0x4e>
 150:	89 2f       	mov	r24, r25
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <refreshLCD+0x56>
 156:	2f 5f       	subi	r18, 0xFF	; 255
 158:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 15a:	20 31       	cpi	r18, 0x10	; 16
 15c:	31 05       	cpc	r19, r1
 15e:	21 f7       	brne	.-56     	; 0x128 <refreshLCD+0x2c>
 160:	da 01       	movw	r26, r20
 162:	fa 01       	movw	r30, r20
 164:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 166:	3a ef       	ldi	r19, 0xFA	; 250
 168:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 16a:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 16c:	3e bd       	out	0x2e, r19	; 46
	while (!(SPSR & (1<<SPIF)));
 16e:	0d b4       	in	r0, 0x2d	; 45
 170:	07 fe       	sbrs	r0, 7
 172:	fd cf       	rjmp	.-6      	; 0x16e <refreshLCD+0x72>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 174:	82 2f       	mov	r24, r18
 176:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 178:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 17a:	0d b4       	in	r0, 0x2d	; 45
 17c:	07 fe       	sbrs	r0, 7
 17e:	fd cf       	rjmp	.-6      	; 0x17a <refreshLCD+0x7e>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 180:	22 95       	swap	r18
 182:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 184:	2e bd       	out	0x2e, r18	; 46
	while (!(SPSR & (1<<SPIF)));
 186:	0d b4       	in	r0, 0x2d	; 45
 188:	07 fe       	sbrs	r0, 7
 18a:	fd cf       	rjmp	.-6      	; 0x186 <refreshLCD+0x8a>
 18c:	89 2f       	mov	r24, r25
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <refreshLCD+0x92>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 192:	6f 5f       	subi	r22, 0xFF	; 255
 194:	31 96       	adiw	r30, 0x01	; 1
 196:	60 33       	cpi	r22, 0x30	; 48
 198:	41 f7       	brne	.-48     	; 0x16a <refreshLCD+0x6e>
 19a:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 19c:	7a ef       	ldi	r23, 0xFA	; 250
 19e:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1a0:	50 96       	adiw	r26, 0x10	; 16
 1a2:	2c 91       	ld	r18, X
 1a4:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1a6:	7e bd       	out	0x2e, r23	; 46
	while (!(SPSR & (1<<SPIF)));
 1a8:	0d b4       	in	r0, 0x2d	; 45
 1aa:	07 fe       	sbrs	r0, 7
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <refreshLCD+0xac>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1ae:	82 2f       	mov	r24, r18
 1b0:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1b2:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 1b4:	0d b4       	in	r0, 0x2d	; 45
 1b6:	07 fe       	sbrs	r0, 7
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <refreshLCD+0xb8>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1ba:	22 95       	swap	r18
 1bc:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1be:	2e bd       	out	0x2e, r18	; 46
	while (!(SPSR & (1<<SPIF)));
 1c0:	0d b4       	in	r0, 0x2d	; 45
 1c2:	07 fe       	sbrs	r0, 7
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <refreshLCD+0xc4>
 1c6:	89 2f       	mov	r24, r25
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <refreshLCD+0xcc>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 1cc:	3f 5f       	subi	r19, 0xFF	; 255
 1ce:	11 96       	adiw	r26, 0x01	; 1
 1d0:	30 32       	cpi	r19, 0x20	; 32
 1d2:	31 f7       	brne	.-52     	; 0x1a0 <refreshLCD+0xa4>
 1d4:	fa 01       	movw	r30, r20
 1d6:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1d8:	3a ef       	ldi	r19, 0xFA	; 250
 1da:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1dc:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1de:	3e bd       	out	0x2e, r19	; 46
	while (!(SPSR & (1<<SPIF)));
 1e0:	0d b4       	in	r0, 0x2d	; 45
 1e2:	07 fe       	sbrs	r0, 7
 1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <refreshLCD+0xe4>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1e6:	89 2f       	mov	r24, r25
 1e8:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ea:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 1ec:	0d b4       	in	r0, 0x2d	; 45
 1ee:	07 fe       	sbrs	r0, 7
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <refreshLCD+0xf0>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1f2:	92 95       	swap	r25
 1f4:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1f6:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
 1f8:	0d b4       	in	r0, 0x2d	; 45
 1fa:	07 fe       	sbrs	r0, 7
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <refreshLCD+0xfc>
 1fe:	82 2f       	mov	r24, r18
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <refreshLCD+0x104>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	31 96       	adiw	r30, 0x01	; 1
 208:	60 34       	cpi	r22, 0x40	; 64
 20a:	41 f7       	brne	.-48     	; 0x1dc <refreshLCD+0xe0>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 20c:	08 95       	ret

0000020e <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 20e:	1f 93       	push	r17
 210:	fc 01       	movw	r30, r24
 212:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 214:	10 e3       	ldi	r17, 0x30	; 48
 216:	43 c0       	rjmp	.+134    	; 0x29e <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 218:	43 30       	cpi	r20, 0x03	; 3
 21a:	21 f1       	breq	.+72     	; 0x264 <decToAscii+0x56>
 21c:	44 30       	cpi	r20, 0x04	; 4
 21e:	28 f4       	brcc	.+10     	; 0x22a <decToAscii+0x1c>
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	b1 f1       	breq	.+108    	; 0x290 <decToAscii+0x82>
 224:	42 30       	cpi	r20, 0x02	; 2
 226:	c1 f5       	brne	.+112    	; 0x298 <decToAscii+0x8a>
 228:	28 c0       	rjmp	.+80     	; 0x27a <decToAscii+0x6c>
 22a:	44 30       	cpi	r20, 0x04	; 4
 22c:	69 f0       	breq	.+26     	; 0x248 <decToAscii+0x3a>
 22e:	45 30       	cpi	r20, 0x05	; 5
 230:	99 f5       	brne	.+102    	; 0x298 <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 232:	c9 01       	movw	r24, r18
 234:	60 e1       	ldi	r22, 0x10	; 16
 236:	77 e2       	ldi	r23, 0x27	; 39
 238:	0e 94 c2 02 	call	0x584	; 0x584 <__udivmodhi4>
 23c:	60 5d       	subi	r22, 0xD0	; 208
 23e:	60 83       	st	Z, r22
				dec%=10000;
 240:	c9 01       	movw	r24, r18
 242:	60 e1       	ldi	r22, 0x10	; 16
 244:	77 e2       	ldi	r23, 0x27	; 39
 246:	0a c0       	rjmp	.+20     	; 0x25c <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 248:	c9 01       	movw	r24, r18
 24a:	68 ee       	ldi	r22, 0xE8	; 232
 24c:	73 e0       	ldi	r23, 0x03	; 3
 24e:	0e 94 c2 02 	call	0x584	; 0x584 <__udivmodhi4>
 252:	60 5d       	subi	r22, 0xD0	; 208
 254:	60 83       	st	Z, r22
				dec%=1000;
 256:	c9 01       	movw	r24, r18
 258:	68 ee       	ldi	r22, 0xE8	; 232
 25a:	73 e0       	ldi	r23, 0x03	; 3
 25c:	0e 94 c2 02 	call	0x584	; 0x584 <__udivmodhi4>
 260:	9c 01       	movw	r18, r24
 262:	1b c0       	rjmp	.+54     	; 0x29a <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 264:	c9 01       	movw	r24, r18
 266:	64 e6       	ldi	r22, 0x64	; 100
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	0e 94 c2 02 	call	0x584	; 0x584 <__udivmodhi4>
 26e:	60 5d       	subi	r22, 0xD0	; 208
 270:	60 83       	st	Z, r22
				dec%=100;
 272:	c9 01       	movw	r24, r18
 274:	64 e6       	ldi	r22, 0x64	; 100
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	f1 cf       	rjmp	.-30     	; 0x25c <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 27a:	c9 01       	movw	r24, r18
 27c:	6a e0       	ldi	r22, 0x0A	; 10
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	0e 94 c2 02 	call	0x584	; 0x584 <__udivmodhi4>
 284:	60 5d       	subi	r22, 0xD0	; 208
 286:	60 83       	st	Z, r22
				dec%=10;
 288:	c9 01       	movw	r24, r18
 28a:	6a e0       	ldi	r22, 0x0A	; 10
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	e6 cf       	rjmp	.-52     	; 0x25c <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 290:	20 5d       	subi	r18, 0xD0	; 208
 292:	20 83       	st	Z, r18
 294:	20 53       	subi	r18, 0x30	; 48
 296:	01 c0       	rjmp	.+2      	; 0x29a <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 298:	10 83       	st	Z, r17
		}
		width--;
 29a:	41 50       	subi	r20, 0x01	; 1
		str++;
 29c:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 29e:	44 23       	and	r20, r20
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <decToAscii+0x96>
 2a2:	ba cf       	rjmp	.-140    	; 0x218 <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 2a4:	1f 91       	pop	r17
 2a6:	08 95       	ret

000002a8 <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 2a8:	cf 92       	push	r12
 2aa:	df 92       	push	r13
 2ac:	ef 92       	push	r14
 2ae:	ff 92       	push	r15
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 2ba:	eb 01       	movw	r28, r22
 2bc:	cd 2f       	mov	r28, r29
 2be:	dd 27       	eor	r29, r29
 2c0:	c2 95       	swap	r28
 2c2:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 2c4:	27 e3       	ldi	r18, 0x37	; 55
 2c6:	d2 2e       	mov	r13, r18
 2c8:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 2ca:	90 e3       	ldi	r25, 0x30	; 48
 2cc:	e9 2e       	mov	r14, r25
 2ce:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 2d0:	a7 2f       	mov	r26, r23
 2d2:	bb 27       	eor	r27, r27
 2d4:	af 70       	andi	r26, 0x0F	; 15
 2d6:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 2d8:	17 e3       	ldi	r17, 0x37	; 55
 2da:	f1 2e       	mov	r15, r17
 2dc:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 2de:	0a 2f       	mov	r16, r26
 2e0:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 2e2:	9b 01       	movw	r18, r22
 2e4:	54 e0       	ldi	r21, 0x04	; 4
 2e6:	36 95       	lsr	r19
 2e8:	27 95       	ror	r18
 2ea:	5a 95       	dec	r21
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <hexToAscii+0x3e>
 2ee:	2f 70       	andi	r18, 0x0F	; 15
 2f0:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 2f2:	82 2f       	mov	r24, r18
 2f4:	12 2f       	mov	r17, r18
 2f6:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 2f8:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 2fa:	90 e3       	ldi	r25, 0x30	; 48
 2fc:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 2fe:	6f 70       	andi	r22, 0x0F	; 15
 300:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 302:	56 2f       	mov	r21, r22
 304:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 306:	96 2f       	mov	r25, r22
 308:	99 5c       	subi	r25, 0xC9	; 201
 30a:	2a c0       	rjmp	.+84     	; 0x360 <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 30c:	42 30       	cpi	r20, 0x02	; 2
 30e:	b9 f0       	breq	.+46     	; 0x33e <hexToAscii+0x96>
 310:	43 30       	cpi	r20, 0x03	; 3
 312:	18 f4       	brcc	.+6      	; 0x31a <hexToAscii+0x72>
 314:	41 30       	cpi	r20, 0x01	; 1
 316:	09 f5       	brne	.+66     	; 0x35a <hexToAscii+0xb2>
 318:	19 c0       	rjmp	.+50     	; 0x34c <hexToAscii+0xa4>
 31a:	43 30       	cpi	r20, 0x03	; 3
 31c:	49 f0       	breq	.+18     	; 0x330 <hexToAscii+0x88>
 31e:	44 30       	cpi	r20, 0x04	; 4
 320:	e1 f4       	brne	.+56     	; 0x35a <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 322:	ca 30       	cpi	r28, 0x0A	; 10
 324:	d1 05       	cpc	r29, r1
 326:	10 f0       	brcs	.+4      	; 0x32c <hexToAscii+0x84>
 328:	d0 82       	st	Z, r13
 32a:	18 c0       	rjmp	.+48     	; 0x35c <hexToAscii+0xb4>
				else *str = tmp+'0';
 32c:	e0 82       	st	Z, r14
 32e:	16 c0       	rjmp	.+44     	; 0x35c <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 330:	aa 30       	cpi	r26, 0x0A	; 10
 332:	b1 05       	cpc	r27, r1
 334:	10 f0       	brcs	.+4      	; 0x33a <hexToAscii+0x92>
 336:	f0 82       	st	Z, r15
 338:	11 c0       	rjmp	.+34     	; 0x35c <hexToAscii+0xb4>
				else *str = tmp+'0';
 33a:	00 83       	st	Z, r16
 33c:	0f c0       	rjmp	.+30     	; 0x35c <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 33e:	2a 30       	cpi	r18, 0x0A	; 10
 340:	31 05       	cpc	r19, r1
 342:	10 f0       	brcs	.+4      	; 0x348 <hexToAscii+0xa0>
 344:	10 83       	st	Z, r17
 346:	0a c0       	rjmp	.+20     	; 0x35c <hexToAscii+0xb4>
				else *str = tmp+'0';
 348:	80 83       	st	Z, r24
 34a:	08 c0       	rjmp	.+16     	; 0x35c <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 34c:	6a 30       	cpi	r22, 0x0A	; 10
 34e:	71 05       	cpc	r23, r1
 350:	10 f0       	brcs	.+4      	; 0x356 <hexToAscii+0xae>
 352:	90 83       	st	Z, r25
 354:	03 c0       	rjmp	.+6      	; 0x35c <hexToAscii+0xb4>
				else *str = tmp+'0';
 356:	50 83       	st	Z, r21
 358:	01 c0       	rjmp	.+2      	; 0x35c <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 35a:	c0 82       	st	Z, r12
		}
		width--;
 35c:	41 50       	subi	r20, 0x01	; 1
		str++;
 35e:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 360:	44 23       	and	r20, r20
 362:	a1 f6       	brne	.-88     	; 0x30c <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	08 95       	ret

00000376 <st7920LcdInit>:
}
/*Hardware Environment：DVK501 && M169+ EX*/
#elif defined(_DVK501_M169_EX_)
void st7920LcdInit(void)
{
DDRB|=0x0F;
 376:	84 b1       	in	r24, 0x04	; 4
 378:	8f 60       	ori	r24, 0x0F	; 15
 37a:	84 b9       	out	0x04, r24	; 4
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 37c:	80 e5       	ldi	r24, 0x50	; 80
 37e:	8c bd       	out	0x2c, r24	; 44
SPSR=0x01;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	8d bd       	out	0x2d, r24	; 45
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 384:	88 ef       	ldi	r24, 0xF8	; 248
 386:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 388:	0d b4       	in	r0, 0x2d	; 45
 38a:	07 fe       	sbrs	r0, 7
 38c:	fd cf       	rjmp	.-6      	; 0x388 <st7920LcdInit+0x12>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 38e:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 390:	0d b4       	in	r0, 0x2d	; 45
 392:	07 fe       	sbrs	r0, 7
 394:	fd cf       	rjmp	.-6      	; 0x390 <st7920LcdInit+0x1a>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 396:	80 ec       	ldi	r24, 0xC0	; 192
 398:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 39a:	0d b4       	in	r0, 0x2d	; 45
 39c:	07 fe       	sbrs	r0, 7
 39e:	fd cf       	rjmp	.-6      	; 0x39a <st7920LcdInit+0x24>
 3a0:	88 eb       	ldi	r24, 0xB8	; 184
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <st7920LcdInit+0x2c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3a6:	88 ef       	ldi	r24, 0xF8	; 248
 3a8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 3aa:	0d b4       	in	r0, 0x2d	; 45
 3ac:	07 fe       	sbrs	r0, 7
 3ae:	fd cf       	rjmp	.-6      	; 0x3aa <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3b0:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 3b2:	0d b4       	in	r0, 0x2d	; 45
 3b4:	07 fe       	sbrs	r0, 7
 3b6:	fd cf       	rjmp	.-6      	; 0x3b2 <st7920LcdInit+0x3c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3b8:	80 e1       	ldi	r24, 0x10	; 16
 3ba:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 3bc:	0d b4       	in	r0, 0x2d	; 45
 3be:	07 fe       	sbrs	r0, 7
 3c0:	fd cf       	rjmp	.-6      	; 0x3bc <st7920LcdInit+0x46>
 3c2:	88 eb       	ldi	r24, 0xB8	; 184
 3c4:	8a 95       	dec	r24
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <st7920LcdInit+0x4e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3c8:	86 e6       	ldi	r24, 0x66	; 102
 3ca:	9e e0       	ldi	r25, 0x0E	; 14
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <st7920LcdInit+0x56>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 3d0:	8c e3       	ldi	r24, 0x3C	; 60
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	60 e2       	ldi	r22, 0x20	; 32
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	40 e4       	ldi	r20, 0x40	; 64
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	0e 94 bb 02 	call	0x576	; 0x576 <memset>
}
 3e0:	08 95       	ret

000003e2 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 3e2:	af 92       	push	r10
 3e4:	bf 92       	push	r11
 3e6:	cf 92       	push	r12
 3e8:	df 92       	push	r13
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	0f 93       	push	r16
 3f0:	df 93       	push	r29
 3f2:	cf 93       	push	r28
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	0d 85       	ldd	r16, Y+13	; 0x0d
 3fa:	ae 84       	ldd	r10, Y+14	; 0x0e
 3fc:	bf 84       	ldd	r11, Y+15	; 0x0f
 3fe:	e8 88       	ldd	r14, Y+16	; 0x10
 400:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 402:	02 95       	swap	r16
 404:	00 7f       	andi	r16, 0xF0	; 240
 406:	8c 85       	ldd	r24, Y+12	; 0x0c
 408:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 40a:	de 01       	movw	r26, r28
 40c:	52 96       	adiw	r26, 0x12	; 18
 40e:	5d c0       	rjmp	.+186    	; 0x4ca <showLine+0xe8>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 410:	01 34       	cpi	r16, 0x41	; 65
 412:	08 f0       	brcs	.+2      	; 0x416 <showLine+0x34>
 414:	5f c0       	rjmp	.+190    	; 0x4d4 <showLine+0xf2>

		if(*str == '\\')
 416:	8c 35       	cpi	r24, 0x5C	; 92
 418:	51 f4       	brne	.+20     	; 0x42e <showLine+0x4c>
		{
			str++;
 41a:	08 94       	sec
 41c:	e1 1c       	adc	r14, r1
 41e:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 420:	95 01       	movw	r18, r10
 422:	20 0f       	add	r18, r16
 424:	31 1d       	adc	r19, r1
 426:	f7 01       	movw	r30, r14
 428:	80 81       	ld	r24, Z
 42a:	f9 01       	movw	r30, r18
 42c:	49 c0       	rjmp	.+146    	; 0x4c0 <showLine+0xde>
		}
		else if(*str == '%')
 42e:	85 32       	cpi	r24, 0x25	; 37
 430:	09 f0       	breq	.+2      	; 0x434 <showLine+0x52>
 432:	43 c0       	rjmp	.+134    	; 0x4ba <showLine+0xd8>
		{
			str++;
 434:	08 94       	sec
 436:	e1 1c       	adc	r14, r1
 438:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 43a:	f7 01       	movw	r30, r14
 43c:	80 81       	ld	r24, Z
 43e:	84 36       	cpi	r24, 0x64	; 100
 440:	11 f0       	breq	.+4      	; 0x446 <showLine+0x64>
 442:	84 34       	cpi	r24, 0x44	; 68
 444:	99 f4       	brne	.+38     	; 0x46c <showLine+0x8a>
			{
				str++;
 446:	08 94       	sec
 448:	e1 1c       	adc	r14, r1
 44a:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 44c:	52 e0       	ldi	r21, 0x02	; 2
 44e:	c5 2e       	mov	r12, r21
 450:	d1 2c       	mov	r13, r1
 452:	ca 0e       	add	r12, r26
 454:	db 1e       	adc	r13, r27
 456:	6d 91       	ld	r22, X+
 458:	7c 91       	ld	r23, X
 45a:	f7 01       	movw	r30, r14
 45c:	40 81       	ld	r20, Z
 45e:	40 53       	subi	r20, 0x30	; 48
 460:	c5 01       	movw	r24, r10
 462:	80 0f       	add	r24, r16
 464:	91 1d       	adc	r25, r1
 466:	0e 94 07 01 	call	0x20e	; 0x20e <decToAscii>
 46a:	21 c0       	rjmp	.+66     	; 0x4ae <showLine+0xcc>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 46c:	83 36       	cpi	r24, 0x63	; 99
 46e:	11 f0       	breq	.+4      	; 0x474 <showLine+0x92>
 470:	83 34       	cpi	r24, 0x43	; 67
 472:	39 f4       	brne	.+14     	; 0x482 <showLine+0xa0>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 474:	f5 01       	movw	r30, r10
 476:	e0 0f       	add	r30, r16
 478:	f1 1d       	adc	r31, r1
 47a:	8c 91       	ld	r24, X
 47c:	80 83       	st	Z, r24
 47e:	12 96       	adiw	r26, 0x02	; 2
 480:	20 c0       	rjmp	.+64     	; 0x4c2 <showLine+0xe0>
			}
			else if(*str=='x'||*str=='X')
 482:	88 37       	cpi	r24, 0x78	; 120
 484:	11 f0       	breq	.+4      	; 0x48a <showLine+0xa8>
 486:	88 35       	cpi	r24, 0x58	; 88
 488:	e1 f4       	brne	.+56     	; 0x4c2 <showLine+0xe0>
			{
				str++;
 48a:	08 94       	sec
 48c:	e1 1c       	adc	r14, r1
 48e:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 490:	42 e0       	ldi	r20, 0x02	; 2
 492:	c4 2e       	mov	r12, r20
 494:	d1 2c       	mov	r13, r1
 496:	ca 0e       	add	r12, r26
 498:	db 1e       	adc	r13, r27
 49a:	6d 91       	ld	r22, X+
 49c:	7c 91       	ld	r23, X
 49e:	f7 01       	movw	r30, r14
 4a0:	40 81       	ld	r20, Z
 4a2:	40 53       	subi	r20, 0x30	; 48
 4a4:	c5 01       	movw	r24, r10
 4a6:	80 0f       	add	r24, r16
 4a8:	91 1d       	adc	r25, r1
 4aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <hexToAscii>
				coordinate+=(*str-'0'-1);
 4ae:	01 53       	subi	r16, 0x31	; 49
 4b0:	f7 01       	movw	r30, r14
 4b2:	80 81       	ld	r24, Z
 4b4:	08 0f       	add	r16, r24
 4b6:	d6 01       	movw	r26, r12
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <showLine+0xe0>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 4ba:	f5 01       	movw	r30, r10
 4bc:	e0 0f       	add	r30, r16
 4be:	f1 1d       	adc	r31, r1
 4c0:	80 83       	st	Z, r24
		}
		str++;
 4c2:	08 94       	sec
 4c4:	e1 1c       	adc	r14, r1
 4c6:	f1 1c       	adc	r15, r1
		coordinate++;
 4c8:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 4ca:	f7 01       	movw	r30, r14
 4cc:	80 81       	ld	r24, Z
 4ce:	88 23       	and	r24, r24
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <showLine+0xf2>
 4d2:	9e cf       	rjmp	.-196    	; 0x410 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 4d4:	cf 91       	pop	r28
 4d6:	df 91       	pop	r29
 4d8:	0f 91       	pop	r16
 4da:	ff 90       	pop	r15
 4dc:	ef 90       	pop	r14
 4de:	df 90       	pop	r13
 4e0:	cf 90       	pop	r12
 4e2:	bf 90       	pop	r11
 4e4:	af 90       	pop	r10
 4e6:	08 95       	ret

000004e8 <main>:

#define _DVK501_M169_EX_ 1
#include <avr/io.h>
#include <ws_lcd_ST7920_port.h>
int main(void)
{
 4e8:	0f 93       	push	r16
 4ea:	1f 93       	push	r17
st7920LcdInit(); /*LCD初始化*/
 4ec:	0e 94 bb 01 	call	0x376	; 0x376 <st7920LcdInit>
showLine(0,0,lcd_buffer,"深圳微雪电子");
 4f0:	00 d0       	rcall	.+0      	; 0x4f2 <main+0xa>
 4f2:	00 d0       	rcall	.+0      	; 0x4f4 <main+0xc>
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <main+0xe>
 4f6:	ed b7       	in	r30, 0x3d	; 61
 4f8:	fe b7       	in	r31, 0x3e	; 62
 4fa:	31 96       	adiw	r30, 0x01	; 1
 4fc:	ad b7       	in	r26, 0x3d	; 61
 4fe:	be b7       	in	r27, 0x3e	; 62
 500:	11 96       	adiw	r26, 0x01	; 1
 502:	1c 92       	st	X, r1
 504:	11 82       	std	Z+1, r1	; 0x01
 506:	0c e3       	ldi	r16, 0x3C	; 60
 508:	11 e0       	ldi	r17, 0x01	; 1
 50a:	13 83       	std	Z+3, r17	; 0x03
 50c:	02 83       	std	Z+2, r16	; 0x02
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	95 83       	std	Z+5, r25	; 0x05
 514:	84 83       	std	Z+4, r24	; 0x04
 516:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <showLine>
showLine(0,1,lcd_buffer,"waveshare.net");
 51a:	ed b7       	in	r30, 0x3d	; 61
 51c:	fe b7       	in	r31, 0x3e	; 62
 51e:	31 96       	adiw	r30, 0x01	; 1
 520:	ad b7       	in	r26, 0x3d	; 61
 522:	be b7       	in	r27, 0x3e	; 62
 524:	11 96       	adiw	r26, 0x01	; 1
 526:	1c 92       	st	X, r1
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	81 83       	std	Z+1, r24	; 0x01
 52c:	13 83       	std	Z+3, r17	; 0x03
 52e:	02 83       	std	Z+2, r16	; 0x02
 530:	8d e0       	ldi	r24, 0x0D	; 13
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	95 83       	std	Z+5, r25	; 0x05
 536:	84 83       	std	Z+4, r24	; 0x04
 538:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <showLine>
showLine(0,2,lcd_buffer,"深圳市福田区振华路鼎诚国际 621室");
 53c:	ed b7       	in	r30, 0x3d	; 61
 53e:	fe b7       	in	r31, 0x3e	; 62
 540:	31 96       	adiw	r30, 0x01	; 1
 542:	ad b7       	in	r26, 0x3d	; 61
 544:	be b7       	in	r27, 0x3e	; 62
 546:	11 96       	adiw	r26, 0x01	; 1
 548:	1c 92       	st	X, r1
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	81 83       	std	Z+1, r24	; 0x01
 54e:	13 83       	std	Z+3, r17	; 0x03
 550:	02 83       	std	Z+2, r16	; 0x02
 552:	8b e1       	ldi	r24, 0x1B	; 27
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	95 83       	std	Z+5, r25	; 0x05
 558:	84 83       	std	Z+4, r24	; 0x04
 55a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <showLine>
refreshLCD(lcd_buffer); /*刷新LCD*/
 55e:	8d b7       	in	r24, 0x3d	; 61
 560:	9e b7       	in	r25, 0x3e	; 62
 562:	06 96       	adiw	r24, 0x06	; 6
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	f8 94       	cli
 568:	9e bf       	out	0x3e, r25	; 62
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	8d bf       	out	0x3d, r24	; 61
 56e:	c8 01       	movw	r24, r16
 570:	0e 94 7e 00 	call	0xfc	; 0xfc <refreshLCD>
 574:	ff cf       	rjmp	.-2      	; 0x574 <__stack+0x75>

00000576 <memset>:
 576:	dc 01       	movw	r26, r24
 578:	01 c0       	rjmp	.+2      	; 0x57c <memset+0x6>
 57a:	6d 93       	st	X+, r22
 57c:	41 50       	subi	r20, 0x01	; 1
 57e:	50 40       	sbci	r21, 0x00	; 0
 580:	e0 f7       	brcc	.-8      	; 0x57a <memset+0x4>
 582:	08 95       	ret

00000584 <__udivmodhi4>:
 584:	aa 1b       	sub	r26, r26
 586:	bb 1b       	sub	r27, r27
 588:	51 e1       	ldi	r21, 0x11	; 17
 58a:	07 c0       	rjmp	.+14     	; 0x59a <__udivmodhi4_ep>

0000058c <__udivmodhi4_loop>:
 58c:	aa 1f       	adc	r26, r26
 58e:	bb 1f       	adc	r27, r27
 590:	a6 17       	cp	r26, r22
 592:	b7 07       	cpc	r27, r23
 594:	10 f0       	brcs	.+4      	; 0x59a <__udivmodhi4_ep>
 596:	a6 1b       	sub	r26, r22
 598:	b7 0b       	sbc	r27, r23

0000059a <__udivmodhi4_ep>:
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	5a 95       	dec	r21
 5a0:	a9 f7       	brne	.-22     	; 0x58c <__udivmodhi4_loop>
 5a2:	80 95       	com	r24
 5a4:	90 95       	com	r25
 5a6:	bc 01       	movw	r22, r24
 5a8:	cd 01       	movw	r24, r26
 5aa:	08 95       	ret

000005ac <_exit>:
 5ac:	f8 94       	cli

000005ae <__stop_program>:
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <__stop_program>
