
PS2_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  000006a8  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800192  00800192  000007ce  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000007ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000165  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a45  00000000  00000000  00000953  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023a  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fa  00000000  00000000  000015d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024a  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000271  00000000  00000000  000021f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00002467  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_1>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 ea       	ldi	r30, 0xA8	; 168
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
  78:	a2 39       	cpi	r26, 0x92	; 146
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a2 e9       	ldi	r26, 0x92	; 146
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 3e       	cpi	r26, 0xE0	; 224
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 c9 02 	call	0x592	; 0x592 <main>
  92:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <ps2IntInit>:
// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Falling Edge
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-15: Off
EICRA=0x02;
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	80 93 69 00 	sts	0x0069, r24
EIMSK=0x01;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	8d bb       	out	0x1d, r24	; 29
EIFR=0x01;
  a4:	8c bb       	out	0x1c, r24	; 28
}
  a6:	08 95       	ret

000000a8 <__vector_1>:
*	ISR_BLOCK为GCC interrupt.h库的中断参数
*
*-------------------------------------------------------------------------------------------------------
*/
ISR(PS2_INT_VECTOR,ISR_BLOCK)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
   ps2_status++;	/*状态寄存器*/
  b8:	80 91 de 01 	lds	r24, 0x01DE
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 de 01 	sts	0x01DE, r24
	if(ps2_status==1)
  c2:	80 91 de 01 	lds	r24, 0x01DE
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	29 f4       	brne	.+10     	; 0xd4 <__vector_1+0x2c>
   { 
        if(GET_PS2_DA()) 
  ca:	48 9b       	sbis	0x09, 0	; 9
  cc:	54 c0       	rjmp	.+168    	; 0x176 <__vector_1+0xce>
            ps2_status=0;		/*判断起始位是否为0，不为0则清零计数器*/
  ce:	10 92 de 01 	sts	0x01DE, r1
  d2:	51 c0       	rjmp	.+162    	; 0x176 <__vector_1+0xce>
   }
   else if(ps2_status<10 && ps2_status>0)
  d4:	80 91 de 01 	lds	r24, 0x01DE
  d8:	8a 30       	cpi	r24, 0x0A	; 10
  da:	b8 f4       	brcc	.+46     	; 0x10a <__vector_1+0x62>
  dc:	80 91 de 01 	lds	r24, 0x01DE
  e0:	88 23       	and	r24, r24
  e2:	99 f0       	breq	.+38     	; 0x10a <__vector_1+0x62>
   {
      ps2_data=ps2_data>>1;
  e4:	80 91 dc 01 	lds	r24, 0x01DC
  e8:	86 95       	lsr	r24
  ea:	80 93 dc 01 	sts	0x01DC, r24
			if(GET_PS2_DA()) {ps2_data |= 0x80;ps2_parity++;}	/*接受8bit数据位*/
  ee:	48 9b       	sbis	0x09, 0	; 9
  f0:	06 c0       	rjmp	.+12     	; 0xfe <__vector_1+0x56>
  f2:	80 91 dc 01 	lds	r24, 0x01DC
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	80 93 dc 01 	sts	0x01DC, r24
  fc:	0c c0       	rjmp	.+24     	; 0x116 <__vector_1+0x6e>
			else ps2_data &= 0x7F;
  fe:	80 91 dc 01 	lds	r24, 0x01DC
 102:	8f 77       	andi	r24, 0x7F	; 127
 104:	80 93 dc 01 	sts	0x01DC, r24
 108:	36 c0       	rjmp	.+108    	; 0x176 <__vector_1+0xce>
   }
   else if(ps2_status==10) 
 10a:	80 91 de 01 	lds	r24, 0x01DE
 10e:	8a 30       	cpi	r24, 0x0A	; 10
 110:	41 f4       	brne	.+16     	; 0x122 <__vector_1+0x7a>
   {
        if(GET_PS2_DA()) 	
 112:	48 9b       	sbis	0x09, 0	; 9
 114:	30 c0       	rjmp	.+96     	; 0x176 <__vector_1+0xce>
            ps2_parity++;	/*接收奇偶校验位*/
 116:	80 91 dd 01 	lds	r24, 0x01DD
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 dd 01 	sts	0x01DD, r24
 120:	2a c0       	rjmp	.+84     	; 0x176 <__vector_1+0xce>
   }
   else if((ps2_status==11))
 122:	80 91 de 01 	lds	r24, 0x01DE
 126:	8b 30       	cpi	r24, 0x0B	; 11
 128:	11 f5       	brne	.+68     	; 0x16e <__vector_1+0xc6>
   {
        if((ps2_parity & 0x01))	/*奇偶校验*/
 12a:	80 91 dd 01 	lds	r24, 0x01DD
 12e:	80 ff       	sbrs	r24, 0
 130:	22 c0       	rjmp	.+68     	; 0x176 <__vector_1+0xce>
        {
        ps2_buffer[ps2_wr_index]=ps2_data;	/*刷新PS2数据缓冲器*/
 132:	e0 91 92 01 	lds	r30, 0x0192
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 91 dc 01 	lds	r24, 0x01DC
 13c:	ed 56       	subi	r30, 0x6D	; 109
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	80 83       	st	Z, r24
        if (++ps2_wr_index == PS2_BUFFER_SIZE) ps2_wr_index=0;	
 142:	80 91 92 01 	lds	r24, 0x0192
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 92 01 	sts	0x0192, r24
 14c:	80 91 92 01 	lds	r24, 0x0192
 150:	88 30       	cpi	r24, 0x08	; 8
 152:	11 f4       	brne	.+4      	; 0x158 <__vector_1+0xb0>
 154:	10 92 92 01 	sts	0x0192, r1
        if (++ps2_counter == PS2_BUFFER_SIZE) ps2_counter=0;	
 158:	80 91 9b 01 	lds	r24, 0x019B
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 9b 01 	sts	0x019B, r24
 162:	80 91 9b 01 	lds	r24, 0x019B
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	11 f4       	brne	.+4      	; 0x16e <__vector_1+0xc6>
 16a:	10 92 9b 01 	sts	0x019B, r1
        ps2_parity=0;
        }
   }
   else
   {
        ps2_status=0;	/*接收完数据后清空寄存器*/
 16e:	10 92 de 01 	sts	0x01DE, r1
        ps2_parity=0;
 172:	10 92 dd 01 	sts	0x01DD, r1
   } 
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <ps2GetCode>:
*-------------------------------------------------------------------------------------------------------
*/
uint8_t ps2GetCode(void)
{
uint8_t data;
while(!ps2_counter);
 186:	80 91 9b 01 	lds	r24, 0x019B
 18a:	88 23       	and	r24, r24
 18c:	e1 f3       	breq	.-8      	; 0x186 <ps2GetCode>
data=ps2_buffer[ps2_rd_index];	/*从缓冲器读取数据*/
 18e:	e0 91 df 01 	lds	r30, 0x01DF
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ed 56       	subi	r30, 0x6D	; 109
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	e0 81       	ld	r30, Z
if (++ps2_rd_index == PS2_BUFFER_SIZE) ps2_rd_index=0;	
 19a:	80 91 df 01 	lds	r24, 0x01DF
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 df 01 	sts	0x01DF, r24
 1a4:	80 91 df 01 	lds	r24, 0x01DF
 1a8:	88 30       	cpi	r24, 0x08	; 8
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <ps2GetCode+0x2a>
 1ac:	10 92 df 01 	sts	0x01DF, r1
cli();
 1b0:	f8 94       	cli
--ps2_counter;
 1b2:	80 91 9b 01 	lds	r24, 0x019B
 1b6:	81 50       	subi	r24, 0x01	; 1
 1b8:	80 93 9b 01 	sts	0x019B, r24
sei();
 1bc:	78 94       	sei
return data;
}
 1be:	8e 2f       	mov	r24, r30
 1c0:	08 95       	ret

000001c2 <ps2Init>:

void ps2Init(void)
{
ps2_status=0;
 1c2:	10 92 de 01 	sts	0x01DE, r1
ps2_data=0;
 1c6:	10 92 dc 01 	sts	0x01DC, r1
ps2_parity=0;
 1ca:	10 92 dd 01 	sts	0x01DD, r1

ps2_wr_index=0;
 1ce:	10 92 92 01 	sts	0x0192, r1
ps2_rd_index=0;
 1d2:	10 92 df 01 	sts	0x01DF, r1
ps2_counter=0; 
 1d6:	10 92 9b 01 	sts	0x019B, r1

IN_PS2_CL();
 1da:	51 98       	cbi	0x0a, 1	; 10
SET_PS2_CL();
 1dc:	59 9a       	sbi	0x0b, 1	; 11
IN_PS2_DA();
 1de:	50 98       	cbi	0x0a, 0	; 10
SET_PS2_DA();
 1e0:	58 9a       	sbi	0x0b, 0	; 11
}
 1e2:	08 95       	ret

000001e4 <ps2GetChar>:
*-------------------------------------------------------------------------------------------------------
*/
uint8_t ps2GetCode(void)
{
uint8_t data;
while(!ps2_counter);
 1e4:	80 91 9b 01 	lds	r24, 0x019B
 1e8:	88 23       	and	r24, r24
 1ea:	e1 f3       	breq	.-8      	; 0x1e4 <ps2GetChar>
data=ps2_buffer[ps2_rd_index];	/*从缓冲器读取数据*/
 1ec:	e0 91 df 01 	lds	r30, 0x01DF
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ed 56       	subi	r30, 0x6D	; 109
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	90 81       	ld	r25, Z
if (++ps2_rd_index == PS2_BUFFER_SIZE) ps2_rd_index=0;	
 1f8:	80 91 df 01 	lds	r24, 0x01DF
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 df 01 	sts	0x01DF, r24
 202:	80 91 df 01 	lds	r24, 0x01DF
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	11 f4       	brne	.+4      	; 0x20e <ps2GetChar+0x2a>
 20a:	10 92 df 01 	sts	0x01DF, r1
cli();
 20e:	f8 94       	cli
--ps2_counter;
 210:	80 91 9b 01 	lds	r24, 0x019B
 214:	81 50       	subi	r24, 0x01	; 1
 216:	80 93 9b 01 	sts	0x019B, r24
sei();
 21a:	78 94       	sei
 21c:	ec e1       	ldi	r30, 0x1C	; 28
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b0 e0       	ldi	r27, 0x00	; 0
	ps2char = ps2GetCode();
	while(1)
	{
		if(ps2num > ((sizeof(keyboardToAscii)) >> 1)) 
			return(0);
		else if(keyboardToAscii[ps2num][0] == ps2char) 
 224:	80 81       	ld	r24, Z
 226:	89 17       	cp	r24, r25
 228:	39 f4       	brne	.+14     	; 0x238 <ps2GetChar+0x54>
			return(keyboardToAscii[ps2num][1]);
 22a:	aa 0f       	add	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	a4 5e       	subi	r26, 0xE4	; 228
 230:	be 4f       	sbci	r27, 0xFE	; 254
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	8c 91       	ld	r24, X
 236:	08 95       	ret
 238:	11 96       	adiw	r26, 0x01	; 1
 23a:	32 96       	adiw	r30, 0x02	; 2
	uint8_t ps2num = 0x00;

	ps2char = ps2GetCode();
	while(1)
	{
		if(ps2num > ((sizeof(keyboardToAscii)) >> 1)) 
 23c:	ac 33       	cpi	r26, 0x3C	; 60
 23e:	b1 05       	cpc	r27, r1
 240:	89 f7       	brne	.-30     	; 0x224 <ps2GetChar+0x40>
 242:	80 e0       	ldi	r24, 0x00	; 0
			return(0);
		else if(keyboardToAscii[ps2num][0] == ps2char) 
			return(keyboardToAscii[ps2num][1]);
		ps2num++;
	}
}
 244:	08 95       	ret

00000246 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 246:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 248:	0d b4       	in	r0, 0x2d	; 45
 24a:	07 fe       	sbrs	r0, 7
 24c:	fd cf       	rjmp	.-6      	; 0x248 <spiSendChar+0x2>
}
 24e:	08 95       	ret

00000250 <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 250:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 252:	88 ef       	ldi	r24, 0xF8	; 248
 254:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 256:	0d b4       	in	r0, 0x2d	; 45
 258:	07 fe       	sbrs	r0, 7
 25a:	fd cf       	rjmp	.-6      	; 0x256 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 25c:	89 2f       	mov	r24, r25
 25e:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 260:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 262:	0d b4       	in	r0, 0x2d	; 45
 264:	07 fe       	sbrs	r0, 7
 266:	fd cf       	rjmp	.-6      	; 0x262 <sendCodeST7920+0x12>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 268:	92 95       	swap	r25
 26a:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 26c:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
 26e:	0d b4       	in	r0, 0x2d	; 45
 270:	07 fe       	sbrs	r0, 7
 272:	fd cf       	rjmp	.-6      	; 0x26e <sendCodeST7920+0x1e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 274:	88 eb       	ldi	r24, 0xB8	; 184
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <sendCodeST7920+0x26>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 27a:	08 95       	ret

0000027c <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 27c:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 27e:	8a ef       	ldi	r24, 0xFA	; 250
 280:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 282:	0d b4       	in	r0, 0x2d	; 45
 284:	07 fe       	sbrs	r0, 7
 286:	fd cf       	rjmp	.-6      	; 0x282 <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 288:	89 2f       	mov	r24, r25
 28a:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 28c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 28e:	0d b4       	in	r0, 0x2d	; 45
 290:	07 fe       	sbrs	r0, 7
 292:	fd cf       	rjmp	.-6      	; 0x28e <sendDataST7920+0x12>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 294:	92 95       	swap	r25
 296:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 298:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
 29a:	0d b4       	in	r0, 0x2d	; 45
 29c:	07 fe       	sbrs	r0, 7
 29e:	fd cf       	rjmp	.-6      	; 0x29a <sendDataST7920+0x1e>
 2a0:	88 eb       	ldi	r24, 0xB8	; 184
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <sendDataST7920+0x26>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 2a6:	08 95       	ret

000002a8 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 2a8:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2aa:	88 ef       	ldi	r24, 0xF8	; 248
 2ac:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 2ae:	0d b4       	in	r0, 0x2d	; 45
 2b0:	07 fe       	sbrs	r0, 7
 2b2:	fd cf       	rjmp	.-6      	; 0x2ae <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2b4:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 2b6:	0d b4       	in	r0, 0x2d	; 45
 2b8:	07 fe       	sbrs	r0, 7
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <refreshLCD+0xe>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2bc:	80 e2       	ldi	r24, 0x20	; 32
 2be:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 2c0:	0d b4       	in	r0, 0x2d	; 45
 2c2:	07 fe       	sbrs	r0, 7
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <refreshLCD+0x18>
 2c6:	88 eb       	ldi	r24, 0xB8	; 184
 2c8:	8a 95       	dec	r24
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <refreshLCD+0x20>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2d0:	6a ef       	ldi	r22, 0xFA	; 250
 2d2:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 2d4:	fa 01       	movw	r30, r20
 2d6:	e2 0f       	add	r30, r18
 2d8:	f3 1f       	adc	r31, r19
 2da:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2dc:	6e bd       	out	0x2e, r22	; 46
	while (!(SPSR & (1<<SPIF)));
 2de:	0d b4       	in	r0, 0x2d	; 45
 2e0:	07 fe       	sbrs	r0, 7
 2e2:	fd cf       	rjmp	.-6      	; 0x2de <refreshLCD+0x36>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 2e4:	8e 2f       	mov	r24, r30
 2e6:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2e8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 2ea:	0d b4       	in	r0, 0x2d	; 45
 2ec:	07 fe       	sbrs	r0, 7
 2ee:	fd cf       	rjmp	.-6      	; 0x2ea <refreshLCD+0x42>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 2f0:	e2 95       	swap	r30
 2f2:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2f4:	ee bd       	out	0x2e, r30	; 46
	while (!(SPSR & (1<<SPIF)));
 2f6:	0d b4       	in	r0, 0x2d	; 45
 2f8:	07 fe       	sbrs	r0, 7
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <refreshLCD+0x4e>
 2fc:	89 2f       	mov	r24, r25
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <refreshLCD+0x56>
 302:	2f 5f       	subi	r18, 0xFF	; 255
 304:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 306:	20 31       	cpi	r18, 0x10	; 16
 308:	31 05       	cpc	r19, r1
 30a:	21 f7       	brne	.-56     	; 0x2d4 <refreshLCD+0x2c>
 30c:	da 01       	movw	r26, r20
 30e:	fa 01       	movw	r30, r20
 310:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 312:	3a ef       	ldi	r19, 0xFA	; 250
 314:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 316:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 318:	3e bd       	out	0x2e, r19	; 46
	while (!(SPSR & (1<<SPIF)));
 31a:	0d b4       	in	r0, 0x2d	; 45
 31c:	07 fe       	sbrs	r0, 7
 31e:	fd cf       	rjmp	.-6      	; 0x31a <refreshLCD+0x72>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 320:	82 2f       	mov	r24, r18
 322:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 324:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 326:	0d b4       	in	r0, 0x2d	; 45
 328:	07 fe       	sbrs	r0, 7
 32a:	fd cf       	rjmp	.-6      	; 0x326 <refreshLCD+0x7e>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 32c:	22 95       	swap	r18
 32e:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 330:	2e bd       	out	0x2e, r18	; 46
	while (!(SPSR & (1<<SPIF)));
 332:	0d b4       	in	r0, 0x2d	; 45
 334:	07 fe       	sbrs	r0, 7
 336:	fd cf       	rjmp	.-6      	; 0x332 <refreshLCD+0x8a>
 338:	89 2f       	mov	r24, r25
 33a:	8a 95       	dec	r24
 33c:	f1 f7       	brne	.-4      	; 0x33a <refreshLCD+0x92>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 33e:	6f 5f       	subi	r22, 0xFF	; 255
 340:	31 96       	adiw	r30, 0x01	; 1
 342:	60 33       	cpi	r22, 0x30	; 48
 344:	41 f7       	brne	.-48     	; 0x316 <refreshLCD+0x6e>
 346:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 348:	7a ef       	ldi	r23, 0xFA	; 250
 34a:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 34c:	50 96       	adiw	r26, 0x10	; 16
 34e:	2c 91       	ld	r18, X
 350:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 352:	7e bd       	out	0x2e, r23	; 46
	while (!(SPSR & (1<<SPIF)));
 354:	0d b4       	in	r0, 0x2d	; 45
 356:	07 fe       	sbrs	r0, 7
 358:	fd cf       	rjmp	.-6      	; 0x354 <refreshLCD+0xac>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 35a:	82 2f       	mov	r24, r18
 35c:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 35e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 360:	0d b4       	in	r0, 0x2d	; 45
 362:	07 fe       	sbrs	r0, 7
 364:	fd cf       	rjmp	.-6      	; 0x360 <refreshLCD+0xb8>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 366:	22 95       	swap	r18
 368:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 36a:	2e bd       	out	0x2e, r18	; 46
	while (!(SPSR & (1<<SPIF)));
 36c:	0d b4       	in	r0, 0x2d	; 45
 36e:	07 fe       	sbrs	r0, 7
 370:	fd cf       	rjmp	.-6      	; 0x36c <refreshLCD+0xc4>
 372:	89 2f       	mov	r24, r25
 374:	8a 95       	dec	r24
 376:	f1 f7       	brne	.-4      	; 0x374 <refreshLCD+0xcc>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 378:	3f 5f       	subi	r19, 0xFF	; 255
 37a:	11 96       	adiw	r26, 0x01	; 1
 37c:	30 32       	cpi	r19, 0x20	; 32
 37e:	31 f7       	brne	.-52     	; 0x34c <refreshLCD+0xa4>
 380:	fa 01       	movw	r30, r20
 382:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 384:	3a ef       	ldi	r19, 0xFA	; 250
 386:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 388:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 38a:	3e bd       	out	0x2e, r19	; 46
	while (!(SPSR & (1<<SPIF)));
 38c:	0d b4       	in	r0, 0x2d	; 45
 38e:	07 fe       	sbrs	r0, 7
 390:	fd cf       	rjmp	.-6      	; 0x38c <refreshLCD+0xe4>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 392:	89 2f       	mov	r24, r25
 394:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 396:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 398:	0d b4       	in	r0, 0x2d	; 45
 39a:	07 fe       	sbrs	r0, 7
 39c:	fd cf       	rjmp	.-6      	; 0x398 <refreshLCD+0xf0>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 39e:	92 95       	swap	r25
 3a0:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3a2:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
 3a4:	0d b4       	in	r0, 0x2d	; 45
 3a6:	07 fe       	sbrs	r0, 7
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <refreshLCD+0xfc>
 3aa:	82 2f       	mov	r24, r18
 3ac:	8a 95       	dec	r24
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <refreshLCD+0x104>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 63;addr++)
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	31 96       	adiw	r30, 0x01	; 1
 3b4:	6f 33       	cpi	r22, 0x3F	; 63
 3b6:	41 f7       	brne	.-48     	; 0x388 <refreshLCD+0xe0>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 3b8:	08 95       	ret

000003ba <decToAscii>:
*	width是转换宽度
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	fb 01       	movw	r30, r22
 3c0:	ec 01       	movw	r28, r24
			case 1:
			{
				*(str+num) = (dec+'0');
				break;
			}
			default: *(str+num) = '0';
 3c2:	20 e3       	ldi	r18, 0x30	; 48
 3c4:	43 c0       	rjmp	.+134    	; 0x44c <decToAscii+0x92>
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
	{
		switch(width)
 3c6:	43 30       	cpi	r20, 0x03	; 3
 3c8:	21 f1       	breq	.+72     	; 0x412 <decToAscii+0x58>
 3ca:	44 30       	cpi	r20, 0x04	; 4
 3cc:	28 f4       	brcc	.+10     	; 0x3d8 <decToAscii+0x1e>
 3ce:	41 30       	cpi	r20, 0x01	; 1
 3d0:	b1 f1       	breq	.+108    	; 0x43e <decToAscii+0x84>
 3d2:	42 30       	cpi	r20, 0x02	; 2
 3d4:	c1 f5       	brne	.+112    	; 0x446 <decToAscii+0x8c>
 3d6:	28 c0       	rjmp	.+80     	; 0x428 <decToAscii+0x6e>
 3d8:	44 30       	cpi	r20, 0x04	; 4
 3da:	69 f0       	breq	.+26     	; 0x3f6 <decToAscii+0x3c>
 3dc:	45 30       	cpi	r20, 0x05	; 5
 3de:	99 f5       	brne	.+102    	; 0x446 <decToAscii+0x8c>
		{
			case 5:
			{
				*(str+num) = (dec/10000+'0');
 3e0:	cf 01       	movw	r24, r30
 3e2:	60 e1       	ldi	r22, 0x10	; 16
 3e4:	77 e2       	ldi	r23, 0x27	; 39
 3e6:	0e 94 3e 03 	call	0x67c	; 0x67c <__udivmodhi4>
 3ea:	60 5d       	subi	r22, 0xD0	; 208
 3ec:	68 83       	st	Y, r22
				dec%=10000;
 3ee:	cf 01       	movw	r24, r30
 3f0:	60 e1       	ldi	r22, 0x10	; 16
 3f2:	77 e2       	ldi	r23, 0x27	; 39
 3f4:	0a c0       	rjmp	.+20     	; 0x40a <decToAscii+0x50>
				break;
			}			
			case 4:
			{
				*(str+num) = (dec/1000+'0');
 3f6:	cf 01       	movw	r24, r30
 3f8:	68 ee       	ldi	r22, 0xE8	; 232
 3fa:	73 e0       	ldi	r23, 0x03	; 3
 3fc:	0e 94 3e 03 	call	0x67c	; 0x67c <__udivmodhi4>
 400:	60 5d       	subi	r22, 0xD0	; 208
 402:	68 83       	st	Y, r22
				dec%=1000;
 404:	cf 01       	movw	r24, r30
 406:	68 ee       	ldi	r22, 0xE8	; 232
 408:	73 e0       	ldi	r23, 0x03	; 3
 40a:	0e 94 3e 03 	call	0x67c	; 0x67c <__udivmodhi4>
 40e:	fc 01       	movw	r30, r24
 410:	1b c0       	rjmp	.+54     	; 0x448 <decToAscii+0x8e>
				break;
			}
			case 3:
			{
				*(str+num) = (dec/100+'0');
 412:	cf 01       	movw	r24, r30
 414:	64 e6       	ldi	r22, 0x64	; 100
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	0e 94 3e 03 	call	0x67c	; 0x67c <__udivmodhi4>
 41c:	60 5d       	subi	r22, 0xD0	; 208
 41e:	68 83       	st	Y, r22
				dec%=100;
 420:	cf 01       	movw	r24, r30
 422:	64 e6       	ldi	r22, 0x64	; 100
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	f1 cf       	rjmp	.-30     	; 0x40a <decToAscii+0x50>
				break;
			}
			case 2:
			{
				*(str+num) = (dec/10+'0');
 428:	cf 01       	movw	r24, r30
 42a:	6a e0       	ldi	r22, 0x0A	; 10
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	0e 94 3e 03 	call	0x67c	; 0x67c <__udivmodhi4>
 432:	60 5d       	subi	r22, 0xD0	; 208
 434:	68 83       	st	Y, r22
				dec%=10;
 436:	cf 01       	movw	r24, r30
 438:	6a e0       	ldi	r22, 0x0A	; 10
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	e6 cf       	rjmp	.-52     	; 0x40a <decToAscii+0x50>
				break;
			}
			case 1:
			{
				*(str+num) = (dec+'0');
 43e:	e0 5d       	subi	r30, 0xD0	; 208
 440:	e8 83       	st	Y, r30
 442:	e0 53       	subi	r30, 0x30	; 48
 444:	01 c0       	rjmp	.+2      	; 0x448 <decToAscii+0x8e>
				break;
			}
			default: *(str+num) = '0';
 446:	28 83       	st	Y, r18
		}
		width--;
 448:	41 50       	subi	r20, 0x01	; 1
 44a:	21 96       	adiw	r28, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	uint8_t num=0;
	while(width)
 44c:	44 23       	and	r20, r20
 44e:	09 f0       	breq	.+2      	; 0x452 <decToAscii+0x98>
 450:	ba cf       	rjmp	.-140    	; 0x3c6 <decToAscii+0xc>
			default: *(str+num) = '0';
		}
		width--;
		num++;
	}
}
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <st7920LcdInit>:
}
/*Hardware Environment：DVK501 && M169+ EX*/
#elif defined(_DVK501_M169_EX_)
void st7920LcdInit(void)
{
DDRB|=0x0F;
 458:	84 b1       	in	r24, 0x04	; 4
 45a:	8f 60       	ori	r24, 0x0F	; 15
 45c:	84 b9       	out	0x04, r24	; 4
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 45e:	80 e5       	ldi	r24, 0x50	; 80
 460:	8c bd       	out	0x2c, r24	; 44
SPSR=0x01;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	8d bd       	out	0x2d, r24	; 45
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 466:	88 ef       	ldi	r24, 0xF8	; 248
 468:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 46a:	0d b4       	in	r0, 0x2d	; 45
 46c:	07 fe       	sbrs	r0, 7
 46e:	fd cf       	rjmp	.-6      	; 0x46a <st7920LcdInit+0x12>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 470:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 472:	0d b4       	in	r0, 0x2d	; 45
 474:	07 fe       	sbrs	r0, 7
 476:	fd cf       	rjmp	.-6      	; 0x472 <st7920LcdInit+0x1a>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 478:	80 ec       	ldi	r24, 0xC0	; 192
 47a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 47c:	0d b4       	in	r0, 0x2d	; 45
 47e:	07 fe       	sbrs	r0, 7
 480:	fd cf       	rjmp	.-6      	; 0x47c <st7920LcdInit+0x24>
 482:	88 eb       	ldi	r24, 0xB8	; 184
 484:	8a 95       	dec	r24
 486:	f1 f7       	brne	.-4      	; 0x484 <st7920LcdInit+0x2c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 488:	88 ef       	ldi	r24, 0xF8	; 248
 48a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 48c:	0d b4       	in	r0, 0x2d	; 45
 48e:	07 fe       	sbrs	r0, 7
 490:	fd cf       	rjmp	.-6      	; 0x48c <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 492:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 494:	0d b4       	in	r0, 0x2d	; 45
 496:	07 fe       	sbrs	r0, 7
 498:	fd cf       	rjmp	.-6      	; 0x494 <st7920LcdInit+0x3c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 49a:	80 e1       	ldi	r24, 0x10	; 16
 49c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 49e:	0d b4       	in	r0, 0x2d	; 45
 4a0:	07 fe       	sbrs	r0, 7
 4a2:	fd cf       	rjmp	.-6      	; 0x49e <st7920LcdInit+0x46>
 4a4:	88 eb       	ldi	r24, 0xB8	; 184
 4a6:	8a 95       	dec	r24
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <st7920LcdInit+0x4e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4aa:	86 e6       	ldi	r24, 0x66	; 102
 4ac:	9e e0       	ldi	r25, 0x0E	; 14
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <st7920LcdInit+0x56>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 4b2:	8c e9       	ldi	r24, 0x9C	; 156
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	60 e2       	ldi	r22, 0x20	; 32
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	40 e4       	ldi	r20, 0x40	; 64
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	0e 94 37 03 	call	0x66e	; 0x66e <memset>
}
 4c2:	08 95       	ret

000004c4 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 4c4:	af 92       	push	r10
 4c6:	bf 92       	push	r11
 4c8:	cf 92       	push	r12
 4ca:	df 92       	push	r13
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	df 93       	push	r29
 4d4:	cf 93       	push	r28
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	0d 85       	ldd	r16, Y+13	; 0x0d
 4dc:	ae 84       	ldd	r10, Y+14	; 0x0e
 4de:	bf 84       	ldd	r11, Y+15	; 0x0f
 4e0:	e8 88       	ldd	r14, Y+16	; 0x10
 4e2:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 4e4:	02 95       	swap	r16
 4e6:	00 7f       	andi	r16, 0xF0	; 240
 4e8:	8c 85       	ldd	r24, Y+12	; 0x0c
 4ea:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 4ec:	de 01       	movw	r26, r28
 4ee:	52 96       	adiw	r26, 0x12	; 18
 4f0:	41 c0       	rjmp	.+130    	; 0x574 <__stack+0x75>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 4f2:	01 34       	cpi	r16, 0x41	; 65
 4f4:	08 f0       	brcs	.+2      	; 0x4f8 <showLine+0x34>
 4f6:	43 c0       	rjmp	.+134    	; 0x57e <__stack+0x7f>

		if(*str == '\\')
 4f8:	8c 35       	cpi	r24, 0x5C	; 92
 4fa:	51 f4       	brne	.+20     	; 0x510 <__stack+0x11>
		{
			str++;
 4fc:	08 94       	sec
 4fe:	e1 1c       	adc	r14, r1
 500:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 502:	95 01       	movw	r18, r10
 504:	20 0f       	add	r18, r16
 506:	31 1d       	adc	r19, r1
 508:	f7 01       	movw	r30, r14
 50a:	80 81       	ld	r24, Z
 50c:	f9 01       	movw	r30, r18
 50e:	2d c0       	rjmp	.+90     	; 0x56a <__stack+0x6b>
		}
		else if(*str == '%')
 510:	85 32       	cpi	r24, 0x25	; 37
 512:	41 f5       	brne	.+80     	; 0x564 <__stack+0x65>
		{
			str++;
 514:	08 94       	sec
 516:	e1 1c       	adc	r14, r1
 518:	f1 1c       	adc	r15, r1
			if (*str=='d')
 51a:	f7 01       	movw	r30, r14
 51c:	80 81       	ld	r24, Z
 51e:	84 36       	cpi	r24, 0x64	; 100
 520:	c1 f4       	brne	.+48     	; 0x552 <__stack+0x53>
			{
				str++;
 522:	08 94       	sec
 524:	e1 1c       	adc	r14, r1
 526:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 528:	92 e0       	ldi	r25, 0x02	; 2
 52a:	c9 2e       	mov	r12, r25
 52c:	d1 2c       	mov	r13, r1
 52e:	ca 0e       	add	r12, r26
 530:	db 1e       	adc	r13, r27
 532:	6d 91       	ld	r22, X+
 534:	7c 91       	ld	r23, X
 536:	f7 01       	movw	r30, r14
 538:	40 81       	ld	r20, Z
 53a:	40 53       	subi	r20, 0x30	; 48
 53c:	c5 01       	movw	r24, r10
 53e:	80 0f       	add	r24, r16
 540:	91 1d       	adc	r25, r1
 542:	0e 94 dd 01 	call	0x3ba	; 0x3ba <decToAscii>
				coordinate+=(*str-'0'-1);
 546:	01 53       	subi	r16, 0x31	; 49
 548:	f7 01       	movw	r30, r14
 54a:	80 81       	ld	r24, Z
 54c:	08 0f       	add	r16, r24
 54e:	d6 01       	movw	r26, r12
 550:	0d c0       	rjmp	.+26     	; 0x56c <__stack+0x6d>
			}
			else if(*str=='c')
 552:	83 36       	cpi	r24, 0x63	; 99
 554:	59 f4       	brne	.+22     	; 0x56c <__stack+0x6d>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 556:	f5 01       	movw	r30, r10
 558:	e0 0f       	add	r30, r16
 55a:	f1 1d       	adc	r31, r1
 55c:	8c 91       	ld	r24, X
 55e:	80 83       	st	Z, r24
 560:	12 96       	adiw	r26, 0x02	; 2
 562:	04 c0       	rjmp	.+8      	; 0x56c <__stack+0x6d>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 564:	f5 01       	movw	r30, r10
 566:	e0 0f       	add	r30, r16
 568:	f1 1d       	adc	r31, r1
 56a:	80 83       	st	Z, r24
		}
		str++;
 56c:	08 94       	sec
 56e:	e1 1c       	adc	r14, r1
 570:	f1 1c       	adc	r15, r1
		coordinate++;
 572:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 574:	f7 01       	movw	r30, r14
 576:	80 81       	ld	r24, Z
 578:	88 23       	and	r24, r24
 57a:	09 f0       	breq	.+2      	; 0x57e <__stack+0x7f>
 57c:	ba cf       	rjmp	.-140    	; 0x4f2 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 57e:	cf 91       	pop	r28
 580:	df 91       	pop	r29
 582:	0f 91       	pop	r16
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	df 90       	pop	r13
 58a:	cf 90       	pop	r12
 58c:	bf 90       	pop	r11
 58e:	af 90       	pop	r10
 590:	08 95       	ret

00000592 <main>:
#include <ws_ps2port.h>
#include <ws_ps2_code.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 592:	ef 92       	push	r14
 594:	ff 92       	push	r15
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Falling Edge
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-15: Off
EICRA=0x02;
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	80 93 69 00 	sts	0x0069, r24
EIMSK=0x01;
 5a4:	ff 24       	eor	r15, r15
 5a6:	f3 94       	inc	r15
 5a8:	fd ba       	out	0x1d, r15	; 29
EIFR=0x01;
 5aa:	fc ba       	out	0x1c, r15	; 28
ps2IntInit();
st7920LcdInit();
 5ac:	0e 94 2c 02 	call	0x458	; 0x458 <st7920LcdInit>

showLine(0,0,lcd_buffer,"键盘--LCD12864");
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <main+0x20>
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <main+0x22>
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <main+0x24>
 5b6:	ed b7       	in	r30, 0x3d	; 61
 5b8:	fe b7       	in	r31, 0x3e	; 62
 5ba:	31 96       	adiw	r30, 0x01	; 1
 5bc:	ad b7       	in	r26, 0x3d	; 61
 5be:	be b7       	in	r27, 0x3e	; 62
 5c0:	11 96       	adiw	r26, 0x01	; 1
 5c2:	1c 92       	st	X, r1
 5c4:	11 82       	std	Z+1, r1	; 0x01
 5c6:	0c e9       	ldi	r16, 0x9C	; 156
 5c8:	11 e0       	ldi	r17, 0x01	; 1
 5ca:	13 83       	std	Z+3, r17	; 0x03
 5cc:	02 83       	std	Z+2, r16	; 0x02
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	95 83       	std	Z+5, r25	; 0x05
 5d4:	84 83       	std	Z+4, r24	; 0x04
 5d6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <showLine>
showLine(0,1,lcd_buffer,"请按键盘:");
 5da:	ed b7       	in	r30, 0x3d	; 61
 5dc:	fe b7       	in	r31, 0x3e	; 62
 5de:	31 96       	adiw	r30, 0x01	; 1
 5e0:	ad b7       	in	r26, 0x3d	; 61
 5e2:	be b7       	in	r27, 0x3e	; 62
 5e4:	11 96       	adiw	r26, 0x01	; 1
 5e6:	1c 92       	st	X, r1
 5e8:	f1 82       	std	Z+1, r15	; 0x01
 5ea:	13 83       	std	Z+3, r17	; 0x03
 5ec:	02 83       	std	Z+2, r16	; 0x02
 5ee:	8f e0       	ldi	r24, 0x0F	; 15
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	95 83       	std	Z+5, r25	; 0x05
 5f4:	84 83       	std	Z+4, r24	; 0x04
 5f6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <showLine>
refreshLCD(lcd_buffer);
 5fa:	2d b7       	in	r18, 0x3d	; 61
 5fc:	3e b7       	in	r19, 0x3e	; 62
 5fe:	2a 5f       	subi	r18, 0xFA	; 250
 600:	3f 4f       	sbci	r19, 0xFF	; 255
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	3e bf       	out	0x3e, r19	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	2d bf       	out	0x3d, r18	; 61
 60c:	c8 01       	movw	r24, r16
 60e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <refreshLCD>
/*PS2 initialization*/
ps2Init();
 612:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <ps2Init>

sei();
 616:	78 94       	sei
while(1)
{
	showLine(10,1,lcd_buffer,"%c",ps2GetChar());
 618:	2a e0       	ldi	r18, 0x0A	; 10
 61a:	e2 2e       	mov	r14, r18
 61c:	cc e9       	ldi	r28, 0x9C	; 156
 61e:	d1 e0       	ldi	r29, 0x01	; 1
 620:	09 e1       	ldi	r16, 0x19	; 25
 622:	11 e0       	ldi	r17, 0x01	; 1
 624:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ps2GetChar>
 628:	ad b7       	in	r26, 0x3d	; 61
 62a:	be b7       	in	r27, 0x3e	; 62
 62c:	18 97       	sbiw	r26, 0x08	; 8
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	be bf       	out	0x3e, r27	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	ad bf       	out	0x3d, r26	; 61
 638:	ed b7       	in	r30, 0x3d	; 61
 63a:	fe b7       	in	r31, 0x3e	; 62
 63c:	31 96       	adiw	r30, 0x01	; 1
 63e:	11 96       	adiw	r26, 0x01	; 1
 640:	ec 92       	st	X, r14
 642:	f1 82       	std	Z+1, r15	; 0x01
 644:	d3 83       	std	Z+3, r29	; 0x03
 646:	c2 83       	std	Z+2, r28	; 0x02
 648:	15 83       	std	Z+5, r17	; 0x05
 64a:	04 83       	std	Z+4, r16	; 0x04
 64c:	86 83       	std	Z+6, r24	; 0x06
 64e:	17 82       	std	Z+7, r1	; 0x07
 650:	0e 94 62 02 	call	0x4c4	; 0x4c4 <showLine>
	refreshLCD(lcd_buffer);
 654:	2d b7       	in	r18, 0x3d	; 61
 656:	3e b7       	in	r19, 0x3e	; 62
 658:	28 5f       	subi	r18, 0xF8	; 248
 65a:	3f 4f       	sbci	r19, 0xFF	; 255
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	f8 94       	cli
 660:	3e bf       	out	0x3e, r19	; 62
 662:	0f be       	out	0x3f, r0	; 63
 664:	2d bf       	out	0x3d, r18	; 61
 666:	ce 01       	movw	r24, r28
 668:	0e 94 54 01 	call	0x2a8	; 0x2a8 <refreshLCD>
 66c:	db cf       	rjmp	.-74     	; 0x624 <main+0x92>

0000066e <memset>:
 66e:	dc 01       	movw	r26, r24
 670:	01 c0       	rjmp	.+2      	; 0x674 <memset+0x6>
 672:	6d 93       	st	X+, r22
 674:	41 50       	subi	r20, 0x01	; 1
 676:	50 40       	sbci	r21, 0x00	; 0
 678:	e0 f7       	brcc	.-8      	; 0x672 <memset+0x4>
 67a:	08 95       	ret

0000067c <__udivmodhi4>:
 67c:	aa 1b       	sub	r26, r26
 67e:	bb 1b       	sub	r27, r27
 680:	51 e1       	ldi	r21, 0x11	; 17
 682:	07 c0       	rjmp	.+14     	; 0x692 <__udivmodhi4_ep>

00000684 <__udivmodhi4_loop>:
 684:	aa 1f       	adc	r26, r26
 686:	bb 1f       	adc	r27, r27
 688:	a6 17       	cp	r26, r22
 68a:	b7 07       	cpc	r27, r23
 68c:	10 f0       	brcs	.+4      	; 0x692 <__udivmodhi4_ep>
 68e:	a6 1b       	sub	r26, r22
 690:	b7 0b       	sbc	r27, r23

00000692 <__udivmodhi4_ep>:
 692:	88 1f       	adc	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	5a 95       	dec	r21
 698:	a9 f7       	brne	.-22     	; 0x684 <__udivmodhi4_loop>
 69a:	80 95       	com	r24
 69c:	90 95       	com	r25
 69e:	bc 01       	movw	r22, r24
 6a0:	cd 01       	movw	r24, r26
 6a2:	08 95       	ret

000006a4 <_exit>:
 6a4:	f8 94       	cli

000006a6 <__stop_program>:
 6a6:	ff cf       	rjmp	.-2      	; 0x6a6 <__stop_program>
