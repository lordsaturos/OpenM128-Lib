
PS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  0000026a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800176  00800176  00000374  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e3  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000022d  00000000  00000000  00000477  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000134  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002de  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011f  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_1>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea e6       	ldi	r30, 0x6A	; 106
  70:	f2 e0       	ldi	r31, 0x02	; 2
  72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
  78:	a6 37       	cpi	r26, 0x76	; 118
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a6 e7       	ldi	r26, 0x76	; 118
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a4 38       	cpi	r26, 0x84	; 132
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 23 01 	call	0x246	; 0x246 <main>
  92:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <ps2IntInit>:
// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Falling Edge
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-15: Off
EICRA=0x02;
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	80 93 69 00 	sts	0x0069, r24
EIMSK=0x01;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	8d bb       	out	0x1d, r24	; 29
EIFR=0x01;
  a4:	8c bb       	out	0x1c, r24	; 28
}
  a6:	08 95       	ret

000000a8 <__vector_1>:
*	ISR_BLOCK为GCC interrupt.h库的中断参数
*
*-------------------------------------------------------------------------------------------------------
*/
ISR(PS2_INT_VECTOR,ISR_BLOCK)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
   ps2_status++;	/*状态寄存器*/
  b8:	80 91 82 01 	lds	r24, 0x0182
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 82 01 	sts	0x0182, r24
	if(ps2_status==1)
  c2:	80 91 82 01 	lds	r24, 0x0182
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	29 f4       	brne	.+10     	; 0xd4 <__vector_1+0x2c>
   { 
        if(GET_PS2_DA()) 
  ca:	48 9b       	sbis	0x09, 0	; 9
  cc:	54 c0       	rjmp	.+168    	; 0x176 <__vector_1+0xce>
            ps2_status=0;		/*判断起始位是否为0，不为0则清零计数器*/
  ce:	10 92 82 01 	sts	0x0182, r1
  d2:	51 c0       	rjmp	.+162    	; 0x176 <__vector_1+0xce>
   }
   else if(ps2_status<10 && ps2_status>0)
  d4:	80 91 82 01 	lds	r24, 0x0182
  d8:	8a 30       	cpi	r24, 0x0A	; 10
  da:	b8 f4       	brcc	.+46     	; 0x10a <__vector_1+0x62>
  dc:	80 91 82 01 	lds	r24, 0x0182
  e0:	88 23       	and	r24, r24
  e2:	99 f0       	breq	.+38     	; 0x10a <__vector_1+0x62>
   {
      ps2_data=ps2_data>>1;
  e4:	80 91 80 01 	lds	r24, 0x0180
  e8:	86 95       	lsr	r24
  ea:	80 93 80 01 	sts	0x0180, r24
			if(GET_PS2_DA()) {ps2_data |= 0x80;ps2_parity++;}	/*接受8bit数据位*/
  ee:	48 9b       	sbis	0x09, 0	; 9
  f0:	06 c0       	rjmp	.+12     	; 0xfe <__vector_1+0x56>
  f2:	80 91 80 01 	lds	r24, 0x0180
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	80 93 80 01 	sts	0x0180, r24
  fc:	0c c0       	rjmp	.+24     	; 0x116 <__vector_1+0x6e>
			else ps2_data &= 0x7F;
  fe:	80 91 80 01 	lds	r24, 0x0180
 102:	8f 77       	andi	r24, 0x7F	; 127
 104:	80 93 80 01 	sts	0x0180, r24
 108:	36 c0       	rjmp	.+108    	; 0x176 <__vector_1+0xce>
   }
   else if(ps2_status==10) 
 10a:	80 91 82 01 	lds	r24, 0x0182
 10e:	8a 30       	cpi	r24, 0x0A	; 10
 110:	41 f4       	brne	.+16     	; 0x122 <__vector_1+0x7a>
   {
        if(GET_PS2_DA()) 	
 112:	48 9b       	sbis	0x09, 0	; 9
 114:	30 c0       	rjmp	.+96     	; 0x176 <__vector_1+0xce>
            ps2_parity++;	/*接收奇偶校验位*/
 116:	80 91 81 01 	lds	r24, 0x0181
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 81 01 	sts	0x0181, r24
 120:	2a c0       	rjmp	.+84     	; 0x176 <__vector_1+0xce>
   }
   else if((ps2_status==11))
 122:	80 91 82 01 	lds	r24, 0x0182
 126:	8b 30       	cpi	r24, 0x0B	; 11
 128:	11 f5       	brne	.+68     	; 0x16e <__vector_1+0xc6>
   {
        if((ps2_parity & 0x01))	/*奇偶校验*/
 12a:	80 91 81 01 	lds	r24, 0x0181
 12e:	80 ff       	sbrs	r24, 0
 130:	22 c0       	rjmp	.+68     	; 0x176 <__vector_1+0xce>
        {
        ps2_buffer[ps2_wr_index]=ps2_data;	/*刷新PS2数据缓冲器*/
 132:	e0 91 76 01 	lds	r30, 0x0176
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 91 80 01 	lds	r24, 0x0180
 13c:	e9 58       	subi	r30, 0x89	; 137
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	80 83       	st	Z, r24
        if (++ps2_wr_index == PS2_BUFFER_SIZE) ps2_wr_index=0;	
 142:	80 91 76 01 	lds	r24, 0x0176
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 76 01 	sts	0x0176, r24
 14c:	80 91 76 01 	lds	r24, 0x0176
 150:	88 30       	cpi	r24, 0x08	; 8
 152:	11 f4       	brne	.+4      	; 0x158 <__vector_1+0xb0>
 154:	10 92 76 01 	sts	0x0176, r1
        if (++ps2_counter == PS2_BUFFER_SIZE) ps2_counter=0;	
 158:	80 91 7f 01 	lds	r24, 0x017F
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 7f 01 	sts	0x017F, r24
 162:	80 91 7f 01 	lds	r24, 0x017F
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	11 f4       	brne	.+4      	; 0x16e <__vector_1+0xc6>
 16a:	10 92 7f 01 	sts	0x017F, r1
        ps2_parity=0;
        }
   }
   else
   {
        ps2_status=0;	/*接收完数据后清空寄存器*/
 16e:	10 92 82 01 	sts	0x0182, r1
        ps2_parity=0;
 172:	10 92 81 01 	sts	0x0181, r1
   } 
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <ps2GetCode>:
*-------------------------------------------------------------------------------------------------------
*/
uint8_t ps2GetCode(void)
{
uint8_t data;
while(!ps2_counter);
 186:	80 91 7f 01 	lds	r24, 0x017F
 18a:	88 23       	and	r24, r24
 18c:	e1 f3       	breq	.-8      	; 0x186 <ps2GetCode>
data=ps2_buffer[ps2_rd_index];	/*从缓冲器读取数据*/
 18e:	e0 91 83 01 	lds	r30, 0x0183
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	e9 58       	subi	r30, 0x89	; 137
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	e0 81       	ld	r30, Z
if (++ps2_rd_index == PS2_BUFFER_SIZE) ps2_rd_index=0;	
 19a:	80 91 83 01 	lds	r24, 0x0183
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 83 01 	sts	0x0183, r24
 1a4:	80 91 83 01 	lds	r24, 0x0183
 1a8:	88 30       	cpi	r24, 0x08	; 8
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <ps2GetCode+0x2a>
 1ac:	10 92 83 01 	sts	0x0183, r1
cli();
 1b0:	f8 94       	cli
--ps2_counter;
 1b2:	80 91 7f 01 	lds	r24, 0x017F
 1b6:	81 50       	subi	r24, 0x01	; 1
 1b8:	80 93 7f 01 	sts	0x017F, r24
sei();
 1bc:	78 94       	sei
return data;
}
 1be:	8e 2f       	mov	r24, r30
 1c0:	08 95       	ret

000001c2 <ps2Init>:

void ps2Init(void)
{
ps2_status=0;
 1c2:	10 92 82 01 	sts	0x0182, r1
ps2_data=0;
 1c6:	10 92 80 01 	sts	0x0180, r1
ps2_parity=0;
 1ca:	10 92 81 01 	sts	0x0181, r1

ps2_wr_index=0;
 1ce:	10 92 76 01 	sts	0x0176, r1
ps2_rd_index=0;
 1d2:	10 92 83 01 	sts	0x0183, r1
ps2_counter=0; 
 1d6:	10 92 7f 01 	sts	0x017F, r1

IN_PS2_CL();
 1da:	51 98       	cbi	0x0a, 1	; 10
SET_PS2_CL();
 1dc:	59 9a       	sbi	0x0b, 1	; 11
IN_PS2_DA();
 1de:	50 98       	cbi	0x0a, 0	; 10
SET_PS2_DA();
 1e0:	58 9a       	sbi	0x0b, 0	; 11
}
 1e2:	08 95       	ret

000001e4 <ps2GetChar>:
*-------------------------------------------------------------------------------------------------------
*/
uint8_t ps2GetCode(void)
{
uint8_t data;
while(!ps2_counter);
 1e4:	80 91 7f 01 	lds	r24, 0x017F
 1e8:	88 23       	and	r24, r24
 1ea:	e1 f3       	breq	.-8      	; 0x1e4 <ps2GetChar>
data=ps2_buffer[ps2_rd_index];	/*从缓冲器读取数据*/
 1ec:	e0 91 83 01 	lds	r30, 0x0183
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	e9 58       	subi	r30, 0x89	; 137
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	90 81       	ld	r25, Z
if (++ps2_rd_index == PS2_BUFFER_SIZE) ps2_rd_index=0;	
 1f8:	80 91 83 01 	lds	r24, 0x0183
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 83 01 	sts	0x0183, r24
 202:	80 91 83 01 	lds	r24, 0x0183
 206:	88 30       	cpi	r24, 0x08	; 8
 208:	11 f4       	brne	.+4      	; 0x20e <ps2GetChar+0x2a>
 20a:	10 92 83 01 	sts	0x0183, r1
cli();
 20e:	f8 94       	cli
--ps2_counter;
 210:	80 91 7f 01 	lds	r24, 0x017F
 214:	81 50       	subi	r24, 0x01	; 1
 216:	80 93 7f 01 	sts	0x017F, r24
sei();
 21a:	78 94       	sei
 21c:	e0 e0       	ldi	r30, 0x00	; 0
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b0 e0       	ldi	r27, 0x00	; 0
	ps2char = ps2GetCode();
	while(1)
	{
		if(ps2num > ((sizeof(keyboardToAscii)) >> 1)) 
			return(0);
		else if(keyboardToAscii[ps2num][0] == ps2char) 
 224:	80 81       	ld	r24, Z
 226:	89 17       	cp	r24, r25
 228:	39 f4       	brne	.+14     	; 0x238 <ps2GetChar+0x54>
			return(keyboardToAscii[ps2num][1]);
 22a:	aa 0f       	add	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	a0 50       	subi	r26, 0x00	; 0
 230:	bf 4f       	sbci	r27, 0xFF	; 255
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	8c 91       	ld	r24, X
 236:	08 95       	ret
 238:	11 96       	adiw	r26, 0x01	; 1
 23a:	32 96       	adiw	r30, 0x02	; 2
	uint8_t ps2num = 0x00;

	ps2char = ps2GetCode();
	while(1)
	{
		if(ps2num > ((sizeof(keyboardToAscii)) >> 1)) 
 23c:	ac 33       	cpi	r26, 0x3C	; 60
 23e:	b1 05       	cpc	r27, r1
 240:	89 f7       	brne	.-30     	; 0x224 <ps2GetChar+0x40>
 242:	80 e0       	ldi	r24, 0x00	; 0
			return(0);
		else if(keyboardToAscii[ps2num][0] == ps2char) 
			return(keyboardToAscii[ps2num][1]);
		ps2num++;
	}
}
 244:	08 95       	ret

00000246 <main>:
#define PORT_LED PORTA

int main(void)
{
/*IO initialization*/
DDR_LED = 0xFF; 
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	81 b9       	out	0x01, r24	; 1
PORT_LED = 0x00;
 24a:	12 b8       	out	0x02, r1	; 2
// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Falling Edge
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-15: Off
EICRA=0x02;
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	80 93 69 00 	sts	0x0069, r24
EIMSK=0x01;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	8d bb       	out	0x1d, r24	; 29
EIFR=0x01;
 256:	8c bb       	out	0x1c, r24	; 28

ps2IntInit();

/*PS2 initialization*/
ps2Init();
 258:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <ps2Init>

sei();
 25c:	78 94       	sei
while(1)
{
	PORT_LED = ps2GetChar();
 25e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ps2GetChar>
 262:	82 b9       	out	0x02, r24	; 2
 264:	fc cf       	rjmp	.-8      	; 0x25e <main+0x18>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
