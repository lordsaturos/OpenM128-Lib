
AT45DBXXX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000064  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000328  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001a3  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000339  00000000  00000000  0000070d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000126  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000cb  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000c99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 82 00 	call	0x104	; 0x104 <main>
  6c:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <spiInitAt45db>:
#elif defined(_DVK501_M169_EX_)
#define CLR_SS_AT45DB() cbi(PORTB,0)
#define SET_SS_AT45DB() sbi(PORTB,0)
void spiInitAt45db(void)
{
	DDRB|=0x0F;
  74:	84 b1       	in	r24, 0x04	; 4
  76:	8f 60       	ori	r24, 0x0F	; 15
  78:	84 b9       	out	0x04, r24	; 4
	SPCR=0x50;
  7a:	80 e5       	ldi	r24, 0x50	; 80
  7c:	8c bd       	out	0x2c, r24	; 44
	SPSR=0x01;
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	8d bd       	out	0x2d, r24	; 45
}
  82:	08 95       	ret

00000084 <spi_transmit_byte>:
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  84:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR&0x80));
  86:	0d b4       	in	r0, 0x2d	; 45
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <spi_transmit_byte+0x2>
}
  8c:	08 95       	ret

0000008e <write_buffer>:
//============================================================
void write_buffer(uint16_t BufferOffset,uint8_t data)
{			
  8e:	28 2f       	mov	r18, r24
	CLR_SS_AT45DB();		
  90:	28 98       	cbi	0x05, 0	; 5
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR&0x80));
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <write_buffer+0x8>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR&0x80));
  a0:	0d b4       	in	r0, 0x2d	; 45
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <write_buffer+0x12>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  a6:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR&0x80));
  a8:	0d b4       	in	r0, 0x2d	; 45
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <write_buffer+0x1a>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  ae:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR&0x80));
  b0:	0d b4       	in	r0, 0x2d	; 45
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <write_buffer+0x22>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  b6:	6e bd       	out	0x2e, r22	; 46
    while(!(SPSR&0x80));
  b8:	0d b4       	in	r0, 0x2d	; 45
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <write_buffer+0x2a>
	spi_transmit_byte(0x84);//84			  						
	spi_transmit_byte(0xff);						
	spi_transmit_byte((uint8_t)(BufferOffset>>8));	
	spi_transmit_byte((uint8_t)BufferOffset);		
	spi_transmit_byte(data);		
	SET_SS_AT45DB();	
  be:	28 9a       	sbi	0x05, 0	; 5
}
  c0:	08 95       	ret

000000c2 <read_buffer>:
//================================================================
uint8_t read_buffer(uint16_t BufferOffset)
{		
  c2:	28 2f       	mov	r18, r24
    uint8_t temp;
	CLR_SS_AT45DB();
  c4:	28 98       	cbi	0x05, 0	; 5
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  c6:	81 ed       	ldi	r24, 0xD1	; 209
  c8:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR&0x80));
  ca:	0d b4       	in	r0, 0x2d	; 45
  cc:	07 fe       	sbrs	r0, 7
  ce:	fd cf       	rjmp	.-6      	; 0xca <read_buffer+0x8>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR&0x80));
  d4:	0d b4       	in	r0, 0x2d	; 45
  d6:	07 fe       	sbrs	r0, 7
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <read_buffer+0x12>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  da:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR&0x80));
  dc:	0d b4       	in	r0, 0x2d	; 45
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <read_buffer+0x1a>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  e2:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR&0x80));
  e4:	0d b4       	in	r0, 0x2d	; 45
  e6:	07 fe       	sbrs	r0, 7
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <read_buffer+0x22>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR&0x80));
  ee:	0d b4       	in	r0, 0x2d	; 45
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <read_buffer+0x2c>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR&0x80));
  f8:	0d b4       	in	r0, 0x2d	; 45
  fa:	07 fe       	sbrs	r0, 7
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <read_buffer+0x36>
	spi_transmit_byte(0xff);
	spi_transmit_byte((uint8_t)(BufferOffset>>8));
	spi_transmit_byte((uint8_t)BufferOffset);
	spi_transmit_byte(0xff);
	spi_transmit_byte(0xff);
	temp=SPDR;	  
  fe:	8e b5       	in	r24, 0x2e	; 46
	SET_SS_AT45DB();
 100:	28 9a       	sbi	0x05, 0	; 5
    return temp;								
}
 102:	08 95       	ret

00000104 <main>:

#define DISP_DDR DDRA
#define DISP_PORT PORTA

int main(void)
{
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
#elif defined(_DVK501_M169_EX_)
#define CLR_SS_AT45DB() cbi(PORTB,0)
#define SET_SS_AT45DB() sbi(PORTB,0)
void spiInitAt45db(void)
{
	DDRB|=0x0F;
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	8f 60       	ori	r24, 0x0F	; 15
 110:	84 b9       	out	0x04, r24	; 4
	SPCR=0x50;
 112:	80 e5       	ldi	r24, 0x50	; 80
 114:	8c bd       	out	0x2c, r24	; 44
	SPSR=0x01;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	8d bd       	out	0x2d, r24	; 45
	uint8_t num;
	spiInitAt45db();
	DISP_DDR=0xFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	81 b9       	out	0x01, r24	; 1
	DISP_PORT=0x00;
 11e:	12 b8       	out	0x02, r1	; 2
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 124:	03 e3       	ldi	r16, 0x33	; 51
 126:	17 e0       	ldi	r17, 0x07	; 7
	for(num=0;num<255;num++)
	{
		write_buffer((uint16_t)num,num);
 128:	ce 01       	movw	r24, r28
 12a:	6c 2f       	mov	r22, r28
 12c:	0e 94 47 00 	call	0x8e	; 0x8e <write_buffer>
 130:	c8 01       	movw	r24, r16
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x2e>
 136:	21 96       	adiw	r28, 0x01	; 1
{
	uint8_t num;
	spiInitAt45db();
	DISP_DDR=0xFF;
	DISP_PORT=0x00;
	for(num=0;num<255;num++)
 138:	cf 3f       	cpi	r28, 0xFF	; 255
 13a:	d1 05       	cpc	r29, r1
 13c:	a9 f7       	brne	.-22     	; 0x128 <main+0x24>
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	08 eb       	ldi	r16, 0xB8	; 184
 144:	10 e0       	ldi	r17, 0x00	; 0
		write_buffer((uint16_t)num,num);
		_delay_ms(1);
	}
	for(num=0;num<255;num++)
	{
		DISP_PORT=read_buffer((uint16_t)num);
 146:	ce 01       	movw	r24, r28
 148:	0e 94 61 00 	call	0xc2	; 0xc2 <read_buffer>
 14c:	82 b9       	out	0x02, r24	; 2
 14e:	88 e8       	ldi	r24, 0x88	; 136
 150:	93 e1       	ldi	r25, 0x13	; 19
 152:	f8 01       	movw	r30, r16
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	d9 f7       	brne	.-10     	; 0x152 <main+0x4e>
 15c:	21 96       	adiw	r28, 0x01	; 1
	for(num=0;num<255;num++)
	{
		write_buffer((uint16_t)num,num);
		_delay_ms(1);
	}
	for(num=0;num<255;num++)
 15e:	cf 3f       	cpi	r28, 0xFF	; 255
 160:	d1 05       	cpc	r29, r1
 162:	89 f7       	brne	.-30     	; 0x146 <main+0x42>
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0x60>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
