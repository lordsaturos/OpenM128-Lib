
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000054  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000297  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001a2  00000000  00000000  000004a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002cc  00000000  00000000  0000064b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f6  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ad  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000b1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 6d 00 	call	0xda	; 0xda <main>
  6c:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <usartInit>:
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART0 Mode: Asynchronous
// USART Baud Rate: 9600
UCSR0A=0x00;
  74:	10 92 c0 00 	sts	0x00C0, r1
UCSR0B=0x18;
  78:	88 e1       	ldi	r24, 0x18	; 24
  7a:	80 93 c1 00 	sts	0x00C1, r24
UCSR0C=0x06;
  7e:	86 e0       	ldi	r24, 0x06	; 6
  80:	80 93 c2 00 	sts	0x00C2, r24
UBRR0H=0x00;
  84:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L=0x2F;
  88:	8f e2       	ldi	r24, 0x2F	; 47
  8a:	80 93 c4 00 	sts	0x00C4, r24
}
  8e:	08 95       	ret

00000090 <putUsart0>:
#define _WS_USART_H_


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
  90:	98 2f       	mov	r25, r24
    while(!(WS_UCSR0A & 0x20));
  92:	80 91 c0 00 	lds	r24, 0x00C0
  96:	85 ff       	sbrs	r24, 5
  98:	fc cf       	rjmp	.-8      	; 0x92 <putUsart0+0x2>
    WS_UDR0 = c;
  9a:	90 93 c6 00 	sts	0x00C6, r25
}
  9e:	08 95       	ret

000000a0 <getUsart0>:
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  a0:	80 91 c0 00 	lds	r24, 0x00C0
  a4:	87 ff       	sbrs	r24, 7
  a6:	09 c0       	rjmp	.+18     	; 0xba <getUsart0+0x1a>
    status = WS_UCSR0A;
  a8:	80 91 c0 00 	lds	r24, 0x00C0
    res = WS_UDR0;
  ac:	90 91 c6 00 	lds	r25, 0x00C6
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  b0:	8c 71       	andi	r24, 0x1C	; 28
  b2:	19 f4       	brne	.+6      	; 0xba <getUsart0+0x1a>
    return res;
  b4:	29 2f       	mov	r18, r25
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <getUsart0+0x1e>
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	3f ef       	ldi	r19, 0xFF	; 255
}
  be:	c9 01       	movw	r24, r18
  c0:	08 95       	ret

000000c2 <waitUsart0>:
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  c2:	80 91 c0 00 	lds	r24, 0x00C0
  c6:	87 ff       	sbrs	r24, 7
  c8:	fc cf       	rjmp	.-8      	; 0xc2 <waitUsart0>
    status = WS_UCSR0A;
  ca:	80 91 c0 00 	lds	r24, 0x00C0
    res = WS_UDR0;
  ce:	90 91 c6 00 	lds	r25, 0x00C6
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  d2:	8c 71       	andi	r24, 0x1C	; 28
  d4:	b1 f7       	brne	.-20     	; 0xc2 <waitUsart0>
uint8_t waitUsart0(void)
{
    uint16_t c;
    while((c=getUsart0())==0xFFFF);
    return (uint8_t)c;
}
  d6:	89 2f       	mov	r24, r25
  d8:	08 95       	ret

000000da <main>:
#include <ws_usart_port.h>

int main(void)
{
	uint8_t tmp=0;
	DDRB=0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;
  de:	15 b8       	out	0x05, r1	; 5
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART0 Mode: Asynchronous
// USART Baud Rate: 9600
UCSR0A=0x00;
  e0:	10 92 c0 00 	sts	0x00C0, r1
UCSR0B=0x18;
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	80 93 c1 00 	sts	0x00C1, r24
UCSR0C=0x06;
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 c2 00 	sts	0x00C2, r24
UBRR0H=0x00;
  f0:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L=0x2F;
  f4:	8f e2       	ldi	r24, 0x2F	; 47
  f6:	80 93 c4 00 	sts	0x00C4, r24
  fa:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	78 e4       	ldi	r23, 0x48	; 72


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
    while(!(WS_UCSR0A & 0x20));
 100:	48 eb       	ldi	r20, 0xB8	; 184
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	80 91 c0 00 	lds	r24, 0x00C0
 108:	85 ff       	sbrs	r24, 5
 10a:	fc cf       	rjmp	.-8      	; 0x104 <main+0x2a>
    WS_UDR0 = c;
 10c:	20 93 c6 00 	sts	0x00C6, r18
 110:	cb 01       	movw	r24, r22
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x38>
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 116:	80 91 c0 00 	lds	r24, 0x00C0
 11a:	87 ff       	sbrs	r24, 7
 11c:	08 c0       	rjmp	.+16     	; 0x12e <main+0x54>
    status = WS_UCSR0A;
 11e:	80 91 c0 00 	lds	r24, 0x00C0
    res = WS_UDR0;
 122:	90 91 c6 00 	lds	r25, 0x00C6
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 126:	8c 71       	andi	r24, 0x1C	; 28
 128:	11 f4       	brne	.+4      	; 0x12e <main+0x54>
    return res;
 12a:	89 2f       	mov	r24, r25
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0x58>
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	9f ef       	ldi	r25, 0xFF	; 255
	usartInit();
	while(1)
	{
		putUsart0(tmp);
		_delay_ms(10);
		PORTB=(uint8_t)getUsart0();
 132:	85 b9       	out	0x05, r24	; 5
 134:	88 e8       	ldi	r24, 0x88	; 136
 136:	93 e1       	ldi	r25, 0x13	; 19
 138:	fa 01       	movw	r30, r20
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0x60>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 140:	d9 f7       	brne	.-10     	; 0x138 <main+0x5e>
		tmp++;
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	df cf       	rjmp	.-66     	; 0x104 <main+0x2a>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
