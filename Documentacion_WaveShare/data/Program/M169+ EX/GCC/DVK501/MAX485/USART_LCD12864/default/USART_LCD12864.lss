
USART_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000006c8  0000075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080011a  0080011a  00000776  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e5  00000000  00000000  00000796  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa1  00000000  00000000  0000087b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000243  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000097f  00000000  00000000  0000155f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ee  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000481  00000000  00000000  000021ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  0000262f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 ec       	ldi	r30, 0xC8	; 200
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	aa 35       	cpi	r26, 0x5A	; 90
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 a7 02 	call	0x54e	; 0x54e <main>
  92:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <usartInit>:
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART0 Mode: Asynchronous
// USART Baud Rate: 9600
UCSR0A=0x00;
  9a:	10 92 c0 00 	sts	0x00C0, r1
UCSR0B=0x18;
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24
UCSR0C=0x06;
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24
UBRR0H=0x00;
  aa:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L=0x2F;
  ae:	8f e2       	ldi	r24, 0x2F	; 47
  b0:	80 93 c4 00 	sts	0x00C4, r24
}
  b4:	08 95       	ret

000000b6 <putUsart0>:
#define _WS_USART_H_


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
  b6:	98 2f       	mov	r25, r24
    while(!(WS_UCSR0A & 0x20));
  b8:	80 91 c0 00 	lds	r24, 0x00C0
  bc:	85 ff       	sbrs	r24, 5
  be:	fc cf       	rjmp	.-8      	; 0xb8 <putUsart0+0x2>
    WS_UDR0 = c;
  c0:	90 93 c6 00 	sts	0x00C6, r25
}
  c4:	08 95       	ret

000000c6 <getUsart0>:
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  c6:	80 91 c0 00 	lds	r24, 0x00C0
  ca:	87 ff       	sbrs	r24, 7
  cc:	09 c0       	rjmp	.+18     	; 0xe0 <getUsart0+0x1a>
    status = WS_UCSR0A;
  ce:	80 91 c0 00 	lds	r24, 0x00C0
    res = WS_UDR0;
  d2:	90 91 c6 00 	lds	r25, 0x00C6
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  d6:	8c 71       	andi	r24, 0x1C	; 28
  d8:	19 f4       	brne	.+6      	; 0xe0 <getUsart0+0x1a>
    return res;
  da:	29 2f       	mov	r18, r25
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <getUsart0+0x1e>
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	3f ef       	ldi	r19, 0xFF	; 255
}
  e4:	c9 01       	movw	r24, r18
  e6:	08 95       	ret

000000e8 <waitUsart0>:
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  e8:	80 91 c0 00 	lds	r24, 0x00C0
  ec:	87 ff       	sbrs	r24, 7
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <waitUsart0>
    status = WS_UCSR0A;
  f0:	80 91 c0 00 	lds	r24, 0x00C0
    res = WS_UDR0;
  f4:	90 91 c6 00 	lds	r25, 0x00C6
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  f8:	8c 71       	andi	r24, 0x1C	; 28
  fa:	b1 f7       	brne	.-20     	; 0xe8 <waitUsart0>
uint8_t waitUsart0(void)
{
    uint16_t c;
    while((c=getUsart0())==0xFFFF);
    return (uint8_t)c;
}
  fc:	89 2f       	mov	r24, r25
  fe:	08 95       	ret

00000100 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 100:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 102:	0d b4       	in	r0, 0x2d	; 45
 104:	07 fe       	sbrs	r0, 7
 106:	fd cf       	rjmp	.-6      	; 0x102 <spiSendChar+0x2>
}
 108:	08 95       	ret

0000010a <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 10a:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 10c:	88 ef       	ldi	r24, 0xF8	; 248
 10e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 110:	0d b4       	in	r0, 0x2d	; 45
 112:	07 fe       	sbrs	r0, 7
 114:	fd cf       	rjmp	.-6      	; 0x110 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 116:	89 2f       	mov	r24, r25
 118:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 11a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 11c:	0d b4       	in	r0, 0x2d	; 45
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <sendCodeST7920+0x12>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 122:	92 95       	swap	r25
 124:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 126:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
 128:	0d b4       	in	r0, 0x2d	; 45
 12a:	07 fe       	sbrs	r0, 7
 12c:	fd cf       	rjmp	.-6      	; 0x128 <sendCodeST7920+0x1e>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 12e:	88 eb       	ldi	r24, 0xB8	; 184
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <sendCodeST7920+0x26>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 134:	08 95       	ret

00000136 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 136:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 138:	8a ef       	ldi	r24, 0xFA	; 250
 13a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 13c:	0d b4       	in	r0, 0x2d	; 45
 13e:	07 fe       	sbrs	r0, 7
 140:	fd cf       	rjmp	.-6      	; 0x13c <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 142:	89 2f       	mov	r24, r25
 144:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 146:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 148:	0d b4       	in	r0, 0x2d	; 45
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <sendDataST7920+0x12>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 14e:	92 95       	swap	r25
 150:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 152:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
 154:	0d b4       	in	r0, 0x2d	; 45
 156:	07 fe       	sbrs	r0, 7
 158:	fd cf       	rjmp	.-6      	; 0x154 <sendDataST7920+0x1e>
 15a:	88 eb       	ldi	r24, 0xB8	; 184
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <sendDataST7920+0x26>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 160:	08 95       	ret

00000162 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 162:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 164:	88 ef       	ldi	r24, 0xF8	; 248
 166:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 168:	0d b4       	in	r0, 0x2d	; 45
 16a:	07 fe       	sbrs	r0, 7
 16c:	fd cf       	rjmp	.-6      	; 0x168 <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 16e:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 170:	0d b4       	in	r0, 0x2d	; 45
 172:	07 fe       	sbrs	r0, 7
 174:	fd cf       	rjmp	.-6      	; 0x170 <refreshLCD+0xe>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 17a:	0d b4       	in	r0, 0x2d	; 45
 17c:	07 fe       	sbrs	r0, 7
 17e:	fd cf       	rjmp	.-6      	; 0x17a <refreshLCD+0x18>
 180:	88 eb       	ldi	r24, 0xB8	; 184
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <refreshLCD+0x20>
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 18a:	6a ef       	ldi	r22, 0xFA	; 250
 18c:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 18e:	fa 01       	movw	r30, r20
 190:	e2 0f       	add	r30, r18
 192:	f3 1f       	adc	r31, r19
 194:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 196:	6e bd       	out	0x2e, r22	; 46
	while (!(SPSR & (1<<SPIF)));
 198:	0d b4       	in	r0, 0x2d	; 45
 19a:	07 fe       	sbrs	r0, 7
 19c:	fd cf       	rjmp	.-6      	; 0x198 <refreshLCD+0x36>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 19e:	8e 2f       	mov	r24, r30
 1a0:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1a2:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 1a4:	0d b4       	in	r0, 0x2d	; 45
 1a6:	07 fe       	sbrs	r0, 7
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <refreshLCD+0x42>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1aa:	e2 95       	swap	r30
 1ac:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ae:	ee bd       	out	0x2e, r30	; 46
	while (!(SPSR & (1<<SPIF)));
 1b0:	0d b4       	in	r0, 0x2d	; 45
 1b2:	07 fe       	sbrs	r0, 7
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <refreshLCD+0x4e>
 1b6:	89 2f       	mov	r24, r25
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <refreshLCD+0x56>
 1bc:	2f 5f       	subi	r18, 0xFF	; 255
 1be:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 1c0:	20 31       	cpi	r18, 0x10	; 16
 1c2:	31 05       	cpc	r19, r1
 1c4:	21 f7       	brne	.-56     	; 0x18e <refreshLCD+0x2c>
 1c6:	da 01       	movw	r26, r20
 1c8:	fa 01       	movw	r30, r20
 1ca:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1cc:	3a ef       	ldi	r19, 0xFA	; 250
 1ce:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1d0:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1d2:	3e bd       	out	0x2e, r19	; 46
	while (!(SPSR & (1<<SPIF)));
 1d4:	0d b4       	in	r0, 0x2d	; 45
 1d6:	07 fe       	sbrs	r0, 7
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <refreshLCD+0x72>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1da:	82 2f       	mov	r24, r18
 1dc:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1de:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 1e0:	0d b4       	in	r0, 0x2d	; 45
 1e2:	07 fe       	sbrs	r0, 7
 1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <refreshLCD+0x7e>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1e6:	22 95       	swap	r18
 1e8:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ea:	2e bd       	out	0x2e, r18	; 46
	while (!(SPSR & (1<<SPIF)));
 1ec:	0d b4       	in	r0, 0x2d	; 45
 1ee:	07 fe       	sbrs	r0, 7
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <refreshLCD+0x8a>
 1f2:	89 2f       	mov	r24, r25
 1f4:	8a 95       	dec	r24
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <refreshLCD+0x92>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 1f8:	6f 5f       	subi	r22, 0xFF	; 255
 1fa:	31 96       	adiw	r30, 0x01	; 1
 1fc:	60 33       	cpi	r22, 0x30	; 48
 1fe:	41 f7       	brne	.-48     	; 0x1d0 <refreshLCD+0x6e>
 200:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 202:	7a ef       	ldi	r23, 0xFA	; 250
 204:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 206:	50 96       	adiw	r26, 0x10	; 16
 208:	2c 91       	ld	r18, X
 20a:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 20c:	7e bd       	out	0x2e, r23	; 46
	while (!(SPSR & (1<<SPIF)));
 20e:	0d b4       	in	r0, 0x2d	; 45
 210:	07 fe       	sbrs	r0, 7
 212:	fd cf       	rjmp	.-6      	; 0x20e <refreshLCD+0xac>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 214:	82 2f       	mov	r24, r18
 216:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 218:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 21a:	0d b4       	in	r0, 0x2d	; 45
 21c:	07 fe       	sbrs	r0, 7
 21e:	fd cf       	rjmp	.-6      	; 0x21a <refreshLCD+0xb8>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 220:	22 95       	swap	r18
 222:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 224:	2e bd       	out	0x2e, r18	; 46
	while (!(SPSR & (1<<SPIF)));
 226:	0d b4       	in	r0, 0x2d	; 45
 228:	07 fe       	sbrs	r0, 7
 22a:	fd cf       	rjmp	.-6      	; 0x226 <refreshLCD+0xc4>
 22c:	89 2f       	mov	r24, r25
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <refreshLCD+0xcc>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 232:	3f 5f       	subi	r19, 0xFF	; 255
 234:	11 96       	adiw	r26, 0x01	; 1
 236:	30 32       	cpi	r19, 0x20	; 32
 238:	31 f7       	brne	.-52     	; 0x206 <refreshLCD+0xa4>
 23a:	fa 01       	movw	r30, r20
 23c:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 23e:	3a ef       	ldi	r19, 0xFA	; 250
 240:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 242:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 244:	3e bd       	out	0x2e, r19	; 46
	while (!(SPSR & (1<<SPIF)));
 246:	0d b4       	in	r0, 0x2d	; 45
 248:	07 fe       	sbrs	r0, 7
 24a:	fd cf       	rjmp	.-6      	; 0x246 <refreshLCD+0xe4>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 24c:	89 2f       	mov	r24, r25
 24e:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 250:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 252:	0d b4       	in	r0, 0x2d	; 45
 254:	07 fe       	sbrs	r0, 7
 256:	fd cf       	rjmp	.-6      	; 0x252 <refreshLCD+0xf0>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 258:	92 95       	swap	r25
 25a:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 25c:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
 25e:	0d b4       	in	r0, 0x2d	; 45
 260:	07 fe       	sbrs	r0, 7
 262:	fd cf       	rjmp	.-6      	; 0x25e <refreshLCD+0xfc>
 264:	82 2f       	mov	r24, r18
 266:	8a 95       	dec	r24
 268:	f1 f7       	brne	.-4      	; 0x266 <refreshLCD+0x104>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 26a:	6f 5f       	subi	r22, 0xFF	; 255
 26c:	31 96       	adiw	r30, 0x01	; 1
 26e:	60 34       	cpi	r22, 0x40	; 64
 270:	41 f7       	brne	.-48     	; 0x242 <refreshLCD+0xe0>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 272:	08 95       	ret

00000274 <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 274:	1f 93       	push	r17
 276:	fc 01       	movw	r30, r24
 278:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 27a:	10 e3       	ldi	r17, 0x30	; 48
 27c:	43 c0       	rjmp	.+134    	; 0x304 <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 27e:	43 30       	cpi	r20, 0x03	; 3
 280:	21 f1       	breq	.+72     	; 0x2ca <decToAscii+0x56>
 282:	44 30       	cpi	r20, 0x04	; 4
 284:	28 f4       	brcc	.+10     	; 0x290 <decToAscii+0x1c>
 286:	41 30       	cpi	r20, 0x01	; 1
 288:	b1 f1       	breq	.+108    	; 0x2f6 <decToAscii+0x82>
 28a:	42 30       	cpi	r20, 0x02	; 2
 28c:	c1 f5       	brne	.+112    	; 0x2fe <decToAscii+0x8a>
 28e:	28 c0       	rjmp	.+80     	; 0x2e0 <decToAscii+0x6c>
 290:	44 30       	cpi	r20, 0x04	; 4
 292:	69 f0       	breq	.+26     	; 0x2ae <decToAscii+0x3a>
 294:	45 30       	cpi	r20, 0x05	; 5
 296:	99 f5       	brne	.+102    	; 0x2fe <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 298:	c9 01       	movw	r24, r18
 29a:	60 e1       	ldi	r22, 0x10	; 16
 29c:	77 e2       	ldi	r23, 0x27	; 39
 29e:	0e 94 4e 03 	call	0x69c	; 0x69c <__udivmodhi4>
 2a2:	60 5d       	subi	r22, 0xD0	; 208
 2a4:	60 83       	st	Z, r22
				dec%=10000;
 2a6:	c9 01       	movw	r24, r18
 2a8:	60 e1       	ldi	r22, 0x10	; 16
 2aa:	77 e2       	ldi	r23, 0x27	; 39
 2ac:	0a c0       	rjmp	.+20     	; 0x2c2 <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 2ae:	c9 01       	movw	r24, r18
 2b0:	68 ee       	ldi	r22, 0xE8	; 232
 2b2:	73 e0       	ldi	r23, 0x03	; 3
 2b4:	0e 94 4e 03 	call	0x69c	; 0x69c <__udivmodhi4>
 2b8:	60 5d       	subi	r22, 0xD0	; 208
 2ba:	60 83       	st	Z, r22
				dec%=1000;
 2bc:	c9 01       	movw	r24, r18
 2be:	68 ee       	ldi	r22, 0xE8	; 232
 2c0:	73 e0       	ldi	r23, 0x03	; 3
 2c2:	0e 94 4e 03 	call	0x69c	; 0x69c <__udivmodhi4>
 2c6:	9c 01       	movw	r18, r24
 2c8:	1b c0       	rjmp	.+54     	; 0x300 <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 2ca:	c9 01       	movw	r24, r18
 2cc:	64 e6       	ldi	r22, 0x64	; 100
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	0e 94 4e 03 	call	0x69c	; 0x69c <__udivmodhi4>
 2d4:	60 5d       	subi	r22, 0xD0	; 208
 2d6:	60 83       	st	Z, r22
				dec%=100;
 2d8:	c9 01       	movw	r24, r18
 2da:	64 e6       	ldi	r22, 0x64	; 100
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	f1 cf       	rjmp	.-30     	; 0x2c2 <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 2e0:	c9 01       	movw	r24, r18
 2e2:	6a e0       	ldi	r22, 0x0A	; 10
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	0e 94 4e 03 	call	0x69c	; 0x69c <__udivmodhi4>
 2ea:	60 5d       	subi	r22, 0xD0	; 208
 2ec:	60 83       	st	Z, r22
				dec%=10;
 2ee:	c9 01       	movw	r24, r18
 2f0:	6a e0       	ldi	r22, 0x0A	; 10
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	e6 cf       	rjmp	.-52     	; 0x2c2 <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 2f6:	20 5d       	subi	r18, 0xD0	; 208
 2f8:	20 83       	st	Z, r18
 2fa:	20 53       	subi	r18, 0x30	; 48
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 2fe:	10 83       	st	Z, r17
		}
		width--;
 300:	41 50       	subi	r20, 0x01	; 1
		str++;
 302:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 304:	44 23       	and	r20, r20
 306:	09 f0       	breq	.+2      	; 0x30a <decToAscii+0x96>
 308:	ba cf       	rjmp	.-140    	; 0x27e <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 30a:	1f 91       	pop	r17
 30c:	08 95       	ret

0000030e <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 30e:	cf 92       	push	r12
 310:	df 92       	push	r13
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 320:	eb 01       	movw	r28, r22
 322:	cd 2f       	mov	r28, r29
 324:	dd 27       	eor	r29, r29
 326:	c2 95       	swap	r28
 328:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 32a:	27 e3       	ldi	r18, 0x37	; 55
 32c:	d2 2e       	mov	r13, r18
 32e:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 330:	90 e3       	ldi	r25, 0x30	; 48
 332:	e9 2e       	mov	r14, r25
 334:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 336:	a7 2f       	mov	r26, r23
 338:	bb 27       	eor	r27, r27
 33a:	af 70       	andi	r26, 0x0F	; 15
 33c:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 33e:	17 e3       	ldi	r17, 0x37	; 55
 340:	f1 2e       	mov	r15, r17
 342:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 344:	0a 2f       	mov	r16, r26
 346:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 348:	9b 01       	movw	r18, r22
 34a:	54 e0       	ldi	r21, 0x04	; 4
 34c:	36 95       	lsr	r19
 34e:	27 95       	ror	r18
 350:	5a 95       	dec	r21
 352:	e1 f7       	brne	.-8      	; 0x34c <hexToAscii+0x3e>
 354:	2f 70       	andi	r18, 0x0F	; 15
 356:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 358:	82 2f       	mov	r24, r18
 35a:	12 2f       	mov	r17, r18
 35c:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 35e:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 360:	90 e3       	ldi	r25, 0x30	; 48
 362:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 364:	6f 70       	andi	r22, 0x0F	; 15
 366:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 368:	56 2f       	mov	r21, r22
 36a:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 36c:	96 2f       	mov	r25, r22
 36e:	99 5c       	subi	r25, 0xC9	; 201
 370:	2a c0       	rjmp	.+84     	; 0x3c6 <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 372:	42 30       	cpi	r20, 0x02	; 2
 374:	b9 f0       	breq	.+46     	; 0x3a4 <hexToAscii+0x96>
 376:	43 30       	cpi	r20, 0x03	; 3
 378:	18 f4       	brcc	.+6      	; 0x380 <hexToAscii+0x72>
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	09 f5       	brne	.+66     	; 0x3c0 <hexToAscii+0xb2>
 37e:	19 c0       	rjmp	.+50     	; 0x3b2 <hexToAscii+0xa4>
 380:	43 30       	cpi	r20, 0x03	; 3
 382:	49 f0       	breq	.+18     	; 0x396 <hexToAscii+0x88>
 384:	44 30       	cpi	r20, 0x04	; 4
 386:	e1 f4       	brne	.+56     	; 0x3c0 <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 388:	ca 30       	cpi	r28, 0x0A	; 10
 38a:	d1 05       	cpc	r29, r1
 38c:	10 f0       	brcs	.+4      	; 0x392 <hexToAscii+0x84>
 38e:	d0 82       	st	Z, r13
 390:	18 c0       	rjmp	.+48     	; 0x3c2 <hexToAscii+0xb4>
				else *str = tmp+'0';
 392:	e0 82       	st	Z, r14
 394:	16 c0       	rjmp	.+44     	; 0x3c2 <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 396:	aa 30       	cpi	r26, 0x0A	; 10
 398:	b1 05       	cpc	r27, r1
 39a:	10 f0       	brcs	.+4      	; 0x3a0 <hexToAscii+0x92>
 39c:	f0 82       	st	Z, r15
 39e:	11 c0       	rjmp	.+34     	; 0x3c2 <hexToAscii+0xb4>
				else *str = tmp+'0';
 3a0:	00 83       	st	Z, r16
 3a2:	0f c0       	rjmp	.+30     	; 0x3c2 <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 3a4:	2a 30       	cpi	r18, 0x0A	; 10
 3a6:	31 05       	cpc	r19, r1
 3a8:	10 f0       	brcs	.+4      	; 0x3ae <hexToAscii+0xa0>
 3aa:	10 83       	st	Z, r17
 3ac:	0a c0       	rjmp	.+20     	; 0x3c2 <hexToAscii+0xb4>
				else *str = tmp+'0';
 3ae:	80 83       	st	Z, r24
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 3b2:	6a 30       	cpi	r22, 0x0A	; 10
 3b4:	71 05       	cpc	r23, r1
 3b6:	10 f0       	brcs	.+4      	; 0x3bc <hexToAscii+0xae>
 3b8:	90 83       	st	Z, r25
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <hexToAscii+0xb4>
				else *str = tmp+'0';
 3bc:	50 83       	st	Z, r21
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 3c0:	c0 82       	st	Z, r12
		}
		width--;
 3c2:	41 50       	subi	r20, 0x01	; 1
		str++;
 3c4:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 3c6:	44 23       	and	r20, r20
 3c8:	a1 f6       	brne	.-88     	; 0x372 <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	df 90       	pop	r13
 3d8:	cf 90       	pop	r12
 3da:	08 95       	ret

000003dc <st7920LcdInit>:
}
/*Hardware Environment：DVK501 && M169+ EX*/
#elif defined(_DVK501_M169_EX_)
void st7920LcdInit(void)
{
DDRB|=0x0F;
 3dc:	84 b1       	in	r24, 0x04	; 4
 3de:	8f 60       	ori	r24, 0x0F	; 15
 3e0:	84 b9       	out	0x04, r24	; 4
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 3e2:	80 e5       	ldi	r24, 0x50	; 80
 3e4:	8c bd       	out	0x2c, r24	; 44
SPSR=0x01;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	8d bd       	out	0x2d, r24	; 45
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3ea:	88 ef       	ldi	r24, 0xF8	; 248
 3ec:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 3ee:	0d b4       	in	r0, 0x2d	; 45
 3f0:	07 fe       	sbrs	r0, 7
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <st7920LcdInit+0x12>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3f4:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 3f6:	0d b4       	in	r0, 0x2d	; 45
 3f8:	07 fe       	sbrs	r0, 7
 3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <st7920LcdInit+0x1a>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 3fc:	80 ec       	ldi	r24, 0xC0	; 192
 3fe:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 400:	0d b4       	in	r0, 0x2d	; 45
 402:	07 fe       	sbrs	r0, 7
 404:	fd cf       	rjmp	.-6      	; 0x400 <st7920LcdInit+0x24>
 406:	88 eb       	ldi	r24, 0xB8	; 184
 408:	8a 95       	dec	r24
 40a:	f1 f7       	brne	.-4      	; 0x408 <st7920LcdInit+0x2c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 40c:	88 ef       	ldi	r24, 0xF8	; 248
 40e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 410:	0d b4       	in	r0, 0x2d	; 45
 412:	07 fe       	sbrs	r0, 7
 414:	fd cf       	rjmp	.-6      	; 0x410 <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 416:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 418:	0d b4       	in	r0, 0x2d	; 45
 41a:	07 fe       	sbrs	r0, 7
 41c:	fd cf       	rjmp	.-6      	; 0x418 <st7920LcdInit+0x3c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 41e:	80 e1       	ldi	r24, 0x10	; 16
 420:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 422:	0d b4       	in	r0, 0x2d	; 45
 424:	07 fe       	sbrs	r0, 7
 426:	fd cf       	rjmp	.-6      	; 0x422 <st7920LcdInit+0x46>
 428:	88 eb       	ldi	r24, 0xB8	; 184
 42a:	8a 95       	dec	r24
 42c:	f1 f7       	brne	.-4      	; 0x42a <st7920LcdInit+0x4e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 42e:	86 e6       	ldi	r24, 0x66	; 102
 430:	9e e0       	ldi	r25, 0x0E	; 14
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <st7920LcdInit+0x56>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 436:	8a e1       	ldi	r24, 0x1A	; 26
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	60 e2       	ldi	r22, 0x20	; 32
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	40 e4       	ldi	r20, 0x40	; 64
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	0e 94 47 03 	call	0x68e	; 0x68e <memset>
}
 446:	08 95       	ret

00000448 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 448:	af 92       	push	r10
 44a:	bf 92       	push	r11
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	df 93       	push	r29
 458:	cf 93       	push	r28
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
 45e:	0d 85       	ldd	r16, Y+13	; 0x0d
 460:	ae 84       	ldd	r10, Y+14	; 0x0e
 462:	bf 84       	ldd	r11, Y+15	; 0x0f
 464:	e8 88       	ldd	r14, Y+16	; 0x10
 466:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 468:	02 95       	swap	r16
 46a:	00 7f       	andi	r16, 0xF0	; 240
 46c:	8c 85       	ldd	r24, Y+12	; 0x0c
 46e:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 470:	de 01       	movw	r26, r28
 472:	52 96       	adiw	r26, 0x12	; 18
 474:	5d c0       	rjmp	.+186    	; 0x530 <__stack+0x31>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 476:	01 34       	cpi	r16, 0x41	; 65
 478:	08 f0       	brcs	.+2      	; 0x47c <showLine+0x34>
 47a:	5f c0       	rjmp	.+190    	; 0x53a <__stack+0x3b>

		if(*str == '\\')
 47c:	8c 35       	cpi	r24, 0x5C	; 92
 47e:	51 f4       	brne	.+20     	; 0x494 <showLine+0x4c>
		{
			str++;
 480:	08 94       	sec
 482:	e1 1c       	adc	r14, r1
 484:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 486:	95 01       	movw	r18, r10
 488:	20 0f       	add	r18, r16
 48a:	31 1d       	adc	r19, r1
 48c:	f7 01       	movw	r30, r14
 48e:	80 81       	ld	r24, Z
 490:	f9 01       	movw	r30, r18
 492:	49 c0       	rjmp	.+146    	; 0x526 <__stack+0x27>
		}
		else if(*str == '%')
 494:	85 32       	cpi	r24, 0x25	; 37
 496:	09 f0       	breq	.+2      	; 0x49a <showLine+0x52>
 498:	43 c0       	rjmp	.+134    	; 0x520 <__stack+0x21>
		{
			str++;
 49a:	08 94       	sec
 49c:	e1 1c       	adc	r14, r1
 49e:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 4a0:	f7 01       	movw	r30, r14
 4a2:	80 81       	ld	r24, Z
 4a4:	84 36       	cpi	r24, 0x64	; 100
 4a6:	11 f0       	breq	.+4      	; 0x4ac <showLine+0x64>
 4a8:	84 34       	cpi	r24, 0x44	; 68
 4aa:	99 f4       	brne	.+38     	; 0x4d2 <showLine+0x8a>
			{
				str++;
 4ac:	08 94       	sec
 4ae:	e1 1c       	adc	r14, r1
 4b0:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 4b2:	52 e0       	ldi	r21, 0x02	; 2
 4b4:	c5 2e       	mov	r12, r21
 4b6:	d1 2c       	mov	r13, r1
 4b8:	ca 0e       	add	r12, r26
 4ba:	db 1e       	adc	r13, r27
 4bc:	6d 91       	ld	r22, X+
 4be:	7c 91       	ld	r23, X
 4c0:	f7 01       	movw	r30, r14
 4c2:	40 81       	ld	r20, Z
 4c4:	40 53       	subi	r20, 0x30	; 48
 4c6:	c5 01       	movw	r24, r10
 4c8:	80 0f       	add	r24, r16
 4ca:	91 1d       	adc	r25, r1
 4cc:	0e 94 3a 01 	call	0x274	; 0x274 <decToAscii>
 4d0:	21 c0       	rjmp	.+66     	; 0x514 <__stack+0x15>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 4d2:	83 36       	cpi	r24, 0x63	; 99
 4d4:	11 f0       	breq	.+4      	; 0x4da <showLine+0x92>
 4d6:	83 34       	cpi	r24, 0x43	; 67
 4d8:	39 f4       	brne	.+14     	; 0x4e8 <showLine+0xa0>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 4da:	f5 01       	movw	r30, r10
 4dc:	e0 0f       	add	r30, r16
 4de:	f1 1d       	adc	r31, r1
 4e0:	8c 91       	ld	r24, X
 4e2:	80 83       	st	Z, r24
 4e4:	12 96       	adiw	r26, 0x02	; 2
 4e6:	20 c0       	rjmp	.+64     	; 0x528 <__stack+0x29>
			}
			else if(*str=='x'||*str=='X')
 4e8:	88 37       	cpi	r24, 0x78	; 120
 4ea:	11 f0       	breq	.+4      	; 0x4f0 <showLine+0xa8>
 4ec:	88 35       	cpi	r24, 0x58	; 88
 4ee:	e1 f4       	brne	.+56     	; 0x528 <__stack+0x29>
			{
				str++;
 4f0:	08 94       	sec
 4f2:	e1 1c       	adc	r14, r1
 4f4:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 4f6:	42 e0       	ldi	r20, 0x02	; 2
 4f8:	c4 2e       	mov	r12, r20
 4fa:	d1 2c       	mov	r13, r1
 4fc:	ca 0e       	add	r12, r26
 4fe:	db 1e       	adc	r13, r27
 500:	6d 91       	ld	r22, X+
 502:	7c 91       	ld	r23, X
 504:	f7 01       	movw	r30, r14
 506:	40 81       	ld	r20, Z
 508:	40 53       	subi	r20, 0x30	; 48
 50a:	c5 01       	movw	r24, r10
 50c:	80 0f       	add	r24, r16
 50e:	91 1d       	adc	r25, r1
 510:	0e 94 87 01 	call	0x30e	; 0x30e <hexToAscii>
				coordinate+=(*str-'0'-1);
 514:	01 53       	subi	r16, 0x31	; 49
 516:	f7 01       	movw	r30, r14
 518:	80 81       	ld	r24, Z
 51a:	08 0f       	add	r16, r24
 51c:	d6 01       	movw	r26, r12
 51e:	04 c0       	rjmp	.+8      	; 0x528 <__stack+0x29>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 520:	f5 01       	movw	r30, r10
 522:	e0 0f       	add	r30, r16
 524:	f1 1d       	adc	r31, r1
 526:	80 83       	st	Z, r24
		}
		str++;
 528:	08 94       	sec
 52a:	e1 1c       	adc	r14, r1
 52c:	f1 1c       	adc	r15, r1
		coordinate++;
 52e:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 530:	f7 01       	movw	r30, r14
 532:	80 81       	ld	r24, Z
 534:	88 23       	and	r24, r24
 536:	09 f0       	breq	.+2      	; 0x53a <__stack+0x3b>
 538:	9e cf       	rjmp	.-196    	; 0x476 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 53a:	cf 91       	pop	r28
 53c:	df 91       	pop	r29
 53e:	0f 91       	pop	r16
 540:	ff 90       	pop	r15
 542:	ef 90       	pop	r14
 544:	df 90       	pop	r13
 546:	cf 90       	pop	r12
 548:	bf 90       	pop	r11
 54a:	af 90       	pop	r10
 54c:	08 95       	ret

0000054e <main>:
#include <util/delay.h>
#include <ws_usart_port.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 54e:	8f 92       	push	r8
 550:	9f 92       	push	r9
 552:	af 92       	push	r10
 554:	bf 92       	push	r11
 556:	cf 92       	push	r12
 558:	df 92       	push	r13
 55a:	ef 92       	push	r14
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART0 Mode: Asynchronous
// USART Baud Rate: 9600
UCSR0A=0x00;
 566:	10 92 c0 00 	sts	0x00C0, r1
UCSR0B=0x18;
 56a:	88 e1       	ldi	r24, 0x18	; 24
 56c:	80 93 c1 00 	sts	0x00C1, r24
UCSR0C=0x06;
 570:	86 e0       	ldi	r24, 0x06	; 6
 572:	80 93 c2 00 	sts	0x00C2, r24
UBRR0H=0x00;
 576:	10 92 c5 00 	sts	0x00C5, r1
UBRR0L=0x2F;
 57a:	8f e2       	ldi	r24, 0x2F	; 47
 57c:	80 93 c4 00 	sts	0x00C4, r24
	uint8_t tmp=0;
	usartInit();
	st7920LcdInit(); /*LCD初始化*/
 580:	0e 94 ee 01 	call	0x3dc	; 0x3dc <st7920LcdInit>
	showLine(0,0,lcd_buffer,"USART 自发自收");
 584:	00 d0       	rcall	.+0      	; 0x586 <main+0x38>
 586:	00 d0       	rcall	.+0      	; 0x588 <main+0x3a>
 588:	00 d0       	rcall	.+0      	; 0x58a <main+0x3c>
 58a:	ed b7       	in	r30, 0x3d	; 61
 58c:	fe b7       	in	r31, 0x3e	; 62
 58e:	31 96       	adiw	r30, 0x01	; 1
 590:	ad b7       	in	r26, 0x3d	; 61
 592:	be b7       	in	r27, 0x3e	; 62
 594:	11 96       	adiw	r26, 0x01	; 1
 596:	1c 92       	st	X, r1
 598:	11 82       	std	Z+1, r1	; 0x01
 59a:	0a e1       	ldi	r16, 0x1A	; 26
 59c:	11 e0       	ldi	r17, 0x01	; 1
 59e:	13 83       	std	Z+3, r17	; 0x03
 5a0:	02 83       	std	Z+2, r16	; 0x02
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	95 83       	std	Z+5, r25	; 0x05
 5a8:	84 83       	std	Z+4, r24	; 0x04
 5aa:	0e 94 24 02 	call	0x448	; 0x448 <showLine>
	showLine(0,1,lcd_buffer,"数据：");
 5ae:	ed b7       	in	r30, 0x3d	; 61
 5b0:	fe b7       	in	r31, 0x3e	; 62
 5b2:	31 96       	adiw	r30, 0x01	; 1
 5b4:	ad b7       	in	r26, 0x3d	; 61
 5b6:	be b7       	in	r27, 0x3e	; 62
 5b8:	11 96       	adiw	r26, 0x01	; 1
 5ba:	1c 92       	st	X, r1
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	81 83       	std	Z+1, r24	; 0x01
 5c0:	13 83       	std	Z+3, r17	; 0x03
 5c2:	02 83       	std	Z+2, r16	; 0x02
 5c4:	8f e0       	ldi	r24, 0x0F	; 15
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	95 83       	std	Z+5, r25	; 0x05
 5ca:	84 83       	std	Z+4, r24	; 0x04
 5cc:	0e 94 24 02 	call	0x448	; 0x448 <showLine>
	refreshLCD(lcd_buffer); /*刷新LCD*/
 5d0:	2d b7       	in	r18, 0x3d	; 61
 5d2:	3e b7       	in	r19, 0x3e	; 62
 5d4:	2a 5f       	subi	r18, 0xFA	; 250
 5d6:	3f 4f       	sbci	r19, 0xFF	; 255
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	3e bf       	out	0x3e, r19	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	2d bf       	out	0x3d, r18	; 61
 5e2:	c8 01       	movw	r24, r16
 5e4:	0e 94 b1 00 	call	0x162	; 0x162 <refreshLCD>
 5e8:	ff 24       	eor	r15, r15
 5ea:	a1 2c       	mov	r10, r1
 5ec:	e8 e4       	ldi	r30, 0x48	; 72
 5ee:	be 2e       	mov	r11, r30
	while(1)
	{
		putUsart0(tmp);
		_delay_ms(10);
		showLine(6,1,lcd_buffer,"%d3",(uint8_t)getUsart0());
 5f0:	76 e0       	ldi	r23, 0x06	; 6
 5f2:	87 2e       	mov	r8, r23
 5f4:	99 24       	eor	r9, r9
 5f6:	93 94       	inc	r9
 5f8:	e0 2e       	mov	r14, r16
 5fa:	01 2f       	mov	r16, r17
 5fc:	66 e1       	ldi	r22, 0x16	; 22
 5fe:	c6 2e       	mov	r12, r22
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	d6 2e       	mov	r13, r22
 604:	c8 eb       	ldi	r28, 0xB8	; 184
 606:	d0 e0       	ldi	r29, 0x00	; 0


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
    while(!(WS_UCSR0A & 0x20));
 608:	80 91 c0 00 	lds	r24, 0x00C0
 60c:	85 ff       	sbrs	r24, 5
 60e:	fc cf       	rjmp	.-8      	; 0x608 <main+0xba>
    WS_UDR0 = c;
 610:	f0 92 c6 00 	sts	0x00C6, r15
 614:	c5 01       	movw	r24, r10
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <main+0xc8>
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 61a:	80 91 c0 00 	lds	r24, 0x00C0
 61e:	87 ff       	sbrs	r24, 7
 620:	08 c0       	rjmp	.+16     	; 0x632 <main+0xe4>
    status = WS_UCSR0A;
 622:	80 91 c0 00 	lds	r24, 0x00C0
    res = WS_UDR0;
 626:	90 91 c6 00 	lds	r25, 0x00C6
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 62a:	8c 71       	andi	r24, 0x1C	; 28
 62c:	11 f4       	brne	.+4      	; 0x632 <main+0xe4>
    return res;
 62e:	89 2f       	mov	r24, r25
 630:	02 c0       	rjmp	.+4      	; 0x636 <main+0xe8>
 632:	8f ef       	ldi	r24, 0xFF	; 255
 634:	9f ef       	ldi	r25, 0xFF	; 255
 636:	ad b7       	in	r26, 0x3d	; 61
 638:	be b7       	in	r27, 0x3e	; 62
 63a:	18 97       	sbiw	r26, 0x08	; 8
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	be bf       	out	0x3e, r27	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	ad bf       	out	0x3d, r26	; 61
 646:	ed b7       	in	r30, 0x3d	; 61
 648:	fe b7       	in	r31, 0x3e	; 62
 64a:	31 96       	adiw	r30, 0x01	; 1
 64c:	11 96       	adiw	r26, 0x01	; 1
 64e:	8c 92       	st	X, r8
 650:	91 82       	std	Z+1, r9	; 0x01
 652:	e2 82       	std	Z+2, r14	; 0x02
 654:	03 83       	std	Z+3, r16	; 0x03
 656:	d5 82       	std	Z+5, r13	; 0x05
 658:	c4 82       	std	Z+4, r12	; 0x04
 65a:	86 83       	std	Z+6, r24	; 0x06
 65c:	17 82       	std	Z+7, r1	; 0x07
 65e:	0e 94 24 02 	call	0x448	; 0x448 <showLine>
		refreshLCD(lcd_buffer); /*刷新LCD*/
 662:	2d b7       	in	r18, 0x3d	; 61
 664:	3e b7       	in	r19, 0x3e	; 62
 666:	28 5f       	subi	r18, 0xF8	; 248
 668:	3f 4f       	sbci	r19, 0xFF	; 255
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	f8 94       	cli
 66e:	3e bf       	out	0x3e, r19	; 62
 670:	0f be       	out	0x3f, r0	; 63
 672:	2d bf       	out	0x3d, r18	; 61
 674:	8e 2d       	mov	r24, r14
 676:	90 2f       	mov	r25, r16
 678:	0e 94 b1 00 	call	0x162	; 0x162 <refreshLCD>
 67c:	80 e1       	ldi	r24, 0x10	; 16
 67e:	97 e2       	ldi	r25, 0x27	; 39
 680:	fe 01       	movw	r30, r28
 682:	31 97       	sbiw	r30, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <main+0x134>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 686:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 688:	d9 f7       	brne	.-10     	; 0x680 <main+0x132>
		tmp++;
 68a:	f3 94       	inc	r15
 68c:	bd cf       	rjmp	.-134    	; 0x608 <main+0xba>

0000068e <memset>:
 68e:	dc 01       	movw	r26, r24
 690:	01 c0       	rjmp	.+2      	; 0x694 <memset+0x6>
 692:	6d 93       	st	X+, r22
 694:	41 50       	subi	r20, 0x01	; 1
 696:	50 40       	sbci	r21, 0x00	; 0
 698:	e0 f7       	brcc	.-8      	; 0x692 <memset+0x4>
 69a:	08 95       	ret

0000069c <__udivmodhi4>:
 69c:	aa 1b       	sub	r26, r26
 69e:	bb 1b       	sub	r27, r27
 6a0:	51 e1       	ldi	r21, 0x11	; 17
 6a2:	07 c0       	rjmp	.+14     	; 0x6b2 <__udivmodhi4_ep>

000006a4 <__udivmodhi4_loop>:
 6a4:	aa 1f       	adc	r26, r26
 6a6:	bb 1f       	adc	r27, r27
 6a8:	a6 17       	cp	r26, r22
 6aa:	b7 07       	cpc	r27, r23
 6ac:	10 f0       	brcs	.+4      	; 0x6b2 <__udivmodhi4_ep>
 6ae:	a6 1b       	sub	r26, r22
 6b0:	b7 0b       	sbc	r27, r23

000006b2 <__udivmodhi4_ep>:
 6b2:	88 1f       	adc	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	5a 95       	dec	r21
 6b8:	a9 f7       	brne	.-22     	; 0x6a4 <__udivmodhi4_loop>
 6ba:	80 95       	com	r24
 6bc:	90 95       	com	r25
 6be:	bc 01       	movw	r22, r24
 6c0:	cd 01       	movw	r24, r26
 6c2:	08 95       	ret

000006c4 <_exit>:
 6c4:	f8 94       	cli

000006c6 <__stop_program>:
 6c6:	ff cf       	rjmp	.-2      	; 0x6c6 <__stop_program>
