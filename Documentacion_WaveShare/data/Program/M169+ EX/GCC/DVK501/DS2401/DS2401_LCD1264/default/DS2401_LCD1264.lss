
DS2401_LCD1264.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000006de  00000772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  0080011c  0080011c  0000078e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000fd  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b46  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f1  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b9  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000200  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000472  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000390  00000000  00000000  000026ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee ed       	ldi	r30, 0xDE	; 222
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
  78:	ac 31       	cpi	r26, 0x1C	; 28
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	ac e1       	ldi	r26, 0x1C	; 28
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a4 36       	cpi	r26, 0x64	; 100
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <main>
  92:	0c 94 6d 03 	jmp	0x6da	; 0x6da <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <resetOnewire>:
#define _WS_ONEWIRE_H_
#include <util/delay.h>
//-----复位-----
void resetOnewire(void) 
{
	OUT_DQ();
  9a:	25 9a       	sbi	0x04, 5	; 4
    CLR_DQ();
  9c:	2d 98       	cbi	0x05, 5	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	86 e6       	ldi	r24, 0x66	; 102
  a0:	95 e0       	ldi	r25, 0x05	; 5
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <resetOnewire+0x8>
    _delay_us(750);
    SET_DQ();
  a6:	2d 9a       	sbi	0x05, 5	; 5
	IN_DQ(); 
  a8:	25 98       	cbi	0x04, 5	; 4
	while(GET_DQ());
  aa:	1d 99       	sbic	0x03, 5	; 3
  ac:	fe cf       	rjmp	.-4      	; 0xaa <resetOnewire+0x10>
	while(!(GET_DQ()));
  ae:	1d 9b       	sbis	0x03, 5	; 3
  b0:	fe cf       	rjmp	.-4      	; 0xae <resetOnewire+0x14>
	OUT_DQ();
  b2:	25 9a       	sbi	0x04, 5	; 4
}
  b4:	08 95       	ret

000000b6 <rOnewire>:

//-----读数据-----
uint8_t rOnewire(void)
{
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	20 e0       	ldi	r18, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ba:	5c e0       	ldi	r21, 0x0C	; 12
    uint8_t data=0,i=0;
    for(i=0;i<8;i++)
    {
		data=data>>1;
  bc:	44 e2       	ldi	r20, 0x24	; 36
  be:	33 e9       	ldi	r19, 0x93	; 147
  c0:	86 95       	lsr	r24
		OUT_DQ();
  c2:	25 9a       	sbi	0x04, 5	; 4
        CLR_DQ();
  c4:	2d 98       	cbi	0x05, 5	; 5
  c6:	95 2f       	mov	r25, r21
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <rOnewire+0x12>
        _delay_us(5);
		SET_DQ();
  cc:	2d 9a       	sbi	0x05, 5	; 5
  ce:	94 2f       	mov	r25, r20
  d0:	9a 95       	dec	r25
  d2:	f1 f7       	brne	.-4      	; 0xd0 <rOnewire+0x1a>
		_delay_us(15);
		IN_DQ();
  d4:	25 98       	cbi	0x04, 5	; 4
        if(GET_DQ()) data|=0x80;
  d6:	1d 9b       	sbis	0x03, 5	; 3
  d8:	02 c0       	rjmp	.+4      	; 0xde <rOnewire+0x28>
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <rOnewire+0x2c>
        else while(!(GET_DQ()));
  de:	1d 9b       	sbis	0x03, 5	; 3
  e0:	fe cf       	rjmp	.-4      	; 0xde <rOnewire+0x28>
  e2:	93 2f       	mov	r25, r19
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <rOnewire+0x2e>
		_delay_us(60);
		SET_DQ();
  e8:	2d 9a       	sbi	0x05, 5	; 5

//-----读数据-----
uint8_t rOnewire(void)
{
    uint8_t data=0,i=0;
    for(i=0;i<8;i++)
  ea:	2f 5f       	subi	r18, 0xFF	; 255
  ec:	28 30       	cpi	r18, 0x08	; 8
  ee:	41 f7       	brne	.-48     	; 0xc0 <rOnewire+0xa>
        else while(!(GET_DQ()));
		_delay_us(60);
		SET_DQ();
	}
	return(data);
}
  f0:	08 95       	ret

000000f2 <wOnewire>:
//-----写数据-----
void wOnewire(uint8_t data)
{
    uint8_t i=0;
	OUT_DQ();
  f2:	25 9a       	sbi	0x04, 5	; 4
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	5d ed       	ldi	r21, 0xDD	; 221
    for(i=0;i<8;i++)
    {
        if(data&0x01)
  f8:	3c e0       	ldi	r19, 0x0C	; 12
  fa:	40 ed       	ldi	r20, 0xD0	; 208
  fc:	80 ff       	sbrs	r24, 0
  fe:	07 c0       	rjmp	.+14     	; 0x10e <wOnewire+0x1c>
		{
            CLR_DQ();
 100:	2d 98       	cbi	0x05, 5	; 5
 102:	93 2f       	mov	r25, r19
 104:	9a 95       	dec	r25
 106:	f1 f7       	brne	.-4      	; 0x104 <wOnewire+0x12>
            _delay_us(5);
            SET_DQ();
 108:	2d 9a       	sbi	0x05, 5	; 5
 10a:	94 2f       	mov	r25, r20
 10c:	06 c0       	rjmp	.+12     	; 0x11a <wOnewire+0x28>
            _delay_us(85); //65
		}
   	 	else
   	 	{
       		CLR_DQ(); 
 10e:	2d 98       	cbi	0x05, 5	; 5
 110:	95 2f       	mov	r25, r21
 112:	9a 95       	dec	r25
 114:	f1 f7       	brne	.-4      	; 0x112 <wOnewire+0x20>
        	_delay_us(90);  //65
        	SET_DQ();
 116:	2d 9a       	sbi	0x05, 5	; 5
 118:	93 2f       	mov	r25, r19
 11a:	9a 95       	dec	r25
 11c:	f1 f7       	brne	.-4      	; 0x11a <wOnewire+0x28>
//-----写数据-----
void wOnewire(uint8_t data)
{
    uint8_t i=0;
	OUT_DQ();
    for(i=0;i<8;i++)
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	28 30       	cpi	r18, 0x08	; 8
 122:	11 f0       	breq	.+4      	; 0x128 <wOnewire+0x36>
       		CLR_DQ(); 
        	_delay_us(90);  //65
        	SET_DQ();
        	_delay_us(5);
    	}
    	data=data>>1;
 124:	86 95       	lsr	r24
 126:	ea cf       	rjmp	.-44     	; 0xfc <wOnewire+0xa>
 128:	08 95       	ret

0000012a <getDs2401Number>:
#ifndef _WS_DS2401_H_
#define _WS_DS2401_H_
#include <ws_onewire_port.h>

void getDs2401Number(uint8_t* tmp)
{
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	8c 01       	movw	r16, r24
	uint8_t t1;
	resetOnewire();	//先复位onewire
 134:	0e 94 4d 00 	call	0x9a	; 0x9a <resetOnewire>
	wOnewire(0x33);	//发"Read_ROM"指令	
 138:	83 e3       	ldi	r24, 0x33	; 51
 13a:	0e 94 79 00 	call	0xf2	; 0xf2 <wOnewire>
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d0 e0       	ldi	r29, 0x00	; 0
	for(t1=0;t1<8;t1++)
	{
		*(tmp+t1)=rOnewire();
 142:	0e 94 5b 00 	call	0xb6	; 0xb6 <rOnewire>
 146:	f8 01       	movw	r30, r16
 148:	ec 0f       	add	r30, r28
 14a:	fd 1f       	adc	r31, r29
 14c:	80 83       	st	Z, r24
 14e:	21 96       	adiw	r28, 0x01	; 1
void getDs2401Number(uint8_t* tmp)
{
	uint8_t t1;
	resetOnewire();	//先复位onewire
	wOnewire(0x33);	//发"Read_ROM"指令	
	for(t1=0;t1<8;t1++)
 150:	c8 30       	cpi	r28, 0x08	; 8
 152:	d1 05       	cpc	r29, r1
 154:	b1 f7       	brne	.-20     	; 0x142 <getDs2401Number+0x18>
	{
		*(tmp+t1)=rOnewire();
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 160:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 162:	0d b4       	in	r0, 0x2d	; 45
 164:	07 fe       	sbrs	r0, 7
 166:	fd cf       	rjmp	.-6      	; 0x162 <spiSendChar+0x2>
}
 168:	08 95       	ret

0000016a <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 16a:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 16c:	88 ef       	ldi	r24, 0xF8	; 248
 16e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 170:	0d b4       	in	r0, 0x2d	; 45
 172:	07 fe       	sbrs	r0, 7
 174:	fd cf       	rjmp	.-6      	; 0x170 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 176:	89 2f       	mov	r24, r25
 178:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 17a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 17c:	0d b4       	in	r0, 0x2d	; 45
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <sendCodeST7920+0x12>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 182:	92 95       	swap	r25
 184:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 186:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
 188:	0d b4       	in	r0, 0x2d	; 45
 18a:	07 fe       	sbrs	r0, 7
 18c:	fd cf       	rjmp	.-6      	; 0x188 <sendCodeST7920+0x1e>
 18e:	88 eb       	ldi	r24, 0xB8	; 184
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <sendCodeST7920+0x26>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 194:	08 95       	ret

00000196 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 196:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 198:	8a ef       	ldi	r24, 0xFA	; 250
 19a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 19c:	0d b4       	in	r0, 0x2d	; 45
 19e:	07 fe       	sbrs	r0, 7
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1a2:	89 2f       	mov	r24, r25
 1a4:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1a6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 1a8:	0d b4       	in	r0, 0x2d	; 45
 1aa:	07 fe       	sbrs	r0, 7
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <sendDataST7920+0x12>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1ae:	92 95       	swap	r25
 1b0:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1b2:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
 1b4:	0d b4       	in	r0, 0x2d	; 45
 1b6:	07 fe       	sbrs	r0, 7
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <sendDataST7920+0x1e>
 1ba:	88 eb       	ldi	r24, 0xB8	; 184
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <sendDataST7920+0x26>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 1c0:	08 95       	ret

000001c2 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 1c2:	ac 01       	movw	r20, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1c4:	88 ef       	ldi	r24, 0xF8	; 248
 1c6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 1c8:	0d b4       	in	r0, 0x2d	; 45
 1ca:	07 fe       	sbrs	r0, 7
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <refreshLCD+0x6>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ce:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 1d0:	0d b4       	in	r0, 0x2d	; 45
 1d2:	07 fe       	sbrs	r0, 7
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <refreshLCD+0xe>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1d6:	80 e2       	ldi	r24, 0x20	; 32
 1d8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 1da:	0d b4       	in	r0, 0x2d	; 45
 1dc:	07 fe       	sbrs	r0, 7
 1de:	fd cf       	rjmp	.-6      	; 0x1da <refreshLCD+0x18>
 1e0:	88 eb       	ldi	r24, 0xB8	; 184
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <refreshLCD+0x20>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ea:	6a ef       	ldi	r22, 0xFA	; 250
 1ec:	98 eb       	ldi	r25, 0xB8	; 184
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1ee:	fa 01       	movw	r30, r20
 1f0:	e2 0f       	add	r30, r18
 1f2:	f3 1f       	adc	r31, r19
 1f4:	e0 81       	ld	r30, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1f6:	6e bd       	out	0x2e, r22	; 46
	while (!(SPSR & (1<<SPIF)));
 1f8:	0d b4       	in	r0, 0x2d	; 45
 1fa:	07 fe       	sbrs	r0, 7
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <refreshLCD+0x36>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 1fe:	8e 2f       	mov	r24, r30
 200:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 202:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 204:	0d b4       	in	r0, 0x2d	; 45
 206:	07 fe       	sbrs	r0, 7
 208:	fd cf       	rjmp	.-6      	; 0x204 <refreshLCD+0x42>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 20a:	e2 95       	swap	r30
 20c:	e0 7f       	andi	r30, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 20e:	ee bd       	out	0x2e, r30	; 46
	while (!(SPSR & (1<<SPIF)));
 210:	0d b4       	in	r0, 0x2d	; 45
 212:	07 fe       	sbrs	r0, 7
 214:	fd cf       	rjmp	.-6      	; 0x210 <refreshLCD+0x4e>
 216:	89 2f       	mov	r24, r25
 218:	8a 95       	dec	r24
 21a:	f1 f7       	brne	.-4      	; 0x218 <refreshLCD+0x56>
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 220:	20 31       	cpi	r18, 0x10	; 16
 222:	31 05       	cpc	r19, r1
 224:	21 f7       	brne	.-56     	; 0x1ee <refreshLCD+0x2c>
 226:	da 01       	movw	r26, r20
 228:	fa 01       	movw	r30, r20
 22a:	60 e2       	ldi	r22, 0x20	; 32
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 22c:	3a ef       	ldi	r19, 0xFA	; 250
 22e:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 230:	20 a1       	ldd	r18, Z+32	; 0x20
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 232:	3e bd       	out	0x2e, r19	; 46
	while (!(SPSR & (1<<SPIF)));
 234:	0d b4       	in	r0, 0x2d	; 45
 236:	07 fe       	sbrs	r0, 7
 238:	fd cf       	rjmp	.-6      	; 0x234 <refreshLCD+0x72>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 23a:	82 2f       	mov	r24, r18
 23c:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 23e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 240:	0d b4       	in	r0, 0x2d	; 45
 242:	07 fe       	sbrs	r0, 7
 244:	fd cf       	rjmp	.-6      	; 0x240 <refreshLCD+0x7e>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 246:	22 95       	swap	r18
 248:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 24a:	2e bd       	out	0x2e, r18	; 46
	while (!(SPSR & (1<<SPIF)));
 24c:	0d b4       	in	r0, 0x2d	; 45
 24e:	07 fe       	sbrs	r0, 7
 250:	fd cf       	rjmp	.-6      	; 0x24c <refreshLCD+0x8a>
 252:	89 2f       	mov	r24, r25
 254:	8a 95       	dec	r24
 256:	f1 f7       	brne	.-4      	; 0x254 <refreshLCD+0x92>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 258:	6f 5f       	subi	r22, 0xFF	; 255
 25a:	31 96       	adiw	r30, 0x01	; 1
 25c:	60 33       	cpi	r22, 0x30	; 48
 25e:	41 f7       	brne	.-48     	; 0x230 <refreshLCD+0x6e>
 260:	30 e1       	ldi	r19, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 262:	7a ef       	ldi	r23, 0xFA	; 250
 264:	98 eb       	ldi	r25, 0xB8	; 184
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 266:	50 96       	adiw	r26, 0x10	; 16
 268:	2c 91       	ld	r18, X
 26a:	50 97       	sbiw	r26, 0x10	; 16
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 26c:	7e bd       	out	0x2e, r23	; 46
	while (!(SPSR & (1<<SPIF)));
 26e:	0d b4       	in	r0, 0x2d	; 45
 270:	07 fe       	sbrs	r0, 7
 272:	fd cf       	rjmp	.-6      	; 0x26e <refreshLCD+0xac>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 274:	82 2f       	mov	r24, r18
 276:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 278:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 27a:	0d b4       	in	r0, 0x2d	; 45
 27c:	07 fe       	sbrs	r0, 7
 27e:	fd cf       	rjmp	.-6      	; 0x27a <refreshLCD+0xb8>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 280:	22 95       	swap	r18
 282:	20 7f       	andi	r18, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 284:	2e bd       	out	0x2e, r18	; 46
	while (!(SPSR & (1<<SPIF)));
 286:	0d b4       	in	r0, 0x2d	; 45
 288:	07 fe       	sbrs	r0, 7
 28a:	fd cf       	rjmp	.-6      	; 0x286 <refreshLCD+0xc4>
 28c:	89 2f       	mov	r24, r25
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <refreshLCD+0xcc>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 292:	3f 5f       	subi	r19, 0xFF	; 255
 294:	11 96       	adiw	r26, 0x01	; 1
 296:	30 32       	cpi	r19, 0x20	; 32
 298:	31 f7       	brne	.-52     	; 0x266 <refreshLCD+0xa4>
 29a:	fa 01       	movw	r30, r20
 29c:	f0 96       	adiw	r30, 0x30	; 48
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 29e:	3a ef       	ldi	r19, 0xFA	; 250
 2a0:	28 eb       	ldi	r18, 0xB8	; 184
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 2a2:	90 81       	ld	r25, Z
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2a4:	3e bd       	out	0x2e, r19	; 46
	while (!(SPSR & (1<<SPIF)));
 2a6:	0d b4       	in	r0, 0x2d	; 45
 2a8:	07 fe       	sbrs	r0, 7
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <refreshLCD+0xe4>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 2ac:	89 2f       	mov	r24, r25
 2ae:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2b0:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 2b2:	0d b4       	in	r0, 0x2d	; 45
 2b4:	07 fe       	sbrs	r0, 7
 2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <refreshLCD+0xf0>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 2b8:	92 95       	swap	r25
 2ba:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2bc:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
 2be:	0d b4       	in	r0, 0x2d	; 45
 2c0:	07 fe       	sbrs	r0, 7
 2c2:	fd cf       	rjmp	.-6      	; 0x2be <refreshLCD+0xfc>
 2c4:	82 2f       	mov	r24, r18
 2c6:	8a 95       	dec	r24
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <refreshLCD+0x104>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 2ca:	6f 5f       	subi	r22, 0xFF	; 255
 2cc:	31 96       	adiw	r30, 0x01	; 1
 2ce:	60 34       	cpi	r22, 0x40	; 64
 2d0:	41 f7       	brne	.-48     	; 0x2a2 <refreshLCD+0xe0>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 2d2:	08 95       	ret

000002d4 <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 2d4:	1f 93       	push	r17
 2d6:	fc 01       	movw	r30, r24
 2d8:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 2da:	10 e3       	ldi	r17, 0x30	; 48
 2dc:	43 c0       	rjmp	.+134    	; 0x364 <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 2de:	43 30       	cpi	r20, 0x03	; 3
 2e0:	21 f1       	breq	.+72     	; 0x32a <decToAscii+0x56>
 2e2:	44 30       	cpi	r20, 0x04	; 4
 2e4:	28 f4       	brcc	.+10     	; 0x2f0 <decToAscii+0x1c>
 2e6:	41 30       	cpi	r20, 0x01	; 1
 2e8:	b1 f1       	breq	.+108    	; 0x356 <decToAscii+0x82>
 2ea:	42 30       	cpi	r20, 0x02	; 2
 2ec:	c1 f5       	brne	.+112    	; 0x35e <decToAscii+0x8a>
 2ee:	28 c0       	rjmp	.+80     	; 0x340 <decToAscii+0x6c>
 2f0:	44 30       	cpi	r20, 0x04	; 4
 2f2:	69 f0       	breq	.+26     	; 0x30e <decToAscii+0x3a>
 2f4:	45 30       	cpi	r20, 0x05	; 5
 2f6:	99 f5       	brne	.+102    	; 0x35e <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 2f8:	c9 01       	movw	r24, r18
 2fa:	60 e1       	ldi	r22, 0x10	; 16
 2fc:	77 e2       	ldi	r23, 0x27	; 39
 2fe:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__udivmodhi4>
 302:	60 5d       	subi	r22, 0xD0	; 208
 304:	60 83       	st	Z, r22
				dec%=10000;
 306:	c9 01       	movw	r24, r18
 308:	60 e1       	ldi	r22, 0x10	; 16
 30a:	77 e2       	ldi	r23, 0x27	; 39
 30c:	0a c0       	rjmp	.+20     	; 0x322 <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 30e:	c9 01       	movw	r24, r18
 310:	68 ee       	ldi	r22, 0xE8	; 232
 312:	73 e0       	ldi	r23, 0x03	; 3
 314:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__udivmodhi4>
 318:	60 5d       	subi	r22, 0xD0	; 208
 31a:	60 83       	st	Z, r22
				dec%=1000;
 31c:	c9 01       	movw	r24, r18
 31e:	68 ee       	ldi	r22, 0xE8	; 232
 320:	73 e0       	ldi	r23, 0x03	; 3
 322:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__udivmodhi4>
 326:	9c 01       	movw	r18, r24
 328:	1b c0       	rjmp	.+54     	; 0x360 <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 32a:	c9 01       	movw	r24, r18
 32c:	64 e6       	ldi	r22, 0x64	; 100
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__udivmodhi4>
 334:	60 5d       	subi	r22, 0xD0	; 208
 336:	60 83       	st	Z, r22
				dec%=100;
 338:	c9 01       	movw	r24, r18
 33a:	64 e6       	ldi	r22, 0x64	; 100
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	f1 cf       	rjmp	.-30     	; 0x322 <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 340:	c9 01       	movw	r24, r18
 342:	6a e0       	ldi	r22, 0x0A	; 10
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__udivmodhi4>
 34a:	60 5d       	subi	r22, 0xD0	; 208
 34c:	60 83       	st	Z, r22
				dec%=10;
 34e:	c9 01       	movw	r24, r18
 350:	6a e0       	ldi	r22, 0x0A	; 10
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	e6 cf       	rjmp	.-52     	; 0x322 <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 356:	20 5d       	subi	r18, 0xD0	; 208
 358:	20 83       	st	Z, r18
 35a:	20 53       	subi	r18, 0x30	; 48
 35c:	01 c0       	rjmp	.+2      	; 0x360 <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 35e:	10 83       	st	Z, r17
		}
		width--;
 360:	41 50       	subi	r20, 0x01	; 1
		str++;
 362:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 364:	44 23       	and	r20, r20
 366:	09 f0       	breq	.+2      	; 0x36a <decToAscii+0x96>
 368:	ba cf       	rjmp	.-140    	; 0x2de <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 36a:	1f 91       	pop	r17
 36c:	08 95       	ret

0000036e <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 380:	eb 01       	movw	r28, r22
 382:	cd 2f       	mov	r28, r29
 384:	dd 27       	eor	r29, r29
 386:	c2 95       	swap	r28
 388:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 38a:	27 e3       	ldi	r18, 0x37	; 55
 38c:	d2 2e       	mov	r13, r18
 38e:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 390:	90 e3       	ldi	r25, 0x30	; 48
 392:	e9 2e       	mov	r14, r25
 394:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 396:	a7 2f       	mov	r26, r23
 398:	bb 27       	eor	r27, r27
 39a:	af 70       	andi	r26, 0x0F	; 15
 39c:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 39e:	17 e3       	ldi	r17, 0x37	; 55
 3a0:	f1 2e       	mov	r15, r17
 3a2:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 3a4:	0a 2f       	mov	r16, r26
 3a6:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 3a8:	9b 01       	movw	r18, r22
 3aa:	54 e0       	ldi	r21, 0x04	; 4
 3ac:	36 95       	lsr	r19
 3ae:	27 95       	ror	r18
 3b0:	5a 95       	dec	r21
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <hexToAscii+0x3e>
 3b4:	2f 70       	andi	r18, 0x0F	; 15
 3b6:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 3b8:	82 2f       	mov	r24, r18
 3ba:	12 2f       	mov	r17, r18
 3bc:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 3be:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 3c0:	90 e3       	ldi	r25, 0x30	; 48
 3c2:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 3c4:	6f 70       	andi	r22, 0x0F	; 15
 3c6:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 3c8:	56 2f       	mov	r21, r22
 3ca:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 3cc:	96 2f       	mov	r25, r22
 3ce:	99 5c       	subi	r25, 0xC9	; 201
 3d0:	2a c0       	rjmp	.+84     	; 0x426 <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 3d2:	42 30       	cpi	r20, 0x02	; 2
 3d4:	b9 f0       	breq	.+46     	; 0x404 <hexToAscii+0x96>
 3d6:	43 30       	cpi	r20, 0x03	; 3
 3d8:	18 f4       	brcc	.+6      	; 0x3e0 <hexToAscii+0x72>
 3da:	41 30       	cpi	r20, 0x01	; 1
 3dc:	09 f5       	brne	.+66     	; 0x420 <hexToAscii+0xb2>
 3de:	19 c0       	rjmp	.+50     	; 0x412 <hexToAscii+0xa4>
 3e0:	43 30       	cpi	r20, 0x03	; 3
 3e2:	49 f0       	breq	.+18     	; 0x3f6 <hexToAscii+0x88>
 3e4:	44 30       	cpi	r20, 0x04	; 4
 3e6:	e1 f4       	brne	.+56     	; 0x420 <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 3e8:	ca 30       	cpi	r28, 0x0A	; 10
 3ea:	d1 05       	cpc	r29, r1
 3ec:	10 f0       	brcs	.+4      	; 0x3f2 <hexToAscii+0x84>
 3ee:	d0 82       	st	Z, r13
 3f0:	18 c0       	rjmp	.+48     	; 0x422 <hexToAscii+0xb4>
				else *str = tmp+'0';
 3f2:	e0 82       	st	Z, r14
 3f4:	16 c0       	rjmp	.+44     	; 0x422 <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 3f6:	aa 30       	cpi	r26, 0x0A	; 10
 3f8:	b1 05       	cpc	r27, r1
 3fa:	10 f0       	brcs	.+4      	; 0x400 <hexToAscii+0x92>
 3fc:	f0 82       	st	Z, r15
 3fe:	11 c0       	rjmp	.+34     	; 0x422 <hexToAscii+0xb4>
				else *str = tmp+'0';
 400:	00 83       	st	Z, r16
 402:	0f c0       	rjmp	.+30     	; 0x422 <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 404:	2a 30       	cpi	r18, 0x0A	; 10
 406:	31 05       	cpc	r19, r1
 408:	10 f0       	brcs	.+4      	; 0x40e <hexToAscii+0xa0>
 40a:	10 83       	st	Z, r17
 40c:	0a c0       	rjmp	.+20     	; 0x422 <hexToAscii+0xb4>
				else *str = tmp+'0';
 40e:	80 83       	st	Z, r24
 410:	08 c0       	rjmp	.+16     	; 0x422 <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 412:	6a 30       	cpi	r22, 0x0A	; 10
 414:	71 05       	cpc	r23, r1
 416:	10 f0       	brcs	.+4      	; 0x41c <hexToAscii+0xae>
 418:	90 83       	st	Z, r25
 41a:	03 c0       	rjmp	.+6      	; 0x422 <hexToAscii+0xb4>
				else *str = tmp+'0';
 41c:	50 83       	st	Z, r21
 41e:	01 c0       	rjmp	.+2      	; 0x422 <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 420:	c0 82       	st	Z, r12
		}
		width--;
 422:	41 50       	subi	r20, 0x01	; 1
		str++;
 424:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 426:	44 23       	and	r20, r20
 428:	a1 f6       	brne	.-88     	; 0x3d2 <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	cf 90       	pop	r12
 43a:	08 95       	ret

0000043c <st7920LcdInit>:
}
/*Hardware Environment：DVK501 && M169+ EX*/
#elif defined(_DVK501_M169_EX_)
void st7920LcdInit(void)
{
DDRB|=0x0F;
 43c:	84 b1       	in	r24, 0x04	; 4
 43e:	8f 60       	ori	r24, 0x0F	; 15
 440:	84 b9       	out	0x04, r24	; 4
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 442:	80 e5       	ldi	r24, 0x50	; 80
 444:	8c bd       	out	0x2c, r24	; 44
SPSR=0x01;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	8d bd       	out	0x2d, r24	; 45
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 44a:	88 ef       	ldi	r24, 0xF8	; 248
 44c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 44e:	0d b4       	in	r0, 0x2d	; 45
 450:	07 fe       	sbrs	r0, 7
 452:	fd cf       	rjmp	.-6      	; 0x44e <st7920LcdInit+0x12>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 454:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 456:	0d b4       	in	r0, 0x2d	; 45
 458:	07 fe       	sbrs	r0, 7
 45a:	fd cf       	rjmp	.-6      	; 0x456 <st7920LcdInit+0x1a>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 45c:	80 ec       	ldi	r24, 0xC0	; 192
 45e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 460:	0d b4       	in	r0, 0x2d	; 45
 462:	07 fe       	sbrs	r0, 7
 464:	fd cf       	rjmp	.-6      	; 0x460 <st7920LcdInit+0x24>
 466:	88 eb       	ldi	r24, 0xB8	; 184
 468:	8a 95       	dec	r24
 46a:	f1 f7       	brne	.-4      	; 0x468 <st7920LcdInit+0x2c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 46c:	88 ef       	ldi	r24, 0xF8	; 248
 46e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 470:	0d b4       	in	r0, 0x2d	; 45
 472:	07 fe       	sbrs	r0, 7
 474:	fd cf       	rjmp	.-6      	; 0x470 <st7920LcdInit+0x34>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 476:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
 478:	0d b4       	in	r0, 0x2d	; 45
 47a:	07 fe       	sbrs	r0, 7
 47c:	fd cf       	rjmp	.-6      	; 0x478 <st7920LcdInit+0x3c>
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 47e:	80 e1       	ldi	r24, 0x10	; 16
 480:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 482:	0d b4       	in	r0, 0x2d	; 45
 484:	07 fe       	sbrs	r0, 7
 486:	fd cf       	rjmp	.-6      	; 0x482 <st7920LcdInit+0x46>
 488:	88 eb       	ldi	r24, 0xB8	; 184
 48a:	8a 95       	dec	r24
 48c:	f1 f7       	brne	.-4      	; 0x48a <st7920LcdInit+0x4e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 48e:	86 e6       	ldi	r24, 0x66	; 102
 490:	9e e0       	ldi	r25, 0x0E	; 14
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <st7920LcdInit+0x56>
sendCodeST7920(0x0C);//整体显示
sendCodeST7920(0x01);//清屏
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 496:	8c e1       	ldi	r24, 0x1C	; 28
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	60 e2       	ldi	r22, 0x20	; 32
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	40 e4       	ldi	r20, 0x40	; 64
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <memset>
}
 4a6:	08 95       	ret

000004a8 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 4a8:	af 92       	push	r10
 4aa:	bf 92       	push	r11
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	df 93       	push	r29
 4b8:	cf 93       	push	r28
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	0d 85       	ldd	r16, Y+13	; 0x0d
 4c0:	ae 84       	ldd	r10, Y+14	; 0x0e
 4c2:	bf 84       	ldd	r11, Y+15	; 0x0f
 4c4:	e8 88       	ldd	r14, Y+16	; 0x10
 4c6:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 4c8:	02 95       	swap	r16
 4ca:	00 7f       	andi	r16, 0xF0	; 240
 4cc:	8c 85       	ldd	r24, Y+12	; 0x0c
 4ce:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 4d0:	de 01       	movw	r26, r28
 4d2:	52 96       	adiw	r26, 0x12	; 18
 4d4:	5d c0       	rjmp	.+186    	; 0x590 <__stack+0x91>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 4d6:	01 34       	cpi	r16, 0x41	; 65
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <showLine+0x34>
 4da:	5f c0       	rjmp	.+190    	; 0x59a <__stack+0x9b>

		if(*str == '\\')
 4dc:	8c 35       	cpi	r24, 0x5C	; 92
 4de:	51 f4       	brne	.+20     	; 0x4f4 <showLine+0x4c>
		{
			str++;
 4e0:	08 94       	sec
 4e2:	e1 1c       	adc	r14, r1
 4e4:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 4e6:	95 01       	movw	r18, r10
 4e8:	20 0f       	add	r18, r16
 4ea:	31 1d       	adc	r19, r1
 4ec:	f7 01       	movw	r30, r14
 4ee:	80 81       	ld	r24, Z
 4f0:	f9 01       	movw	r30, r18
 4f2:	49 c0       	rjmp	.+146    	; 0x586 <__stack+0x87>
		}
		else if(*str == '%')
 4f4:	85 32       	cpi	r24, 0x25	; 37
 4f6:	09 f0       	breq	.+2      	; 0x4fa <showLine+0x52>
 4f8:	43 c0       	rjmp	.+134    	; 0x580 <__stack+0x81>
		{
			str++;
 4fa:	08 94       	sec
 4fc:	e1 1c       	adc	r14, r1
 4fe:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 500:	f7 01       	movw	r30, r14
 502:	80 81       	ld	r24, Z
 504:	84 36       	cpi	r24, 0x64	; 100
 506:	11 f0       	breq	.+4      	; 0x50c <__stack+0xd>
 508:	84 34       	cpi	r24, 0x44	; 68
 50a:	99 f4       	brne	.+38     	; 0x532 <__stack+0x33>
			{
				str++;
 50c:	08 94       	sec
 50e:	e1 1c       	adc	r14, r1
 510:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 512:	52 e0       	ldi	r21, 0x02	; 2
 514:	c5 2e       	mov	r12, r21
 516:	d1 2c       	mov	r13, r1
 518:	ca 0e       	add	r12, r26
 51a:	db 1e       	adc	r13, r27
 51c:	6d 91       	ld	r22, X+
 51e:	7c 91       	ld	r23, X
 520:	f7 01       	movw	r30, r14
 522:	40 81       	ld	r20, Z
 524:	40 53       	subi	r20, 0x30	; 48
 526:	c5 01       	movw	r24, r10
 528:	80 0f       	add	r24, r16
 52a:	91 1d       	adc	r25, r1
 52c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <decToAscii>
 530:	21 c0       	rjmp	.+66     	; 0x574 <__stack+0x75>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 532:	83 36       	cpi	r24, 0x63	; 99
 534:	11 f0       	breq	.+4      	; 0x53a <__stack+0x3b>
 536:	83 34       	cpi	r24, 0x43	; 67
 538:	39 f4       	brne	.+14     	; 0x548 <__stack+0x49>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 53a:	f5 01       	movw	r30, r10
 53c:	e0 0f       	add	r30, r16
 53e:	f1 1d       	adc	r31, r1
 540:	8c 91       	ld	r24, X
 542:	80 83       	st	Z, r24
 544:	12 96       	adiw	r26, 0x02	; 2
 546:	20 c0       	rjmp	.+64     	; 0x588 <__stack+0x89>
			}
			else if(*str=='x'||*str=='X')
 548:	88 37       	cpi	r24, 0x78	; 120
 54a:	11 f0       	breq	.+4      	; 0x550 <__stack+0x51>
 54c:	88 35       	cpi	r24, 0x58	; 88
 54e:	e1 f4       	brne	.+56     	; 0x588 <__stack+0x89>
			{
				str++;
 550:	08 94       	sec
 552:	e1 1c       	adc	r14, r1
 554:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 556:	42 e0       	ldi	r20, 0x02	; 2
 558:	c4 2e       	mov	r12, r20
 55a:	d1 2c       	mov	r13, r1
 55c:	ca 0e       	add	r12, r26
 55e:	db 1e       	adc	r13, r27
 560:	6d 91       	ld	r22, X+
 562:	7c 91       	ld	r23, X
 564:	f7 01       	movw	r30, r14
 566:	40 81       	ld	r20, Z
 568:	40 53       	subi	r20, 0x30	; 48
 56a:	c5 01       	movw	r24, r10
 56c:	80 0f       	add	r24, r16
 56e:	91 1d       	adc	r25, r1
 570:	0e 94 b7 01 	call	0x36e	; 0x36e <hexToAscii>
				coordinate+=(*str-'0'-1);
 574:	01 53       	subi	r16, 0x31	; 49
 576:	f7 01       	movw	r30, r14
 578:	80 81       	ld	r24, Z
 57a:	08 0f       	add	r16, r24
 57c:	d6 01       	movw	r26, r12
 57e:	04 c0       	rjmp	.+8      	; 0x588 <__stack+0x89>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 580:	f5 01       	movw	r30, r10
 582:	e0 0f       	add	r30, r16
 584:	f1 1d       	adc	r31, r1
 586:	80 83       	st	Z, r24
		}
		str++;
 588:	08 94       	sec
 58a:	e1 1c       	adc	r14, r1
 58c:	f1 1c       	adc	r15, r1
		coordinate++;
 58e:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 590:	f7 01       	movw	r30, r14
 592:	80 81       	ld	r24, Z
 594:	88 23       	and	r24, r24
 596:	09 f0       	breq	.+2      	; 0x59a <__stack+0x9b>
 598:	9e cf       	rjmp	.-196    	; 0x4d6 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 59a:	cf 91       	pop	r28
 59c:	df 91       	pop	r29
 59e:	0f 91       	pop	r16
 5a0:	ff 90       	pop	r15
 5a2:	ef 90       	pop	r14
 5a4:	df 90       	pop	r13
 5a6:	cf 90       	pop	r12
 5a8:	bf 90       	pop	r11
 5aa:	af 90       	pop	r10
 5ac:	08 95       	ret

000005ae <main>:
#include <ws_lcd_ST7920_port.h>

uint8_t serial_number[8];

int main(void)
{
 5ae:	af 92       	push	r10
 5b0:	bf 92       	push	r11
 5b2:	df 92       	push	r13
 5b4:	ef 92       	push	r14
 5b6:	ff 92       	push	r15
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	df 93       	push	r29
 5be:	cf 93       	push	r28
 5c0:	0f 92       	push	r0
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t n;
	st7920LcdInit(); /*LCD初始化*/
 5c6:	0e 94 1e 02 	call	0x43c	; 0x43c <st7920LcdInit>
	showLine(0,0,lcd_buffer,"DS2401实验");
 5ca:	00 d0       	rcall	.+0      	; 0x5cc <main+0x1e>
 5cc:	00 d0       	rcall	.+0      	; 0x5ce <main+0x20>
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <main+0x22>
 5d0:	ed b7       	in	r30, 0x3d	; 61
 5d2:	fe b7       	in	r31, 0x3e	; 62
 5d4:	31 96       	adiw	r30, 0x01	; 1
 5d6:	ad b7       	in	r26, 0x3d	; 61
 5d8:	be b7       	in	r27, 0x3e	; 62
 5da:	11 96       	adiw	r26, 0x01	; 1
 5dc:	1c 92       	st	X, r1
 5de:	11 82       	std	Z+1, r1	; 0x01
 5e0:	0c e1       	ldi	r16, 0x1C	; 28
 5e2:	11 e0       	ldi	r17, 0x01	; 1
 5e4:	13 83       	std	Z+3, r17	; 0x03
 5e6:	02 83       	std	Z+2, r16	; 0x02
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	95 83       	std	Z+5, r25	; 0x05
 5ee:	84 83       	std	Z+4, r24	; 0x04
 5f0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <showLine>
	showLine(0,1,lcd_buffer,"读取序列号:");
 5f4:	ed b7       	in	r30, 0x3d	; 61
 5f6:	fe b7       	in	r31, 0x3e	; 62
 5f8:	31 96       	adiw	r30, 0x01	; 1
 5fa:	ad b7       	in	r26, 0x3d	; 61
 5fc:	be b7       	in	r27, 0x3e	; 62
 5fe:	11 96       	adiw	r26, 0x01	; 1
 600:	1c 92       	st	X, r1
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	81 83       	std	Z+1, r24	; 0x01
 606:	13 83       	std	Z+3, r17	; 0x03
 608:	02 83       	std	Z+2, r16	; 0x02
 60a:	8b e0       	ldi	r24, 0x0B	; 11
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	95 83       	std	Z+5, r25	; 0x05
 610:	84 83       	std	Z+4, r24	; 0x04
 612:	0e 94 54 02 	call	0x4a8	; 0x4a8 <showLine>
	refreshLCD(lcd_buffer); /*刷新LCD*/
 616:	ed b7       	in	r30, 0x3d	; 61
 618:	fe b7       	in	r31, 0x3e	; 62
 61a:	36 96       	adiw	r30, 0x06	; 6
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	fe bf       	out	0x3e, r31	; 62
 622:	0f be       	out	0x3f, r0	; 63
 624:	ed bf       	out	0x3d, r30	; 61
 626:	c8 01       	movw	r24, r16
 628:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <refreshLCD>
	getDs2401Number(serial_number);
 62c:	8c e5       	ldi	r24, 0x5C	; 92
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 95 00 	call	0x12a	; 0x12a <getDs2401Number>
 634:	ec e5       	ldi	r30, 0x5C	; 92
 636:	ae 2e       	mov	r10, r30
 638:	e1 e0       	ldi	r30, 0x01	; 1
 63a:	be 2e       	mov	r11, r30
 63c:	90 e0       	ldi	r25, 0x00	; 0
	for(n=0;n<8;n++)
	{
		showLine(n*4,2,lcd_buffer,"%X2",serial_number[n]);
 63e:	72 e0       	ldi	r23, 0x02	; 2
 640:	d7 2e       	mov	r13, r23
 642:	67 e1       	ldi	r22, 0x17	; 23
 644:	e6 2e       	mov	r14, r22
 646:	61 e0       	ldi	r22, 0x01	; 1
 648:	f6 2e       	mov	r15, r22
 64a:	2d b7       	in	r18, 0x3d	; 61
 64c:	3e b7       	in	r19, 0x3e	; 62
 64e:	28 50       	subi	r18, 0x08	; 8
 650:	30 40       	sbci	r19, 0x00	; 0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	3e bf       	out	0x3e, r19	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	2d bf       	out	0x3d, r18	; 61
 65c:	ed b7       	in	r30, 0x3d	; 61
 65e:	fe b7       	in	r31, 0x3e	; 62
 660:	31 96       	adiw	r30, 0x01	; 1
 662:	ad b7       	in	r26, 0x3d	; 61
 664:	be b7       	in	r27, 0x3e	; 62
 666:	11 96       	adiw	r26, 0x01	; 1
 668:	9c 93       	st	X, r25
 66a:	d1 82       	std	Z+1, r13	; 0x01
 66c:	02 83       	std	Z+2, r16	; 0x02
 66e:	13 83       	std	Z+3, r17	; 0x03
 670:	f5 82       	std	Z+5, r15	; 0x05
 672:	e4 82       	std	Z+4, r14	; 0x04
 674:	d5 01       	movw	r26, r10
 676:	8d 91       	ld	r24, X+
 678:	5d 01       	movw	r10, r26
 67a:	86 83       	std	Z+6, r24	; 0x06
 67c:	17 82       	std	Z+7, r1	; 0x07
 67e:	99 83       	std	Y+1, r25	; 0x01
 680:	0e 94 54 02 	call	0x4a8	; 0x4a8 <showLine>
 684:	99 81       	ldd	r25, Y+1	; 0x01
 686:	9c 5f       	subi	r25, 0xFC	; 252
	st7920LcdInit(); /*LCD初始化*/
	showLine(0,0,lcd_buffer,"DS2401实验");
	showLine(0,1,lcd_buffer,"读取序列号:");
	refreshLCD(lcd_buffer); /*刷新LCD*/
	getDs2401Number(serial_number);
	for(n=0;n<8;n++)
 688:	ed b7       	in	r30, 0x3d	; 61
 68a:	fe b7       	in	r31, 0x3e	; 62
 68c:	38 96       	adiw	r30, 0x08	; 8
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	f8 94       	cli
 692:	fe bf       	out	0x3e, r31	; 62
 694:	0f be       	out	0x3f, r0	; 63
 696:	ed bf       	out	0x3d, r30	; 61
 698:	90 32       	cpi	r25, 0x20	; 32
 69a:	b9 f6       	brne	.-82     	; 0x64a <main+0x9c>
	{
		showLine(n*4,2,lcd_buffer,"%X2",serial_number[n]);
	}
	refreshLCD(lcd_buffer); /*刷新LCD*/
 69c:	c8 01       	movw	r24, r16
 69e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <refreshLCD>
 6a2:	ff cf       	rjmp	.-2      	; 0x6a2 <main+0xf4>

000006a4 <memset>:
 6a4:	dc 01       	movw	r26, r24
 6a6:	01 c0       	rjmp	.+2      	; 0x6aa <memset+0x6>
 6a8:	6d 93       	st	X+, r22
 6aa:	41 50       	subi	r20, 0x01	; 1
 6ac:	50 40       	sbci	r21, 0x00	; 0
 6ae:	e0 f7       	brcc	.-8      	; 0x6a8 <memset+0x4>
 6b0:	08 95       	ret

000006b2 <__udivmodhi4>:
 6b2:	aa 1b       	sub	r26, r26
 6b4:	bb 1b       	sub	r27, r27
 6b6:	51 e1       	ldi	r21, 0x11	; 17
 6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <__udivmodhi4_ep>

000006ba <__udivmodhi4_loop>:
 6ba:	aa 1f       	adc	r26, r26
 6bc:	bb 1f       	adc	r27, r27
 6be:	a6 17       	cp	r26, r22
 6c0:	b7 07       	cpc	r27, r23
 6c2:	10 f0       	brcs	.+4      	; 0x6c8 <__udivmodhi4_ep>
 6c4:	a6 1b       	sub	r26, r22
 6c6:	b7 0b       	sbc	r27, r23

000006c8 <__udivmodhi4_ep>:
 6c8:	88 1f       	adc	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	5a 95       	dec	r21
 6ce:	a9 f7       	brne	.-22     	; 0x6ba <__udivmodhi4_loop>
 6d0:	80 95       	com	r24
 6d2:	90 95       	com	r25
 6d4:	bc 01       	movw	r22, r24
 6d6:	cd 01       	movw	r24, r26
 6d8:	08 95       	ret

000006da <_exit>:
 6da:	f8 94       	cli

000006dc <__stop_program>:
 6dc:	ff cf       	rjmp	.-2      	; 0x6dc <__stop_program>
