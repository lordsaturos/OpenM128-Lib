Interrupt Vectors
    00000 940C 002E JMP	__text_start|__start

Program Code (text area)
__text_start|__start:
    0002E EFCF      LDI	R28,0xFF
    0002F E0D4      LDI	R29,4
    00030 BFCD      OUT	0x3D,R28
    00031 BFDE      OUT	0x3E,R29
    00032 51C0      SUBI	R28,0x10
    00033 40D0      SBCI	R29,0
    00034 EA0A      LDI	R16,0xAA
    00035 8308      ST	Y,R16
    00036 2400      CLR	R0
    00037 E0E0      LDI	R30,0
    00038 E0F1      LDI	R31,1
    00039 E011      LDI	R17,1
    0003A 30E6      CPI	R30,6
    0003B 07F1      CPC	R31,R17
    0003C F011      BEQ	0x003F
    0003D 9201      ST	Z+,R0
    0003E CFFB      RJMP	0x003A
    0003F 8300      ST	Z,R16
    00040 E5EC      LDI	R30,0x5C
    00041 E0F0      LDI	R31,0
    00042 E0A0      LDI	R26,0
    00043 E0B1      LDI	R27,1
    00044 E010      LDI	R17,0
    00045 E000      LDI	R16,0
    00046 BF0B      OUT	0x3B,R16
    00047 35EC      CPI	R30,0x5C
    00048 07F1      CPC	R31,R17
    00049 F021      BEQ	0x004E
    0004A 95C8      LPM
    0004B 9631      ADIW	R30,1
    0004C 920D      ST	X+,R0
    0004D CFF9      RJMP	0x0047
    0004E 940E 00F5 CALL	_main
_exit:
    00050 CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    00051 940E 00FC CALL	push_arg4
    00053 940E 019F CALL	push_xgsetF03C
    00055 9728      SBIW	R28,0x8
    00056 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00057 24AA      CLR	R10
    00058 E081      LDI	R24,1
    00059 8388      ST	Y,R24
    0005A E080      LDI	R24,0
    0005B 8389      STD	Y+1,R24
    0005C 838A      STD	Y+2,R24
    0005D 838B      STD	Y+3,R24
    0005E C03C      RJMP	0x009B
(0120)     {
(0121)         y=dat/j;
    0005F 8028      LD	R2,Y
    00060 8039      LDD	R3,Y+1
    00061 804A      LDD	R4,Y+2
    00062 805B      LDD	R5,Y+3
    00063 8908      LDD	R16,Y+16
    00064 8919      LDD	R17,Y+17
    00065 892A      LDD	R18,Y+18
    00066 893B      LDD	R19,Y+19
    00067 925A      ST	-Y,R5
    00068 924A      ST	-Y,R4
    00069 923A      ST	-Y,R3
    0006A 922A      ST	-Y,R2
    0006B 940E 0101 CALL	div32u
    0006D 830C      STD	Y+4,R16
    0006E 831D      STD	Y+5,R17
    0006F 832E      STD	Y+6,R18
    00070 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    00071 E04A      LDI	R20,0xA
    00072 E050      LDI	R21,0
    00073 E060      LDI	R22,0
    00074 E070      LDI	R23,0
    00075 810C      LDD	R16,Y+4
    00076 811D      LDD	R17,Y+5
    00077 812E      LDD	R18,Y+6
    00078 813F      LDD	R19,Y+7
    00079 937A      ST	-Y,R23
    0007A 936A      ST	-Y,R22
    0007B 935A      ST	-Y,R21
    0007C 934A      ST	-Y,R20
    0007D 940E 0103 CALL	mod32u
    0007F E080      LDI	R24,0
    00080 E091      LDI	R25,1
    00081 2DEA      MOV	R30,R10
    00082 27FF      CLR	R31
    00083 0FE8      ADD	R30,R24
    00084 1FF9      ADC	R31,R25
    00085 8300      ST	Z,R16
(0123)         j*=10;
    00086 8028      LD	R2,Y
    00087 8039      LDD	R3,Y+1
    00088 804A      LDD	R4,Y+2
    00089 805B      LDD	R5,Y+3
    0008A E04A      LDI	R20,0xA
    0008B E050      LDI	R21,0
    0008C E060      LDI	R22,0
    0008D E070      LDI	R23,0
    0008E 925A      ST	-Y,R5
    0008F 924A      ST	-Y,R4
    00090 923A      ST	-Y,R3
    00091 922A      ST	-Y,R2
    00092 018A      MOVW	R16,R20
    00093 019B      MOVW	R18,R22
    00094 940E 016B CALL	empy32s|empy32u
    00096 8308      ST	Y,R16
    00097 8319      STD	Y+1,R17
    00098 832A      STD	Y+2,R18
    00099 833B      STD	Y+3,R19
    0009A 94A3      INC	R10
    0009B 2C2C      MOV	R2,R12
    0009C 2433      CLR	R3
    0009D FC27      SBRC	R2,7
    0009E 9430      COM	R3
    0009F 2C4A      MOV	R4,R10
    000A0 2455      CLR	R5
    000A1 1442      CP	R4,R2
    000A2 0453      CPC	R5,R3
    000A3 F40C      BGE	0x00A5
    000A4 CFBA      RJMP	0x005F
    000A5 9628      ADIW	R28,0x8
    000A6 940E 01A8 CALL	pop_xgsetF03C
    000A8 9624      ADIW	R28,4
    000A9 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    000AA 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    000AB C007      RJMP	0x00B3
(0108)         for(j=0;j<70;j++)	
    000AC 2744      CLR	R20
    000AD C001      RJMP	0x00AF
    000AE 9543      INC	R20
    000AF 3446      CPI	R20,0x46
    000B0 F3E8      BCS	0x00AE
    000B1 5001      SUBI	R16,1
    000B2 4010      SBCI	R17,0
    000B3 2422      CLR	R2
    000B4 2433      CLR	R3
    000B5 1620      CP	R2,R16
    000B6 0631      CPC	R3,R17
    000B7 F3A4      BLT	0x00AC
    000B8 9149      LD	R20,Y+
    000B9 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    000BA 934A      ST	-Y,R20
    000BB 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    000BC C013      RJMP	0x00D0
(0123) 		for(i=0;i<52642;i++)
    000BD 2744      CLR	R20
    000BE 2755      CLR	R21
    000BF C002      RJMP	0x00C2
    000C0 5F4F      SUBI	R20,0xFF
    000C1 4F5F      SBCI	R21,0xFF
    000C2 EA82      LDI	R24,0xA2
    000C3 EC9D      LDI	R25,0xCD
    000C4 E0A0      LDI	R26,0
    000C5 E0B0      LDI	R27,0
    000C6 011A      MOVW	R2,R20
    000C7 2444      CLR	R4
    000C8 2455      CLR	R5
    000C9 1628      CP	R2,R24
    000CA 0639      CPC	R3,R25
    000CB 064A      CPC	R4,R26
    000CC 065B      CPC	R5,R27
    000CD F394      BLT	0x00C0
    000CE 5001      SUBI	R16,1
    000CF 4010      SBCI	R17,0
    000D0 2422      CLR	R2
    000D1 2433      CLR	R3
    000D2 1620      CP	R2,R16
    000D3 0631      CPC	R3,R17
    000D4 F344      BLT	0x00BD
    000D5 9159      LD	R21,Y+
    000D6 9149      LD	R20,Y+
    000D7 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    000D8 934A      ST	-Y,R20
    000D9 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    000DA 2744      CLR	R20
    000DB 2755      CLR	R21
    000DC C002      RJMP	0x00DF
    000DD 5F4F      SUBI	R20,0xFF
    000DE 4F5F      SBCI	R21,0xFF
    000DF 1740      CP	R20,R16
    000E0 0751      CPC	R21,R17
    000E1 F3D8      BCS	0x00DD
    000E2 9159      LD	R21,Y+
    000E3 9149      LD	R20,Y+
    000E4 9508      RET
_setDat:
  i                    --> R20
  dat                  --> R16
    000E5 934A      ST	-Y,R20
FILE: E:\吴泽备份\DVK501光盘内容\M169_E~1\74LS16~2\74LS164\74LS164.c
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                            
(0004) 项目名称:   74LS164示例程序
(0005) 		
(0006) 目标系统:   “DVK501” && “M169+ EX”
(0007) 
(0008) 应用软件:   ICCAVR 6.31A
(0009) 
(0010) 版    本:   V1.0 
(0011) 
(0012) 圆版时间:   2009-7-1
(0013) 
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 		
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 使用开发板的LED指示灯查看MCU自己从模拟串口发送的数据。
(0028) ----------------------------------------------------------------------
(0029) 硬件连接： 
(0030)           	  DVK501     			DVK501
(0031) 				Q0		---------     L0
(0032) 				Q1  	---------     L1
(0033) 				Q2 		---------     L2
(0034) 				Q3  	---------     L3
(0035) 				Q4  	---------     L4
(0036) 				Q5  	---------     L5
(0037) 				Q6  	---------     L6
(0038) 				Q7  	---------     L7
(0039) 		 	  DVK500				 M169+ EX
(0040) 				VCC		---------	  VCC
(0041) 				GND		---------	  GND
(0042) 				/MR	    ---------	  VCC
(0043) 				A/B		---------	  PB6
(0044) 				CLK		---------	  PB7
(0045) ----------------------------------------------------------------------
(0046) 注意事项：
(0047) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0048) （2）请详细阅读“使用必读”及相关资料。
(0049) ----------------------------------------------------------------------
(0050) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0051) 
(0052) #include <iom169v.h>
(0053) 
(0054) 
(0055) #define NO_INCLUDE_I2C_H 1
(0056) 
(0057) #include "D:\ICC_H\CmmICC.H"
(0058) 
(0059) #define OUT_RXD		sbi(DDRB,6)	   //PB6 数据口
(0060) #define SET_RXD		sbi(PORTB,6)
(0061) #define CLR_RXD		cbi(PORTB,6)
(0062) 
(0063) #define OUT_TXD  	sbi(DDRB,7)	   //PB7 脉冲口
(0064) #define SET_TXD 	sbi(PORTB,7)
(0065) #define CLR_TXD  	cbi(PORTB,7)
(0066) 
(0067) /*--------------------------------------------------------------------
(0068) 函数名称：
(0069) 函数功能：
(0070) 注意事项：
(0071) 提示说明：
(0072) 输    入：
(0073) 返    回：
(0074) --------------------------------------------------------------------*/
(0075) void setDat(uint8 dat)
(0076) {
(0077) 	uint8 i;
(0078) 
(0079) 	for(i=0;i<8;i++)
    000E6 2744      CLR	R20
    000E7 C009      RJMP	0x00F1
(0080) 	{
(0081) 		CLR_TXD;
    000E8 982F      CBI	0x05,7
(0082) 		if((bool)dat&0x80)
    000E9 FF07      SBRS	R16,7
    000EA C002      RJMP	0x00ED
(0083) 			SET_RXD;
    000EB 9A2E      SBI	0x05,6
    000EC C001      RJMP	0x00EE
(0084) 		else
(0085) 			CLR_RXD;
    000ED 982E      CBI	0x05,6
(0086) 		SET_TXD;
    000EE 9A2F      SBI	0x05,7
(0087) 		dat = dat<<1;
    000EF 0F00      LSL	R16
    000F0 9543      INC	R20
    000F1 3048      CPI	R20,0x8
    000F2 F3A8      BCS	0x00E8
    000F3 9149      LD	R20,Y+
    000F4 9508      RET
(0088) 	}
(0089) }
(0090) /*--------------------------------------------------------------------
(0091) 函数名称：
(0092) 函数功能：
(0093) 注意事项：
(0094) 提示说明：
(0095) 输    入：
(0096) 返    回：
(0097) --------------------------------------------------------------------*/
(0098) void main()
(0099) {
(0100)     uint8 dat=0X55;	
_main:
  dat                  --> R20
    000F5 E545      LDI	R20,0x55
(0101) 	OUT_RXD;
    000F6 9A26      SBI	0x04,6
(0102) 	OUT_TXD;
    000F7 9A27      SBI	0x04,7
(0103) 	setDat(dat);
    000F8 2F04      MOV	R16,R20
    000F9 DFEB      RCALL	_setDat
(0104) 	while(1);
FILE: <library>
    000FA CFFF      RJMP	0x00FA
    000FB 9508      RET
push_arg4:
    000FC 933A      ST	-Y,R19
    000FD 932A      ST	-Y,R18
push_arg2:
    000FE 931A      ST	-Y,R17
    000FF 930A      ST	-Y,R16
    00100 9508      RET
div32u:
    00101 94E8      BCLR	6
    00102 C001      RJMP	0x0104
mod32u:
    00103 9468      BSET	6
    00104 D030      RCALL	long_div_prolog
    00105 24CC      CLR	R12
    00106 C009      RJMP	0x0110
div32s:
    00107 94E8      BCLR	6
    00108 C001      RJMP	0x010A
mod32s:
    00109 9468      BSET	6
    0010A D02A      RCALL	long_div_prolog
    0010B FD37      SBRC	R19,7
    0010C 940E 01B1 CALL	neg32
    0010E FDB7      SBRC	R27,7
    0010F D052      RCALL	neg_R24_R27
    00110 2477      CLR	R7
    00111 2488      CLR	R8
    00112 2499      CLR	R9
    00113 24AA      CLR	R10
    00114 24BB      CLR	R11
    00115 D042      RCALL	tst_R16_R19
    00116 F0C1      BEQ	0x012F
    00117 D045      RCALL	tst_R24_R27
    00118 F0B1      BEQ	0x012F
    00119 E2E8      LDI	R30,0x28
    0011A 0F00      LSL	R16
    0011B 1F11      ROL	R17
    0011C 1F22      ROL	R18
    0011D 1F33      ROL	R19
    0011E 1C77      ROL	R7
    0011F 1C88      ROL	R8
    00120 1C99      ROL	R9
    00121 1CAA      ROL	R10
    00122 1CBB      ROL	R11
    00123 1688      CP	R8,R24
    00124 0699      CPC	R9,R25
    00125 06AA      CPC	R10,R26
    00126 06BB      CPC	R11,R27
    00127 F028      BCS	0x012D
    00128 1A88      SUB	R8,R24
    00129 0A99      SBC	R9,R25
    0012A 0AAA      SBC	R10,R26
    0012B 0ABB      SBC	R11,R27
    0012C 9503      INC	R16
    0012D 95EA      DEC	R30
    0012E F759      BNE	0x011A
    0012F F426      BRTC	0x0134
    00130 2D08      MOV	R16,R8
    00131 2D19      MOV	R17,R9
    00132 2D2A      MOV	R18,R10
    00133 2D3B      MOV	R19,R11
    00134 C013      RJMP	long_div_epilog
long_div_prolog:
    00135 927A      ST	-Y,R7
    00136 928A      ST	-Y,R8
    00137 929A      ST	-Y,R9
    00138 92AA      ST	-Y,R10
    00139 92BA      ST	-Y,R11
    0013A 92CA      ST	-Y,R12
    0013B 93EA      ST	-Y,R30
    0013C 938A      ST	-Y,R24
    0013D 939A      ST	-Y,R25
    0013E 93AA      ST	-Y,R26
    0013F 93BA      ST	-Y,R27
    00140 858B      LDD	R24,Y+11
    00141 859C      LDD	R25,Y+12
    00142 85AD      LDD	R26,Y+13
    00143 85BE      LDD	R27,Y+14
    00144 2EC3      MOV	R12,R19
    00145 F00E      BRTS	0x0147
    00146 26CB      EOR	R12,R27
    00147 9508      RET
long_div_epilog:
    00148 FCC7      SBRC	R12,7
    00149 940E 01B1 CALL	neg32
    0014B 91B9      LD	R27,Y+
    0014C 91A9      LD	R26,Y+
    0014D 9199      LD	R25,Y+
    0014E 9189      LD	R24,Y+
    0014F 91E9      LD	R30,Y+
    00150 90C9      LD	R12,Y+
    00151 90B9      LD	R11,Y+
    00152 90A9      LD	R10,Y+
    00153 9099      LD	R9,Y+
    00154 9089      LD	R8,Y+
    00155 9079      LD	R7,Y+
    00156 9624      ADIW	R28,4
    00157 9508      RET
tst_R16_R19:
    00158 2FE0      MOV	R30,R16
    00159 2BE1      OR	R30,R17
    0015A 2BE2      OR	R30,R18
    0015B 2BE3      OR	R30,R19
    0015C 9508      RET
tst_R24_R27:
    0015D 2FE8      MOV	R30,R24
    0015E 2BE9      OR	R30,R25
    0015F 2BEA      OR	R30,R26
    00160 2BEB      OR	R30,R27
    00161 9508      RET
neg_R24_R27:
    00162 9580      COM	R24
    00163 9590      COM	R25
    00164 95A0      COM	R26
    00165 95B0      COM	R27
    00166 5F8F      SUBI	R24,0xFF
    00167 4F9F      SBCI	R25,0xFF
    00168 4FAF      SBCI	R26,0xFF
    00169 4FBF      SBCI	R27,0xFF
    0016A 9508      RET
empy32s|empy32u:
    0016B 940E 01BA CALL	long_prolog
    0016D 927A      ST	-Y,R7
    0016E 940E 01D3 CALL	tstzero1
    00170 F159      BEQ	0x019C
    00171 2477      CLR	R7
    00172 940E 01D9 CALL	tstzero2
    00174 F419      BNE	0x0178
    00175 018C      MOVW	R16,R24
    00176 019D      MOVW	R18,R26
    00177 C024      RJMP	0x019C
    00178 920A      ST	-Y,R0
    00179 921A      ST	-Y,R1
    0017A 9F08      MUL	R16,R24
    0017B 2CB0      MOV	R11,R0
    0017C 2CA1      MOV	R10,R1
    0017D 9F28      MUL	R18,R24
    0017E 2C90      MOV	R9,R0
    0017F 2C81      MOV	R8,R1
    00180 9F18      MUL	R17,R24
    00181 0CA0      ADD	R10,R0
    00182 1C91      ADC	R9,R1
    00183 1C87      ADC	R8,R7
    00184 9F09      MUL	R16,R25
    00185 0CA0      ADD	R10,R0
    00186 1C91      ADC	R9,R1
    00187 1C87      ADC	R8,R7
    00188 9F19      MUL	R17,R25
    00189 0C90      ADD	R9,R0
    0018A 1C81      ADC	R8,R1
    0018B 9F0A      MUL	R16,R26
    0018C 0C90      ADD	R9,R0
    0018D 1C81      ADC	R8,R1
    0018E 9F38      MUL	R19,R24
    0018F 0C80      ADD	R8,R0
    00190 9F29      MUL	R18,R25
    00191 0C80      ADD	R8,R0
    00192 9F1A      MUL	R17,R26
    00193 0C80      ADD	R8,R0
    00194 9F0B      MUL	R16,R27
    00195 0C80      ADD	R8,R0
    00196 9019      LD	R1,Y+
    00197 9009      LD	R0,Y+
    00198 2D0B      MOV	R16,R11
    00199 2D1A      MOV	R17,R10
    0019A 2D29      MOV	R18,R9
    0019B 2D38      MOV	R19,R8
    0019C 9079      LD	R7,Y+
    0019D 940C 01C8 JMP	long_epilog
push_xgsetF03C:
    0019F 937A      ST	-Y,R23
    001A0 936A      ST	-Y,R22
    001A1 935A      ST	-Y,R21
    001A2 934A      ST	-Y,R20
    001A3 92DA      ST	-Y,R13
    001A4 92CA      ST	-Y,R12
    001A5 92BA      ST	-Y,R11
    001A6 92AA      ST	-Y,R10
    001A7 9508      RET
pop_xgsetF03C:
    001A8 90A9      LD	R10,Y+
    001A9 90B9      LD	R11,Y+
    001AA 90C9      LD	R12,Y+
    001AB 90D9      LD	R13,Y+
    001AC 9149      LD	R20,Y+
    001AD 9159      LD	R21,Y+
    001AE 9169      LD	R22,Y+
    001AF 9179      LD	R23,Y+
    001B0 9508      RET
neg32:
    001B1 9500      COM	R16
    001B2 9510      COM	R17
    001B3 9520      COM	R18
    001B4 9530      COM	R19
    001B5 5F0F      SUBI	R16,0xFF
    001B6 4F1F      SBCI	R17,0xFF
    001B7 4F2F      SBCI	R18,0xFF
    001B8 4F3F      SBCI	R19,0xFF
    001B9 9508      RET
long_prolog:
    001BA 928A      ST	-Y,R8
    001BB 929A      ST	-Y,R9
    001BC 92AA      ST	-Y,R10
    001BD 92BA      ST	-Y,R11
    001BE 93EA      ST	-Y,R30
    001BF 938A      ST	-Y,R24
    001C0 939A      ST	-Y,R25
    001C1 93AA      ST	-Y,R26
    001C2 93BA      ST	-Y,R27
    001C3 8589      LDD	R24,Y+9
    001C4 859A      LDD	R25,Y+10
    001C5 85AB      LDD	R26,Y+11
    001C6 85BC      LDD	R27,Y+12
    001C7 9508      RET
long_epilog:
    001C8 91B9      LD	R27,Y+
    001C9 91A9      LD	R26,Y+
    001CA 9199      LD	R25,Y+
    001CB 9189      LD	R24,Y+
    001CC 91E9      LD	R30,Y+
    001CD 90B9      LD	R11,Y+
    001CE 90A9      LD	R10,Y+
    001CF 9099      LD	R9,Y+
    001D0 9089      LD	R8,Y+
    001D1 9624      ADIW	R28,4
    001D2 9508      RET
tstzero1:
    001D3 27EE      CLR	R30
    001D4 2BE0      OR	R30,R16
    001D5 2BE1      OR	R30,R17
    001D6 2BE2      OR	R30,R18
    001D7 2BE3      OR	R30,R19
    001D8 9508      RET
tstzero2:
    001D9 27EE      CLR	R30
    001DA 2BE8      OR	R30,R24
    001DB 2BE9      OR	R30,R25
    001DC 2BEA      OR	R30,R26
    001DD 2BEB      OR	R30,R27
    001DE 9508      RET
