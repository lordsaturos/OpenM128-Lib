Interrupt Vectors
    00000 940C 002E JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0002E EFCF      LDI	R28,0xFF
    0002F E0D4      LDI	R29,4
    00030 BFCD      OUT	0x3D,R28
    00031 BFDE      OUT	0x3E,R29
    00032 51C0      SUBI	R28,0x10
    00033 40D0      SBCI	R29,0
    00034 EA0A      LDI	R16,0xAA
    00035 8308      ST	Y,R16
    00036 2400      CLR	R0
    00037 E0E0      LDI	R30,0
    00038 E0F1      LDI	R31,1
    00039 E011      LDI	R17,1
    0003A 30E6      CPI	R30,6
    0003B 07F1      CPC	R31,R17
    0003C F011      BEQ	0x003F
    0003D 9201      ST	Z+,R0
    0003E CFFB      RJMP	0x003A
    0003F 8300      ST	Z,R16
    00040 E5EC      LDI	R30,0x5C
    00041 E0F0      LDI	R31,0
    00042 E0A0      LDI	R26,0
    00043 E0B1      LDI	R27,1
    00044 E010      LDI	R17,0
    00045 E000      LDI	R16,0
    00046 BF0B      OUT	0x3B,R16
    00047 35EC      CPI	R30,0x5C
    00048 07F1      CPC	R31,R17
    00049 F021      BEQ	0x004E
    0004A 95C8      LPM
    0004B 9631      ADIW	R30,1
    0004C 920D      ST	X+,R0
    0004D CFF9      RJMP	0x0047
    0004E 940E 01B5 CALL	_main
_exit:
    00050 CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    00051 940E 01D3 CALL	push_arg4
    00053 940E 0284 CALL	push_xgsetF03C
    00055 9728      SBIW	R28,0x8
    00056 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00057 24AA      CLR	R10
    00058 E081      LDI	R24,1
    00059 8388      ST	Y,R24
    0005A E080      LDI	R24,0
    0005B 8389      STD	Y+1,R24
    0005C 838A      STD	Y+2,R24
    0005D 838B      STD	Y+3,R24
    0005E C03C      RJMP	0x009B
(0120)     {
(0121)         y=dat/j;
    0005F 8028      LD	R2,Y
    00060 8039      LDD	R3,Y+1
    00061 804A      LDD	R4,Y+2
    00062 805B      LDD	R5,Y+3
    00063 8908      LDD	R16,Y+16
    00064 8919      LDD	R17,Y+17
    00065 892A      LDD	R18,Y+18
    00066 893B      LDD	R19,Y+19
    00067 925A      ST	-Y,R5
    00068 924A      ST	-Y,R4
    00069 923A      ST	-Y,R3
    0006A 922A      ST	-Y,R2
    0006B 940E 01D8 CALL	div32u
    0006D 830C      STD	Y+4,R16
    0006E 831D      STD	Y+5,R17
    0006F 832E      STD	Y+6,R18
    00070 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    00071 E04A      LDI	R20,0xA
    00072 E050      LDI	R21,0
    00073 E060      LDI	R22,0
    00074 E070      LDI	R23,0
    00075 810C      LDD	R16,Y+4
    00076 811D      LDD	R17,Y+5
    00077 812E      LDD	R18,Y+6
    00078 813F      LDD	R19,Y+7
    00079 937A      ST	-Y,R23
    0007A 936A      ST	-Y,R22
    0007B 935A      ST	-Y,R21
    0007C 934A      ST	-Y,R20
    0007D 940E 01DA CALL	mod32u
    0007F E080      LDI	R24,0
    00080 E091      LDI	R25,1
    00081 2DEA      MOV	R30,R10
    00082 27FF      CLR	R31
    00083 0FE8      ADD	R30,R24
    00084 1FF9      ADC	R31,R25
    00085 8300      ST	Z,R16
(0123)         j*=10;
    00086 8028      LD	R2,Y
    00087 8039      LDD	R3,Y+1
    00088 804A      LDD	R4,Y+2
    00089 805B      LDD	R5,Y+3
    0008A E04A      LDI	R20,0xA
    0008B E050      LDI	R21,0
    0008C E060      LDI	R22,0
    0008D E070      LDI	R23,0
    0008E 925A      ST	-Y,R5
    0008F 924A      ST	-Y,R4
    00090 923A      ST	-Y,R3
    00091 922A      ST	-Y,R2
    00092 018A      MOVW	R16,R20
    00093 019B      MOVW	R18,R22
    00094 940E 0242 CALL	empy32s|empy32u
    00096 8308      ST	Y,R16
    00097 8319      STD	Y+1,R17
    00098 832A      STD	Y+2,R18
    00099 833B      STD	Y+3,R19
    0009A 94A3      INC	R10
    0009B 2C2C      MOV	R2,R12
    0009C 2433      CLR	R3
    0009D FC27      SBRC	R2,7
    0009E 9430      COM	R3
    0009F 2C4A      MOV	R4,R10
    000A0 2455      CLR	R5
    000A1 1442      CP	R4,R2
    000A2 0453      CPC	R5,R3
    000A3 F40C      BGE	0x00A5
    000A4 CFBA      RJMP	0x005F
    000A5 9628      ADIW	R28,0x8
    000A6 940E 028D CALL	pop_xgsetF03C
    000A8 9624      ADIW	R28,4
    000A9 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    000AA 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    000AB C007      RJMP	0x00B3
(0108)         for(j=0;j<70;j++)	
    000AC 2744      CLR	R20
    000AD C001      RJMP	0x00AF
    000AE 9543      INC	R20
    000AF 3446      CPI	R20,0x46
    000B0 F3E8      BCS	0x00AE
    000B1 5001      SUBI	R16,1
    000B2 4010      SBCI	R17,0
    000B3 2422      CLR	R2
    000B4 2433      CLR	R3
    000B5 1620      CP	R2,R16
    000B6 0631      CPC	R3,R17
    000B7 F3A4      BLT	0x00AC
    000B8 9149      LD	R20,Y+
    000B9 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    000BA 934A      ST	-Y,R20
    000BB 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    000BC C013      RJMP	0x00D0
(0123) 		for(i=0;i<52642;i++)
    000BD 2744      CLR	R20
    000BE 2755      CLR	R21
    000BF C002      RJMP	0x00C2
    000C0 5F4F      SUBI	R20,0xFF
    000C1 4F5F      SBCI	R21,0xFF
    000C2 EA82      LDI	R24,0xA2
    000C3 EC9D      LDI	R25,0xCD
    000C4 E0A0      LDI	R26,0
    000C5 E0B0      LDI	R27,0
    000C6 011A      MOVW	R2,R20
    000C7 2444      CLR	R4
    000C8 2455      CLR	R5
    000C9 1628      CP	R2,R24
    000CA 0639      CPC	R3,R25
    000CB 064A      CPC	R4,R26
    000CC 065B      CPC	R5,R27
    000CD F394      BLT	0x00C0
    000CE 5001      SUBI	R16,1
    000CF 4010      SBCI	R17,0
    000D0 2422      CLR	R2
    000D1 2433      CLR	R3
    000D2 1620      CP	R2,R16
    000D3 0631      CPC	R3,R17
    000D4 F344      BLT	0x00BD
    000D5 9159      LD	R21,Y+
    000D6 9149      LD	R20,Y+
    000D7 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    000D8 934A      ST	-Y,R20
    000D9 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    000DA 2744      CLR	R20
    000DB 2755      CLR	R21
    000DC C002      RJMP	0x00DF
    000DD 5F4F      SUBI	R20,0xFF
    000DE 4F5F      SBCI	R21,0xFF
    000DF 1740      CP	R20,R16
    000E0 0751      CPC	R21,R17
    000E1 F3D8      BCS	0x00DD
    000E2 9159      LD	R21,Y+
    000E3 9149      LD	R20,Y+
    000E4 9508      RET
FILE: D:\ICC_H\DVK501_IIC_sim.h
(0001) /*********************************************************************
(0002) 微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立IO模拟I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR 6.31A
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2009-03-6
(0013) 	
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef DVK501_IIC_sim_h
(0041) #define DVK501_IIC_sim_h
(0042) 
(0043) 
(0044) 
(0045) //读写定义
(0046) #define READ 1
(0047) #define WRITE 0
(0048) 
(0049) //有无act
(0050) #define ACT 1
(0051) #define nACT 0
(0052) 
(0053) /* I2C Config */
(0054) #define I2C_ERR			0
(0055) #define I2C_CRR			1
(0056) 
(0057) /*--------------------------------------------------------------------
(0058) 函数名称：I2C Start
(0059) 函数功能：用于给出start信号
(0060) 注意事项：AVR工作于高频率时钟信号时，有可能无法正常运行
(0061) 提示说明：在无法正常工作时请适当提高延时时间
(0062) 输    入：
(0063) 返    回：
(0064) --------------------------------------------------------------------*/
(0065) void I2C_Start()
(0066) {
(0067) 	SCL_OUT;
_I2C_Start:
    000E5 9A6C      SBI	0x0D,4
(0068) 	SDA_OUT;
    000E6 9A6D      SBI	0x0D,5
(0069) 	SDA_SET;
    000E7 9A75      SBI	0x0E,5
(0070) 	SCL_SET;
    000E8 9A74      SBI	0x0E,4
(0071) 	SDA_CLR;
    000E9 9875      CBI	0x0E,5
(0072) 	SCL_CLR;
    000EA 9874      CBI	0x0E,4
    000EB 9508      RET
(0073) }
(0074) 
(0075) /*--------------------------------------------------------------------
(0076) 函数名称：I2C Stop
(0077) 函数功能：用于给出stop信号
(0078) 注意事项：AVR工作于高频率时钟信号时，有可能无法正常运行
(0079) 提示说明：在无法正常工作时请适当提高延时时间
(0080) 输    入：
(0081) 返    回：
(0082) --------------------------------------------------------------------*/
(0083) void I2C_Stop()
(0084) {
(0085) 	SCL_OUT;
_I2C_Stop:
    000EC 9A6C      SBI	0x0D,4
(0086) 	SDA_OUT;
    000ED 9A6D      SBI	0x0D,5
(0087) 	SDA_CLR;
    000EE 9875      CBI	0x0E,5
(0088) 	SCL_SET;
    000EF 9A74      SBI	0x0E,4
(0089) 	SDA_SET;
    000F0 9A75      SBI	0x0E,5
(0090) 	SCL_CLR;
    000F1 9874      CBI	0x0E,4
    000F2 9508      RET
_I2C_Send_DataAddr:
  I2C_n                --> R10
  wrDAdr               --> R16
    000F3 92AA      ST	-Y,R10
(0091) }
(0092) 
(0093) /*--------------------------------------------------------------------
(0094) 函数名称：发送8位数据/地址
(0095) 函数功能：
(0096) 注意事项：
(0097) 提示说明：
(0098) 输    入：wrDAdr
(0099) 返    回：
(0100) --------------------------------------------------------------------*/
(0101) void I2C_Send_DataAddr(uchar wrDAdr)	
(0102) {
(0103) 	uchar I2C_n;
(0104) 	SCL_OUT;
    000F4 9A6C      SBI	0x0D,4
(0105) 	SDA_OUT;
    000F5 9A6D      SBI	0x0D,5
(0106) 	for(I2C_n=0;I2C_n<=7;I2C_n++)
    000F6 24AA      CLR	R10
    000F7 C00B      RJMP	0x0103
(0107) 	{
(0108) 		if((wrDAdr&0x80)==0x80) {SDA_SET;}
    000F8 2F80      MOV	R24,R16
    000F9 7880      ANDI	R24,0x80
    000FA 3880      CPI	R24,0x80
    000FB F411      BNE	0x00FE
    000FC 9A75      SBI	0x0E,5
    000FD C001      RJMP	0x00FF
(0109) 		else {SDA_CLR;}	
    000FE 9875      CBI	0x0E,5
(0110) 		SCL_SET;
    000FF 9A74      SBI	0x0E,4
(0111) 		SCL_CLR;
    00100 9874      CBI	0x0E,4
(0112) 		wrDAdr<<=1;
    00101 0F00      LSL	R16
    00102 94A3      INC	R10
    00103 E087      LDI	R24,7
    00104 158A      CP	R24,R10
    00105 F790      BCC	0x00F8
(0113) 	}
(0114) 	SDA_IN;
    00106 986D      CBI	0x0D,5
(0115) 	SDA_SET;
    00107 9A75      SBI	0x0E,5
(0116) 	SCL_SET;
    00108 9A74      SBI	0x0E,4
(0117) 	while(SDA_PIN){};
    00109 9965      SBIC	0x0C,5
    0010A CFFE      RJMP	0x0109
(0118) 	SCL_CLR;
    0010B 9874      CBI	0x0E,4
    0010C 90A9      LD	R10,Y+
    0010D 9508      RET
_I2C_Read_DataAddr:
  rdDAdr               --> R20
  n                    --> R10
  bAct                 --> R16
    0010E 92AA      ST	-Y,R10
    0010F 934A      ST	-Y,R20
(0119) }
(0120) 
(0121) 
(0122) /*--------------------------------------------------------------------
(0123) 函数名称：读数据/地址(ACT)
(0124) 函数功能：
(0125) 注意事项：
(0126) 提示说明：
(0127) 输    入：有act bAct=1;无act bAct=0;
(0128) 返    回：rdDAdr
(0129) --------------------------------------------------------------------*/
(0130) uchar I2C_Read_DataAddr(uchar bAct)
(0131) {
(0132) 	uchar n;
(0133) 	uchar rdDAdr=0;
    00110 2744      CLR	R20
(0134) 	SCL_CLR;
    00111 9874      CBI	0x0E,4
(0135) 	SCL_OUT;
    00112 9A6C      SBI	0x0D,4
(0136) 	SDA_IN;
    00113 986D      CBI	0x0D,5
(0137) 	for(n=0;n<=7;n++)
    00114 24AA      CLR	R10
    00115 C008      RJMP	0x011E
(0138) 	{
(0139) 	 	rdDAdr<<=1;
    00116 0F44      LSL	R20
(0140) 		SCL_SET;
    00117 9A74      SBI	0x0E,4
(0141) 		DELAY_NOP;
    00118 0000      NOP
(0142)     if(SDA_PIN)
    00119 9B65      SBIS	0x0C,5
    0011A C001      RJMP	0x011C
(0143) 		rdDAdr|=0x01;
    0011B 6041      ORI	R20,1
(0144) 		SCL_CLR;
    0011C 9874      CBI	0x0E,4
    0011D 94A3      INC	R10
    0011E E087      LDI	R24,7
    0011F 158A      CP	R24,R10
    00120 F7A8      BCC	0x0116
(0145) 		
(0146) 	}
(0147) 	SDA_OUT;
    00121 9A6D      SBI	0x0D,5
(0148) 	if(bAct) {SDA_SET;}
    00122 2300      TST	R16
    00123 F011      BEQ	0x0126
    00124 9A75      SBI	0x0E,5
    00125 C001      RJMP	0x0127
(0149) 	else {SDA_CLR;}
    00126 9875      CBI	0x0E,5
(0150) 	SCL_SET;
    00127 9A74      SBI	0x0E,4
(0151) 	SCL_CLR;
    00128 9874      CBI	0x0E,4
(0152) 	return(rdDAdr);
    00129 2F04      MOV	R16,R20
    0012A 9149      LD	R20,Y+
    0012B 90A9      LD	R10,Y+
    0012C 9508      RET
_I2C_ReadBusy:
  n                    --> R10
  wrDAdr               --> R16
    0012D 92AA      ST	-Y,R10
(0153) }
(0154) 
(0155) 
(0156) 
(0157) /*--------------------------------------------------------------------
(0158) 函数名称：读忙
(0159) 函数功能：
(0160) 注意事项：
(0161) 提示说明：
(0162) 输    入：wrDAdr 忙返回1 不忙返回0
(0163) 返    回：
(0164) --------------------------------------------------------------------*/
(0165) uchar I2C_ReadBusy(uchar wrDAdr)	
(0166) {
(0167) 	uchar n;
(0168) 	SCL_OUT;
    0012E 9A6C      SBI	0x0D,4
(0169) 	SDA_OUT;
    0012F 9A6D      SBI	0x0D,5
(0170) 	for(n=0;n<=7;n++)
    00130 24AA      CLR	R10
    00131 C00B      RJMP	0x013D
(0171) 	{
(0172) 		if((wrDAdr&0x80)==0x80) {SDA_SET;}
    00132 2F80      MOV	R24,R16
    00133 7880      ANDI	R24,0x80
    00134 3880      CPI	R24,0x80
    00135 F411      BNE	0x0138
    00136 9A75      SBI	0x0E,5
    00137 C001      RJMP	0x0139
(0173) 		else {SDA_CLR;}
    00138 9875      CBI	0x0E,5
(0174) 		SCL_SET;
    00139 9A74      SBI	0x0E,4
(0175) 		SCL_CLR;
    0013A 9874      CBI	0x0E,4
(0176) 		wrDAdr<<=1;
    0013B 0F00      LSL	R16
    0013C 94A3      INC	R10
    0013D E087      LDI	R24,7
    0013E 158A      CP	R24,R10
    0013F F790      BCC	0x0132
(0177) 	}
(0178) 	SDA_IN;
    00140 986D      CBI	0x0D,5
(0179) 	SDA_SET;
    00141 9A75      SBI	0x0E,5
(0180) 	SCL_SET;
    00142 9A74      SBI	0x0E,4
(0181) 	wrDAdr=SDA_PIN;
    00143 B10C      IN	R16,0x0C
    00144 7200      ANDI	R16,0x20
(0182) 	SCL_CLR;	
    00145 9874      CBI	0x0E,4
(0183) 	return(wrDAdr);
    00146 90A9      LD	R10,Y+
    00147 9508      RET
_AT24C_wByte:
  dat                  --> R10
  wordAdr              --> R12
  AT24C_wrDAdr         --> R20
    00148 940E 0276 CALL	push_xgset303C
    0014A 2EC2      MOV	R12,R18
    0014B 2F40      MOV	R20,R16
    0014C 80AE      LDD	R10,Y+6
FILE: D:\ICC_H\AT24CXX_sim.h
(0001) /*********************************************************************
(0002) 微 雪 电 子   WaveShare   http://www.waveShare.net
(0003) 		                                                        
(0004) 目    的:   建立AT24CXX的操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR 6.31A
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2009-03-6
(0013) 	
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef AT24CXX_sim_h
(0041) #define AT24CXX_sim_h
(0042) 
(0043) 
(0044) 
(0045) #define uchar unsigned char
(0046) #define uint unsigned int
(0047) 
(0048) /*--------------------------------------------------------------------
(0049) 函数名称：字节写
(0050) 函数功能：
(0051) 注意事项：
(0052) 提示说明：
(0053) 输    入：AT24C_wrDAdr: write device-address 写器件地址
(0054) 		 wordAdr: word address 字地址
(0055) 		 dat: data 数据
(0056) 返    回：
(0057) --------------------------------------------------------------------*/
(0058) 
(0059) void AT24C_wByte(uchar AT24C_wrDAdr,uchar wordAdr,uchar dat)
(0060) {
(0061) 	AT24C_wrDAdr=(((AT24C_wrDAdr<<1)&0x0E)|0xA0); //强制将器件地址转换为0b1010xxx0 写使能
    0014D 0F44      LSL	R20
    0014E 704E      ANDI	R20,0xE
    0014F 6A40      ORI	R20,0xA0
(0062) 	I2C_Start(); 
    00150 DF94      RCALL	_I2C_Start
(0063) 	I2C_Send_DataAddr(AT24C_wrDAdr); //发送器件地址
    00151 2F04      MOV	R16,R20
    00152 DFA0      RCALL	_I2C_Send_DataAddr
(0064) 	I2C_Send_DataAddr(wordAdr); //发送字地址
    00153 2D0C      MOV	R16,R12
    00154 DF9E      RCALL	_I2C_Send_DataAddr
(0065) 	I2C_Send_DataAddr(dat); //发送数据
    00155 2D0A      MOV	R16,R10
    00156 DF9C      RCALL	_I2C_Send_DataAddr
(0066) 	I2C_Stop();
    00157 DF94      RCALL	_I2C_Stop
    00158 940C 027D JMP	pop_xgset303C
_AT24C_wPage:
  AT24C_n              --> R10
  pWrDat               --> R12
  wordAdr              --> R10
  AT24C_wrDAdr         --> R20
    0015A 940E 0276 CALL	push_xgset303C
    0015C 2EA2      MOV	R10,R18
    0015D 2F40      MOV	R20,R16
    0015E 80CE      LDD	R12,Y+6
    0015F 80DF      LDD	R13,Y+7
(0067) }
(0068) 
(0069) /*--------------------------------------------------------------------
(0070) 函数名称：页写
(0071) 函数功能：
(0072) 注意事项：
(0073) 提示说明：
(0074) 输    入：AT24C_wrDAdr: write device-address 写器件地址
(0075) 		 wordAdr: word address 字地址
(0076) 		 *pWrDat: p->write data 写入数据指针
(0077) 返    回：
(0078) --------------------------------------------------------------------*/
(0079) 
(0080) void AT24C_wPage(uchar AT24C_wrDAdr,uchar wordAdr,uchar *pWrDat)
(0081) {
(0082) 	uchar AT24C_n;
(0083) 	AT24C_wrDAdr=(((AT24C_wrDAdr<<1)&0x0E)|0xA0); //强制将器件地址转换为0b1010xxx0 写使能	
    00160 0F44      LSL	R20
    00161 704E      ANDI	R20,0xE
    00162 6A40      ORI	R20,0xA0
(0084) 	I2C_Start();
    00163 DF81      RCALL	_I2C_Start
(0085) 	I2C_Send_DataAddr(AT24C_wrDAdr); //发送器件地址
    00164 2F04      MOV	R16,R20
    00165 DF8D      RCALL	_I2C_Send_DataAddr
(0086) 	I2C_Send_DataAddr(wordAdr); //发送字地址
    00166 2D0A      MOV	R16,R10
    00167 DF8B      RCALL	_I2C_Send_DataAddr
(0087) 	for(AT24C_n=0;AT24C_n<=15;AT24C_n++) //发送16个数据
    00168 24AA      CLR	R10
    00169 C007      RJMP	0x0171
(0088) 		I2C_Send_DataAddr(*(pWrDat+AT24C_n));
    0016A 2DEA      MOV	R30,R10
    0016B 27FF      CLR	R31
    0016C 0DEC      ADD	R30,R12
    0016D 1DFD      ADC	R31,R13
    0016E 8100      LD	R16,Z
    0016F DF83      RCALL	_I2C_Send_DataAddr
    00170 94A3      INC	R10
    00171 E08F      LDI	R24,0xF
    00172 158A      CP	R24,R10
    00173 F7B0      BCC	0x016A
(0089) 	I2C_Stop();
    00174 DF77      RCALL	_I2C_Stop
    00175 940C 027D JMP	pop_xgset303C
_AT24C_rByte:
  wordAdr              --> R10
  AT24C_wrDAdr         --> R20
    00177 92AA      ST	-Y,R10
    00178 934A      ST	-Y,R20
    00179 2EA2      MOV	R10,R18
    0017A 2F40      MOV	R20,R16
(0090) }
(0091) 
(0092) 
(0093) /*--------------------------------------------------------------------
(0094) 函数名称：读一个字节
(0095) 函数功能：
(0096) 注意事项：
(0097) 提示说明：
(0098) 输    入：AT24C_wrDAdr: write device-address 写器件地址
(0099) 		 wordAdr: word address 字地址
(0100) 返    回：
(0101) --------------------------------------------------------------------*/
(0102) 
(0103) uchar AT24C_rByte(uchar AT24C_wrDAdr,uchar wordAdr)
(0104) {
(0105) 	AT24C_wrDAdr=(((AT24C_wrDAdr<<1)&0x0E)|0xA0); //强制将器件地址转换为0b1010xxx0 写使能
    0017B 0F44      LSL	R20
    0017C 704E      ANDI	R20,0xE
    0017D 6A40      ORI	R20,0xA0
(0106) 	I2C_Start();
    0017E DF66      RCALL	_I2C_Start
(0107) 	I2C_Send_DataAddr(AT24C_wrDAdr); //发送器件地址
    0017F 2F04      MOV	R16,R20
    00180 DF72      RCALL	_I2C_Send_DataAddr
(0108) 	I2C_Send_DataAddr(wordAdr); //发送字地址
    00181 2D0A      MOV	R16,R10
    00182 DF70      RCALL	_I2C_Send_DataAddr
(0109) 	AT24C_wrDAdr|=0x01; //强制将地址转换为0b1010xxx1 读使能
    00183 6041      ORI	R20,1
(0110) 	I2C_Start();
    00184 DF60      RCALL	_I2C_Start
(0111) 	I2C_Send_DataAddr(AT24C_wrDAdr); //发送器件地址
    00185 2F04      MOV	R16,R20
    00186 DF6C      RCALL	_I2C_Send_DataAddr
(0112) 	AT24C_wrDAdr=I2C_Read_DataAddr(nACT);	
    00187 2700      CLR	R16
    00188 DF85      RCALL	_I2C_Read_DataAddr
    00189 2F40      MOV	R20,R16
(0113) 	I2C_Stop();
    0018A DF61      RCALL	_I2C_Stop
(0114) 	return(AT24C_wrDAdr); //读取数据
    0018B 2F04      MOV	R16,R20
    0018C 9149      LD	R20,Y+
    0018D 90A9      LD	R10,Y+
    0018E 9508      RET
_AT24C_rPage:
  num                  --> R10
  pRdDat               --> R20
  wordAdr              --> R12
  AT24C_wrDAdr         --> R22
    0018F 940E 0284 CALL	push_xgsetF03C
    00191 2EC2      MOV	R12,R18
    00192 2F60      MOV	R22,R16
    00193 8548      LDD	R20,Y+8
    00194 8559      LDD	R21,Y+9
    00195 84AA      LDD	R10,Y+10
(0115) }
(0116) 
(0117) 
(0118) /*--------------------------------------------------------------------
(0119) 函数名称：读N个字节
(0120) 函数功能：
(0121) 注意事项：
(0122) 提示说明：
(0123) 输    入：AT24C_wrDAdr: write device-address 写器件地址
(0124) 		 wordAdr: word address 字地址
(0125) 		 *pRdDat: p->read data 读取数据起始指针
(0126) 		 num: number 读取数据个数
(0127) 返    回： 
(0128) --------------------------------------------------------------------*/
(0129) 
(0130) void AT24C_rPage(uchar AT24C_wrDAdr,uchar wordAdr,uchar *pRdDat,uchar num)
(0131) {
(0132) 	AT24C_wrDAdr=(((AT24C_wrDAdr<<1)&0x0E)|0xA0); //强制将器件地址转换为0b1010xxx0 写使能
    00196 0F66      LSL	R22
    00197 706E      ANDI	R22,0xE
    00198 6A60      ORI	R22,0xA0
(0133) 	I2C_Start();
    00199 DF4B      RCALL	_I2C_Start
(0134) 	I2C_Send_DataAddr(AT24C_wrDAdr); //发送器件地址
    0019A 2F06      MOV	R16,R22
    0019B DF57      RCALL	_I2C_Send_DataAddr
(0135) 	I2C_Send_DataAddr(wordAdr); //发送字地址
    0019C 2D0C      MOV	R16,R12
    0019D DF55      RCALL	_I2C_Send_DataAddr
(0136) 	AT24C_wrDAdr|=0x01; //强制将器件地址转换为0b1010xxx1 读使能
    0019E 6061      ORI	R22,1
(0137) 	I2C_Start();
    0019F DF45      RCALL	_I2C_Start
(0138) 	I2C_Send_DataAddr(AT24C_wrDAdr); //发送器件地址
    001A0 2F06      MOV	R16,R22
    001A1 DF51      RCALL	_I2C_Send_DataAddr
(0139) 	for(num--;num>0;num--) //有ACT的读取num-1个数据
    001A2 94AA      DEC	R10
    001A3 C007      RJMP	0x01AB
(0140) 	{
(0141) 		*pRdDat=I2C_Read_DataAddr(ACT);
    001A4 E001      LDI	R16,1
    001A5 DF68      RCALL	_I2C_Read_DataAddr
    001A6 01FA      MOVW	R30,R20
    001A7 8300      ST	Z,R16
(0142) 		pRdDat++;
    001A8 5F4F      SUBI	R20,0xFF
    001A9 4F5F      SBCI	R21,0xFF
    001AA 94AA      DEC	R10
    001AB E080      LDI	R24,0
    001AC 158A      CP	R24,R10
    001AD F3B0      BCS	0x01A4
(0143) 	}
(0144) 	*pRdDat=I2C_Read_DataAddr(nACT); //无ACT的读取第num个数据
    001AE 2700      CLR	R16
    001AF DF5E      RCALL	_I2C_Read_DataAddr
    001B0 01FA      MOVW	R30,R20
    001B1 8300      ST	Z,R16
(0145) 	I2C_Stop();
    001B2 DF39      RCALL	_I2C_Stop
    001B3 940C 028D JMP	pop_xgsetF03C
_main:
  AT24                 --> Y,+2
  TEST                 --> R22
  BYTE_ADDR            --> R20
  AT24CXX_DEVICE_ADDR  --> R10
    001B5 9721      SBIW	R28,1
FILE: E:\吴泽备份\DVK501光盘内容\M169_E~1\AT24CX~1\AT24CXX_sim\AT24CXX.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立使用AT24CXX的测试程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR 6.31A
(0009) 		                                                                
(0010) 版    本:   Version 1.0  for(mega169)                                                        
(0011) 		                                                                
(0012) 圆版时间:   2009-03-6
(0013) 	
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 硬件连接：将AT24CXX的硬件地址A0、A1、A2使用短路帽短接至“－”。
(0024)           M169+ EX     			DVK501
(0025) 			   PORTB	---------   LED0~7
(0026) 				
(0027) 		 	  DVK501				 M169+ EX
(0028) 				VCC		---------	  VCC
(0029) 				GND		---------	  GND
(0030) 				SCK	    ---------	  PE4(SCL)
(0031) 				SDA		---------	  PE5(SDA)			
(0032) ----------------------------------------------------------------------
(0033) 实验内容：
(0034) 写入一些测试数据进EEPROM，再读出，使用PB口的LED做指示，观测是否与写入一致。
(0035) ----------------------------------------------------------------------
(0036) ----------------------------------------------------------------------
(0037) 注意事项： 
(0038) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0039) （2）请详细阅读“使用必读”及相关资料。
(0040) ----------------------------------------------------------------------
(0041) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0042) 
(0043) #include <iom169v.h>
(0044) #define NO_INCLUDE_I2C_H 1
(0045) #include "D:\ICC_H\CmmICC.h"
(0046) 
(0047) #define LED_DDR		DDRB
(0048) #define LED_PORT	PORTB
(0049) 
(0050) #define DELAY_NOP  asm("nop")
(0051) 
(0052) //SDA端口定义
(0053) #define SDA_IN		cbi(DDRE,5)
(0054) #define SDA_OUT		sbi(DDRE,5)
(0055) #define SDA_SET		sbi(PORTE,5)
(0056) #define SDA_CLR		cbi(PORTE,5)
(0057) #define SDA_PIN		gbi(PINE,5)
(0058) 
(0059) //SCL端口定义
(0060) #define SCL_IN  	cbi(DDRE,4)
(0061) #define SCL_OUT		sbi(DDRE,4)
(0062) #define SCL_SET		sbi(PORTE,4)
(0063) #define SCL_CLR		cbi(PORTE,4)
(0064) #define SCL_PIN		gbi(PINE,4)
(0065) 
(0066) 
(0067) #include "D:\ICC_H\DVK501_IIC_sim.h"
(0068) #include "D:\ICC_H\AT24CXX_sim.h"
(0069) 
(0070) /*--------------------------------------------------------------------
(0071) 函数名称：
(0072) 函数功能：
(0073) 注意事项：
(0074) 提示说明：
(0075) 输    入：
(0076) 返    回：
(0077) --------------------------------------------------------------------*/
(0078) void main(void)
(0079) {
(0080) 	uchar AT24CXX_DEVICE_ADDR=0x00; //DVK的AT24C器件地址
    001B6 24AA      CLR	R10
(0081) 	uchar BYTE_ADDR=0x21; //AT24C字节地址
    001B7 E241      LDI	R20,0x21
(0082) 	uchar AT24;
(0083) 	uchar TEST=0x5A;	//测试数据
    001B8 E56A      LDI	R22,0x5A
(0084) 	
(0085) 	LED_DDR=0xFF;
    001B9 EF8F      LDI	R24,0xFF
    001BA B984      OUT	0x04,R24
(0086) 	LED_PORT=0xFF;
    001BB B985      OUT	0x05,R24
(0087) 	
(0088) 	AT24C_wByte(AT24CXX_DEVICE_ADDR,BYTE_ADDR,TEST); //写入数据;
    001BC 8368      ST	Y,R22
    001BD 2F24      MOV	R18,R20
    001BE 2D0A      MOV	R16,R10
    001BF DF88      RCALL	_AT24C_wByte
    001C0 C009      RJMP	0x01CA
(0089) 	while(1)
(0090) 	{
(0091) 	 		I2C_Start();
    001C1 DF23      RCALL	_I2C_Start
(0092) 	 		if(!I2C_ReadBusy(((AT24CXX_DEVICE_ADDR<<1)&0x0E)|0xA0)) 
    001C2 2D0A      MOV	R16,R10
    001C3 0F00      LSL	R16
    001C4 700E      ANDI	R16,0xE
    001C5 6A00      ORI	R16,0xA0
    001C6 DF66      RCALL	_I2C_ReadBusy
    001C7 2300      TST	R16
    001C8 F409      BNE	0x01CA
(0093) 			    break; //读忙
    001C9 C001      RJMP	0x01CB
    001CA CFF6      RJMP	0x01C1
(0094) 	}
(0095) 	I2C_Stop();
    001CB DF20      RCALL	_I2C_Stop
(0096) 	LED_PORT=AT24C_rByte(AT24CXX_DEVICE_ADDR,BYTE_ADDR);
    001CC 2F24      MOV	R18,R20
    001CD 2D0A      MOV	R16,R10
    001CE DFA8      RCALL	_AT24C_rByte
    001CF B905      OUT	0x05,R16
(0097) 	while(1);
FILE: <library>
    001D0 CFFF      RJMP	0x01D0
    001D1 9621      ADIW	R28,1
    001D2 9508      RET
push_arg4:
    001D3 933A      ST	-Y,R19
    001D4 932A      ST	-Y,R18
push_arg2:
    001D5 931A      ST	-Y,R17
    001D6 930A      ST	-Y,R16
    001D7 9508      RET
div32u:
    001D8 94E8      BCLR	6
    001D9 C001      RJMP	0x01DB
mod32u:
    001DA 9468      BSET	6
    001DB D030      RCALL	long_div_prolog
    001DC 24CC      CLR	R12
    001DD C009      RJMP	0x01E7
div32s:
    001DE 94E8      BCLR	6
    001DF C001      RJMP	0x01E1
mod32s:
    001E0 9468      BSET	6
    001E1 D02A      RCALL	long_div_prolog
    001E2 FD37      SBRC	R19,7
    001E3 940E 0296 CALL	neg32
    001E5 FDB7      SBRC	R27,7
    001E6 D052      RCALL	neg_R24_R27
    001E7 2477      CLR	R7
    001E8 2488      CLR	R8
    001E9 2499      CLR	R9
    001EA 24AA      CLR	R10
    001EB 24BB      CLR	R11
    001EC D042      RCALL	tst_R16_R19
    001ED F0C1      BEQ	0x0206
    001EE D045      RCALL	tst_R24_R27
    001EF F0B1      BEQ	0x0206
    001F0 E2E8      LDI	R30,0x28
    001F1 0F00      LSL	R16
    001F2 1F11      ROL	R17
    001F3 1F22      ROL	R18
    001F4 1F33      ROL	R19
    001F5 1C77      ROL	R7
    001F6 1C88      ROL	R8
    001F7 1C99      ROL	R9
    001F8 1CAA      ROL	R10
    001F9 1CBB      ROL	R11
    001FA 1688      CP	R8,R24
    001FB 0699      CPC	R9,R25
    001FC 06AA      CPC	R10,R26
    001FD 06BB      CPC	R11,R27
    001FE F028      BCS	0x0204
    001FF 1A88      SUB	R8,R24
    00200 0A99      SBC	R9,R25
    00201 0AAA      SBC	R10,R26
    00202 0ABB      SBC	R11,R27
    00203 9503      INC	R16
    00204 95EA      DEC	R30
    00205 F759      BNE	0x01F1
    00206 F426      BRTC	0x020B
    00207 2D08      MOV	R16,R8
    00208 2D19      MOV	R17,R9
    00209 2D2A      MOV	R18,R10
    0020A 2D3B      MOV	R19,R11
    0020B C013      RJMP	long_div_epilog
long_div_prolog:
    0020C 927A      ST	-Y,R7
    0020D 928A      ST	-Y,R8
    0020E 929A      ST	-Y,R9
    0020F 92AA      ST	-Y,R10
    00210 92BA      ST	-Y,R11
    00211 92CA      ST	-Y,R12
    00212 93EA      ST	-Y,R30
    00213 938A      ST	-Y,R24
    00214 939A      ST	-Y,R25
    00215 93AA      ST	-Y,R26
    00216 93BA      ST	-Y,R27
    00217 858B      LDD	R24,Y+11
    00218 859C      LDD	R25,Y+12
    00219 85AD      LDD	R26,Y+13
    0021A 85BE      LDD	R27,Y+14
    0021B 2EC3      MOV	R12,R19
    0021C F00E      BRTS	0x021E
    0021D 26CB      EOR	R12,R27
    0021E 9508      RET
long_div_epilog:
    0021F FCC7      SBRC	R12,7
    00220 940E 0296 CALL	neg32
    00222 91B9      LD	R27,Y+
    00223 91A9      LD	R26,Y+
    00224 9199      LD	R25,Y+
    00225 9189      LD	R24,Y+
    00226 91E9      LD	R30,Y+
    00227 90C9      LD	R12,Y+
    00228 90B9      LD	R11,Y+
    00229 90A9      LD	R10,Y+
    0022A 9099      LD	R9,Y+
    0022B 9089      LD	R8,Y+
    0022C 9079      LD	R7,Y+
    0022D 9624      ADIW	R28,4
    0022E 9508      RET
tst_R16_R19:
    0022F 2FE0      MOV	R30,R16
    00230 2BE1      OR	R30,R17
    00231 2BE2      OR	R30,R18
    00232 2BE3      OR	R30,R19
    00233 9508      RET
tst_R24_R27:
    00234 2FE8      MOV	R30,R24
    00235 2BE9      OR	R30,R25
    00236 2BEA      OR	R30,R26
    00237 2BEB      OR	R30,R27
    00238 9508      RET
neg_R24_R27:
    00239 9580      COM	R24
    0023A 9590      COM	R25
    0023B 95A0      COM	R26
    0023C 95B0      COM	R27
    0023D 5F8F      SUBI	R24,0xFF
    0023E 4F9F      SBCI	R25,0xFF
    0023F 4FAF      SBCI	R26,0xFF
    00240 4FBF      SBCI	R27,0xFF
    00241 9508      RET
empy32s|empy32u:
    00242 940E 029F CALL	long_prolog
    00244 927A      ST	-Y,R7
    00245 940E 02B8 CALL	tstzero1
    00247 F159      BEQ	0x0273
    00248 2477      CLR	R7
    00249 940E 02BE CALL	tstzero2
    0024B F419      BNE	0x024F
    0024C 018C      MOVW	R16,R24
    0024D 019D      MOVW	R18,R26
    0024E C024      RJMP	0x0273
    0024F 920A      ST	-Y,R0
    00250 921A      ST	-Y,R1
    00251 9F08      MUL	R16,R24
    00252 2CB0      MOV	R11,R0
    00253 2CA1      MOV	R10,R1
    00254 9F28      MUL	R18,R24
    00255 2C90      MOV	R9,R0
    00256 2C81      MOV	R8,R1
    00257 9F18      MUL	R17,R24
    00258 0CA0      ADD	R10,R0
    00259 1C91      ADC	R9,R1
    0025A 1C87      ADC	R8,R7
    0025B 9F09      MUL	R16,R25
    0025C 0CA0      ADD	R10,R0
    0025D 1C91      ADC	R9,R1
    0025E 1C87      ADC	R8,R7
    0025F 9F19      MUL	R17,R25
    00260 0C90      ADD	R9,R0
    00261 1C81      ADC	R8,R1
    00262 9F0A      MUL	R16,R26
    00263 0C90      ADD	R9,R0
    00264 1C81      ADC	R8,R1
    00265 9F38      MUL	R19,R24
    00266 0C80      ADD	R8,R0
    00267 9F29      MUL	R18,R25
    00268 0C80      ADD	R8,R0
    00269 9F1A      MUL	R17,R26
    0026A 0C80      ADD	R8,R0
    0026B 9F0B      MUL	R16,R27
    0026C 0C80      ADD	R8,R0
    0026D 9019      LD	R1,Y+
    0026E 9009      LD	R0,Y+
    0026F 2D0B      MOV	R16,R11
    00270 2D1A      MOV	R17,R10
    00271 2D29      MOV	R18,R9
    00272 2D38      MOV	R19,R8
    00273 9079      LD	R7,Y+
    00274 940C 02AD JMP	long_epilog
push_xgset303C:
    00276 935A      ST	-Y,R21
    00277 934A      ST	-Y,R20
    00278 92DA      ST	-Y,R13
    00279 92CA      ST	-Y,R12
    0027A 92BA      ST	-Y,R11
    0027B 92AA      ST	-Y,R10
    0027C 9508      RET
pop_xgset303C:
    0027D 90A9      LD	R10,Y+
    0027E 90B9      LD	R11,Y+
    0027F 90C9      LD	R12,Y+
    00280 90D9      LD	R13,Y+
    00281 9149      LD	R20,Y+
    00282 9159      LD	R21,Y+
    00283 9508      RET
push_xgsetF03C:
    00284 937A      ST	-Y,R23
    00285 936A      ST	-Y,R22
    00286 935A      ST	-Y,R21
    00287 934A      ST	-Y,R20
    00288 92DA      ST	-Y,R13
    00289 92CA      ST	-Y,R12
    0028A 92BA      ST	-Y,R11
    0028B 92AA      ST	-Y,R10
    0028C 9508      RET
pop_xgsetF03C:
    0028D 90A9      LD	R10,Y+
    0028E 90B9      LD	R11,Y+
    0028F 90C9      LD	R12,Y+
    00290 90D9      LD	R13,Y+
    00291 9149      LD	R20,Y+
    00292 9159      LD	R21,Y+
    00293 9169      LD	R22,Y+
    00294 9179      LD	R23,Y+
    00295 9508      RET
neg32:
    00296 9500      COM	R16
    00297 9510      COM	R17
    00298 9520      COM	R18
    00299 9530      COM	R19
    0029A 5F0F      SUBI	R16,0xFF
    0029B 4F1F      SBCI	R17,0xFF
    0029C 4F2F      SBCI	R18,0xFF
    0029D 4F3F      SBCI	R19,0xFF
    0029E 9508      RET
long_prolog:
    0029F 928A      ST	-Y,R8
    002A0 929A      ST	-Y,R9
    002A1 92AA      ST	-Y,R10
    002A2 92BA      ST	-Y,R11
    002A3 93EA      ST	-Y,R30
    002A4 938A      ST	-Y,R24
    002A5 939A      ST	-Y,R25
    002A6 93AA      ST	-Y,R26
    002A7 93BA      ST	-Y,R27
    002A8 8589      LDD	R24,Y+9
    002A9 859A      LDD	R25,Y+10
    002AA 85AB      LDD	R26,Y+11
    002AB 85BC      LDD	R27,Y+12
    002AC 9508      RET
long_epilog:
    002AD 91B9      LD	R27,Y+
    002AE 91A9      LD	R26,Y+
    002AF 9199      LD	R25,Y+
    002B0 9189      LD	R24,Y+
    002B1 91E9      LD	R30,Y+
    002B2 90B9      LD	R11,Y+
    002B3 90A9      LD	R10,Y+
    002B4 9099      LD	R9,Y+
    002B5 9089      LD	R8,Y+
    002B6 9624      ADIW	R28,4
    002B7 9508      RET
tstzero1:
    002B8 27EE      CLR	R30
    002B9 2BE0      OR	R30,R16
    002BA 2BE1      OR	R30,R17
    002BB 2BE2      OR	R30,R18
    002BC 2BE3      OR	R30,R19
    002BD 9508      RET
tstzero2:
    002BE 27EE      CLR	R30
    002BF 2BE8      OR	R30,R24
    002C0 2BE9      OR	R30,R25
    002C1 2BEA      OR	R30,R26
    002C2 2BEB      OR	R30,R27
    002C3 9508      RET
