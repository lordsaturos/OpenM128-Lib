
Clock_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000520  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000168  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000011f0  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000038b  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000565  00000000  00000000  00001c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000f0  00000000  00000000  000021fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000c0f  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000087  00000000  00000000  00002efb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  10:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  14:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  18:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  1c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  20:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  24:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  28:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  2c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  30:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  34:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  38:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_14>
  3c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  40:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  44:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  48:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  4c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  50:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  54:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  58:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  5c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  60:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  64:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  68:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  6c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  70:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  74:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  78:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  7c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  80:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  84:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  88:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  8c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  90:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  94:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  98:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  9c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  fc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 100:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 104:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 108:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 10c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 110:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 114:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 118:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 11c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 120:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 124:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 128:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 12c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 130:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 134:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 138:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 13c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 140:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 144:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 148:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 14c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 150:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 154:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 158:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 15c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 160:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 164:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 168:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 16c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 170:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 174:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 178:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 17c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 180:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 184:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 188:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 18c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 190:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 194:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 198:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 19c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e0 e2       	ldi	r30, 0x20	; 32
 214:	f5 e0       	ldi	r31, 0x05	; 5
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59
 228:	0e 94 05 02 	call	0x40a	; 0x40a <main>
 22c:	0c 94 8e 02 	jmp	0x51c	; 0x51c <_exit>

00000230 <__bad_interrupt>:
 230:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000234 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
 234:	0f 93       	push	r16
 236:	df 93       	push	r29
 238:	cf 93       	push	r28
 23a:	0f 92       	push	r0
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 240:	2f b7       	in	r18, 0x3f	; 63
 242:	29 83       	std	Y+1, r18	; 0x01
 244:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 246:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 248:	fc 01       	movw	r30, r24
 24a:	08 ed       	ldi	r16, 0xD8	; 216
 24c:	04 bf       	out	0x34, r16	; 52
 24e:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	8f bf       	out	0x3f, r24	; 63
#endif
}
 254:	0f 90       	pop	r0
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
 25e:	66 23       	and	r22, r22
 260:	11 f4       	brne	.+4      	; 0x266 <CLKSYS_XOSC_Config+0x8>
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	01 c0       	rjmp	.+2      	; 0x268 <CLKSYS_XOSC_Config+0xa>
 266:	90 e2       	ldi	r25, 0x20	; 32
 268:	48 2b       	or	r20, r24
 26a:	94 2b       	or	r25, r20
 26c:	e0 e5       	ldi	r30, 0x50	; 80
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	92 83       	std	Z+2, r25	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
 272:	08 95       	ret

00000274 <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
 274:	6f 71       	andi	r22, 0x1F	; 31
 276:	68 2b       	or	r22, r24
 278:	e0 e5       	ldi	r30, 0x50	; 80
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	65 83       	std	Z+5, r22	; 0x05
}
 27e:	08 95       	ret

00000280 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
 280:	e0 e5       	ldi	r30, 0x50	; 80
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	20 81       	ld	r18, Z
 286:	98 2f       	mov	r25, r24
 288:	90 95       	com	r25
 28a:	92 23       	and	r25, r18
 28c:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
 28e:	90 81       	ld	r25, Z
	return clkEnabled;
}
 290:	89 23       	and	r24, r25
 292:	08 95       	ret

00000294 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
 294:	0f 93       	push	r16
 296:	df 93       	push	r29
 298:	cf 93       	push	r28
 29a:	0f 92       	push	r0
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 2a0:	9f b7       	in	r25, 0x3f	; 63
 2a2:	99 83       	std	Y+1, r25	; 0x01
 2a4:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 2a6:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 2a8:	68 2b       	or	r22, r24
 2aa:	81 e4       	ldi	r24, 0x41	; 65
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	fc 01       	movw	r30, r24
 2b0:	08 ed       	ldi	r16, 0xD8	; 216
 2b2:	04 bf       	out	0x34, r16	; 52
 2b4:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	8f bf       	out	0x3f, r24	; 63
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
}
 2ba:	0f 90       	pop	r0
 2bc:	cf 91       	pop	r28
 2be:	df 91       	pop	r29
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
 2c4:	0f 93       	push	r16
 2c6:	df 93       	push	r29
 2c8:	cf 93       	push	r28
 2ca:	0f 92       	push	r0
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
 2d0:	20 91 40 00 	lds	r18, 0x0040

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 2d4:	9f b7       	in	r25, 0x3f	; 63
 2d6:	99 83       	std	Y+1, r25	; 0x01
 2d8:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 2da:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 2dc:	a0 e4       	ldi	r26, 0x40	; 64
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	28 7f       	andi	r18, 0xF8	; 248
 2e2:	28 2b       	or	r18, r24
 2e4:	fd 01       	movw	r30, r26
 2e6:	08 ed       	ldi	r16, 0xD8	; 216
 2e8:	04 bf       	out	0x34, r16	; 52
 2ea:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 2ec:	99 81       	ldd	r25, Y+1	; 0x01
 2ee:	9f bf       	out	0x3f, r25	; 63
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
	CCPWrite( &CLK.CTRL, clkCtrl );
	clkCtrl = ( CLK.CTRL & clockSource );
 2f0:	9c 91       	ld	r25, X
	return clkCtrl;
}
 2f2:	89 23       	and	r24, r25
 2f4:	0f 90       	pop	r0
 2f6:	cf 91       	pop	r28
 2f8:	df 91       	pop	r29
 2fa:	0f 91       	pop	r16
 2fc:	08 95       	ret

000002fe <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
 2fe:	e0 e4       	ldi	r30, 0x40	; 64
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	93 81       	ldd	r25, Z+3	; 0x03
 304:	91 7f       	andi	r25, 0xF1	; 241
 306:	91 60       	ori	r25, 0x01	; 1
 308:	98 2b       	or	r25, r24
 30a:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
 30c:	08 95       	ret

0000030e <CLKSYS_AutoCalibration_Enable>:
 *  \param  clkSource    Clock source to calibrate, either OSC_RC2MCREF_bm or
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
 30e:	28 2f       	mov	r18, r24
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
 310:	30 91 56 00 	lds	r19, 0x0056
 314:	66 23       	and	r22, r22
 316:	11 f0       	breq	.+4      	; 0x31c <CLKSYS_AutoCalibration_Enable+0xe>
 318:	98 2f       	mov	r25, r24
 31a:	01 c0       	rjmp	.+2      	; 0x31e <CLKSYS_AutoCalibration_Enable+0x10>
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	82 2f       	mov	r24, r18
 320:	80 95       	com	r24
 322:	83 23       	and	r24, r19
 324:	98 2b       	or	r25, r24
 326:	e0 e5       	ldi	r30, 0x50	; 80
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
 32c:	21 30       	cpi	r18, 0x01	; 1
 32e:	31 f4       	brne	.+12     	; 0x33c <CLKSYS_AutoCalibration_Enable+0x2e>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
 330:	80 91 68 00 	lds	r24, 0x0068
 334:	81 60       	ori	r24, 0x01	; 1
 336:	80 93 68 00 	sts	0x0068, r24
 33a:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
 33c:	22 30       	cpi	r18, 0x02	; 2
 33e:	29 f4       	brne	.+10     	; 0x34a <CLKSYS_AutoCalibration_Enable+0x3c>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
 340:	80 91 60 00 	lds	r24, 0x0060
 344:	81 60       	ori	r24, 0x01	; 1
 346:	80 93 60 00 	sts	0x0060, r24
 34a:	08 95       	ret

0000034c <CLKSYS_XOSC_FailureDetection_Enable>:
 *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
 34c:	0f 93       	push	r16
 34e:	df 93       	push	r29
 350:	cf 93       	push	r28
 352:	0f 92       	push	r0
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 358:	8f b7       	in	r24, 0x3f	; 63
 35a:	89 83       	std	Y+1, r24	; 0x01
 35c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 35e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 360:	23 e0       	ldi	r18, 0x03	; 3
 362:	83 e5       	ldi	r24, 0x53	; 83
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	fc 01       	movw	r30, r24
 368:	08 ed       	ldi	r16, 0xD8	; 216
 36a:	04 bf       	out	0x34, r16	; 52
 36c:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	8f bf       	out	0x3f, r24	; 63
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
}
 372:	0f 90       	pop	r0
 374:	cf 91       	pop	r28
 376:	df 91       	pop	r29
 378:	0f 91       	pop	r16
 37a:	08 95       	ret

0000037c <CLKSYS_Configuration_Lock>:
 *  This will lock the configuration until the next reset, or until the
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
 37c:	0f 93       	push	r16
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	0f 92       	push	r0
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 388:	8f b7       	in	r24, 0x3f	; 63
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 38e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	82 e4       	ldi	r24, 0x42	; 66
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	fc 01       	movw	r30, r24
 398:	08 ed       	ldi	r16, 0xD8	; 216
 39a:	04 bf       	out	0x34, r16	; 52
 39c:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	8f bf       	out	0x3f, r24	; 63
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
}
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <WaitForSwitches>:

/*! \brief This function waits for a button push and release before proceeding.
 */
void WaitForSwitches( void )
{
	do {} while ( ( SWITCHPORT.IN & SWITCHMASK ) == SWITCHMASK );
 3ac:	80 91 88 06 	lds	r24, 0x0688
 3b0:	8f 3f       	cpi	r24, 0xFF	; 255
 3b2:	e1 f3       	breq	.-8      	; 0x3ac <WaitForSwitches>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3b4:	84 ef       	ldi	r24, 0xF4	; 244
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <WaitForSwitches+0xc>
	delay_us( 1000 );
	do {} while ( ( SWITCHPORT.IN & SWITCHMASK ) != SWITCHMASK );
 3bc:	80 91 88 06 	lds	r24, 0x0688
 3c0:	8f 3f       	cpi	r24, 0xFF	; 255
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <WaitForSwitches+0x10>
 3c4:	84 ef       	ldi	r24, 0xF4	; 244
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <WaitForSwitches+0x1c>
	delay_us( 1000 );
}
 3cc:	08 95       	ret

000003ce <__vector_14>:


/*! Just toggle LED(s) when interrupt occurs. */
ISR(TCC0_OVF_vect)
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	08 b6       	in	r0, 0x38	; 56
 3d8:	0f 92       	push	r0
 3da:	0b b6       	in	r0, 0x3b	; 59
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	18 be       	out	0x38, r1	; 56
 3e2:	1b be       	out	0x3b, r1	; 59
 3e4:	8f 93       	push	r24
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
	LEDPORT.OUTTGL = LEDMASK;
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	e0 e4       	ldi	r30, 0x40	; 64
 3ee:	f6 e0       	ldi	r31, 0x06	; 6
 3f0:	87 83       	std	Z+7, r24	; 0x07
}
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	8f 91       	pop	r24
 3f8:	0f 90       	pop	r0
 3fa:	0b be       	out	0x3b, r0	; 59
 3fc:	0f 90       	pop	r0
 3fe:	08 be       	out	0x38, r0	; 56
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <main>:
 *  clocks are stable before they can be used.
 */
int main( void )
{
	/* Set up user interface. */
	LEDPORT.DIRSET = LEDMASK;
 40a:	e0 e4       	ldi	r30, 0x40	; 64
 40c:	f6 e0       	ldi	r31, 0x06	; 6
 40e:	8f ef       	ldi	r24, 0xFF	; 255
 410:	81 83       	std	Z+1, r24	; 0x01
	LEDPORT.OUTSET = LEDMASK;
 412:	85 83       	std	Z+5, r24	; 0x05
	SWITCHPORT.DIRCLR = SWITCHMASK;
 414:	e0 e8       	ldi	r30, 0x80	; 128
 416:	f6 e0       	ldi	r31, 0x06	; 6
 418:	82 83       	std	Z+2, r24	; 0x02

	/* Set up Timer/Counter 0 to work from CPUCLK/64, with period 10000 and
	 * enable overflow interrupt.
	 */
	TCC0.PER = 10000;
 41a:	e0 e0       	ldi	r30, 0x00	; 0
 41c:	f8 e0       	ldi	r31, 0x08	; 8
 41e:	80 e1       	ldi	r24, 0x10	; 16
 420:	97 e2       	ldi	r25, 0x27	; 39
 422:	86 a3       	std	Z+38, r24	; 0x26
 424:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV64_gc;
 426:	80 91 00 08 	lds	r24, 0x0800
 42a:	80 7f       	andi	r24, 0xF0	; 240
 42c:	85 60       	ori	r24, 0x05	; 5
 42e:	80 93 00 08 	sts	0x0800, r24
	TCC0.INTCTRLA = ( TCC0.INTCTRLA & ~TC0_OVFINTLVL_gm ) |
 432:	80 91 06 08 	lds	r24, 0x0806
 436:	8c 7f       	andi	r24, 0xFC	; 252
 438:	82 60       	ori	r24, 0x02	; 2
 43a:	86 83       	std	Z+6, r24	; 0x06
	                TC_OVFINTLVL_MED_gc;

	/* Enable low interrupt level in PMIC and enable global interrupts. */
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
 43c:	80 91 a2 00 	lds	r24, 0x00A2
 440:	82 60       	ori	r24, 0x02	; 2
 442:	e0 ea       	ldi	r30, 0xA0	; 160
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	82 83       	std	Z+2, r24	; 0x02
	sei();
 448:	78 94       	sei
	 *  system clock sources available.
	 */
	while(1) {

		/* Wait for user input while the LEDs toggle. */
		WaitForSwitches();
 44a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <WaitForSwitches>
		/*  Enable internal 32 MHz ring oscillator and wait until it's
		 *  stable. Divide clock by two with the prescaler C and set the
		 *  32 MHz ring oscillator as the main clock source. Wait for
		 *  user input while the LEDs toggle.
		 */
		CLKSYS_Enable( OSC_RC32MEN_bm );
 44e:	80 91 50 00 	lds	r24, 0x0050
 452:	82 60       	ori	r24, 0x02	; 2
 454:	80 93 50 00 	sts	0x0050, r24
		CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	0e 94 4a 01 	call	0x294	; 0x294 <CLKSYS_Prescalers_Config>
		do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
 460:	80 91 51 00 	lds	r24, 0x0051
 464:	81 ff       	sbrs	r24, 1
 466:	fc cf       	rjmp	.-8      	; 0x460 <main+0x56>
		CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <CLKSYS_Main_ClockSource_Select>
		WaitForSwitches( );
 46e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <WaitForSwitches>
		/* Enable for external 2-9 MHz crystal with quick startup time
		 * (256CLK). Check if it's stable and set the external
		 * oscillator as the main clock source. Wait for user input
		 * while the LEDs toggle.
		 */
		CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,
 472:	80 e4       	ldi	r24, 0x40	; 64
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	47 e0       	ldi	r20, 0x07	; 7
 478:	0e 94 2f 01 	call	0x25e	; 0x25e <CLKSYS_XOSC_Config>
		                    false,
		                    OSC_XOSCSEL_XTAL_1KCLK_gc );
		CLKSYS_Enable( OSC_XOSCEN_bm );
 47c:	80 91 50 00 	lds	r24, 0x0050
 480:	88 60       	ori	r24, 0x08	; 8
 482:	80 93 50 00 	sts	0x0050, r24
		do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
 486:	80 91 51 00 	lds	r24, 0x0051
 48a:	83 ff       	sbrs	r24, 3
 48c:	fc cf       	rjmp	.-8      	; 0x486 <main+0x7c>
		CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_XOSC_gc );
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	0e 94 62 01 	call	0x2c4	; 0x2c4 <CLKSYS_Main_ClockSource_Select>
		CLKSYS_Disable( OSC_RC32MEN_bm );
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	0e 94 40 01 	call	0x280	; 0x280 <CLKSYS_Disable>
		WaitForSwitches();
 49a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <WaitForSwitches>


		/*  Divide Prescaler C by two and Prescaler C by two, and wait
		 *  for user input.
		 */
		CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_2_2_gc );
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	0e 94 4a 01 	call	0x294	; 0x294 <CLKSYS_Prescalers_Config>
		WaitForSwitches();
 4a6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <WaitForSwitches>
		/*  Enable internal 32 kHz calibrated oscillator and check for
		 *  it to be stable and set prescaler A, B and C to none. Set
		 *  the 32 kHz oscillator as the main clock source. Wait for
		 *  user input while the LEDs toggle.
		 */
		CLKSYS_Enable( OSC_RC32KEN_bm );
 4aa:	80 91 50 00 	lds	r24, 0x0050
 4ae:	84 60       	ori	r24, 0x04	; 4
 4b0:	80 93 50 00 	sts	0x0050, r24
		CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	0e 94 4a 01 	call	0x294	; 0x294 <CLKSYS_Prescalers_Config>
		do {} while ( CLKSYS_IsReady( OSC_RC32KRDY_bm ) == 0 );
 4bc:	80 91 51 00 	lds	r24, 0x0051
 4c0:	82 ff       	sbrs	r24, 2
 4c2:	fc cf       	rjmp	.-8      	; 0x4bc <main+0xb2>
		CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32K_gc );
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <CLKSYS_Main_ClockSource_Select>
		CLKSYS_Disable( OSC_XOSCEN_bm );
 4ca:	88 e0       	ldi	r24, 0x08	; 8
 4cc:	0e 94 40 01 	call	0x280	; 0x280 <CLKSYS_Disable>
		WaitForSwitches();
 4d0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <WaitForSwitches>
		 *  multiply by 30 to get 60 MHz PLL clock and enable it. Wait
		 *  for it to be stable and set prescaler C to divide by two
		 *  to set the CPU clock to 30 MHz. Disable unused clock and
		 *  wait for user input.
		 */
		CLKSYS_PLL_Config( OSC_PLLSRC_RC2M_gc, 16 );
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	60 e1       	ldi	r22, 0x10	; 16
 4d8:	0e 94 3a 01 	call	0x274	; 0x274 <CLKSYS_PLL_Config>
		CLKSYS_Enable( OSC_PLLEN_bm );
 4dc:	80 91 50 00 	lds	r24, 0x0050
 4e0:	80 61       	ori	r24, 0x10	; 16
 4e2:	80 93 50 00 	sts	0x0050, r24
		CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	0e 94 4a 01 	call	0x294	; 0x294 <CLKSYS_Prescalers_Config>
		do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
 4ee:	80 91 51 00 	lds	r24, 0x0051
 4f2:	84 ff       	sbrs	r24, 4
 4f4:	fc cf       	rjmp	.-8      	; 0x4ee <main+0xe4>
		CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
 4f6:	84 e0       	ldi	r24, 0x04	; 4
 4f8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <CLKSYS_Main_ClockSource_Select>
		CLKSYS_Disable( OSC_XOSCEN_bm );
 4fc:	88 e0       	ldi	r24, 0x08	; 8
 4fe:	0e 94 40 01 	call	0x280	; 0x280 <CLKSYS_Disable>
		WaitForSwitches( );
 502:	0e 94 d6 01 	call	0x3ac	; 0x3ac <WaitForSwitches>


		/*  Select 2 MHz RC oscillator as main clock source and diable
		 *  unused clock.
		 */
		do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
 506:	80 91 51 00 	lds	r24, 0x0051
 50a:	80 ff       	sbrs	r24, 0
 50c:	fc cf       	rjmp	.-8      	; 0x506 <main+0xfc>
		CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	0e 94 62 01 	call	0x2c4	; 0x2c4 <CLKSYS_Main_ClockSource_Select>
		CLKSYS_Disable( OSC_PLLEN_bm );
 514:	80 e1       	ldi	r24, 0x10	; 16
 516:	0e 94 40 01 	call	0x280	; 0x280 <CLKSYS_Disable>
 51a:	97 cf       	rjmp	.-210    	; 0x44a <main+0x40>

0000051c <_exit>:
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
