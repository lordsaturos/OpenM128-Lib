
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002af  00000000  00000000  00000333  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010d  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c6  00000000  00000000  000006ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000192  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005e  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  10:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  14:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  18:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  1c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  20:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  24:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  28:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  2c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  30:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  34:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  38:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  3c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  40:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  44:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  48:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  4c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  50:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  54:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  58:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  5c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  60:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  64:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  68:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  6c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  70:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  74:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  78:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  7c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  80:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  84:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  88:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  8c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  90:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  94:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  98:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  9c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  fc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 100:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 104:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 108:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 10c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 110:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 114:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 118:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 11c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 120:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 124:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 128:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 12c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 130:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 134:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 138:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 13c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 140:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 144:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 148:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 14c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 150:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 154:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 158:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 15c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 160:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 164:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 168:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 16c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 170:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 174:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 178:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 17c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 180:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 184:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 188:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 18c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 190:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 194:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 198:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 19c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e4 ea       	ldi	r30, 0xA4	; 164
 214:	f2 e0       	ldi	r31, 0x02	; 2
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59
 228:	0e 94 1a 01 	call	0x234	; 0x234 <main>
 22c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

00000230 <__bad_interrupt>:
 230:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000234 <main>:
#include <util/delay.h>

int main(void)
{
	uint8_t n,tmp;
	PORTC.DIR =0xFF;
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	80 93 40 06 	sts	0x0640, r24
	PORTC.OUT =0x55;
 23a:	85 e5       	ldi	r24, 0x55	; 85
 23c:	e0 e4       	ldi	r30, 0x40	; 64
 23e:	f6 e0       	ldi	r31, 0x06	; 6
 240:	84 83       	std	Z+4, r24	; 0x04
	PORTE.DIR =0x00;
 242:	10 92 80 06 	sts	0x0680, r1
 246:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 248:	42 e3       	ldi	r20, 0x32	; 50
 24a:	50 e0       	ldi	r21, 0x00	; 0
	
	for(n=0; n<6; n++){
		_delay_ms(500);
		PORTC.OUT =~PORTC.OUT;
 24c:	a0 e4       	ldi	r26, 0x40	; 64
 24e:	b6 e0       	ldi	r27, 0x06	; 6
 250:	0e c0       	rjmp	.+28     	; 0x26e <main+0x3a>
 252:	fa 01       	movw	r30, r20
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 258:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25a:	d9 f7       	brne	.-10     	; 0x252 <main+0x1e>
 25c:	80 91 44 06 	lds	r24, 0x0644
 260:	80 95       	com	r24
 262:	14 96       	adiw	r26, 0x04	; 4
 264:	8c 93       	st	X, r24
 266:	14 97       	sbiw	r26, 0x04	; 4
	uint8_t n,tmp;
	PORTC.DIR =0xFF;
	PORTC.OUT =0x55;
	PORTE.DIR =0x00;
	
	for(n=0; n<6; n++){
 268:	2f 5f       	subi	r18, 0xFF	; 255
 26a:	26 30       	cpi	r18, 0x06	; 6
 26c:	19 f0       	breq	.+6      	; 0x274 <main+0x40>
 26e:	88 e8       	ldi	r24, 0x88	; 136
 270:	93 e1       	ldi	r25, 0x13	; 19
 272:	ef cf       	rjmp	.-34     	; 0x252 <main+0x1e>

	while(1){
		tmp =~PORTE.IN;
		for(n=0; n<8; n++){
			if(tmp&0x01) PORTC.OUT =~n;
			else if((PORTE.IN) ==0xFF) PORTC.OUT = 0x00;
 274:	e0 e4       	ldi	r30, 0x40	; 64
 276:	f6 e0       	ldi	r31, 0x06	; 6
		_delay_ms(500);
		PORTC.OUT =~PORTC.OUT;
	}

	while(1){
		tmp =~PORTE.IN;
 278:	20 91 88 06 	lds	r18, 0x0688
 27c:	20 95       	com	r18
 27e:	90 e0       	ldi	r25, 0x00	; 0
		for(n=0; n<8; n++){
			if(tmp&0x01) PORTC.OUT =~n;
 280:	20 ff       	sbrs	r18, 0
 282:	04 c0       	rjmp	.+8      	; 0x28c <main+0x58>
 284:	89 2f       	mov	r24, r25
 286:	80 95       	com	r24
 288:	84 83       	std	Z+4, r24	; 0x04
 28a:	05 c0       	rjmp	.+10     	; 0x296 <main+0x62>
			else if((PORTE.IN) ==0xFF) PORTC.OUT = 0x00;
 28c:	80 91 88 06 	lds	r24, 0x0688
 290:	8f 3f       	cpi	r24, 0xFF	; 255
 292:	09 f4       	brne	.+2      	; 0x296 <main+0x62>
 294:	14 82       	std	Z+4, r1	; 0x04
		PORTC.OUT =~PORTC.OUT;
	}

	while(1){
		tmp =~PORTE.IN;
		for(n=0; n<8; n++){
 296:	9f 5f       	subi	r25, 0xFF	; 255
 298:	98 30       	cpi	r25, 0x08	; 8
 29a:	71 f3       	breq	.-36     	; 0x278 <main+0x44>
			if(tmp&0x01) PORTC.OUT =~n;
			else if((PORTE.IN) ==0xFF) PORTC.OUT = 0x00;
			tmp >>=1;
 29c:	26 95       	lsr	r18
 29e:	f0 cf       	rjmp	.-32     	; 0x280 <main+0x4c>

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
