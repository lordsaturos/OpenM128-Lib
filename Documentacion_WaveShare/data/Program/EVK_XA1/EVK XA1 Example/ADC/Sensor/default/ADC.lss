
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00802000  00000e12  00000ea6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00802034  00802034  00000eda  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003d6  00000000  00000000  00000f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022af  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000951  00000000  00000000  000035df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c32  00000000  00000000  00003f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  00004b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000014b3  00000000  00000000  00004db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000614  00000000  00000000  00006267  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000687b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  68:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  8c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  90:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  94:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  98:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  9c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  fc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 100:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 104:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 108:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 10c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 110:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 114:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 118:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 11c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 120:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 124:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 128:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 12c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 130:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 134:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 138:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 13c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 140:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 144:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 148:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 14c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 150:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 154:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 158:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 15c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 160:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 164:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 168:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 16c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 170:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 174:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 178:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 17c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 180:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 184:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 188:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 18c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 190:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 194:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 198:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 19c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e2 e1       	ldi	r30, 0x12	; 18
 214:	fe e0       	ldi	r31, 0x0E	; 14
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a4 33       	cpi	r26, 0x34	; 52
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	10 e2       	ldi	r17, 0x20	; 32
 22a:	a4 e3       	ldi	r26, 0x34	; 52
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a1 34       	cpi	r26, 0x41	; 65
 234:	b1 07       	cpc	r27, r17
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	0e 94 9f 02 	call	0x53e	; 0x53e <main>
 23c:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <_exit>

00000240 <__bad_interrupt>:
 240:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000244 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 244:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 246:	60 83       	st	Z, r22
 248:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 24a:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 24c:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 24e:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 250:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 252:	15 86       	std	Z+13, r1	; 0x0d
}
 254:	08 95       	ret

00000256 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 256:	fc 01       	movw	r30, r24
 258:	62 83       	std	Z+2, r22	; 0x02
}
 25a:	08 95       	ret

0000025c <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 25c:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 25e:	85 85       	ldd	r24, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 260:	96 85       	ldd	r25, Z+14	; 0x0e
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	83 70       	andi	r24, 0x03	; 3
 268:	89 13       	cpse	r24, r25
 26a:	21 e0       	ldi	r18, 0x01	; 1

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
}
 26c:	82 2f       	mov	r24, r18
 26e:	08 95       	ret

00000270 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 270:	dc 01       	movw	r26, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 272:	1d 96       	adiw	r26, 0x0d	; 13
 274:	8c 91       	ld	r24, X
 276:	1d 97       	sbiw	r26, 0x0d	; 13
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 278:	1e 96       	adiw	r26, 0x0e	; 14
 27a:	9c 91       	ld	r25, X
 27c:	1e 97       	sbiw	r26, 0x0e	; 14

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	83 70       	andi	r24, 0x03	; 3
 284:	89 17       	cp	r24, r25
 286:	b1 f0       	breq	.+44     	; 0x2b4 <USART_TXBuffer_PutByte+0x44>
 288:	21 e0       	ldi	r18, 0x01	; 1
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 28a:	1d 96       	adiw	r26, 0x0d	; 13
 28c:	8c 91       	ld	r24, X
 28e:	1d 97       	sbiw	r26, 0x0d	; 13
	  	TXbufPtr->TX[tempTX_Head]= data;
 290:	fd 01       	movw	r30, r26
 292:	e8 0f       	add	r30, r24
 294:	f1 1d       	adc	r31, r1
 296:	67 83       	std	Z+7, r22	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	83 70       	andi	r24, 0x03	; 3
 29c:	1d 96       	adiw	r26, 0x0d	; 13
 29e:	8c 93       	st	X, r24
 2a0:	1d 97       	sbiw	r26, 0x0d	; 13

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 2a2:	ed 91       	ld	r30, X+
 2a4:	fc 91       	ld	r31, X
 2a6:	11 97       	sbiw	r26, 0x01	; 1
 2a8:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 2aa:	8c 7f       	andi	r24, 0xFC	; 252
 2ac:	12 96       	adiw	r26, 0x02	; 2
 2ae:	9c 91       	ld	r25, X
 2b0:	89 2b       	or	r24, r25
		usart_data->usart->CTRLA = tempCTRLA;
 2b2:	83 83       	std	Z+3, r24	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 2b4:	82 2f       	mov	r24, r18
 2b6:	08 95       	ret

000002b8 <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
 2b8:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 2ba:	93 85       	ldd	r25, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 2bc:	84 85       	ldd	r24, Z+12	; 0x0c
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	98 13       	cpse	r25, r24
 2c2:	21 e0       	ldi	r18, 0x01	; 1

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
}
 2c4:	82 2f       	mov	r24, r18
 2c6:	08 95       	ret

000002c8 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 2c8:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 2ca:	1c 96       	adiw	r26, 0x0c	; 12
 2cc:	8c 91       	ld	r24, X
 2ce:	1c 97       	sbiw	r26, 0x0c	; 12
 2d0:	fd 01       	movw	r30, r26
 2d2:	e8 0f       	add	r30, r24
 2d4:	f1 1d       	adc	r31, r1
 2d6:	83 81       	ldd	r24, Z+3	; 0x03

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 2d8:	1c 96       	adiw	r26, 0x0c	; 12
 2da:	9c 91       	ld	r25, X
 2dc:	1c 97       	sbiw	r26, 0x0c	; 12
 2de:	9f 5f       	subi	r25, 0xFF	; 255
 2e0:	93 70       	andi	r25, 0x03	; 3
 2e2:	1c 96       	adiw	r26, 0x0c	; 12
 2e4:	9c 93       	st	X, r25

	return ans;
}
 2e6:	08 95       	ret

000002e8 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 2e8:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 2ea:	1b 96       	adiw	r26, 0x0b	; 11
 2ec:	9c 91       	ld	r25, X
 2ee:	1b 97       	sbiw	r26, 0x0b	; 11
 2f0:	9f 5f       	subi	r25, 0xFF	; 255
 2f2:	93 70       	andi	r25, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 2f4:	1c 96       	adiw	r26, 0x0c	; 12
 2f6:	8c 91       	ld	r24, X
 2f8:	1c 97       	sbiw	r26, 0x0c	; 12
	uint8_t data = usart_data->usart->DATA;
 2fa:	ed 91       	ld	r30, X+
 2fc:	fc 91       	ld	r31, X
 2fe:	11 97       	sbiw	r26, 0x01	; 1
 300:	20 81       	ld	r18, Z

	if (tempRX_Head == tempRX_Tail) {
 302:	98 17       	cp	r25, r24
 304:	11 f4       	brne	.+4      	; 0x30a <USART_RXComplete+0x22>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 95       	ret
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 30a:	1b 96       	adiw	r26, 0x0b	; 11
 30c:	8c 91       	ld	r24, X
 30e:	1b 97       	sbiw	r26, 0x0b	; 11
 310:	fd 01       	movw	r30, r26
 312:	e8 0f       	add	r30, r24
 314:	f1 1d       	adc	r31, r1
 316:	23 83       	std	Z+3, r18	; 0x03
		usart_data->buffer.RX_Head = tempRX_Head;
 318:	1b 96       	adiw	r26, 0x0b	; 11
 31a:	9c 93       	st	X, r25
 31c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ans;
}
 31e:	08 95       	ret

00000320 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 326:	1e 96       	adiw	r26, 0x0e	; 14
 328:	9c 91       	ld	r25, X
 32a:	1e 97       	sbiw	r26, 0x0e	; 14
	if (bufPtr->TX_Head == tempTX_Tail){
 32c:	1d 96       	adiw	r26, 0x0d	; 13
 32e:	8c 91       	ld	r24, X
 330:	1d 97       	sbiw	r26, 0x0d	; 13
 332:	cd 91       	ld	r28, X+
 334:	dc 91       	ld	r29, X
 336:	11 97       	sbiw	r26, 0x01	; 1
 338:	89 17       	cp	r24, r25
 33a:	21 f4       	brne	.+8      	; 0x344 <USART_DataRegEmpty+0x24>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 33c:	8b 81       	ldd	r24, Y+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 33e:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 340:	8b 83       	std	Y+3, r24	; 0x03
 342:	0f c0       	rjmp	.+30     	; 0x362 <USART_DataRegEmpty+0x42>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 344:	1e 96       	adiw	r26, 0x0e	; 14
 346:	8c 91       	ld	r24, X
 348:	1e 97       	sbiw	r26, 0x0e	; 14
 34a:	fd 01       	movw	r30, r26
 34c:	e8 0f       	add	r30, r24
 34e:	f1 1d       	adc	r31, r1
 350:	87 81       	ldd	r24, Z+7	; 0x07
		usart_data->usart->DATA = data;
 352:	88 83       	st	Y, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 354:	1e 96       	adiw	r26, 0x0e	; 14
 356:	8c 91       	ld	r24, X
 358:	1e 97       	sbiw	r26, 0x0e	; 14
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	83 70       	andi	r24, 0x03	; 3
 35e:	1e 96       	adiw	r26, 0x0e	; 14
 360:	8c 93       	st	X, r24
	}
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 368:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
 36a:	70 ff       	sbrs	r23, 0
 36c:	03 c0       	rjmp	.+6      	; 0x374 <USART_NineBits_PutChar+0xc>
		usart->CTRLB |= USART_TXB8_bm;
 36e:	84 81       	ldd	r24, Z+4	; 0x04
 370:	81 60       	ori	r24, 0x01	; 1
 372:	02 c0       	rjmp	.+4      	; 0x378 <USART_NineBits_PutChar+0x10>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 374:	84 81       	ldd	r24, Z+4	; 0x04
 376:	8e 7f       	andi	r24, 0xFE	; 254
 378:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 37a:	60 83       	st	Z, r22
}
 37c:	08 95       	ret

0000037e <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 37e:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 380:	84 81       	ldd	r24, Z+4	; 0x04
 382:	80 ff       	sbrs	r24, 0
 384:	05 c0       	rjmp	.+10     	; 0x390 <USART_NineBits_GetChar+0x12>
		return(0x0100 | usart->DATA);
 386:	80 81       	ld	r24, Z
 388:	28 2f       	mov	r18, r24
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	31 60       	ori	r19, 0x01	; 1
 38e:	03 c0       	rjmp	.+6      	; 0x396 <USART_NineBits_GetChar+0x18>
	}else {
		return(usart->DATA);
 390:	80 81       	ld	r24, Z
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
	}
}
 396:	c9 01       	movw	r24, r18
 398:	08 95       	ret

0000039a <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
 39a:	dc 01       	movw	r26, r24
	if(&ADCA == adc){
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	a0 30       	cpi	r26, 0x00	; 0
 3a0:	b8 07       	cpc	r27, r24
 3a2:	81 f4       	brne	.+32     	; 0x3c4 <ADC_CalibrationValues_Load+0x2a>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
 3aa:	e0 e2       	ldi	r30, 0x20	; 32
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 3b0:	10 92 ca 01 	sts	0x01CA, r1
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
	if(&ADCA == adc){
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
 3b4:	1c 96       	adiw	r26, 0x0c	; 12
 3b6:	ec 93       	st	X, r30
 3b8:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 3ba:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
 3be:	e1 e2       	ldi	r30, 0x21	; 33
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	0f c0       	rjmp	.+30     	; 0x3e2 <ADC_CalibrationValues_Load+0x48>
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
 3ca:	e4 e2       	ldi	r30, 0x24	; 36
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 3d0:	10 92 ca 01 	sts	0x01CA, r1
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
 3d4:	1c 96       	adiw	r26, 0x0c	; 12
 3d6:	ec 93       	st	X, r30
 3d8:	1c 97       	sbiw	r26, 0x0c	; 12
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 3da:	80 93 ca 01 	sts	0x01CA, r24
 	result = pgm_read_byte(index);
 3de:	e5 e2       	ldi	r30, 0x25	; 37
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 3e4:	10 92 ca 01 	sts	0x01CA, r1
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
 3e8:	1d 96       	adiw	r26, 0x0d	; 13
 3ea:	ec 93       	st	X, r30
 3ec:	08 95       	ret

000003ee <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
 3ee:	fc 01       	movw	r30, r24
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
 3f4:	24 81       	ldd	r18, Z+4	; 0x04
 3f6:	35 81       	ldd	r19, Z+5	; 0x05
 3f8:	26 1b       	sub	r18, r22
 3fa:	31 09       	sbc	r19, r1

	return answer;
}
 3fc:	c9 01       	movw	r24, r18
 3fe:	08 95       	ret

00000400 <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
 400:	fc 01       	movw	r30, r24
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
 406:	24 81       	ldd	r18, Z+4	; 0x04
 408:	35 81       	ldd	r19, Z+5	; 0x05
 40a:	77 27       	eor	r23, r23
 40c:	67 fd       	sbrc	r22, 7
 40e:	70 95       	com	r23
 410:	26 1b       	sub	r18, r22
 412:	37 0b       	sbc	r19, r23

	return answer;
}
 414:	c9 01       	movw	r24, r18
 416:	08 95       	ret

00000418 <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
 418:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
 41e:	24 81       	ldd	r18, Z+4	; 0x04
 420:	35 81       	ldd	r19, Z+5	; 0x05
}
 422:	c9 01       	movw	r24, r18
 424:	08 95       	ret

00000426 <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
 426:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
 42c:	84 81       	ldd	r24, Z+4	; 0x04
}
 42e:	08 95       	ret

00000430 <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
 430:	fc 01       	movw	r30, r24
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
 436:	85 81       	ldd	r24, Z+5	; 0x05
}
 438:	08 95       	ret

0000043a <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
 43a:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
 43c:	84 81       	ldd	r24, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
 43e:	14 82       	std	Z+4, r1	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 440:	a0 e0       	ldi	r26, 0x00	; 0
 442:	b2 e0       	ldi	r27, 0x02	; 2
 444:	11 97       	sbiw	r26, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <ADC_Wait_8MHz+0xa>

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
 448:	84 83       	std	Z+4, r24	; 0x04
}
 44a:	08 95       	ret

0000044c <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
 44c:	fc 01       	movw	r30, r24
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
 44e:	94 81       	ldd	r25, Z+4	; 0x04

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	84 83       	std	Z+4, r24	; 0x04
 454:	a0 e0       	ldi	r26, 0x00	; 0
 456:	b4 e0       	ldi	r27, 0x04	; 4
 458:	11 97       	sbiw	r26, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <ADC_Wait_32MHz+0xc>

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
 45c:	94 83       	std	Z+4, r25	; 0x04
}
 45e:	08 95       	ret

00000460 <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
 460:	fb 01       	movw	r30, r22
    if (oversampling)
 462:	44 23       	and	r20, r20
 464:	d9 f0       	breq	.+54     	; 0x49c <ADC_Offset_Get_Unsigned+0x3c>
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	50 e0       	ldi	r21, 0x00	; 0
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 46e:	61 e0       	ldi	r22, 0x01	; 1
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
 470:	80 81       	ld	r24, Z
 472:	80 68       	ori	r24, 0x80	; 128
 474:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
 476:	83 81       	ldd	r24, Z+3	; 0x03
 478:	80 ff       	sbrs	r24, 0
 47a:	fd cf       	rjmp	.-6      	; 0x476 <ADC_Offset_Get_Unsigned+0x16>
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 47c:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
 47e:	84 81       	ldd	r24, Z+4	; 0x04
 480:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
 482:	28 0f       	add	r18, r24
 484:	39 1f       	adc	r19, r25
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      uint16_t offset=0;
      for (int i=0; i<4; i++)
 486:	4f 5f       	subi	r20, 0xFF	; 255
 488:	5f 4f       	sbci	r21, 0xFF	; 255
 48a:	44 30       	cpi	r20, 0x04	; 4
 48c:	51 05       	cpc	r21, r1
 48e:	81 f7       	brne	.-32     	; 0x470 <ADC_Offset_Get_Unsigned+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
 490:	36 95       	lsr	r19
 492:	27 95       	ror	r18
 494:	36 95       	lsr	r19
 496:	27 95       	ror	r18
 498:	82 2f       	mov	r24, r18
 49a:	08 95       	ret
    else
    {        
      uint8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
 49c:	80 81       	ld	r24, Z
 49e:	80 68       	ori	r24, 0x80	; 128
 4a0:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
 4a2:	83 81       	ldd	r24, Z+3	; 0x03
 4a4:	80 ff       	sbrs	r24, 0
 4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <ADC_Offset_Get_Unsigned+0x42>
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
 4ac:	84 81       	ldd	r24, Z+4	; 0x04
 4ae:	95 81       	ldd	r25, Z+5	; 0x05
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
      
      return offset;
    }
}
 4b0:	08 95       	ret

000004b2 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
 4b2:	fb 01       	movw	r30, r22
    if (oversampling)
 4b4:	44 23       	and	r20, r20
 4b6:	d9 f0       	breq	.+54     	; 0x4ee <ADC_Offset_Get_Signed+0x3c>
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	30 e0       	ldi	r19, 0x00	; 0
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 4c0:	61 e0       	ldi	r22, 0x01	; 1
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
 4c2:	80 81       	ld	r24, Z
 4c4:	80 68       	ori	r24, 0x80	; 128
 4c6:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
 4c8:	83 81       	ldd	r24, Z+3	; 0x03
 4ca:	80 ff       	sbrs	r24, 0
 4cc:	fd cf       	rjmp	.-6      	; 0x4c8 <ADC_Offset_Get_Signed+0x16>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 4ce:	63 83       	std	Z+3, r22	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
 4d0:	84 81       	ldd	r24, Z+4	; 0x04
 4d2:	95 81       	ldd	r25, Z+5	; 0x05
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
 4d4:	48 0f       	add	r20, r24
 4d6:	59 1f       	adc	r21, r25
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    if (oversampling)
    {
      int16_t offset=0;
      for (int i=0; i<4; i++)
 4d8:	2f 5f       	subi	r18, 0xFF	; 255
 4da:	3f 4f       	sbci	r19, 0xFF	; 255
 4dc:	24 30       	cpi	r18, 0x04	; 4
 4de:	31 05       	cpc	r19, r1
 4e0:	81 f7       	brne	.-32     	; 0x4c2 <ADC_Offset_Get_Signed+0x10>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
 4e2:	ca 01       	movw	r24, r20
 4e4:	64 e0       	ldi	r22, 0x04	; 4
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	0e 94 2e 04 	call	0x85c	; 0x85c <__divmodhi4>
 4ec:	0b c0       	rjmp	.+22     	; 0x504 <ADC_Offset_Get_Signed+0x52>
    else
    {        
      int8_t offset=0;
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
 4ee:	80 81       	ld	r24, Z
 4f0:	80 68       	ori	r24, 0x80	; 128
 4f2:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
 4f4:	83 81       	ldd	r24, Z+3	; 0x03
 4f6:	80 ff       	sbrs	r24, 0
 4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <ADC_Offset_Get_Signed+0x42>
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
 4fe:	84 81       	ldd	r24, Z+4	; 0x04
 500:	95 81       	ldd	r25, Z+5	; 0x05
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
 502:	68 2f       	mov	r22, r24
      
      return offset;
    }
}
 504:	86 2f       	mov	r24, r22
 506:	08 95       	ret

00000508 <SP_ReadCalibrationByte>:
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 508:	aa ec       	ldi	r26, 0xCA	; 202
 50a:	b1 e0       	ldi	r27, 0x01	; 1
 50c:	92 e0       	ldi	r25, 0x02	; 2
 50e:	9c 93       	st	X, r25
 	result = pgm_read_byte(index);
 510:	e8 2f       	mov	r30, r24
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	e4 91       	lpm	r30, Z+

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 516:	1c 92       	st	X, r1

	return result;
}
 518:	8e 2f       	mov	r24, r30
 51a:	08 95       	ret

0000051c <uart_putchar>:
		_delay_ms(500);
	}
}

static int uart_putchar (char c, FILE *stream)
{
 51c:	1f 93       	push	r17
 51e:	18 2f       	mov	r17, r24
    if (c == '\n')
 520:	8a 30       	cpi	r24, 0x0A	; 10
 522:	19 f4       	brne	.+6      	; 0x52a <uart_putchar+0xe>
        uart_putchar('\r', stream);
 524:	8d e0       	ldi	r24, 0x0D	; 13
 526:	0e 94 8e 02 	call	0x51c	; 0x51c <uart_putchar>
 
    // Wait for the transmit buffer to be empty
    while ( !( USARTF0.STATUS & USART_DREIF_bm) );
 52a:	80 91 a1 0b 	lds	r24, 0x0BA1
 52e:	85 ff       	sbrs	r24, 5
 530:	fc cf       	rjmp	.-8      	; 0x52a <uart_putchar+0xe>
 
    // Put our character into the transmit buffer
    USART_PutChar(&USART, c);
 532:	10 93 a0 0b 	sts	0x0BA0, r17
 
    return 0;
}
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	1f 91       	pop	r17
 53c:	08 95       	ret

0000053e <main>:
int16_t adcSamples[3];

volatile int8_t offset;

int main(void)
{
 53e:	ff 92       	push	r15
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
	stdout = &mystdout;
 548:	86 e2       	ldi	r24, 0x26	; 38
 54a:	90 e2       	ldi	r25, 0x20	; 32
 54c:	80 93 3d 20 	sts	0x203D, r24
 550:	90 93 3e 20 	sts	0x203E, r25

	CLKSYS_Enable( OSC_RC32MEN_bm );
 554:	80 91 50 00 	lds	r24, 0x0050
 558:	82 60       	ori	r24, 0x02	; 2
 55a:	80 93 50 00 	sts	0x0050, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
 55e:	80 91 51 00 	lds	r24, 0x0051
 562:	81 ff       	sbrs	r24, 1
 564:	fc cf       	rjmp	.-8      	; 0x55e <main+0x20>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 ba 03 	call	0x774	; 0x774 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	0e 94 98 03 	call	0x730	; 0x730 <CLKSYS_Disable>
static void uart_init (void)
{
	/* This PORT setting is only valid to USARTF0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTF.DIRSET = PIN3_bm;
 572:	e0 ea       	ldi	r30, 0xA0	; 160
 574:	f6 e0       	ldi	r31, 0x06	; 6
 576:	88 e0       	ldi	r24, 0x08	; 8
 578:	f8 2e       	mov	r15, r24
 57a:	f1 82       	std	Z+1, r15	; 0x01
	PORTF.OUTSET = PIN3_bm;
 57c:	f5 82       	std	Z+5, r15	; 0x05
	/* PC2 (RXD0) as input. */
	PORTF.DIRCLR = PIN2_bm;
 57e:	84 e0       	ldi	r24, 0x04	; 4
 580:	82 83       	std	Z+2, r24	; 0x02
	PORTF.OUTSET = PIN2_bm;
 582:	85 83       	std	Z+5, r24	; 0x05

	/* USARTF0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 584:	e0 ea       	ldi	r30, 0xA0	; 160
 586:	fb e0       	ldi	r31, 0x0B	; 11
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	85 83       	std	Z+5, r24	; 0x05
// Init USART.
// We use USARTF0.
// Want 57600 baud. Have a 32 MHz clock. BSCALE = 0
// BSEL = ( 32000000 / (2^0 * 16*57600)) -1 = 34
// Fbaud = 32000000 / (2^0 * 16 * (34+1))  = 57143 bits/sec (57600 -0.8%)
	USART_Baudrate_Set(&USART, 34 , 0);
 58c:	82 e2       	ldi	r24, 0x22	; 34
 58e:	86 83       	std	Z+6, r24	; 0x06
 590:	17 82       	std	Z+7, r1	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 592:	80 91 a4 0b 	lds	r24, 0x0BA4
 596:	80 61       	ori	r24, 0x10	; 16
 598:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 59a:	80 91 a4 0b 	lds	r24, 0x0BA4
 59e:	88 60       	ori	r24, 0x08	; 8
 5a0:	84 83       	std	Z+4, r24	; 0x04
	CLKSYS_Disable( OSC_RC2MEN_bm );

	uart_init();
	
	/* Move stored calibration values to ADC A. */
	ADC_CalibrationValues_Load(&ADCA);
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	0e 94 cd 01 	call	0x39a	; 0x39a <ADC_CalibrationValues_Load>

	/* Set up ADC A to have signed conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Signed, ADC_RESOLUTION_12BIT_gc);
 5aa:	00 e0       	ldi	r16, 0x00	; 0
 5ac:	12 e0       	ldi	r17, 0x02	; 2
 5ae:	80 91 01 02 	lds	r24, 0x0201
 5b2:	89 7e       	andi	r24, 0xE9	; 233
 5b4:	80 61       	ori	r24, 0x10	; 16
 5b6:	d8 01       	movw	r26, r16
 5b8:	11 96       	adiw	r26, 0x01	; 1
 5ba:	8c 93       	st	X, r24
 5bc:	11 97       	sbiw	r26, 0x01	; 1

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV512_gc);
 5be:	80 91 04 02 	lds	r24, 0x0204
 5c2:	87 60       	ori	r24, 0x07	; 7
 5c4:	14 96       	adiw	r26, 0x04	; 4
 5c6:	8c 93       	st	X, r24
 5c8:	14 97       	sbiw	r26, 0x04	; 4

	/* Set reference voltage on ADC A to be VCC/1.6 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_VCC_gc); 
 5ca:	80 91 02 02 	lds	r24, 0x0202
 5ce:	8f 7c       	andi	r24, 0xCF	; 207
 5d0:	80 61       	ori	r24, 0x10	; 16
 5d2:	12 96       	adiw	r26, 0x02	; 2
 5d4:	8c 93       	st	X, r24
 5d6:	12 97       	sbiw	r26, 0x02	; 2


	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
 5d8:	80 91 20 02 	lds	r24, 0x0220
 5dc:	80 7e       	andi	r24, 0xE0	; 224
 5de:	81 60       	ori	r24, 0x01	; 1
 5e0:	80 93 20 02 	sts	0x0220, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_CH_GAIN_1X_gc);

	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH1,
 5e4:	80 91 28 02 	lds	r24, 0x0228
 5e8:	80 7e       	andi	r24, 0xE0	; 224
 5ea:	81 60       	ori	r24, 0x01	; 1
 5ec:	80 93 28 02 	sts	0x0228, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_CH_GAIN_1X_gc);

	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH2,
 5f0:	80 91 30 02 	lds	r24, 0x0230
 5f4:	80 7e       	andi	r24, 0xE0	; 224
 5f6:	81 60       	ori	r24, 0x01	; 1
 5f8:	80 93 30 02 	sts	0x0230, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
                                     ADC_CH_GAIN_1X_gc);

    
	/* Set input to the channels in ADC A */
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
 5fc:	e0 e2       	ldi	r30, 0x20	; 32
 5fe:	f2 e0       	ldi	r31, 0x02	; 2
 600:	11 82       	std	Z+1, r1	; 0x01
	ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXPOS_PIN1_gc, 0);
 602:	e8 e2       	ldi	r30, 0x28	; 40
 604:	f2 e0       	ldi	r31, 0x02	; 2
 606:	f1 82       	std	Z+1, r15	; 0x01
	ADC_Ch_InputMux_Config(&ADCA.CH2, ADC_CH_MUXPOS_PIN2_gc, 0);
 608:	80 e1       	ldi	r24, 0x10	; 16
 60a:	e0 e3       	ldi	r30, 0x30	; 48
 60c:	f2 e0       	ldi	r31, 0x02	; 2
 60e:	81 83       	std	Z+1, r24	; 0x01


	/* Setup sweep of all four virtual channels. */
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0123_gc);
 610:	80 91 03 02 	lds	r24, 0x0203
 614:	80 6c       	ori	r24, 0xC0	; 192
 616:	13 96       	adiw	r26, 0x03	; 3
 618:	8c 93       	st	X, r24

	/* Enable ADC A .*/
	ADC_Enable(&ADCA);
 61a:	80 91 00 02 	lds	r24, 0x0200
 61e:	81 60       	ori	r24, 0x01	; 1
 620:	80 93 00 02 	sts	0x0200, r24


	ADC_Wait_32MHz(&ADCA);
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	92 e0       	ldi	r25, 0x02	; 2
 628:	0e 94 26 02 	call	0x44c	; 0x44c <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
 62c:	80 91 01 02 	lds	r24, 0x0201
 630:	88 60       	ori	r24, 0x08	; 8
 632:	f8 01       	movw	r30, r16
 634:	81 83       	std	Z+1, r24	; 0x01
			/* If the conversion on the ADCA channel 2 never is
			 * complete this will be a deadlock.*/
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH2));
		adcSamples[2] = ADC_ResultCh_GetWord_Signed(&ADCA.CH2, 0);

		printf("temperature:%X;\tvoltage:%X;\tlight:%X\n",adcSamples[0],adcSamples[1],adcSamples[2]);
 636:	00 e0       	ldi	r16, 0x00	; 0
 638:	10 e2       	ldi	r17, 0x20	; 32
 63a:	c0 e2       	ldi	r28, 0x20	; 32
 63c:	d3 e0       	ldi	r29, 0x03	; 3
	{
		//ADC_Ch_Conversion_Start(&ADCA.CH0);
	  	do{
			/* If the conversion on the ADCA channel 0 never is
			 * complete this will be a deadlock. */
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH0));
 63e:	80 91 23 02 	lds	r24, 0x0223
 642:	80 ff       	sbrs	r24, 0
 644:	fc cf       	rjmp	.-8      	; 0x63e <main+0x100>
		adcSamples[0] = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, 0);
 646:	80 e2       	ldi	r24, 0x20	; 32
 648:	92 e0       	ldi	r25, 0x02	; 2
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	0e 94 00 02 	call	0x400	; 0x400 <ADC_ResultCh_GetWord_Signed>
 650:	80 93 34 20 	sts	0x2034, r24
 654:	90 93 35 20 	sts	0x2035, r25

		//ADC_Ch_Conversion_Start(&ADCA.CH1);
		do{
			/* If the conversion on the ADCA channel 1 never is
			 * complete this will be a deadlock.*/
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH1));
 658:	80 91 2b 02 	lds	r24, 0x022B
 65c:	80 ff       	sbrs	r24, 0
 65e:	fc cf       	rjmp	.-8      	; 0x658 <main+0x11a>
		adcSamples[1] = ADC_ResultCh_GetWord_Signed(&ADCA.CH1, 0);
 660:	88 e2       	ldi	r24, 0x28	; 40
 662:	92 e0       	ldi	r25, 0x02	; 2
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	0e 94 00 02 	call	0x400	; 0x400 <ADC_ResultCh_GetWord_Signed>
 66a:	80 93 36 20 	sts	0x2036, r24
 66e:	90 93 37 20 	sts	0x2037, r25

		//ADC_Ch_Conversion_Start(&ADCA.CH2);
		do{
			/* If the conversion on the ADCA channel 2 never is
			 * complete this will be a deadlock.*/
		}while(!ADC_Ch_Conversion_Complete(&ADCA.CH2));
 672:	80 91 33 02 	lds	r24, 0x0233
 676:	80 ff       	sbrs	r24, 0
 678:	fc cf       	rjmp	.-8      	; 0x672 <main+0x134>
		adcSamples[2] = ADC_ResultCh_GetWord_Signed(&ADCA.CH2, 0);
 67a:	80 e3       	ldi	r24, 0x30	; 48
 67c:	92 e0       	ldi	r25, 0x02	; 2
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	0e 94 00 02 	call	0x400	; 0x400 <ADC_ResultCh_GetWord_Signed>
 684:	80 93 38 20 	sts	0x2038, r24
 688:	90 93 39 20 	sts	0x2039, r25

		printf("temperature:%X;\tvoltage:%X;\tlight:%X\n",adcSamples[0],adcSamples[1],adcSamples[2]);
 68c:	2d b7       	in	r18, 0x3d	; 61
 68e:	3e b7       	in	r19, 0x3e	; 62
 690:	28 50       	subi	r18, 0x08	; 8
 692:	30 40       	sbci	r19, 0x00	; 0
 694:	2d bf       	out	0x3d, r18	; 61
 696:	3e bf       	out	0x3e, r19	; 62
 698:	ed b7       	in	r30, 0x3d	; 61
 69a:	fe b7       	in	r31, 0x3e	; 62
 69c:	31 96       	adiw	r30, 0x01	; 1
 69e:	ad b7       	in	r26, 0x3d	; 61
 6a0:	be b7       	in	r27, 0x3e	; 62
 6a2:	11 96       	adiw	r26, 0x01	; 1
 6a4:	0d 93       	st	X+, r16
 6a6:	1c 93       	st	X, r17
 6a8:	12 97       	sbiw	r26, 0x02	; 2
 6aa:	20 91 34 20 	lds	r18, 0x2034
 6ae:	30 91 35 20 	lds	r19, 0x2035
 6b2:	22 83       	std	Z+2, r18	; 0x02
 6b4:	33 83       	std	Z+3, r19	; 0x03
 6b6:	20 91 36 20 	lds	r18, 0x2036
 6ba:	30 91 37 20 	lds	r19, 0x2037
 6be:	24 83       	std	Z+4, r18	; 0x04
 6c0:	35 83       	std	Z+5, r19	; 0x05
 6c2:	86 83       	std	Z+6, r24	; 0x06
 6c4:	97 83       	std	Z+7, r25	; 0x07
 6c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <printf>
 6ca:	88 e8       	ldi	r24, 0x88	; 136
 6cc:	93 e1       	ldi	r25, 0x13	; 19
 6ce:	ed b7       	in	r30, 0x3d	; 61
 6d0:	fe b7       	in	r31, 0x3e	; 62
 6d2:	38 96       	adiw	r30, 0x08	; 8
 6d4:	ed bf       	out	0x3d, r30	; 61
 6d6:	fe bf       	out	0x3e, r31	; 62
 6d8:	fe 01       	movw	r30, r28
 6da:	31 97       	sbiw	r30, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <main+0x19c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6e0:	d9 f7       	brne	.-10     	; 0x6d8 <main+0x19a>
 6e2:	ad cf       	rjmp	.-166    	; 0x63e <main+0x100>

000006e4 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
 6e4:	0f 93       	push	r16
 6e6:	df 93       	push	r29
 6e8:	cf 93       	push	r28
 6ea:	0f 92       	push	r0
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 6f0:	2f b7       	in	r18, 0x3f	; 63
 6f2:	29 83       	std	Y+1, r18	; 0x01
 6f4:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 6f6:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 6f8:	fc 01       	movw	r30, r24
 6fa:	08 ed       	ldi	r16, 0xD8	; 216
 6fc:	04 bf       	out	0x34, r16	; 52
 6fe:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	8f bf       	out	0x3f, r24	; 63
#endif
}
 704:	0f 90       	pop	r0
 706:	cf 91       	pop	r28
 708:	df 91       	pop	r29
 70a:	0f 91       	pop	r16
 70c:	08 95       	ret

0000070e <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
 70e:	66 23       	and	r22, r22
 710:	11 f4       	brne	.+4      	; 0x716 <CLKSYS_XOSC_Config+0x8>
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	01 c0       	rjmp	.+2      	; 0x718 <CLKSYS_XOSC_Config+0xa>
 716:	90 e2       	ldi	r25, 0x20	; 32
 718:	48 2b       	or	r20, r24
 71a:	94 2b       	or	r25, r20
 71c:	e0 e5       	ldi	r30, 0x50	; 80
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	92 83       	std	Z+2, r25	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
 722:	08 95       	ret

00000724 <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
 724:	6f 71       	andi	r22, 0x1F	; 31
 726:	68 2b       	or	r22, r24
 728:	e0 e5       	ldi	r30, 0x50	; 80
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	65 83       	std	Z+5, r22	; 0x05
}
 72e:	08 95       	ret

00000730 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
 730:	e0 e5       	ldi	r30, 0x50	; 80
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	20 81       	ld	r18, Z
 736:	98 2f       	mov	r25, r24
 738:	90 95       	com	r25
 73a:	92 23       	and	r25, r18
 73c:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
 73e:	90 81       	ld	r25, Z
	return clkEnabled;
}
 740:	89 23       	and	r24, r25
 742:	08 95       	ret

00000744 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
 744:	0f 93       	push	r16
 746:	df 93       	push	r29
 748:	cf 93       	push	r28
 74a:	0f 92       	push	r0
 74c:	cd b7       	in	r28, 0x3d	; 61
 74e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 750:	9f b7       	in	r25, 0x3f	; 63
 752:	99 83       	std	Y+1, r25	; 0x01
 754:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 756:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 758:	68 2b       	or	r22, r24
 75a:	81 e4       	ldi	r24, 0x41	; 65
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	fc 01       	movw	r30, r24
 760:	08 ed       	ldi	r16, 0xD8	; 216
 762:	04 bf       	out	0x34, r16	; 52
 764:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 766:	89 81       	ldd	r24, Y+1	; 0x01
 768:	8f bf       	out	0x3f, r24	; 63
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
}
 76a:	0f 90       	pop	r0
 76c:	cf 91       	pop	r28
 76e:	df 91       	pop	r29
 770:	0f 91       	pop	r16
 772:	08 95       	ret

00000774 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
 774:	0f 93       	push	r16
 776:	df 93       	push	r29
 778:	cf 93       	push	r28
 77a:	0f 92       	push	r0
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
 780:	20 91 40 00 	lds	r18, 0x0040

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 784:	9f b7       	in	r25, 0x3f	; 63
 786:	99 83       	std	Y+1, r25	; 0x01
 788:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 78a:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 78c:	a0 e4       	ldi	r26, 0x40	; 64
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	28 7f       	andi	r18, 0xF8	; 248
 792:	28 2b       	or	r18, r24
 794:	fd 01       	movw	r30, r26
 796:	08 ed       	ldi	r16, 0xD8	; 216
 798:	04 bf       	out	0x34, r16	; 52
 79a:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 79c:	99 81       	ldd	r25, Y+1	; 0x01
 79e:	9f bf       	out	0x3f, r25	; 63
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
	CCPWrite( &CLK.CTRL, clkCtrl );
	clkCtrl = ( CLK.CTRL & clockSource );
 7a0:	9c 91       	ld	r25, X
	return clkCtrl;
}
 7a2:	89 23       	and	r24, r25
 7a4:	0f 90       	pop	r0
 7a6:	cf 91       	pop	r28
 7a8:	df 91       	pop	r29
 7aa:	0f 91       	pop	r16
 7ac:	08 95       	ret

000007ae <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
 7ae:	e0 e4       	ldi	r30, 0x40	; 64
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	93 81       	ldd	r25, Z+3	; 0x03
 7b4:	91 7f       	andi	r25, 0xF1	; 241
 7b6:	91 60       	ori	r25, 0x01	; 1
 7b8:	98 2b       	or	r25, r24
 7ba:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
 7bc:	08 95       	ret

000007be <CLKSYS_AutoCalibration_Enable>:
 *  \param  clkSource    Clock source to calibrate, either OSC_RC2MCREF_bm or
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
 7be:	28 2f       	mov	r18, r24
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
 7c0:	30 91 56 00 	lds	r19, 0x0056
 7c4:	66 23       	and	r22, r22
 7c6:	11 f0       	breq	.+4      	; 0x7cc <CLKSYS_AutoCalibration_Enable+0xe>
 7c8:	98 2f       	mov	r25, r24
 7ca:	01 c0       	rjmp	.+2      	; 0x7ce <CLKSYS_AutoCalibration_Enable+0x10>
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	82 2f       	mov	r24, r18
 7d0:	80 95       	com	r24
 7d2:	83 23       	and	r24, r19
 7d4:	98 2b       	or	r25, r24
 7d6:	e0 e5       	ldi	r30, 0x50	; 80
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
 7dc:	21 30       	cpi	r18, 0x01	; 1
 7de:	31 f4       	brne	.+12     	; 0x7ec <CLKSYS_AutoCalibration_Enable+0x2e>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
 7e0:	80 91 68 00 	lds	r24, 0x0068
 7e4:	81 60       	ori	r24, 0x01	; 1
 7e6:	80 93 68 00 	sts	0x0068, r24
 7ea:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
 7ec:	22 30       	cpi	r18, 0x02	; 2
 7ee:	29 f4       	brne	.+10     	; 0x7fa <CLKSYS_AutoCalibration_Enable+0x3c>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
 7f0:	80 91 60 00 	lds	r24, 0x0060
 7f4:	81 60       	ori	r24, 0x01	; 1
 7f6:	80 93 60 00 	sts	0x0060, r24
 7fa:	08 95       	ret

000007fc <CLKSYS_XOSC_FailureDetection_Enable>:
 *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
 7fc:	0f 93       	push	r16
 7fe:	df 93       	push	r29
 800:	cf 93       	push	r28
 802:	0f 92       	push	r0
 804:	cd b7       	in	r28, 0x3d	; 61
 806:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 808:	8f b7       	in	r24, 0x3f	; 63
 80a:	89 83       	std	Y+1, r24	; 0x01
 80c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 80e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 810:	23 e0       	ldi	r18, 0x03	; 3
 812:	83 e5       	ldi	r24, 0x53	; 83
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	fc 01       	movw	r30, r24
 818:	08 ed       	ldi	r16, 0xD8	; 216
 81a:	04 bf       	out	0x34, r16	; 52
 81c:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 81e:	89 81       	ldd	r24, Y+1	; 0x01
 820:	8f bf       	out	0x3f, r24	; 63
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
}
 822:	0f 90       	pop	r0
 824:	cf 91       	pop	r28
 826:	df 91       	pop	r29
 828:	0f 91       	pop	r16
 82a:	08 95       	ret

0000082c <CLKSYS_Configuration_Lock>:
 *  This will lock the configuration until the next reset, or until the
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
 82c:	0f 93       	push	r16
 82e:	df 93       	push	r29
 830:	cf 93       	push	r28
 832:	0f 92       	push	r0
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 838:	8f b7       	in	r24, 0x3f	; 63
 83a:	89 83       	std	Y+1, r24	; 0x01
 83c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 83e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 840:	21 e0       	ldi	r18, 0x01	; 1
 842:	82 e4       	ldi	r24, 0x42	; 66
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	fc 01       	movw	r30, r24
 848:	08 ed       	ldi	r16, 0xD8	; 216
 84a:	04 bf       	out	0x34, r16	; 52
 84c:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 84e:	89 81       	ldd	r24, Y+1	; 0x01
 850:	8f bf       	out	0x3f, r24	; 63
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
}
 852:	0f 90       	pop	r0
 854:	cf 91       	pop	r28
 856:	df 91       	pop	r29
 858:	0f 91       	pop	r16
 85a:	08 95       	ret

0000085c <__divmodhi4>:
 85c:	97 fb       	bst	r25, 7
 85e:	09 2e       	mov	r0, r25
 860:	07 26       	eor	r0, r23
 862:	0a d0       	rcall	.+20     	; 0x878 <__divmodhi4_neg1>
 864:	77 fd       	sbrc	r23, 7
 866:	04 d0       	rcall	.+8      	; 0x870 <__divmodhi4_neg2>
 868:	0c d0       	rcall	.+24     	; 0x882 <__udivmodhi4>
 86a:	06 d0       	rcall	.+12     	; 0x878 <__divmodhi4_neg1>
 86c:	00 20       	and	r0, r0
 86e:	1a f4       	brpl	.+6      	; 0x876 <__divmodhi4_exit>

00000870 <__divmodhi4_neg2>:
 870:	70 95       	com	r23
 872:	61 95       	neg	r22
 874:	7f 4f       	sbci	r23, 0xFF	; 255

00000876 <__divmodhi4_exit>:
 876:	08 95       	ret

00000878 <__divmodhi4_neg1>:
 878:	f6 f7       	brtc	.-4      	; 0x876 <__divmodhi4_exit>
 87a:	90 95       	com	r25
 87c:	81 95       	neg	r24
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	08 95       	ret

00000882 <__udivmodhi4>:
 882:	aa 1b       	sub	r26, r26
 884:	bb 1b       	sub	r27, r27
 886:	51 e1       	ldi	r21, 0x11	; 17
 888:	07 c0       	rjmp	.+14     	; 0x898 <__udivmodhi4_ep>

0000088a <__udivmodhi4_loop>:
 88a:	aa 1f       	adc	r26, r26
 88c:	bb 1f       	adc	r27, r27
 88e:	a6 17       	cp	r26, r22
 890:	b7 07       	cpc	r27, r23
 892:	10 f0       	brcs	.+4      	; 0x898 <__udivmodhi4_ep>
 894:	a6 1b       	sub	r26, r22
 896:	b7 0b       	sbc	r27, r23

00000898 <__udivmodhi4_ep>:
 898:	88 1f       	adc	r24, r24
 89a:	99 1f       	adc	r25, r25
 89c:	5a 95       	dec	r21
 89e:	a9 f7       	brne	.-22     	; 0x88a <__udivmodhi4_loop>
 8a0:	80 95       	com	r24
 8a2:	90 95       	com	r25
 8a4:	bc 01       	movw	r22, r24
 8a6:	cd 01       	movw	r24, r26
 8a8:	08 95       	ret

000008aa <printf>:
 8aa:	df 93       	push	r29
 8ac:	cf 93       	push	r28
 8ae:	cd b7       	in	r28, 0x3d	; 61
 8b0:	de b7       	in	r29, 0x3e	; 62
 8b2:	fe 01       	movw	r30, r28
 8b4:	36 96       	adiw	r30, 0x06	; 6
 8b6:	61 91       	ld	r22, Z+
 8b8:	71 91       	ld	r23, Z+
 8ba:	80 91 3d 20 	lds	r24, 0x203D
 8be:	90 91 3e 20 	lds	r25, 0x203E
 8c2:	af 01       	movw	r20, r30
 8c4:	0e 94 67 04 	call	0x8ce	; 0x8ce <vfprintf>
 8c8:	cf 91       	pop	r28
 8ca:	df 91       	pop	r29
 8cc:	08 95       	ret

000008ce <vfprintf>:
 8ce:	2f 92       	push	r2
 8d0:	3f 92       	push	r3
 8d2:	4f 92       	push	r4
 8d4:	5f 92       	push	r5
 8d6:	6f 92       	push	r6
 8d8:	7f 92       	push	r7
 8da:	8f 92       	push	r8
 8dc:	9f 92       	push	r9
 8de:	af 92       	push	r10
 8e0:	bf 92       	push	r11
 8e2:	cf 92       	push	r12
 8e4:	df 92       	push	r13
 8e6:	ef 92       	push	r14
 8e8:	ff 92       	push	r15
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	df 93       	push	r29
 8f0:	cf 93       	push	r28
 8f2:	cd b7       	in	r28, 0x3d	; 61
 8f4:	de b7       	in	r29, 0x3e	; 62
 8f6:	2b 97       	sbiw	r28, 0x0b	; 11
 8f8:	cd bf       	out	0x3d, r28	; 61
 8fa:	de bf       	out	0x3e, r29	; 62
 8fc:	3c 01       	movw	r6, r24
 8fe:	2b 01       	movw	r4, r22
 900:	5a 01       	movw	r10, r20
 902:	fc 01       	movw	r30, r24
 904:	16 82       	std	Z+6, r1	; 0x06
 906:	17 82       	std	Z+7, r1	; 0x07
 908:	83 81       	ldd	r24, Z+3	; 0x03
 90a:	81 fd       	sbrc	r24, 1
 90c:	03 c0       	rjmp	.+6      	; 0x914 <vfprintf+0x46>
 90e:	6f ef       	ldi	r22, 0xFF	; 255
 910:	7f ef       	ldi	r23, 0xFF	; 255
 912:	c6 c1       	rjmp	.+908    	; 0xca0 <vfprintf+0x3d2>
 914:	9a e0       	ldi	r25, 0x0A	; 10
 916:	89 2e       	mov	r8, r25
 918:	1e 01       	movw	r2, r28
 91a:	08 94       	sec
 91c:	21 1c       	adc	r2, r1
 91e:	31 1c       	adc	r3, r1
 920:	f3 01       	movw	r30, r6
 922:	23 81       	ldd	r18, Z+3	; 0x03
 924:	f2 01       	movw	r30, r4
 926:	23 fd       	sbrc	r18, 3
 928:	85 91       	lpm	r24, Z+
 92a:	23 ff       	sbrs	r18, 3
 92c:	81 91       	ld	r24, Z+
 92e:	2f 01       	movw	r4, r30
 930:	88 23       	and	r24, r24
 932:	09 f4       	brne	.+2      	; 0x936 <vfprintf+0x68>
 934:	b2 c1       	rjmp	.+868    	; 0xc9a <vfprintf+0x3cc>
 936:	85 32       	cpi	r24, 0x25	; 37
 938:	39 f4       	brne	.+14     	; 0x948 <vfprintf+0x7a>
 93a:	23 fd       	sbrc	r18, 3
 93c:	85 91       	lpm	r24, Z+
 93e:	23 ff       	sbrs	r18, 3
 940:	81 91       	ld	r24, Z+
 942:	2f 01       	movw	r4, r30
 944:	85 32       	cpi	r24, 0x25	; 37
 946:	29 f4       	brne	.+10     	; 0x952 <vfprintf+0x84>
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	b3 01       	movw	r22, r6
 94c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <fputc>
 950:	e7 cf       	rjmp	.-50     	; 0x920 <vfprintf+0x52>
 952:	98 2f       	mov	r25, r24
 954:	ff 24       	eor	r15, r15
 956:	ee 24       	eor	r14, r14
 958:	99 24       	eor	r9, r9
 95a:	ff e1       	ldi	r31, 0x1F	; 31
 95c:	ff 15       	cp	r31, r15
 95e:	d0 f0       	brcs	.+52     	; 0x994 <vfprintf+0xc6>
 960:	9b 32       	cpi	r25, 0x2B	; 43
 962:	69 f0       	breq	.+26     	; 0x97e <vfprintf+0xb0>
 964:	9c 32       	cpi	r25, 0x2C	; 44
 966:	28 f4       	brcc	.+10     	; 0x972 <vfprintf+0xa4>
 968:	90 32       	cpi	r25, 0x20	; 32
 96a:	59 f0       	breq	.+22     	; 0x982 <vfprintf+0xb4>
 96c:	93 32       	cpi	r25, 0x23	; 35
 96e:	91 f4       	brne	.+36     	; 0x994 <vfprintf+0xc6>
 970:	0e c0       	rjmp	.+28     	; 0x98e <vfprintf+0xc0>
 972:	9d 32       	cpi	r25, 0x2D	; 45
 974:	49 f0       	breq	.+18     	; 0x988 <vfprintf+0xba>
 976:	90 33       	cpi	r25, 0x30	; 48
 978:	69 f4       	brne	.+26     	; 0x994 <vfprintf+0xc6>
 97a:	41 e0       	ldi	r20, 0x01	; 1
 97c:	24 c0       	rjmp	.+72     	; 0x9c6 <vfprintf+0xf8>
 97e:	52 e0       	ldi	r21, 0x02	; 2
 980:	f5 2a       	or	r15, r21
 982:	84 e0       	ldi	r24, 0x04	; 4
 984:	f8 2a       	or	r15, r24
 986:	28 c0       	rjmp	.+80     	; 0x9d8 <vfprintf+0x10a>
 988:	98 e0       	ldi	r25, 0x08	; 8
 98a:	f9 2a       	or	r15, r25
 98c:	25 c0       	rjmp	.+74     	; 0x9d8 <vfprintf+0x10a>
 98e:	e0 e1       	ldi	r30, 0x10	; 16
 990:	fe 2a       	or	r15, r30
 992:	22 c0       	rjmp	.+68     	; 0x9d8 <vfprintf+0x10a>
 994:	f7 fc       	sbrc	r15, 7
 996:	29 c0       	rjmp	.+82     	; 0x9ea <vfprintf+0x11c>
 998:	89 2f       	mov	r24, r25
 99a:	80 53       	subi	r24, 0x30	; 48
 99c:	8a 30       	cpi	r24, 0x0A	; 10
 99e:	70 f4       	brcc	.+28     	; 0x9bc <vfprintf+0xee>
 9a0:	f6 fe       	sbrs	r15, 6
 9a2:	05 c0       	rjmp	.+10     	; 0x9ae <vfprintf+0xe0>
 9a4:	98 9c       	mul	r9, r8
 9a6:	90 2c       	mov	r9, r0
 9a8:	11 24       	eor	r1, r1
 9aa:	98 0e       	add	r9, r24
 9ac:	15 c0       	rjmp	.+42     	; 0x9d8 <vfprintf+0x10a>
 9ae:	e8 9c       	mul	r14, r8
 9b0:	e0 2c       	mov	r14, r0
 9b2:	11 24       	eor	r1, r1
 9b4:	e8 0e       	add	r14, r24
 9b6:	f0 e2       	ldi	r31, 0x20	; 32
 9b8:	ff 2a       	or	r15, r31
 9ba:	0e c0       	rjmp	.+28     	; 0x9d8 <vfprintf+0x10a>
 9bc:	9e 32       	cpi	r25, 0x2E	; 46
 9be:	29 f4       	brne	.+10     	; 0x9ca <vfprintf+0xfc>
 9c0:	f6 fc       	sbrc	r15, 6
 9c2:	6b c1       	rjmp	.+726    	; 0xc9a <vfprintf+0x3cc>
 9c4:	40 e4       	ldi	r20, 0x40	; 64
 9c6:	f4 2a       	or	r15, r20
 9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <vfprintf+0x10a>
 9ca:	9c 36       	cpi	r25, 0x6C	; 108
 9cc:	19 f4       	brne	.+6      	; 0x9d4 <vfprintf+0x106>
 9ce:	50 e8       	ldi	r21, 0x80	; 128
 9d0:	f5 2a       	or	r15, r21
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <vfprintf+0x10a>
 9d4:	98 36       	cpi	r25, 0x68	; 104
 9d6:	49 f4       	brne	.+18     	; 0x9ea <vfprintf+0x11c>
 9d8:	f2 01       	movw	r30, r4
 9da:	23 fd       	sbrc	r18, 3
 9dc:	95 91       	lpm	r25, Z+
 9de:	23 ff       	sbrs	r18, 3
 9e0:	91 91       	ld	r25, Z+
 9e2:	2f 01       	movw	r4, r30
 9e4:	99 23       	and	r25, r25
 9e6:	09 f0       	breq	.+2      	; 0x9ea <vfprintf+0x11c>
 9e8:	b8 cf       	rjmp	.-144    	; 0x95a <vfprintf+0x8c>
 9ea:	89 2f       	mov	r24, r25
 9ec:	85 54       	subi	r24, 0x45	; 69
 9ee:	83 30       	cpi	r24, 0x03	; 3
 9f0:	18 f0       	brcs	.+6      	; 0x9f8 <vfprintf+0x12a>
 9f2:	80 52       	subi	r24, 0x20	; 32
 9f4:	83 30       	cpi	r24, 0x03	; 3
 9f6:	38 f4       	brcc	.+14     	; 0xa06 <vfprintf+0x138>
 9f8:	44 e0       	ldi	r20, 0x04	; 4
 9fa:	50 e0       	ldi	r21, 0x00	; 0
 9fc:	a4 0e       	add	r10, r20
 9fe:	b5 1e       	adc	r11, r21
 a00:	5f e3       	ldi	r21, 0x3F	; 63
 a02:	59 83       	std	Y+1, r21	; 0x01
 a04:	0f c0       	rjmp	.+30     	; 0xa24 <vfprintf+0x156>
 a06:	93 36       	cpi	r25, 0x63	; 99
 a08:	31 f0       	breq	.+12     	; 0xa16 <vfprintf+0x148>
 a0a:	93 37       	cpi	r25, 0x73	; 115
 a0c:	79 f0       	breq	.+30     	; 0xa2c <vfprintf+0x15e>
 a0e:	93 35       	cpi	r25, 0x53	; 83
 a10:	09 f0       	breq	.+2      	; 0xa14 <vfprintf+0x146>
 a12:	56 c0       	rjmp	.+172    	; 0xac0 <vfprintf+0x1f2>
 a14:	20 c0       	rjmp	.+64     	; 0xa56 <vfprintf+0x188>
 a16:	f5 01       	movw	r30, r10
 a18:	80 81       	ld	r24, Z
 a1a:	89 83       	std	Y+1, r24	; 0x01
 a1c:	42 e0       	ldi	r20, 0x02	; 2
 a1e:	50 e0       	ldi	r21, 0x00	; 0
 a20:	a4 0e       	add	r10, r20
 a22:	b5 1e       	adc	r11, r21
 a24:	61 01       	movw	r12, r2
 a26:	01 e0       	ldi	r16, 0x01	; 1
 a28:	10 e0       	ldi	r17, 0x00	; 0
 a2a:	12 c0       	rjmp	.+36     	; 0xa50 <vfprintf+0x182>
 a2c:	f5 01       	movw	r30, r10
 a2e:	c0 80       	ld	r12, Z
 a30:	d1 80       	ldd	r13, Z+1	; 0x01
 a32:	f6 fc       	sbrc	r15, 6
 a34:	03 c0       	rjmp	.+6      	; 0xa3c <vfprintf+0x16e>
 a36:	6f ef       	ldi	r22, 0xFF	; 255
 a38:	7f ef       	ldi	r23, 0xFF	; 255
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <vfprintf+0x172>
 a3c:	69 2d       	mov	r22, r9
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	42 e0       	ldi	r20, 0x02	; 2
 a42:	50 e0       	ldi	r21, 0x00	; 0
 a44:	a4 0e       	add	r10, r20
 a46:	b5 1e       	adc	r11, r21
 a48:	c6 01       	movw	r24, r12
 a4a:	0e 94 72 06 	call	0xce4	; 0xce4 <strnlen>
 a4e:	8c 01       	movw	r16, r24
 a50:	5f e7       	ldi	r21, 0x7F	; 127
 a52:	f5 22       	and	r15, r21
 a54:	14 c0       	rjmp	.+40     	; 0xa7e <vfprintf+0x1b0>
 a56:	f5 01       	movw	r30, r10
 a58:	c0 80       	ld	r12, Z
 a5a:	d1 80       	ldd	r13, Z+1	; 0x01
 a5c:	f6 fc       	sbrc	r15, 6
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <vfprintf+0x198>
 a60:	6f ef       	ldi	r22, 0xFF	; 255
 a62:	7f ef       	ldi	r23, 0xFF	; 255
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <vfprintf+0x19c>
 a66:	69 2d       	mov	r22, r9
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	42 e0       	ldi	r20, 0x02	; 2
 a6c:	50 e0       	ldi	r21, 0x00	; 0
 a6e:	a4 0e       	add	r10, r20
 a70:	b5 1e       	adc	r11, r21
 a72:	c6 01       	movw	r24, r12
 a74:	0e 94 67 06 	call	0xcce	; 0xcce <strnlen_P>
 a78:	8c 01       	movw	r16, r24
 a7a:	50 e8       	ldi	r21, 0x80	; 128
 a7c:	f5 2a       	or	r15, r21
 a7e:	f3 fe       	sbrs	r15, 3
 a80:	07 c0       	rjmp	.+14     	; 0xa90 <vfprintf+0x1c2>
 a82:	1a c0       	rjmp	.+52     	; 0xab8 <vfprintf+0x1ea>
 a84:	80 e2       	ldi	r24, 0x20	; 32
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	b3 01       	movw	r22, r6
 a8a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <fputc>
 a8e:	ea 94       	dec	r14
 a90:	8e 2d       	mov	r24, r14
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	08 17       	cp	r16, r24
 a96:	19 07       	cpc	r17, r25
 a98:	a8 f3       	brcs	.-22     	; 0xa84 <vfprintf+0x1b6>
 a9a:	0e c0       	rjmp	.+28     	; 0xab8 <vfprintf+0x1ea>
 a9c:	f6 01       	movw	r30, r12
 a9e:	f7 fc       	sbrc	r15, 7
 aa0:	85 91       	lpm	r24, Z+
 aa2:	f7 fe       	sbrs	r15, 7
 aa4:	81 91       	ld	r24, Z+
 aa6:	6f 01       	movw	r12, r30
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	b3 01       	movw	r22, r6
 aac:	0e 94 7d 06 	call	0xcfa	; 0xcfa <fputc>
 ab0:	e1 10       	cpse	r14, r1
 ab2:	ea 94       	dec	r14
 ab4:	01 50       	subi	r16, 0x01	; 1
 ab6:	10 40       	sbci	r17, 0x00	; 0
 ab8:	01 15       	cp	r16, r1
 aba:	11 05       	cpc	r17, r1
 abc:	79 f7       	brne	.-34     	; 0xa9c <vfprintf+0x1ce>
 abe:	ea c0       	rjmp	.+468    	; 0xc94 <vfprintf+0x3c6>
 ac0:	94 36       	cpi	r25, 0x64	; 100
 ac2:	11 f0       	breq	.+4      	; 0xac8 <vfprintf+0x1fa>
 ac4:	99 36       	cpi	r25, 0x69	; 105
 ac6:	69 f5       	brne	.+90     	; 0xb22 <vfprintf+0x254>
 ac8:	f7 fe       	sbrs	r15, 7
 aca:	08 c0       	rjmp	.+16     	; 0xadc <vfprintf+0x20e>
 acc:	f5 01       	movw	r30, r10
 ace:	20 81       	ld	r18, Z
 ad0:	31 81       	ldd	r19, Z+1	; 0x01
 ad2:	42 81       	ldd	r20, Z+2	; 0x02
 ad4:	53 81       	ldd	r21, Z+3	; 0x03
 ad6:	84 e0       	ldi	r24, 0x04	; 4
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	0a c0       	rjmp	.+20     	; 0xaf0 <vfprintf+0x222>
 adc:	f5 01       	movw	r30, r10
 ade:	80 81       	ld	r24, Z
 ae0:	91 81       	ldd	r25, Z+1	; 0x01
 ae2:	9c 01       	movw	r18, r24
 ae4:	44 27       	eor	r20, r20
 ae6:	37 fd       	sbrc	r19, 7
 ae8:	40 95       	com	r20
 aea:	54 2f       	mov	r21, r20
 aec:	82 e0       	ldi	r24, 0x02	; 2
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	a8 0e       	add	r10, r24
 af2:	b9 1e       	adc	r11, r25
 af4:	9f e6       	ldi	r25, 0x6F	; 111
 af6:	f9 22       	and	r15, r25
 af8:	57 ff       	sbrs	r21, 7
 afa:	09 c0       	rjmp	.+18     	; 0xb0e <vfprintf+0x240>
 afc:	50 95       	com	r21
 afe:	40 95       	com	r20
 b00:	30 95       	com	r19
 b02:	21 95       	neg	r18
 b04:	3f 4f       	sbci	r19, 0xFF	; 255
 b06:	4f 4f       	sbci	r20, 0xFF	; 255
 b08:	5f 4f       	sbci	r21, 0xFF	; 255
 b0a:	e0 e8       	ldi	r30, 0x80	; 128
 b0c:	fe 2a       	or	r15, r30
 b0e:	ca 01       	movw	r24, r20
 b10:	b9 01       	movw	r22, r18
 b12:	a1 01       	movw	r20, r2
 b14:	2a e0       	ldi	r18, 0x0A	; 10
 b16:	30 e0       	ldi	r19, 0x00	; 0
 b18:	0e 94 a9 06 	call	0xd52	; 0xd52 <__ultoa_invert>
 b1c:	d8 2e       	mov	r13, r24
 b1e:	d2 18       	sub	r13, r2
 b20:	40 c0       	rjmp	.+128    	; 0xba2 <vfprintf+0x2d4>
 b22:	95 37       	cpi	r25, 0x75	; 117
 b24:	29 f4       	brne	.+10     	; 0xb30 <vfprintf+0x262>
 b26:	1f 2d       	mov	r17, r15
 b28:	1f 7e       	andi	r17, 0xEF	; 239
 b2a:	2a e0       	ldi	r18, 0x0A	; 10
 b2c:	30 e0       	ldi	r19, 0x00	; 0
 b2e:	1d c0       	rjmp	.+58     	; 0xb6a <vfprintf+0x29c>
 b30:	1f 2d       	mov	r17, r15
 b32:	19 7f       	andi	r17, 0xF9	; 249
 b34:	9f 36       	cpi	r25, 0x6F	; 111
 b36:	61 f0       	breq	.+24     	; 0xb50 <vfprintf+0x282>
 b38:	90 37       	cpi	r25, 0x70	; 112
 b3a:	20 f4       	brcc	.+8      	; 0xb44 <vfprintf+0x276>
 b3c:	98 35       	cpi	r25, 0x58	; 88
 b3e:	09 f0       	breq	.+2      	; 0xb42 <vfprintf+0x274>
 b40:	ac c0       	rjmp	.+344    	; 0xc9a <vfprintf+0x3cc>
 b42:	0f c0       	rjmp	.+30     	; 0xb62 <vfprintf+0x294>
 b44:	90 37       	cpi	r25, 0x70	; 112
 b46:	39 f0       	breq	.+14     	; 0xb56 <vfprintf+0x288>
 b48:	98 37       	cpi	r25, 0x78	; 120
 b4a:	09 f0       	breq	.+2      	; 0xb4e <vfprintf+0x280>
 b4c:	a6 c0       	rjmp	.+332    	; 0xc9a <vfprintf+0x3cc>
 b4e:	04 c0       	rjmp	.+8      	; 0xb58 <vfprintf+0x28a>
 b50:	28 e0       	ldi	r18, 0x08	; 8
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	0a c0       	rjmp	.+20     	; 0xb6a <vfprintf+0x29c>
 b56:	10 61       	ori	r17, 0x10	; 16
 b58:	14 fd       	sbrc	r17, 4
 b5a:	14 60       	ori	r17, 0x04	; 4
 b5c:	20 e1       	ldi	r18, 0x10	; 16
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	04 c0       	rjmp	.+8      	; 0xb6a <vfprintf+0x29c>
 b62:	14 fd       	sbrc	r17, 4
 b64:	16 60       	ori	r17, 0x06	; 6
 b66:	20 e1       	ldi	r18, 0x10	; 16
 b68:	32 e0       	ldi	r19, 0x02	; 2
 b6a:	17 ff       	sbrs	r17, 7
 b6c:	08 c0       	rjmp	.+16     	; 0xb7e <vfprintf+0x2b0>
 b6e:	f5 01       	movw	r30, r10
 b70:	60 81       	ld	r22, Z
 b72:	71 81       	ldd	r23, Z+1	; 0x01
 b74:	82 81       	ldd	r24, Z+2	; 0x02
 b76:	93 81       	ldd	r25, Z+3	; 0x03
 b78:	44 e0       	ldi	r20, 0x04	; 4
 b7a:	50 e0       	ldi	r21, 0x00	; 0
 b7c:	08 c0       	rjmp	.+16     	; 0xb8e <vfprintf+0x2c0>
 b7e:	f5 01       	movw	r30, r10
 b80:	80 81       	ld	r24, Z
 b82:	91 81       	ldd	r25, Z+1	; 0x01
 b84:	bc 01       	movw	r22, r24
 b86:	80 e0       	ldi	r24, 0x00	; 0
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	42 e0       	ldi	r20, 0x02	; 2
 b8c:	50 e0       	ldi	r21, 0x00	; 0
 b8e:	a4 0e       	add	r10, r20
 b90:	b5 1e       	adc	r11, r21
 b92:	a1 01       	movw	r20, r2
 b94:	0e 94 a9 06 	call	0xd52	; 0xd52 <__ultoa_invert>
 b98:	d8 2e       	mov	r13, r24
 b9a:	d2 18       	sub	r13, r2
 b9c:	8f e7       	ldi	r24, 0x7F	; 127
 b9e:	f8 2e       	mov	r15, r24
 ba0:	f1 22       	and	r15, r17
 ba2:	f6 fe       	sbrs	r15, 6
 ba4:	0b c0       	rjmp	.+22     	; 0xbbc <vfprintf+0x2ee>
 ba6:	5e ef       	ldi	r21, 0xFE	; 254
 ba8:	f5 22       	and	r15, r21
 baa:	d9 14       	cp	r13, r9
 bac:	38 f4       	brcc	.+14     	; 0xbbc <vfprintf+0x2ee>
 bae:	f4 fe       	sbrs	r15, 4
 bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <vfprintf+0x2f2>
 bb2:	f2 fc       	sbrc	r15, 2
 bb4:	05 c0       	rjmp	.+10     	; 0xbc0 <vfprintf+0x2f2>
 bb6:	8f ee       	ldi	r24, 0xEF	; 239
 bb8:	f8 22       	and	r15, r24
 bba:	02 c0       	rjmp	.+4      	; 0xbc0 <vfprintf+0x2f2>
 bbc:	1d 2d       	mov	r17, r13
 bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <vfprintf+0x2f4>
 bc0:	19 2d       	mov	r17, r9
 bc2:	f4 fe       	sbrs	r15, 4
 bc4:	0d c0       	rjmp	.+26     	; 0xbe0 <vfprintf+0x312>
 bc6:	fe 01       	movw	r30, r28
 bc8:	ed 0d       	add	r30, r13
 bca:	f1 1d       	adc	r31, r1
 bcc:	80 81       	ld	r24, Z
 bce:	80 33       	cpi	r24, 0x30	; 48
 bd0:	19 f4       	brne	.+6      	; 0xbd8 <vfprintf+0x30a>
 bd2:	99 ee       	ldi	r25, 0xE9	; 233
 bd4:	f9 22       	and	r15, r25
 bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <vfprintf+0x31a>
 bd8:	1f 5f       	subi	r17, 0xFF	; 255
 bda:	f2 fe       	sbrs	r15, 2
 bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <vfprintf+0x31a>
 bde:	03 c0       	rjmp	.+6      	; 0xbe6 <vfprintf+0x318>
 be0:	8f 2d       	mov	r24, r15
 be2:	86 78       	andi	r24, 0x86	; 134
 be4:	09 f0       	breq	.+2      	; 0xbe8 <vfprintf+0x31a>
 be6:	1f 5f       	subi	r17, 0xFF	; 255
 be8:	0f 2d       	mov	r16, r15
 bea:	f3 fc       	sbrc	r15, 3
 bec:	14 c0       	rjmp	.+40     	; 0xc16 <vfprintf+0x348>
 bee:	f0 fe       	sbrs	r15, 0
 bf0:	0f c0       	rjmp	.+30     	; 0xc10 <vfprintf+0x342>
 bf2:	1e 15       	cp	r17, r14
 bf4:	10 f0       	brcs	.+4      	; 0xbfa <vfprintf+0x32c>
 bf6:	9d 2c       	mov	r9, r13
 bf8:	0b c0       	rjmp	.+22     	; 0xc10 <vfprintf+0x342>
 bfa:	9d 2c       	mov	r9, r13
 bfc:	9e 0c       	add	r9, r14
 bfe:	91 1a       	sub	r9, r17
 c00:	1e 2d       	mov	r17, r14
 c02:	06 c0       	rjmp	.+12     	; 0xc10 <vfprintf+0x342>
 c04:	80 e2       	ldi	r24, 0x20	; 32
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	b3 01       	movw	r22, r6
 c0a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <fputc>
 c0e:	1f 5f       	subi	r17, 0xFF	; 255
 c10:	1e 15       	cp	r17, r14
 c12:	c0 f3       	brcs	.-16     	; 0xc04 <vfprintf+0x336>
 c14:	04 c0       	rjmp	.+8      	; 0xc1e <vfprintf+0x350>
 c16:	1e 15       	cp	r17, r14
 c18:	10 f4       	brcc	.+4      	; 0xc1e <vfprintf+0x350>
 c1a:	e1 1a       	sub	r14, r17
 c1c:	01 c0       	rjmp	.+2      	; 0xc20 <vfprintf+0x352>
 c1e:	ee 24       	eor	r14, r14
 c20:	04 ff       	sbrs	r16, 4
 c22:	0f c0       	rjmp	.+30     	; 0xc42 <vfprintf+0x374>
 c24:	80 e3       	ldi	r24, 0x30	; 48
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	b3 01       	movw	r22, r6
 c2a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <fputc>
 c2e:	02 ff       	sbrs	r16, 2
 c30:	1d c0       	rjmp	.+58     	; 0xc6c <vfprintf+0x39e>
 c32:	01 fd       	sbrc	r16, 1
 c34:	03 c0       	rjmp	.+6      	; 0xc3c <vfprintf+0x36e>
 c36:	88 e7       	ldi	r24, 0x78	; 120
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	0e c0       	rjmp	.+28     	; 0xc58 <vfprintf+0x38a>
 c3c:	88 e5       	ldi	r24, 0x58	; 88
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	0b c0       	rjmp	.+22     	; 0xc58 <vfprintf+0x38a>
 c42:	80 2f       	mov	r24, r16
 c44:	86 78       	andi	r24, 0x86	; 134
 c46:	91 f0       	breq	.+36     	; 0xc6c <vfprintf+0x39e>
 c48:	01 ff       	sbrs	r16, 1
 c4a:	02 c0       	rjmp	.+4      	; 0xc50 <vfprintf+0x382>
 c4c:	8b e2       	ldi	r24, 0x2B	; 43
 c4e:	01 c0       	rjmp	.+2      	; 0xc52 <vfprintf+0x384>
 c50:	80 e2       	ldi	r24, 0x20	; 32
 c52:	f7 fc       	sbrc	r15, 7
 c54:	8d e2       	ldi	r24, 0x2D	; 45
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	b3 01       	movw	r22, r6
 c5a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <fputc>
 c5e:	06 c0       	rjmp	.+12     	; 0xc6c <vfprintf+0x39e>
 c60:	80 e3       	ldi	r24, 0x30	; 48
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	b3 01       	movw	r22, r6
 c66:	0e 94 7d 06 	call	0xcfa	; 0xcfa <fputc>
 c6a:	9a 94       	dec	r9
 c6c:	d9 14       	cp	r13, r9
 c6e:	c0 f3       	brcs	.-16     	; 0xc60 <vfprintf+0x392>
 c70:	da 94       	dec	r13
 c72:	f1 01       	movw	r30, r2
 c74:	ed 0d       	add	r30, r13
 c76:	f1 1d       	adc	r31, r1
 c78:	80 81       	ld	r24, Z
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	b3 01       	movw	r22, r6
 c7e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <fputc>
 c82:	dd 20       	and	r13, r13
 c84:	a9 f7       	brne	.-22     	; 0xc70 <vfprintf+0x3a2>
 c86:	06 c0       	rjmp	.+12     	; 0xc94 <vfprintf+0x3c6>
 c88:	80 e2       	ldi	r24, 0x20	; 32
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	b3 01       	movw	r22, r6
 c8e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <fputc>
 c92:	ea 94       	dec	r14
 c94:	ee 20       	and	r14, r14
 c96:	c1 f7       	brne	.-16     	; 0xc88 <vfprintf+0x3ba>
 c98:	43 ce       	rjmp	.-890    	; 0x920 <vfprintf+0x52>
 c9a:	f3 01       	movw	r30, r6
 c9c:	66 81       	ldd	r22, Z+6	; 0x06
 c9e:	77 81       	ldd	r23, Z+7	; 0x07
 ca0:	cb 01       	movw	r24, r22
 ca2:	2b 96       	adiw	r28, 0x0b	; 11
 ca4:	cd bf       	out	0x3d, r28	; 61
 ca6:	de bf       	out	0x3e, r29	; 62
 ca8:	cf 91       	pop	r28
 caa:	df 91       	pop	r29
 cac:	1f 91       	pop	r17
 cae:	0f 91       	pop	r16
 cb0:	ff 90       	pop	r15
 cb2:	ef 90       	pop	r14
 cb4:	df 90       	pop	r13
 cb6:	cf 90       	pop	r12
 cb8:	bf 90       	pop	r11
 cba:	af 90       	pop	r10
 cbc:	9f 90       	pop	r9
 cbe:	8f 90       	pop	r8
 cc0:	7f 90       	pop	r7
 cc2:	6f 90       	pop	r6
 cc4:	5f 90       	pop	r5
 cc6:	4f 90       	pop	r4
 cc8:	3f 90       	pop	r3
 cca:	2f 90       	pop	r2
 ccc:	08 95       	ret

00000cce <strnlen_P>:
 cce:	fc 01       	movw	r30, r24
 cd0:	05 90       	lpm	r0, Z+
 cd2:	61 50       	subi	r22, 0x01	; 1
 cd4:	70 40       	sbci	r23, 0x00	; 0
 cd6:	01 10       	cpse	r0, r1
 cd8:	d8 f7       	brcc	.-10     	; 0xcd0 <strnlen_P+0x2>
 cda:	80 95       	com	r24
 cdc:	90 95       	com	r25
 cde:	8e 0f       	add	r24, r30
 ce0:	9f 1f       	adc	r25, r31
 ce2:	08 95       	ret

00000ce4 <strnlen>:
 ce4:	fc 01       	movw	r30, r24
 ce6:	61 50       	subi	r22, 0x01	; 1
 ce8:	70 40       	sbci	r23, 0x00	; 0
 cea:	01 90       	ld	r0, Z+
 cec:	01 10       	cpse	r0, r1
 cee:	d8 f7       	brcc	.-10     	; 0xce6 <strnlen+0x2>
 cf0:	80 95       	com	r24
 cf2:	90 95       	com	r25
 cf4:	8e 0f       	add	r24, r30
 cf6:	9f 1f       	adc	r25, r31
 cf8:	08 95       	ret

00000cfa <fputc>:
 cfa:	0f 93       	push	r16
 cfc:	1f 93       	push	r17
 cfe:	cf 93       	push	r28
 d00:	df 93       	push	r29
 d02:	8c 01       	movw	r16, r24
 d04:	eb 01       	movw	r28, r22
 d06:	8b 81       	ldd	r24, Y+3	; 0x03
 d08:	81 ff       	sbrs	r24, 1
 d0a:	1b c0       	rjmp	.+54     	; 0xd42 <fputc+0x48>
 d0c:	82 ff       	sbrs	r24, 2
 d0e:	0d c0       	rjmp	.+26     	; 0xd2a <fputc+0x30>
 d10:	2e 81       	ldd	r18, Y+6	; 0x06
 d12:	3f 81       	ldd	r19, Y+7	; 0x07
 d14:	8c 81       	ldd	r24, Y+4	; 0x04
 d16:	9d 81       	ldd	r25, Y+5	; 0x05
 d18:	28 17       	cp	r18, r24
 d1a:	39 07       	cpc	r19, r25
 d1c:	64 f4       	brge	.+24     	; 0xd36 <fputc+0x3c>
 d1e:	e8 81       	ld	r30, Y
 d20:	f9 81       	ldd	r31, Y+1	; 0x01
 d22:	01 93       	st	Z+, r16
 d24:	e8 83       	st	Y, r30
 d26:	f9 83       	std	Y+1, r31	; 0x01
 d28:	06 c0       	rjmp	.+12     	; 0xd36 <fputc+0x3c>
 d2a:	e8 85       	ldd	r30, Y+8	; 0x08
 d2c:	f9 85       	ldd	r31, Y+9	; 0x09
 d2e:	80 2f       	mov	r24, r16
 d30:	19 95       	eicall
 d32:	89 2b       	or	r24, r25
 d34:	31 f4       	brne	.+12     	; 0xd42 <fputc+0x48>
 d36:	8e 81       	ldd	r24, Y+6	; 0x06
 d38:	9f 81       	ldd	r25, Y+7	; 0x07
 d3a:	01 96       	adiw	r24, 0x01	; 1
 d3c:	8e 83       	std	Y+6, r24	; 0x06
 d3e:	9f 83       	std	Y+7, r25	; 0x07
 d40:	02 c0       	rjmp	.+4      	; 0xd46 <fputc+0x4c>
 d42:	0f ef       	ldi	r16, 0xFF	; 255
 d44:	1f ef       	ldi	r17, 0xFF	; 255
 d46:	c8 01       	movw	r24, r16
 d48:	df 91       	pop	r29
 d4a:	cf 91       	pop	r28
 d4c:	1f 91       	pop	r17
 d4e:	0f 91       	pop	r16
 d50:	08 95       	ret

00000d52 <__ultoa_invert>:
 d52:	fa 01       	movw	r30, r20
 d54:	aa 27       	eor	r26, r26
 d56:	28 30       	cpi	r18, 0x08	; 8
 d58:	51 f1       	breq	.+84     	; 0xdae <__ultoa_invert+0x5c>
 d5a:	20 31       	cpi	r18, 0x10	; 16
 d5c:	81 f1       	breq	.+96     	; 0xdbe <__ultoa_invert+0x6c>
 d5e:	e8 94       	clt
 d60:	6f 93       	push	r22
 d62:	6e 7f       	andi	r22, 0xFE	; 254
 d64:	6e 5f       	subi	r22, 0xFE	; 254
 d66:	7f 4f       	sbci	r23, 0xFF	; 255
 d68:	8f 4f       	sbci	r24, 0xFF	; 255
 d6a:	9f 4f       	sbci	r25, 0xFF	; 255
 d6c:	af 4f       	sbci	r26, 0xFF	; 255
 d6e:	b1 e0       	ldi	r27, 0x01	; 1
 d70:	3e d0       	rcall	.+124    	; 0xdee <__ultoa_invert+0x9c>
 d72:	b4 e0       	ldi	r27, 0x04	; 4
 d74:	3c d0       	rcall	.+120    	; 0xdee <__ultoa_invert+0x9c>
 d76:	67 0f       	add	r22, r23
 d78:	78 1f       	adc	r23, r24
 d7a:	89 1f       	adc	r24, r25
 d7c:	9a 1f       	adc	r25, r26
 d7e:	a1 1d       	adc	r26, r1
 d80:	68 0f       	add	r22, r24
 d82:	79 1f       	adc	r23, r25
 d84:	8a 1f       	adc	r24, r26
 d86:	91 1d       	adc	r25, r1
 d88:	a1 1d       	adc	r26, r1
 d8a:	6a 0f       	add	r22, r26
 d8c:	71 1d       	adc	r23, r1
 d8e:	81 1d       	adc	r24, r1
 d90:	91 1d       	adc	r25, r1
 d92:	a1 1d       	adc	r26, r1
 d94:	20 d0       	rcall	.+64     	; 0xdd6 <__ultoa_invert+0x84>
 d96:	09 f4       	brne	.+2      	; 0xd9a <__ultoa_invert+0x48>
 d98:	68 94       	set
 d9a:	3f 91       	pop	r19
 d9c:	2a e0       	ldi	r18, 0x0A	; 10
 d9e:	26 9f       	mul	r18, r22
 da0:	11 24       	eor	r1, r1
 da2:	30 19       	sub	r19, r0
 da4:	30 5d       	subi	r19, 0xD0	; 208
 da6:	31 93       	st	Z+, r19
 da8:	de f6       	brtc	.-74     	; 0xd60 <__ultoa_invert+0xe>
 daa:	cf 01       	movw	r24, r30
 dac:	08 95       	ret
 dae:	46 2f       	mov	r20, r22
 db0:	47 70       	andi	r20, 0x07	; 7
 db2:	40 5d       	subi	r20, 0xD0	; 208
 db4:	41 93       	st	Z+, r20
 db6:	b3 e0       	ldi	r27, 0x03	; 3
 db8:	0f d0       	rcall	.+30     	; 0xdd8 <__ultoa_invert+0x86>
 dba:	c9 f7       	brne	.-14     	; 0xdae <__ultoa_invert+0x5c>
 dbc:	f6 cf       	rjmp	.-20     	; 0xdaa <__ultoa_invert+0x58>
 dbe:	46 2f       	mov	r20, r22
 dc0:	4f 70       	andi	r20, 0x0F	; 15
 dc2:	40 5d       	subi	r20, 0xD0	; 208
 dc4:	4a 33       	cpi	r20, 0x3A	; 58
 dc6:	18 f0       	brcs	.+6      	; 0xdce <__ultoa_invert+0x7c>
 dc8:	49 5d       	subi	r20, 0xD9	; 217
 dca:	31 fd       	sbrc	r19, 1
 dcc:	40 52       	subi	r20, 0x20	; 32
 dce:	41 93       	st	Z+, r20
 dd0:	02 d0       	rcall	.+4      	; 0xdd6 <__ultoa_invert+0x84>
 dd2:	a9 f7       	brne	.-22     	; 0xdbe <__ultoa_invert+0x6c>
 dd4:	ea cf       	rjmp	.-44     	; 0xdaa <__ultoa_invert+0x58>
 dd6:	b4 e0       	ldi	r27, 0x04	; 4
 dd8:	a6 95       	lsr	r26
 dda:	97 95       	ror	r25
 ddc:	87 95       	ror	r24
 dde:	77 95       	ror	r23
 de0:	67 95       	ror	r22
 de2:	ba 95       	dec	r27
 de4:	c9 f7       	brne	.-14     	; 0xdd8 <__ultoa_invert+0x86>
 de6:	00 97       	sbiw	r24, 0x00	; 0
 de8:	61 05       	cpc	r22, r1
 dea:	71 05       	cpc	r23, r1
 dec:	08 95       	ret
 dee:	9b 01       	movw	r18, r22
 df0:	ac 01       	movw	r20, r24
 df2:	0a 2e       	mov	r0, r26
 df4:	06 94       	lsr	r0
 df6:	57 95       	ror	r21
 df8:	47 95       	ror	r20
 dfa:	37 95       	ror	r19
 dfc:	27 95       	ror	r18
 dfe:	ba 95       	dec	r27
 e00:	c9 f7       	brne	.-14     	; 0xdf4 <__ultoa_invert+0xa2>
 e02:	62 0f       	add	r22, r18
 e04:	73 1f       	adc	r23, r19
 e06:	84 1f       	adc	r24, r20
 e08:	95 1f       	adc	r25, r21
 e0a:	a0 1d       	adc	r26, r0
 e0c:	08 95       	ret

00000e0e <_exit>:
 e0e:	f8 94       	cli

00000e10 <__stop_program>:
 e10:	ff cf       	rjmp	.-2      	; 0xe10 <__stop_program>
