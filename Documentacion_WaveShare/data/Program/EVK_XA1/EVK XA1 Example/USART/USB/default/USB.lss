
USB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00802000  000006be  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020b  00802004  00802004  00000756  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002db  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011bb  00000000  00000000  00000a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055f  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000729  00000000  00000000  000021ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000028d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b69  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ae  00000000  00000000  000035dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  68:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  8c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  90:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  94:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  98:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  9c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  fc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 100:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 104:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 108:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 10c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 110:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 114:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 118:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 11c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 120:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 124:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 128:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 12c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 130:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 134:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 138:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 13c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 140:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 144:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 148:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 14c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 150:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 154:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 158:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 15c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 160:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_88>
 164:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_89>
 168:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 16c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 170:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 174:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 178:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 17c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 180:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 184:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 188:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 18c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 190:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 194:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 198:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 19c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ee eb       	ldi	r30, 0xBE	; 190
 214:	f6 e0       	ldi	r31, 0x06	; 6
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a4 30       	cpi	r26, 0x04	; 4
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	12 e2       	ldi	r17, 0x22	; 34
 22a:	a4 e0       	ldi	r26, 0x04	; 4
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	af 30       	cpi	r26, 0x0F	; 15
 234:	b1 07       	cpc	r27, r17
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	0e 94 8c 01 	call	0x318	; 0x318 <main>
 23c:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_exit>

00000240 <__bad_interrupt>:
 240:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000244 <__vector_89>:
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTD0_DRE_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	08 b6       	in	r0, 0x38	; 56
 24e:	0f 92       	push	r0
 250:	09 b6       	in	r0, 0x39	; 57
 252:	0f 92       	push	r0
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	18 be       	out	0x38, r1	; 56
 25c:	19 be       	out	0x39, r1	; 57
 25e:	1b be       	out	0x3b, r1	; 59
 260:	2f 93       	push	r18
 262:	3f 93       	push	r19
 264:	4f 93       	push	r20
 266:	5f 93       	push	r21
 268:	6f 93       	push	r22
 26a:	7f 93       	push	r23
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_data);
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	90 e2       	ldi	r25, 0x20	; 32
 27c:	0e 94 20 03 	call	0x640	; 0x640 <USART_DataRegEmpty>
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	09 be       	out	0x39, r0	; 57
 2a0:	0f 90       	pop	r0
 2a2:	08 be       	out	0x38, r0	; 56
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_88>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTD0_RXC_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	08 b6       	in	r0, 0x38	; 56
 2b8:	0f 92       	push	r0
 2ba:	09 b6       	in	r0, 0x39	; 57
 2bc:	0f 92       	push	r0
 2be:	0b b6       	in	r0, 0x3b	; 59
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	18 be       	out	0x38, r1	; 56
 2c6:	19 be       	out	0x39, r1	; 57
 2c8:	1b be       	out	0x3b, r1	; 59
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	USART_RXComplete(&USART_data);
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	90 e2       	ldi	r25, 0x20	; 32
 2e6:	0e 94 01 03 	call	0x602	; 0x602 <USART_RXComplete>
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0b be       	out	0x3b, r0	; 59
 306:	0f 90       	pop	r0
 308:	09 be       	out	0x39, r0	; 57
 30a:	0f 90       	pop	r0
 30c:	08 be       	out	0x38, r0	; 56
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <main>:
 *  have been successfully sent and received.
*/
int main(void)
{

	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,
 318:	80 e4       	ldi	r24, 0x40	; 64
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	47 e0       	ldi	r20, 0x07	; 7
 31e:	0e 94 03 02 	call	0x406	; 0x406 <CLKSYS_XOSC_Config>
	                    false,
	                    OSC_XOSCSEL_XTAL_1KCLK_gc );
	CLKSYS_Enable( OSC_XOSCEN_bm );
 322:	80 91 50 00 	lds	r24, 0x0050
 326:	88 60       	ori	r24, 0x08	; 8
 328:	80 93 50 00 	sts	0x0050, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
 32c:	80 91 51 00 	lds	r24, 0x0051
 330:	83 ff       	sbrs	r24, 3
 332:	fc cf       	rjmp	.-8      	; 0x32c <main+0x14>
	
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
 334:	80 ec       	ldi	r24, 0xC0	; 192
 336:	64 e0       	ldi	r22, 0x04	; 4
 338:	0e 94 0e 02 	call	0x41c	; 0x41c <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
 33c:	80 91 50 00 	lds	r24, 0x0050
 340:	80 61       	ori	r24, 0x10	; 16
 342:	80 93 50 00 	sts	0x0050, r24
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
 346:	80 91 51 00 	lds	r24, 0x0051
 34a:	84 ff       	sbrs	r24, 4
 34c:	fc cf       	rjmp	.-8      	; 0x346 <main+0x2e>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	0e 94 36 02 	call	0x46c	; 0x46c <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 14 02 	call	0x428	; 0x428 <CLKSYS_Disable>

	PORTD.DIRSET   = PIN3_bm;
 35a:	e0 e6       	ldi	r30, 0x60	; 96
 35c:	f6 e0       	ldi	r31, 0x06	; 6
 35e:	88 e0       	ldi	r24, 0x08	; 8
 360:	81 83       	std	Z+1, r24	; 0x01

	PORTD.DIRCLR   = PIN2_bm;
 362:	84 e0       	ldi	r24, 0x04	; 4
 364:	82 83       	std	Z+2, r24	; 0x02

	/* Use USARTC0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USART_data, &USART, USART_DREINTLVL_LO_gc);
 366:	88 e0       	ldi	r24, 0x08	; 8
 368:	90 e2       	ldi	r25, 0x20	; 32
 36a:	60 ea       	ldi	r22, 0xA0	; 160
 36c:	79 e0       	ldi	r23, 0x09	; 9
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	0e 94 aa 02 	call	0x554	; 0x554 <USART_InterruptDriver_Initialize>

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(USART_data.usart, USART_CHSIZE_8BIT_gc,
 374:	e0 91 08 20 	lds	r30, 0x2008
 378:	f0 91 09 20 	lds	r31, 0x2009
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	85 83       	std	Z+5, r24	; 0x05
                     USART_PMODE_DISABLED_gc, false);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USART_data.usart, USART_RXCINTLVL_LO_gc);
 380:	83 81       	ldd	r24, Z+3	; 0x03
 382:	8f 7c       	andi	r24, 0xCF	; 207
 384:	80 61       	ori	r24, 0x10	; 16
 386:	83 83       	std	Z+3, r24	; 0x03
	// Init USART.
	// We use USARTF0.
	// Want 57600 baud. Have a 32 MHz clock. BSCALE = 0
	// BSEL = ( 32000000 / (2^0 * 16*57600)) -1 = 34
	// Fbaud = 32000000 / (2^0 * 16 * (34+1))  = 57143 bits/sec (57600 -0.8%)
	USART_Baudrate_Set(&USART, 34 , 0);
 388:	a0 ea       	ldi	r26, 0xA0	; 160
 38a:	b9 e0       	ldi	r27, 0x09	; 9
 38c:	82 e2       	ldi	r24, 0x22	; 34
 38e:	16 96       	adiw	r26, 0x06	; 6
 390:	8c 93       	st	X, r24
 392:	16 97       	sbiw	r26, 0x06	; 6
 394:	17 96       	adiw	r26, 0x07	; 7
 396:	1c 92       	st	X, r1

	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data.usart);
 398:	84 81       	ldd	r24, Z+4	; 0x04
 39a:	80 61       	ori	r24, 0x10	; 16
 39c:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_data.usart);
 39e:	84 81       	ldd	r24, Z+4	; 0x04
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	84 83       	std	Z+4, r24	; 0x04

	/* Enable PMIC interrupt level low. */
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
 3a4:	80 91 a2 00 	lds	r24, 0x00A2
 3a8:	81 60       	ori	r24, 0x01	; 1
 3aa:	e0 ea       	ldi	r30, 0xA0	; 160
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	82 83       	std	Z+2, r24	; 0x02

	/* Enable global interrupts. */
	sei();
 3b0:	78 94       	sei

	while(1){

	while (USART_RXBufferData_Available(&USART_data) ==false);
 3b2:	88 e0       	ldi	r24, 0x08	; 8
 3b4:	90 e2       	ldi	r25, 0x20	; 32
 3b6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <USART_RXBufferData_Available>
 3ba:	88 23       	and	r24, r24
 3bc:	d1 f3       	breq	.-12     	; 0x3b2 <main+0x9a>
	receiveArray[0] = USART_RXBuffer_GetByte(&USART_data);
 3be:	88 e0       	ldi	r24, 0x08	; 8
 3c0:	90 e2       	ldi	r25, 0x20	; 32
 3c2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USART_RXBuffer_GetByte>
 3c6:	80 93 05 20 	sts	0x2005, r24
	while(USART_TXBuffer_PutByte(&USART_data, receiveArray[0])==false);
 3ca:	88 e0       	ldi	r24, 0x08	; 8
 3cc:	90 e2       	ldi	r25, 0x20	; 32
 3ce:	60 91 05 20 	lds	r22, 0x2005
 3d2:	0e 94 c4 02 	call	0x588	; 0x588 <USART_TXBuffer_PutByte>
 3d6:	88 23       	and	r24, r24
 3d8:	c1 f3       	breq	.-16     	; 0x3ca <main+0xb2>
 3da:	eb cf       	rjmp	.-42     	; 0x3b2 <main+0x9a>

000003dc <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
 3dc:	0f 93       	push	r16
 3de:	df 93       	push	r29
 3e0:	cf 93       	push	r28
 3e2:	0f 92       	push	r0
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 3e8:	2f b7       	in	r18, 0x3f	; 63
 3ea:	29 83       	std	Y+1, r18	; 0x01
 3ec:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 3ee:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 3f0:	fc 01       	movw	r30, r24
 3f2:	08 ed       	ldi	r16, 0xD8	; 216
 3f4:	04 bf       	out	0x34, r16	; 52
 3f6:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 3f8:	89 81       	ldd	r24, Y+1	; 0x01
 3fa:	8f bf       	out	0x3f, r24	; 63
#endif
}
 3fc:	0f 90       	pop	r0
 3fe:	cf 91       	pop	r28
 400:	df 91       	pop	r29
 402:	0f 91       	pop	r16
 404:	08 95       	ret

00000406 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
 406:	66 23       	and	r22, r22
 408:	11 f4       	brne	.+4      	; 0x40e <CLKSYS_XOSC_Config+0x8>
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	01 c0       	rjmp	.+2      	; 0x410 <CLKSYS_XOSC_Config+0xa>
 40e:	90 e2       	ldi	r25, 0x20	; 32
 410:	48 2b       	or	r20, r24
 412:	94 2b       	or	r25, r20
 414:	e0 e5       	ldi	r30, 0x50	; 80
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	92 83       	std	Z+2, r25	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
 41a:	08 95       	ret

0000041c <CLKSYS_PLL_Config>:
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
 41c:	6f 71       	andi	r22, 0x1F	; 31
 41e:	68 2b       	or	r22, r24
 420:	e0 e5       	ldi	r30, 0x50	; 80
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	65 83       	std	Z+5, r22	; 0x05
}
 426:	08 95       	ret

00000428 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
 428:	e0 e5       	ldi	r30, 0x50	; 80
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	20 81       	ld	r18, Z
 42e:	98 2f       	mov	r25, r24
 430:	90 95       	com	r25
 432:	92 23       	and	r25, r18
 434:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
 436:	90 81       	ld	r25, Z
	return clkEnabled;
}
 438:	89 23       	and	r24, r25
 43a:	08 95       	ret

0000043c <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
 43c:	0f 93       	push	r16
 43e:	df 93       	push	r29
 440:	cf 93       	push	r28
 442:	0f 92       	push	r0
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 448:	9f b7       	in	r25, 0x3f	; 63
 44a:	99 83       	std	Y+1, r25	; 0x01
 44c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 44e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 450:	68 2b       	or	r22, r24
 452:	81 e4       	ldi	r24, 0x41	; 65
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	fc 01       	movw	r30, r24
 458:	08 ed       	ldi	r16, 0xD8	; 216
 45a:	04 bf       	out	0x34, r16	; 52
 45c:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	8f bf       	out	0x3f, r24	; 63
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
}
 462:	0f 90       	pop	r0
 464:	cf 91       	pop	r28
 466:	df 91       	pop	r29
 468:	0f 91       	pop	r16
 46a:	08 95       	ret

0000046c <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
 46c:	0f 93       	push	r16
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	0f 92       	push	r0
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
 478:	20 91 40 00 	lds	r18, 0x0040

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 47c:	9f b7       	in	r25, 0x3f	; 63
 47e:	99 83       	std	Y+1, r25	; 0x01
 480:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 482:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 484:	a0 e4       	ldi	r26, 0x40	; 64
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	28 7f       	andi	r18, 0xF8	; 248
 48a:	28 2b       	or	r18, r24
 48c:	fd 01       	movw	r30, r26
 48e:	08 ed       	ldi	r16, 0xD8	; 216
 490:	04 bf       	out	0x34, r16	; 52
 492:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 494:	99 81       	ldd	r25, Y+1	; 0x01
 496:	9f bf       	out	0x3f, r25	; 63
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
	CCPWrite( &CLK.CTRL, clkCtrl );
	clkCtrl = ( CLK.CTRL & clockSource );
 498:	9c 91       	ld	r25, X
	return clkCtrl;
}
 49a:	89 23       	and	r24, r25
 49c:	0f 90       	pop	r0
 49e:	cf 91       	pop	r28
 4a0:	df 91       	pop	r29
 4a2:	0f 91       	pop	r16
 4a4:	08 95       	ret

000004a6 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
 4a6:	e0 e4       	ldi	r30, 0x40	; 64
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	93 81       	ldd	r25, Z+3	; 0x03
 4ac:	91 7f       	andi	r25, 0xF1	; 241
 4ae:	91 60       	ori	r25, 0x01	; 1
 4b0:	98 2b       	or	r25, r24
 4b2:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
 4b4:	08 95       	ret

000004b6 <CLKSYS_AutoCalibration_Enable>:
 *  \param  clkSource    Clock source to calibrate, either OSC_RC2MCREF_bm or
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
 4b6:	28 2f       	mov	r18, r24
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
 4b8:	30 91 56 00 	lds	r19, 0x0056
 4bc:	66 23       	and	r22, r22
 4be:	11 f0       	breq	.+4      	; 0x4c4 <CLKSYS_AutoCalibration_Enable+0xe>
 4c0:	98 2f       	mov	r25, r24
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <CLKSYS_AutoCalibration_Enable+0x10>
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	82 2f       	mov	r24, r18
 4c8:	80 95       	com	r24
 4ca:	83 23       	and	r24, r19
 4cc:	98 2b       	or	r25, r24
 4ce:	e0 e5       	ldi	r30, 0x50	; 80
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
 4d4:	21 30       	cpi	r18, 0x01	; 1
 4d6:	31 f4       	brne	.+12     	; 0x4e4 <CLKSYS_AutoCalibration_Enable+0x2e>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
 4d8:	80 91 68 00 	lds	r24, 0x0068
 4dc:	81 60       	ori	r24, 0x01	; 1
 4de:	80 93 68 00 	sts	0x0068, r24
 4e2:	08 95       	ret
	} else if (clkSource == OSC_RC32MCREF_bm) {
 4e4:	22 30       	cpi	r18, 0x02	; 2
 4e6:	29 f4       	brne	.+10     	; 0x4f2 <CLKSYS_AutoCalibration_Enable+0x3c>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
 4e8:	80 91 60 00 	lds	r24, 0x0060
 4ec:	81 60       	ori	r24, 0x01	; 1
 4ee:	80 93 60 00 	sts	0x0060, r24
 4f2:	08 95       	ret

000004f4 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
 4f4:	0f 93       	push	r16
 4f6:	df 93       	push	r29
 4f8:	cf 93       	push	r28
 4fa:	0f 92       	push	r0
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 500:	8f b7       	in	r24, 0x3f	; 63
 502:	89 83       	std	Y+1, r24	; 0x01
 504:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 506:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 508:	23 e0       	ldi	r18, 0x03	; 3
 50a:	83 e5       	ldi	r24, 0x53	; 83
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	fc 01       	movw	r30, r24
 510:	08 ed       	ldi	r16, 0xD8	; 216
 512:	04 bf       	out	0x34, r16	; 52
 514:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 516:	89 81       	ldd	r24, Y+1	; 0x01
 518:	8f bf       	out	0x3f, r24	; 63
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
}
 51a:	0f 90       	pop	r0
 51c:	cf 91       	pop	r28
 51e:	df 91       	pop	r29
 520:	0f 91       	pop	r16
 522:	08 95       	ret

00000524 <CLKSYS_Configuration_Lock>:
 *  This will lock the configuration until the next reset, or until the
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
 524:	0f 93       	push	r16
 526:	df 93       	push	r29
 528:	cf 93       	push	r28
 52a:	0f 92       	push	r0
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
 530:	8f b7       	in	r24, 0x3f	; 63
 532:	89 83       	std	Y+1, r24	; 0x01
 534:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
 536:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	82 e4       	ldi	r24, 0x42	; 66
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	fc 01       	movw	r30, r24
 540:	08 ed       	ldi	r16, 0xD8	; 216
 542:	04 bf       	out	0x34, r16	; 52
 544:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	8f bf       	out	0x3f, r24	; 63
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
}
 54a:	0f 90       	pop	r0
 54c:	cf 91       	pop	r28
 54e:	df 91       	pop	r29
 550:	0f 91       	pop	r16
 552:	08 95       	ret

00000554 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 554:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 556:	60 83       	st	Z, r22
 558:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 55a:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 55c:	ec 5f       	subi	r30, 0xFC	; 252
 55e:	fd 4f       	sbci	r31, 0xFD	; 253
 560:	10 82       	st	Z, r1
	usart_data->buffer.RX_Head = 0;
 562:	12 92       	st	-Z, r1
	usart_data->buffer.TX_Tail = 0;
 564:	33 96       	adiw	r30, 0x03	; 3
 566:	10 82       	st	Z, r1
	usart_data->buffer.TX_Head = 0;
 568:	12 92       	st	-Z, r1
}
 56a:	08 95       	ret

0000056c <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 56c:	fc 01       	movw	r30, r24
 56e:	62 83       	std	Z+2, r22	; 0x02
}
 570:	08 95       	ret

00000572 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 572:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 574:	eb 5f       	subi	r30, 0xFB	; 251
 576:	fd 4f       	sbci	r31, 0xFD	; 253
 578:	81 91       	ld	r24, Z+
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 57a:	90 81       	ld	r25, Z
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	8f 5f       	subi	r24, 0xFF	; 255
 580:	89 13       	cpse	r24, r25
 582:	21 e0       	ldi	r18, 0x01	; 1

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
}
 584:	82 2f       	mov	r24, r18
 586:	08 95       	ret

00000588 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	dc 01       	movw	r26, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 58e:	ec 01       	movw	r28, r24
 590:	cb 5f       	subi	r28, 0xFB	; 251
 592:	dd 4f       	sbci	r29, 0xFD	; 253
 594:	88 81       	ld	r24, Y
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 596:	aa 5f       	subi	r26, 0xFA	; 250
 598:	bd 4f       	sbci	r27, 0xFD	; 253
 59a:	9c 91       	ld	r25, X
 59c:	a6 50       	subi	r26, 0x06	; 6
 59e:	b2 40       	sbci	r27, 0x02	; 2

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 5a0:	20 e0       	ldi	r18, 0x00	; 0
 5a2:	8f 5f       	subi	r24, 0xFF	; 255
 5a4:	89 17       	cp	r24, r25
 5a6:	99 f0       	breq	.+38     	; 0x5ce <USART_TXBuffer_PutByte+0x46>
 5a8:	21 e0       	ldi	r18, 0x01	; 1
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 5aa:	88 81       	ld	r24, Y
	  	TXbufPtr->TX[tempTX_Head]= data;
 5ac:	fd 01       	movw	r30, r26
 5ae:	e8 0f       	add	r30, r24
 5b0:	f1 1d       	adc	r31, r1
 5b2:	ed 5f       	subi	r30, 0xFD	; 253
 5b4:	fe 4f       	sbci	r31, 0xFE	; 254
 5b6:	60 83       	st	Z, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 5b8:	8f 5f       	subi	r24, 0xFF	; 255
 5ba:	88 83       	st	Y, r24

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 5bc:	ed 91       	ld	r30, X+
 5be:	fc 91       	ld	r31, X
 5c0:	11 97       	sbiw	r26, 0x01	; 1
 5c2:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 5c4:	8c 7f       	andi	r24, 0xFC	; 252
 5c6:	12 96       	adiw	r26, 0x02	; 2
 5c8:	9c 91       	ld	r25, X
 5ca:	89 2b       	or	r24, r25
		usart_data->usart->CTRLA = tempCTRLA;
 5cc:	83 83       	std	Z+3, r24	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 5ce:	82 2f       	mov	r24, r18
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
 5d6:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 5d8:	ed 5f       	subi	r30, 0xFD	; 253
 5da:	fd 4f       	sbci	r31, 0xFD	; 253
 5dc:	91 91       	ld	r25, Z+
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 5de:	80 81       	ld	r24, Z
 5e0:	20 e0       	ldi	r18, 0x00	; 0
 5e2:	98 13       	cpse	r25, r24
 5e4:	21 e0       	ldi	r18, 0x01	; 1

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
}
 5e6:	82 2f       	mov	r24, r18
 5e8:	08 95       	ret

000005ea <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 5ea:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 5ec:	dc 01       	movw	r26, r24
 5ee:	ac 5f       	subi	r26, 0xFC	; 252
 5f0:	bd 4f       	sbci	r27, 0xFD	; 253
 5f2:	8c 91       	ld	r24, X
 5f4:	e8 0f       	add	r30, r24
 5f6:	f1 1d       	adc	r31, r1
 5f8:	83 81       	ldd	r24, Z+3	; 0x03

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 5fa:	9c 91       	ld	r25, X
 5fc:	9f 5f       	subi	r25, 0xFF	; 255
 5fe:	9c 93       	st	X, r25

	return ans;
}
 600:	08 95       	ret

00000602 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 608:	ec 01       	movw	r28, r24
 60a:	cd 5f       	subi	r28, 0xFD	; 253
 60c:	dd 4f       	sbci	r29, 0xFD	; 253
 60e:	98 81       	ld	r25, Y
 610:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 612:	ac 5f       	subi	r26, 0xFC	; 252
 614:	bd 4f       	sbci	r27, 0xFD	; 253
 616:	8c 91       	ld	r24, X
 618:	a4 50       	subi	r26, 0x04	; 4
 61a:	b2 40       	sbci	r27, 0x02	; 2
	uint8_t data = usart_data->usart->DATA;
 61c:	ed 91       	ld	r30, X+
 61e:	fc 91       	ld	r31, X
 620:	11 97       	sbiw	r26, 0x01	; 1
 622:	e0 81       	ld	r30, Z

	if (tempRX_Head == tempRX_Tail) {
 624:	98 17       	cp	r25, r24
 626:	11 f4       	brne	.+4      	; 0x62c <USART_RXComplete+0x2a>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	07 c0       	rjmp	.+14     	; 0x63a <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 62c:	88 81       	ld	r24, Y
 62e:	a8 0f       	add	r26, r24
 630:	b1 1d       	adc	r27, r1
 632:	13 96       	adiw	r26, 0x03	; 3
 634:	ec 93       	st	X, r30
		usart_data->buffer.RX_Head = tempRX_Head;
 636:	98 83       	st	Y, r25
 638:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ans;
}
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 646:	ec 01       	movw	r28, r24
 648:	ca 5f       	subi	r28, 0xFA	; 250
 64a:	dd 4f       	sbci	r29, 0xFD	; 253
 64c:	98 81       	ld	r25, Y
	if (bufPtr->TX_Head == tempTX_Tail){
 64e:	eb 5f       	subi	r30, 0xFB	; 251
 650:	fd 4f       	sbci	r31, 0xFD	; 253
 652:	80 81       	ld	r24, Z
 654:	e5 50       	subi	r30, 0x05	; 5
 656:	f2 40       	sbci	r31, 0x02	; 2
 658:	a0 81       	ld	r26, Z
 65a:	b1 81       	ldd	r27, Z+1	; 0x01
 65c:	89 17       	cp	r24, r25
 65e:	39 f4       	brne	.+14     	; 0x66e <USART_DataRegEmpty+0x2e>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 660:	13 96       	adiw	r26, 0x03	; 3
 662:	8c 91       	ld	r24, X
 664:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 666:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 668:	13 96       	adiw	r26, 0x03	; 3
 66a:	8c 93       	st	X, r24
 66c:	0a c0       	rjmp	.+20     	; 0x682 <USART_DataRegEmpty+0x42>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 66e:	88 81       	ld	r24, Y
 670:	e8 0f       	add	r30, r24
 672:	f1 1d       	adc	r31, r1
 674:	ed 5f       	subi	r30, 0xFD	; 253
 676:	fe 4f       	sbci	r31, 0xFE	; 254
 678:	80 81       	ld	r24, Z
		usart_data->usart->DATA = data;
 67a:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 67c:	88 81       	ld	r24, Y
 67e:	8f 5f       	subi	r24, 0xFF	; 255
 680:	88 83       	st	Y, r24
	}
}
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	08 95       	ret

00000688 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 688:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
 68a:	70 ff       	sbrs	r23, 0
 68c:	03 c0       	rjmp	.+6      	; 0x694 <USART_NineBits_PutChar+0xc>
		usart->CTRLB |= USART_TXB8_bm;
 68e:	84 81       	ldd	r24, Z+4	; 0x04
 690:	81 60       	ori	r24, 0x01	; 1
 692:	02 c0       	rjmp	.+4      	; 0x698 <USART_NineBits_PutChar+0x10>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 694:	84 81       	ldd	r24, Z+4	; 0x04
 696:	8e 7f       	andi	r24, 0xFE	; 254
 698:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 69a:	60 83       	st	Z, r22
}
 69c:	08 95       	ret

0000069e <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 69e:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 6a0:	84 81       	ldd	r24, Z+4	; 0x04
 6a2:	80 ff       	sbrs	r24, 0
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <USART_NineBits_GetChar+0x12>
		return(0x0100 | usart->DATA);
 6a6:	80 81       	ld	r24, Z
 6a8:	28 2f       	mov	r18, r24
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	31 60       	ori	r19, 0x01	; 1
 6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <USART_NineBits_GetChar+0x18>
	}else {
		return(usart->DATA);
 6b0:	80 81       	ld	r24, Z
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
	}
}
 6b6:	c9 01       	movw	r24, r18
 6b8:	08 95       	ret

000006ba <_exit>:
 6ba:	f8 94       	cli

000006bc <__stop_program>:
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <__stop_program>
