
FRAM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  0000059a  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00802008  00802008  00000636  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000184  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ce3  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003a5  00000000  00000000  000014dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e3  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a8  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000032e  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000292e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  68:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  8c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  90:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  94:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  98:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  9c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  fc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 100:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 104:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 108:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 10c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 110:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 114:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 118:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 11c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 120:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 124:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 128:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 12c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 130:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 134:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 138:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 13c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 140:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 144:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 148:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 14c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 150:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 154:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 158:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 15c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 160:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 164:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 168:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 16c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 170:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 174:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 178:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 17c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 180:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 184:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 188:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 18c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 190:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 194:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 198:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 19c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ac:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_107>
 1b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ea e9       	ldi	r30, 0x9A	; 154
 214:	f5 e0       	ldi	r31, 0x05	; 5
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a8 30       	cpi	r26, 0x08	; 8
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	10 e2       	ldi	r17, 0x20	; 32
 22a:	a8 e0       	ldi	r26, 0x08	; 8
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a2 32       	cpi	r26, 0x22	; 34
 234:	b1 07       	cpc	r27, r17
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
 23c:	0c 94 cb 02 	jmp	0x596	; 0x596 <_exit>

00000240 <__bad_interrupt>:
 240:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000244 <__vector_107>:
		while(1);
}

/*! TWIF Master Interrupt vector. */
ISR(TWIF_TWIM_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	08 b6       	in	r0, 0x38	; 56
 24e:	0f 92       	push	r0
 250:	09 b6       	in	r0, 0x39	; 57
 252:	0f 92       	push	r0
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	18 be       	out	0x38, r1	; 56
 25c:	19 be       	out	0x39, r1	; 57
 25e:	1b be       	out	0x3b, r1	; 59
 260:	2f 93       	push	r18
 262:	3f 93       	push	r19
 264:	4f 93       	push	r20
 266:	5f 93       	push	r21
 268:	6f 93       	push	r22
 26a:	7f 93       	push	r23
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 278:	89 e0       	ldi	r24, 0x09	; 9
 27a:	90 e2       	ldi	r25, 0x20	; 32
 27c:	0e 94 a4 02 	call	0x548	; 0x548 <TWI_MasterInterruptHandler>
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	09 be       	out	0x39, r0	; 57
 2a0:	0f 90       	pop	r0
 2a2:	08 be       	out	0x38, r0	; 56
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <main>:
 *  Example code that reads the key pressed and show a value from the buffer,
 *  sends the value to the slave and read back the processed value which will
 *  be inverted and displayed after key release.
 */
int main(void)
{
 2ae:	0f 93       	push	r16

	/* Initialize TWI master. */
	TWI_MasterInit(&twiMaster,
 2b0:	89 e0       	ldi	r24, 0x09	; 9
 2b2:	90 e2       	ldi	r25, 0x20	; 32
 2b4:	60 eb       	ldi	r22, 0xB0	; 176
 2b6:	74 e0       	ldi	r23, 0x04	; 4
 2b8:	40 e4       	ldi	r20, 0x40	; 64
 2ba:	25 e0       	ldi	r18, 0x05	; 5
 2bc:	0e 94 9f 01 	call	0x33e	; 0x33e <TWI_MasterInit>
	               TWI_MASTER_INTLVL_LO_gc,
	               TWI_BAUDSETTING);


	/* Enable LO interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 2c0:	80 91 a2 00 	lds	r24, 0x00A2
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	e0 ea       	ldi	r30, 0xA0	; 160
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	82 83       	std	Z+2, r24	; 0x02
	sei();
 2cc:	78 94       	sei

		TWI_MasterWriteRead(&twiMaster,
 2ce:	89 e0       	ldi	r24, 0x09	; 9
 2d0:	90 e2       	ldi	r25, 0x20	; 32
 2d2:	60 e5       	ldi	r22, 0x50	; 80
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	50 e2       	ldi	r21, 0x20	; 32
 2d8:	28 e0       	ldi	r18, 0x08	; 8
 2da:	00 e0       	ldi	r16, 0x00	; 0
 2dc:	0e 94 ba 01 	call	0x374	; 0x374 <TWI_MasterWriteRead>
		                    FM24C_ADDR,
		                    sendBuffer,
		                    NUM_BYTES,
		                    0);

		while (twiMaster.status != TWIM_STATUS_READY) {
 2e0:	80 91 20 20 	lds	r24, 0x2020
 2e4:	88 23       	and	r24, r24
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x32>
			/* Wait until transaction is complete. */
		}
		

		TWI_MasterWriteRead(&twiMaster,
 2e8:	89 e0       	ldi	r24, 0x09	; 9
 2ea:	90 e2       	ldi	r25, 0x20	; 32
 2ec:	60 e5       	ldi	r22, 0x50	; 80
 2ee:	48 e0       	ldi	r20, 0x08	; 8
 2f0:	50 e2       	ldi	r21, 0x20	; 32
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	07 e0       	ldi	r16, 0x07	; 7
 2f6:	0e 94 ba 01 	call	0x374	; 0x374 <TWI_MasterWriteRead>
		                    FM24C_ADDR,
		                    &address,
		                    1,
		                    7);
		while (twiMaster.status != TWIM_STATUS_READY) {
 2fa:	80 91 20 20 	lds	r24, 0x2020
 2fe:	88 23       	and	r24, r24
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x4c>
			/* Wait until transaction is complete. */
		}

		PORTC.DIR = 0xFF;
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	80 93 40 06 	sts	0x0640, r24
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
		for(uint8_t n=0;n<7;n++)
		{
			PORTC.OUT = ~twiMaster.readData[n];
 30c:	a0 e4       	ldi	r26, 0x40	; 64
 30e:	b6 e0       	ldi	r27, 0x06	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 310:	42 e3       	ldi	r20, 0x32	; 50
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	e7 5f       	subi	r30, 0xF7	; 247
 318:	ff 4d       	sbci	r31, 0xDF	; 223
 31a:	83 85       	ldd	r24, Z+11	; 0x0b
 31c:	80 95       	com	r24
 31e:	14 96       	adiw	r26, 0x04	; 4
 320:	8c 93       	st	X, r24
 322:	14 97       	sbiw	r26, 0x04	; 4
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	97 e2       	ldi	r25, 0x27	; 39
 328:	fa 01       	movw	r30, r20
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <main+0x7c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 32e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 330:	d9 f7       	brne	.-10     	; 0x328 <main+0x7a>
 332:	2f 5f       	subi	r18, 0xFF	; 255
 334:	3f 4f       	sbci	r19, 0xFF	; 255
		while (twiMaster.status != TWIM_STATUS_READY) {
			/* Wait until transaction is complete. */
		}

		PORTC.DIR = 0xFF;
		for(uint8_t n=0;n<7;n++)
 336:	27 30       	cpi	r18, 0x07	; 7
 338:	31 05       	cpc	r19, r1
 33a:	61 f7       	brne	.-40     	; 0x314 <main+0x66>
 33c:	ff cf       	rjmp	.-2      	; 0x33c <main+0x8e>

0000033e <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
 33e:	dc 01       	movw	r26, r24
 340:	fb 01       	movw	r30, r22
	twi->interface = module;
 342:	6d 93       	st	X+, r22
 344:	7c 93       	st	X, r23
 346:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
 348:	48 63       	ori	r20, 0x38	; 56
 34a:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
 34c:	ed 91       	ld	r30, X+
 34e:	fc 91       	ld	r31, X
 350:	11 97       	sbiw	r26, 0x01	; 1
 352:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
 354:	ed 91       	ld	r30, X+
 356:	fc 91       	ld	r31, X
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	84 83       	std	Z+4, r24	; 0x04
}
 35c:	08 95       	ret

0000035e <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
 35e:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS &
 360:	01 90       	ld	r0, Z+
 362:	f0 81       	ld	r31, Z
 364:	e0 2d       	mov	r30, r0
 366:	84 81       	ldd	r24, Z+4	; 0x04
	                                      TWI_MASTER_BUSSTATE_gm);
	return twi_status;
}
 368:	83 70       	andi	r24, 0x03	; 3
 36a:	08 95       	ret

0000036c <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
 36c:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status & TWIM_STATUS_READY);
 36e:	87 89       	ldd	r24, Z+23	; 0x17
	return twi_status;
}
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret

00000374 <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
 374:	0f 93       	push	r16
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	dc 01       	movw	r26, r24
 37c:	72 2f       	mov	r23, r18
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
 37e:	29 30       	cpi	r18, 0x09	; 9
 380:	08 f0       	brcs	.+2      	; 0x384 <TWI_MasterWriteRead+0x10>
 382:	44 c0       	rjmp	.+136    	; 0x40c <TWI_MasterWriteRead+0x98>
		return false;
	}
	if (bytesToRead > TWIM_READ_BUFFER_SIZE) {
 384:	09 30       	cpi	r16, 0x09	; 9
 386:	08 f0       	brcs	.+2      	; 0x38a <TWI_MasterWriteRead+0x16>
 388:	41 c0       	rjmp	.+130    	; 0x40c <TWI_MasterWriteRead+0x98>
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) {
 38a:	57 96       	adiw	r26, 0x17	; 23
 38c:	8c 91       	ld	r24, X
 38e:	57 97       	sbiw	r26, 0x17	; 23
 390:	88 23       	and	r24, r24
 392:	e1 f5       	brne	.+120    	; 0x40c <TWI_MasterWriteRead+0x98>

		twi->status = TWIM_STATUS_BUSY;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	57 96       	adiw	r26, 0x17	; 23
 398:	8c 93       	st	X, r24
 39a:	57 97       	sbiw	r26, 0x17	; 23
		twi->result = TWIM_RESULT_UNKNOWN;
 39c:	58 96       	adiw	r26, 0x18	; 24
 39e:	1c 92       	st	X, r1
 3a0:	58 97       	sbiw	r26, 0x18	; 24

		twi->address = address<<1;
 3a2:	66 0f       	add	r22, r22
 3a4:	12 96       	adiw	r26, 0x02	; 2
 3a6:	6c 93       	st	X, r22
 3a8:	12 97       	sbiw	r26, 0x02	; 2
 3aa:	ea 01       	movw	r28, r20
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <TWI_MasterWriteRead+0x4c>

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
			twi->writeData[bufferIndex] = writeData[bufferIndex];
 3b2:	89 91       	ld	r24, Y+
 3b4:	fd 01       	movw	r30, r26
 3b6:	e2 0f       	add	r30, r18
 3b8:	f3 1f       	adc	r31, r19
 3ba:	83 83       	std	Z+3, r24	; 0x03
 3bc:	2f 5f       	subi	r18, 0xFF	; 255
 3be:	3f 4f       	sbci	r19, 0xFF	; 255
		twi->result = TWIM_RESULT_UNKNOWN;

		twi->address = address<<1;

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
 3c0:	27 17       	cp	r18, r23
 3c2:	b8 f3       	brcs	.-18     	; 0x3b2 <TWI_MasterWriteRead+0x3e>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
		}

		twi->bytesToWrite = bytesToWrite;
 3c4:	53 96       	adiw	r26, 0x13	; 19
 3c6:	7c 93       	st	X, r23
 3c8:	53 97       	sbiw	r26, 0x13	; 19
		twi->bytesToRead = bytesToRead;
 3ca:	54 96       	adiw	r26, 0x14	; 20
 3cc:	0c 93       	st	X, r16
 3ce:	54 97       	sbiw	r26, 0x14	; 20
		twi->bytesWritten = 0;
 3d0:	55 96       	adiw	r26, 0x15	; 21
 3d2:	1c 92       	st	X, r1
 3d4:	55 97       	sbiw	r26, 0x15	; 21
		twi->bytesRead = 0;
 3d6:	56 96       	adiw	r26, 0x16	; 22
 3d8:	1c 92       	st	X, r1
 3da:	56 97       	sbiw	r26, 0x16	; 22

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
 3dc:	53 96       	adiw	r26, 0x13	; 19
 3de:	8c 91       	ld	r24, X
 3e0:	53 97       	sbiw	r26, 0x13	; 19
 3e2:	88 23       	and	r24, r24
 3e4:	29 f0       	breq	.+10     	; 0x3f0 <TWI_MasterWriteRead+0x7c>
			uint8_t writeAddress = twi->address & ~0x01;
 3e6:	12 96       	adiw	r26, 0x02	; 2
 3e8:	8c 91       	ld	r24, X
 3ea:	12 97       	sbiw	r26, 0x02	; 2
 3ec:	8e 7f       	andi	r24, 0xFE	; 254
 3ee:	09 c0       	rjmp	.+18     	; 0x402 <TWI_MasterWriteRead+0x8e>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
 3f0:	54 96       	adiw	r26, 0x14	; 20
 3f2:	8c 91       	ld	r24, X
 3f4:	54 97       	sbiw	r26, 0x14	; 20
 3f6:	88 23       	and	r24, r24
 3f8:	39 f0       	breq	.+14     	; 0x408 <TWI_MasterWriteRead+0x94>
			uint8_t readAddress = twi->address | 0x01;
 3fa:	12 96       	adiw	r26, 0x02	; 2
 3fc:	8c 91       	ld	r24, X
 3fe:	12 97       	sbiw	r26, 0x02	; 2
 400:	81 60       	ori	r24, 0x01	; 1
			twi->interface->MASTER.ADDR = readAddress;
 402:	ed 91       	ld	r30, X+
 404:	fc 91       	ld	r31, X
 406:	86 83       	std	Z+6, r24	; 0x06
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	01 c0       	rjmp	.+2      	; 0x40e <TWI_MasterWriteRead+0x9a>
 40c:	80 e0       	ldi	r24, 0x00	; 0
		}
		return true;
	} else {
		return false;
	}
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
 416:	0f 93       	push	r16
 418:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	0e 94 ba 01 	call	0x374	; 0x374 <TWI_MasterWriteRead>
	return twi_status;
}
 424:	0f 91       	pop	r16
 426:	08 95       	ret

00000428 <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
 428:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
 42a:	00 e0       	ldi	r16, 0x00	; 0
 42c:	0e 94 ba 01 	call	0x374	; 0x374 <TWI_MasterWriteRead>
	return twi_status;
}
 430:	0f 91       	pop	r16
 432:	08 95       	ret

00000434 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
 434:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 436:	ed 91       	ld	r30, X+
 438:	fc 91       	ld	r31, X
 43a:	11 97       	sbiw	r26, 0x01	; 1
 43c:	94 81       	ldd	r25, Z+4	; 0x04

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
 43e:	92 ff       	sbrs	r25, 2
 440:	02 c0       	rjmp	.+4      	; 0x446 <TWI_MasterArbitrationLostBusErrorHandler+0x12>
		twi->result = TWIM_RESULT_BUS_ERROR;
 442:	84 e0       	ldi	r24, 0x04	; 4
 444:	01 c0       	rjmp	.+2      	; 0x448 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	58 96       	adiw	r26, 0x18	; 24
 44a:	8c 93       	st	X, r24
 44c:	58 97       	sbiw	r26, 0x18	; 24
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
 44e:	ed 91       	ld	r30, X+
 450:	fc 91       	ld	r31, X
 452:	11 97       	sbiw	r26, 0x01	; 1
 454:	98 60       	ori	r25, 0x08	; 8
 456:	94 83       	std	Z+4, r25	; 0x04

	twi->status = TWIM_STATUS_READY;
 458:	57 96       	adiw	r26, 0x17	; 23
 45a:	1c 92       	st	X, r1
}
 45c:	08 95       	ret

0000045e <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	dc 01       	movw	r26, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
 464:	53 96       	adiw	r26, 0x13	; 19
 466:	9c 91       	ld	r25, X
 468:	53 97       	sbiw	r26, 0x13	; 19
	uint8_t bytesToRead   = twi->bytesToRead;
 46a:	54 96       	adiw	r26, 0x14	; 20
 46c:	2c 91       	ld	r18, X
 46e:	54 97       	sbiw	r26, 0x14	; 20

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
 470:	cd 91       	ld	r28, X+
 472:	dc 91       	ld	r29, X
 474:	11 97       	sbiw	r26, 0x01	; 1
 476:	8c 81       	ldd	r24, Y+4	; 0x04
 478:	84 ff       	sbrs	r24, 4
 47a:	04 c0       	rjmp	.+8      	; 0x484 <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 47c:	83 e0       	ldi	r24, 0x03	; 3
 47e:	8b 83       	std	Y+3, r24	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
 480:	85 e0       	ldi	r24, 0x05	; 5
 482:	21 c0       	rjmp	.+66     	; 0x4c6 <TWI_MasterWriteHandler+0x68>
		twi->status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
 484:	55 96       	adiw	r26, 0x15	; 21
 486:	8c 91       	ld	r24, X
 488:	55 97       	sbiw	r26, 0x15	; 21
 48a:	89 17       	cp	r24, r25
 48c:	78 f4       	brcc	.+30     	; 0x4ac <TWI_MasterWriteHandler+0x4e>
		uint8_t data = twi->writeData[twi->bytesWritten];
 48e:	55 96       	adiw	r26, 0x15	; 21
 490:	8c 91       	ld	r24, X
 492:	55 97       	sbiw	r26, 0x15	; 21
 494:	fd 01       	movw	r30, r26
 496:	e8 0f       	add	r30, r24
 498:	f1 1d       	adc	r31, r1
 49a:	83 81       	ldd	r24, Z+3	; 0x03
		twi->interface->MASTER.DATA = data;
 49c:	8f 83       	std	Y+7, r24	; 0x07
		++twi->bytesWritten;
 49e:	55 96       	adiw	r26, 0x15	; 21
 4a0:	8c 91       	ld	r24, X
 4a2:	55 97       	sbiw	r26, 0x15	; 21
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	55 96       	adiw	r26, 0x15	; 21
 4a8:	8c 93       	st	X, r24
 4aa:	12 c0       	rjmp	.+36     	; 0x4d0 <TWI_MasterWriteHandler+0x72>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
 4ac:	56 96       	adiw	r26, 0x16	; 22
 4ae:	8c 91       	ld	r24, X
 4b0:	56 97       	sbiw	r26, 0x16	; 22
 4b2:	82 17       	cp	r24, r18
 4b4:	28 f4       	brcc	.+10     	; 0x4c0 <TWI_MasterWriteHandler+0x62>
		uint8_t readAddress = twi->address | 0x01;
 4b6:	12 96       	adiw	r26, 0x02	; 2
 4b8:	8c 91       	ld	r24, X
 4ba:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
 4bc:	8e 83       	std	Y+6, r24	; 0x06
 4be:	08 c0       	rjmp	.+16     	; 0x4d0 <TWI_MasterWriteHandler+0x72>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 4c0:	83 e0       	ldi	r24, 0x03	; 3
 4c2:	8b 83       	std	Y+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	58 96       	adiw	r26, 0x18	; 24
 4c8:	8c 93       	st	X, r24
 4ca:	58 97       	sbiw	r26, 0x18	; 24
	twi->status = TWIM_STATUS_READY;
 4cc:	57 96       	adiw	r26, 0x17	; 23
 4ce:	1c 92       	st	X, r1
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
 4d6:	dc 01       	movw	r26, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
 4d8:	56 96       	adiw	r26, 0x16	; 22
 4da:	8c 91       	ld	r24, X
 4dc:	56 97       	sbiw	r26, 0x16	; 22
 4de:	ed 91       	ld	r30, X+
 4e0:	fc 91       	ld	r31, X
 4e2:	11 97       	sbiw	r26, 0x01	; 1
 4e4:	88 30       	cpi	r24, 0x08	; 8
 4e6:	80 f4       	brcc	.+32     	; 0x508 <TWI_MasterReadHandler+0x32>
		uint8_t data = twi->interface->MASTER.DATA;
 4e8:	97 81       	ldd	r25, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
 4ea:	56 96       	adiw	r26, 0x16	; 22
 4ec:	8c 91       	ld	r24, X
 4ee:	56 97       	sbiw	r26, 0x16	; 22
 4f0:	fd 01       	movw	r30, r26
 4f2:	e8 0f       	add	r30, r24
 4f4:	f1 1d       	adc	r31, r1
 4f6:	93 87       	std	Z+11, r25	; 0x0b
		twi->bytesRead++;
 4f8:	56 96       	adiw	r26, 0x16	; 22
 4fa:	8c 91       	ld	r24, X
 4fc:	56 97       	sbiw	r26, 0x16	; 22
 4fe:	8f 5f       	subi	r24, 0xFF	; 255
 500:	56 96       	adiw	r26, 0x16	; 22
 502:	8c 93       	st	X, r24
 504:	56 97       	sbiw	r26, 0x16	; 22
 506:	09 c0       	rjmp	.+18     	; 0x51a <TWI_MasterReadHandler+0x44>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 508:	83 e0       	ldi	r24, 0x03	; 3
 50a:	83 83       	std	Z+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	58 96       	adiw	r26, 0x18	; 24
 510:	8c 93       	st	X, r24
 512:	58 97       	sbiw	r26, 0x18	; 24
	twi->status = TWIM_STATUS_READY;
 514:	57 96       	adiw	r26, 0x17	; 23
 516:	1c 92       	st	X, r1
 518:	57 97       	sbiw	r26, 0x17	; 23
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
 51a:	54 96       	adiw	r26, 0x14	; 20
 51c:	9c 91       	ld	r25, X
 51e:	54 97       	sbiw	r26, 0x14	; 20

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
 520:	56 96       	adiw	r26, 0x16	; 22
 522:	8c 91       	ld	r24, X
 524:	56 97       	sbiw	r26, 0x16	; 22
 526:	ed 91       	ld	r30, X+
 528:	fc 91       	ld	r31, X
 52a:	11 97       	sbiw	r26, 0x01	; 1
 52c:	89 17       	cp	r24, r25
 52e:	18 f4       	brcc	.+6      	; 0x536 <TWI_MasterReadHandler+0x60>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	83 83       	std	Z+3, r24	; 0x03
 534:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
 536:	87 e0       	ldi	r24, 0x07	; 7
 538:	83 83       	std	Z+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	58 96       	adiw	r26, 0x18	; 24
 53e:	8c 93       	st	X, r24
 540:	58 97       	sbiw	r26, 0x18	; 24
	twi->status = TWIM_STATUS_READY;
 542:	57 96       	adiw	r26, 0x17	; 23
 544:	1c 92       	st	X, r1
 546:	08 95       	ret

00000548 <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
 548:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 54a:	ed 91       	ld	r30, X+
 54c:	fc 91       	ld	r31, X
 54e:	11 97       	sbiw	r26, 0x01	; 1
 550:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
 552:	24 2f       	mov	r18, r20
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	c9 01       	movw	r24, r18
 558:	8c 70       	andi	r24, 0x0C	; 12
 55a:	90 70       	andi	r25, 0x00	; 0
 55c:	89 2b       	or	r24, r25
 55e:	21 f0       	breq	.+8      	; 0x568 <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
 560:	cd 01       	movw	r24, r26
 562:	0e 94 1a 02 	call	0x434	; 0x434 <TWI_MasterArbitrationLostBusErrorHandler>
 566:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
 568:	46 ff       	sbrs	r20, 6
 56a:	04 c0       	rjmp	.+8      	; 0x574 <TWI_MasterInterruptHandler+0x2c>
		TWI_MasterWriteHandler(twi);
 56c:	cd 01       	movw	r24, r26
 56e:	0e 94 2f 02 	call	0x45e	; 0x45e <TWI_MasterWriteHandler>
 572:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
 574:	47 ff       	sbrs	r20, 7
 576:	04 c0       	rjmp	.+8      	; 0x580 <TWI_MasterInterruptHandler+0x38>
		TWI_MasterReadHandler(twi);
 578:	cd 01       	movw	r24, r26
 57a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <TWI_MasterReadHandler>
 57e:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 580:	86 e0       	ldi	r24, 0x06	; 6
 582:	58 96       	adiw	r26, 0x18	; 24
 584:	8c 93       	st	X, r24
 586:	58 97       	sbiw	r26, 0x18	; 24
	twi->status = TWIM_STATUS_READY;
 588:	57 96       	adiw	r26, 0x17	; 23
 58a:	1c 92       	st	X, r1
 58c:	08 95       	ret

0000058e <TWI_MasterTransactionFinished>:
 *
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
 58e:	fc 01       	movw	r30, r24
	twi->result = result;
 590:	60 8f       	std	Z+24, r22	; 0x18
	twi->status = TWIM_STATUS_READY;
 592:	17 8a       	std	Z+23, r1	; 0x17
}
 594:	08 95       	ret

00000596 <_exit>:
 596:	f8 94       	cli

00000598 <__stop_program>:
 598:	ff cf       	rjmp	.-2      	; 0x598 <__stop_program>
