
SDRAM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000434  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000075  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000c5a  00000000  00000000  0000053d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e8  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002fd  00000000  00000000  0000137f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000b7d  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000232  00000000  00000000  00002269  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  10:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  14:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  18:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  1c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  20:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  24:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  28:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  2c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  30:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  34:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  38:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  3c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  40:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  44:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  48:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  4c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  50:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  54:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  58:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  5c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  60:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  64:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  68:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  6c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  70:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  74:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  78:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  7c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  80:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  84:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  88:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  8c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  90:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  94:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  98:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  9c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  fc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 100:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 104:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 108:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 10c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 110:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 114:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 118:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 11c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 120:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 124:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 128:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 12c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 130:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 134:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 138:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 13c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 140:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 144:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 148:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 14c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 150:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 154:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 158:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 15c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 160:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 164:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 168:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 16c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 170:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 174:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 178:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 17c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 180:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 184:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 188:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 18c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 190:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 194:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 198:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 19c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e4 e3       	ldi	r30, 0x34	; 52
 214:	f4 e0       	ldi	r31, 0x04	; 4
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59
 228:	0e 94 b2 01 	call	0x364	; 0x364 <main>
 22c:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

00000230 <__bad_interrupt>:
 230:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000234 <EBI_Enable>:
                 EBI_LPCMODE_t lpcMode,
                 EBI_SRMODE_t sramMode,
                 EBI_IFMODE_t interfaceMode )
{
	/* These fields fill up the whole register, so we don't have to protect any bits with masks. */
	EBI.CTRL = (uint8_t) sdramDataWidth | lpcMode | sramMode | interfaceMode;
 234:	68 2b       	or	r22, r24
 236:	64 2b       	or	r22, r20
 238:	62 2b       	or	r22, r18
 23a:	60 93 40 04 	sts	0x0440, r22
}
 23e:	08 95       	ret

00000240 <EBI_EnableSRAM>:
 */
void EBI_EnableSRAM( volatile EBI_CS_t * chipSelect,
                     EBI_CS_ASPACE_t addrSpace,
                     void * baseAddr,
                     uint8_t waitStateCycles )
{
 240:	fc 01       	movw	r30, r24
	/* Configure SRAM settings. */
	chipSelect->CTRLB = (chipSelect->CTRLB & ~EBI_CS_SRWS_gm) |
 242:	81 81       	ldd	r24, Z+1	; 0x01
 244:	27 70       	andi	r18, 0x07	; 7
 246:	88 7f       	andi	r24, 0xF8	; 248
 248:	82 2b       	or	r24, r18
 24a:	81 83       	std	Z+1, r24	; 0x01
	                    (waitStateCycles & EBI_CS_SRWS_gm); /* Truncate too large values. */

	/* Truncate the base address to an address space boundary. */
	chipSelect->BASEADDR = (((uint16_t) baseAddr)>>8) & (0xFFFF<<(addrSpace>>2));
 24c:	86 2f       	mov	r24, r22
 24e:	86 95       	lsr	r24
 250:	86 95       	lsr	r24
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	3f ef       	ldi	r19, 0xFF	; 255
 256:	02 c0       	rjmp	.+4      	; 0x25c <EBI_EnableSRAM+0x1c>
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	8a 95       	dec	r24
 25e:	e2 f7       	brpl	.-8      	; 0x258 <EBI_EnableSRAM+0x18>
 260:	85 2f       	mov	r24, r21
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	28 23       	and	r18, r24
 266:	39 23       	and	r19, r25
 268:	22 83       	std	Z+2, r18	; 0x02
 26a:	33 83       	std	Z+3, r19	; 0x03

	/* Last part of configuration and then enable Chip Select module in SRAM mode. */
	chipSelect->CTRLA = (chipSelect->CTRLA & ~(EBI_CS_ASPACE_gm | EBI_CS_MODE_gm)) |
 26c:	80 81       	ld	r24, Z
 26e:	80 78       	andi	r24, 0x80	; 128
 270:	81 60       	ori	r24, 0x01	; 1
 272:	86 2b       	or	r24, r22
 274:	80 83       	st	Z, r24
	                    addrSpace | EBI_CS_MODE_SRAM_gc;
}
 276:	08 95       	ret

00000278 <EBI_EnableLPC>:
 */
void EBI_EnableLPC( volatile EBI_CS_t * chipSelect,
                    EBI_CS_ASPACE_t addrSpace,
                    void * baseAddr,
                    uint8_t waitStateCycles )
{
 278:	fc 01       	movw	r30, r24
	/* Configure SRAM LPC settings. */
	chipSelect->CTRLB = (chipSelect->CTRLB & ~EBI_CS_SRWS_gm) |
 27a:	81 81       	ldd	r24, Z+1	; 0x01
 27c:	27 70       	andi	r18, 0x07	; 7
 27e:	88 7f       	andi	r24, 0xF8	; 248
 280:	82 2b       	or	r24, r18
 282:	81 83       	std	Z+1, r24	; 0x01
	                    (waitStateCycles & EBI_CS_SRWS_gm); /* Truncate too large values. */

	/* Truncate the base address to an address space boundary. */
	chipSelect->BASEADDR = (((uint16_t) baseAddr)>>8) & (0xFFFF<<(addrSpace>>2));
 284:	86 2f       	mov	r24, r22
 286:	86 95       	lsr	r24
 288:	86 95       	lsr	r24
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	3f ef       	ldi	r19, 0xFF	; 255
 28e:	02 c0       	rjmp	.+4      	; 0x294 <EBI_EnableLPC+0x1c>
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	8a 95       	dec	r24
 296:	e2 f7       	brpl	.-8      	; 0x290 <EBI_EnableLPC+0x18>
 298:	85 2f       	mov	r24, r21
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	28 23       	and	r18, r24
 29e:	39 23       	and	r19, r25
 2a0:	22 83       	std	Z+2, r18	; 0x02
 2a2:	33 83       	std	Z+3, r19	; 0x03

	/* Last part of configuration and then enable Chip Select module in SRAM LPC mode. */
	chipSelect->CTRLA = (chipSelect->CTRLA & ~(EBI_CS_ASPACE_gm | EBI_CS_MODE_gm)) |
 2a4:	80 81       	ld	r24, Z
 2a6:	80 78       	andi	r24, 0x80	; 128
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	86 2b       	or	r24, r22
 2ac:	80 83       	st	Z, r24
	                    addrSpace | EBI_CS_MODE_LPC_gc;
}
 2ae:	08 95       	ret

000002b0 <EBI_EnableSDRAM>:
                      EBI_WRDLY_t writeRecoveryDelay,
                      EBI_ESRDLY_t exitSelfRefreshToActiveDelay,
                      EBI_ROWCOLDLY_t rowToColumnDelay,
                      uint16_t refreshPeriod,
                      uint16_t initializationDelay )
{
 2b0:	8f 92       	push	r8
 2b2:	af 92       	push	r10
 2b4:	cf 92       	push	r12
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	18 2f       	mov	r17, r24
 2c8:	f7 2e       	mov	r15, r23
 2ca:	5d 85       	ldd	r21, Y+13	; 0x0d
 2cc:	af 85       	ldd	r26, Y+15	; 0x0f
 2ce:	b8 89       	ldd	r27, Y+16	; 0x10
 2d0:	69 89       	ldd	r22, Y+17	; 0x11
 2d2:	7a 89       	ldd	r23, Y+18	; 0x12
	/* Set two single-bit fields and one larger field, while protecting reserved bits. */
	EBI.SDRAMCTRLA = (EBI.SDRAMCTRLA & ~(EBI_SDCAS_bm | EBI_SDROW_bm | EBI_SDCOL_gm)) |
 2d4:	30 91 41 04 	lds	r19, 0x0441
 2d8:	44 23       	and	r20, r20
 2da:	11 f4       	brne	.+4      	; 0x2e0 <EBI_EnableSDRAM+0x30>
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <EBI_EnableSDRAM+0x32>
 2e0:	98 e0       	ldi	r25, 0x08	; 8
 2e2:	22 23       	and	r18, r18
 2e4:	11 f4       	brne	.+4      	; 0x2ea <EBI_EnableSDRAM+0x3a>
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <EBI_EnableSDRAM+0x3c>
 2ea:	84 e0       	ldi	r24, 0x04	; 4
 2ec:	30 7f       	andi	r19, 0xF0	; 240
 2ee:	30 2b       	or	r19, r16
 2f0:	93 2b       	or	r25, r19
 2f2:	89 2b       	or	r24, r25
 2f4:	e0 e4       	ldi	r30, 0x40	; 64
 2f6:	f4 e0       	ldi	r31, 0x04	; 4
 2f8:	81 83       	std	Z+1, r24	; 0x01
	                 (casLatency ? EBI_SDCAS_bm : 0) | (rowBits ? EBI_SDROW_bm : 0) | columnBits;

	/* Set delay counts. Fields fill up the entire registers. */
	EBI.SDRAMCTRLB = (uint8_t) modeRegisterDelay | rowCycleDelay | rowToPrechargeDelay;
 2fa:	ce 28       	or	r12, r14
 2fc:	ca 28       	or	r12, r10
 2fe:	c0 86       	std	Z+8, r12	; 0x08
	EBI.SDRAMCTRLC = (uint8_t) writeRecoveryDelay | exitSelfRefreshToActiveDelay | rowToColumnDelay;
 300:	58 29       	or	r21, r8
 302:	8e 85       	ldd	r24, Y+14	; 0x0e
 304:	58 2b       	or	r21, r24
 306:	51 87       	std	Z+9, r21	; 0x09

	/* Set refresh period and initialization delay, truncate too large values. */
	EBI.REFRESH = refreshPeriod & 0x03FF;
 308:	b3 70       	andi	r27, 0x03	; 3
 30a:	a4 83       	std	Z+4, r26	; 0x04
 30c:	b5 83       	std	Z+5, r27	; 0x05
	EBI.INITDLY = initializationDelay & 0x3FFF;
 30e:	7f 73       	andi	r23, 0x3F	; 63
 310:	66 83       	std	Z+6, r22	; 0x06
 312:	77 83       	std	Z+7, r23	; 0x07

	/* Last part of configuration and then enable Chip Select module in SDRAM mode. */
	EBI.CS3.CTRLB = (EBI.CS3.CTRLB & ~(EBI_CS_SDSREN_bm | EBI_CS_SDMODE_gm)) |
 314:	80 91 5d 04 	lds	r24, 0x045D
 318:	88 7f       	andi	r24, 0xF8	; 248
 31a:	85 8f       	std	Z+29, r24	; 0x1d
	                EBI_CS_SDMODE_NORMAL_gc;

	/* Truncate the base address to an address space boundary. */
	EBI.CS3.BASEADDR = (((uint16_t) baseAddr)>>8) & (0xFFFF<<(addrSpace>>2));
 31c:	81 2f       	mov	r24, r17
 31e:	86 95       	lsr	r24
 320:	86 95       	lsr	r24
 322:	2f ef       	ldi	r18, 0xFF	; 255
 324:	3f ef       	ldi	r19, 0xFF	; 255
 326:	02 c0       	rjmp	.+4      	; 0x32c <EBI_EnableSDRAM+0x7c>
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	8a 95       	dec	r24
 32e:	e2 f7       	brpl	.-8      	; 0x328 <EBI_EnableSDRAM+0x78>
 330:	8f 2d       	mov	r24, r15
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	28 23       	and	r18, r24
 336:	39 23       	and	r19, r25
 338:	26 8f       	std	Z+30, r18	; 0x1e
 33a:	37 8f       	std	Z+31, r19	; 0x1f

	EBI.CS3.CTRLA = (EBI.CS3.CTRLA & ~(EBI_CS_ASPACE_gm | EBI_CS_MODE_gm)) |
 33c:	80 91 5c 04 	lds	r24, 0x045C
 340:	80 78       	andi	r24, 0x80	; 128
 342:	83 60       	ori	r24, 0x03	; 3
 344:	81 2b       	or	r24, r17
 346:	84 8f       	std	Z+28, r24	; 0x1c
	                addrSpace | EBI_CS_MODE_SDRAM_gc;

	/* Wait for SDRAM to initialize. */
	while ((EBI.CS3.CTRLB & EBI_CS_SDINITDONE_bm) == 0){
 348:	80 91 5d 04 	lds	r24, 0x045D
 34c:	87 ff       	sbrs	r24, 7
 34e:	fc cf       	rjmp	.-8      	; 0x348 <EBI_EnableSDRAM+0x98>

	}
}
 350:	cf 91       	pop	r28
 352:	df 91       	pop	r29
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	cf 90       	pop	r12
 35e:	af 90       	pop	r10
 360:	8f 90       	pop	r8
 362:	08 95       	ret

00000364 <main>:
 *  The setup is tested by writing a set of data to the SDRAM. The data is then
 *  read back and verified. At the end, the program will be stuck in one of
 *  two infinite loops, dependent on whether the test passed or not.
 */
int main( void )
{
 364:	8f 92       	push	r8
 366:	af 92       	push	r10
 368:	cf 92       	push	r12
 36a:	ef 92       	push	r14
 36c:	0f 93       	push	r16
	/* Flag indicating correct data transfer to and from SDRAM */
	bool equal = true;

	PORTC.DIR = 0xFF;
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	80 93 40 06 	sts	0x0640, r24
	PORTC.OUT = 0xFF;
 374:	e0 e4       	ldi	r30, 0x40	; 64
 376:	f6 e0       	ldi	r31, 0x06	; 6
 378:	84 83       	std	Z+4, r24	; 0x04

	/* Set signals which are active-low to high value */
	PORTH.OUT = 0x0F;
 37a:	9f e0       	ldi	r25, 0x0F	; 15
 37c:	e0 ee       	ldi	r30, 0xE0	; 224
 37e:	f6 e0       	ldi	r31, 0x06	; 6
 380:	94 83       	std	Z+4, r25	; 0x04

	/* Configure bus pins as outputs(except for data lines). */
	PORTH.DIR = 0xFF;
 382:	80 93 e0 06 	sts	0x06E0, r24
	PORTK.DIR = 0xFF;
 386:	80 93 20 07 	sts	0x0720, r24
	PORTJ.DIR = 0xF0;
 38a:	80 ef       	ldi	r24, 0xF0	; 240
 38c:	80 93 00 07 	sts	0x0700, r24


	/* Initialize EBI. */
	EBI_Enable( EBI_SDDATAW_4BIT_gc,
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	48 e0       	ldi	r20, 0x08	; 8
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	0e 94 1a 01 	call	0x234	; 0x234 <EBI_Enable>
	            EBI_LPCMODE_ALE1_gc,
	            EBI_SRMODE_ALE12_gc,
	            EBI_IFMODE_3PORT_gc );

	/* Initialize SDRAM */
	EBI_EnableSDRAM( EBI_CS_ASPACE_8KB_gc,   /* 8 KB address space. */
 39c:	00 d0       	rcall	.+0      	; 0x39e <main+0x3a>
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <main+0x3c>
 3a0:	ed b7       	in	r30, 0x3d	; 61
 3a2:	fe b7       	in	r31, 0x3e	; 62
 3a4:	31 96       	adiw	r30, 0x01	; 1
 3a6:	88 e0       	ldi	r24, 0x08	; 8
 3a8:	ad b7       	in	r26, 0x3d	; 61
 3aa:	be b7       	in	r27, 0x3e	; 62
 3ac:	11 96       	adiw	r26, 0x01	; 1
 3ae:	8c 93       	st	X, r24
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	81 83       	std	Z+1, r24	; 0x01
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	93 e0       	ldi	r25, 0x03	; 3
 3b8:	82 83       	std	Z+2, r24	; 0x02
 3ba:	93 83       	std	Z+3, r25	; 0x03
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	84 83       	std	Z+4, r24	; 0x04
 3c2:	95 83       	std	Z+5, r25	; 0x05
 3c4:	84 e1       	ldi	r24, 0x14	; 20
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	70 e4       	ldi	r23, 0x40	; 64
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	00 e0       	ldi	r16, 0x00	; 0
 3d0:	50 e4       	ldi	r21, 0x40	; 64
 3d2:	e5 2e       	mov	r14, r21
 3d4:	38 e0       	ldi	r19, 0x08	; 8
 3d6:	c3 2e       	mov	r12, r19
 3d8:	aa 24       	eor	r10, r10
 3da:	a3 94       	inc	r10
 3dc:	90 e4       	ldi	r25, 0x40	; 64
 3de:	89 2e       	mov	r8, r25
 3e0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <EBI_EnableSDRAM>
 3e4:	e0 e0       	ldi	r30, 0x00	; 0
 3e6:	f0 e4       	ldi	r31, 0x40	; 64
 3e8:	8d b7       	in	r24, 0x3d	; 61
 3ea:	9e b7       	in	r25, 0x3e	; 62
 3ec:	06 96       	adiw	r24, 0x06	; 6
 3ee:	8d bf       	out	0x3d, r24	; 61
 3f0:	9e bf       	out	0x3e, r25	; 62
	                 0x03FF,                 /* 1023 cycle Refresh Period (32.8 ms @ 2MHz). */
	                 0x0100 );               /* 256 cycle Initialization Delay (128 us @ 2MHz). */

	/* Fill SDRAM with data. */
	for (uint16_t i= 0; i < VECTOR_SIZE; i++) {
		SDRAM(i) =  (uint8_t) i & 0xFF;
 3f2:	e0 83       	st	Z, r30
 3f4:	31 96       	adiw	r30, 0x01	; 1
	                 EBI_ROWCOLDLY_1CLK_gc,  /* 1 cycle Row to Column Delay. */
	                 0x03FF,                 /* 1023 cycle Refresh Period (32.8 ms @ 2MHz). */
	                 0x0100 );               /* 256 cycle Initialization Delay (128 us @ 2MHz). */

	/* Fill SDRAM with data. */
	for (uint16_t i= 0; i < VECTOR_SIZE; i++) {
 3f6:	93 e4       	ldi	r25, 0x43	; 67
 3f8:	e8 3e       	cpi	r30, 0xE8	; 232
 3fa:	f9 07       	cpc	r31, r25
 3fc:	d1 f7       	brne	.-12     	; 0x3f2 <main+0x8e>
 3fe:	e0 e0       	ldi	r30, 0x00	; 0
 400:	f0 e4       	ldi	r31, 0x40	; 64
		SDRAM(i) =  (uint8_t) i & 0xFF;
	}

	/* Read back from SDRAM and verify */
	for (uint16_t i = 0; i < VECTOR_SIZE; i++) {
		if (SDRAM(i) != ((uint8_t) i & 0xFF)){
 402:	80 81       	ld	r24, Z
 404:	8e 17       	cp	r24, r30
 406:	31 f4       	brne	.+12     	; 0x414 <main+0xb0>
 408:	31 96       	adiw	r30, 0x01	; 1
	for (uint16_t i= 0; i < VECTOR_SIZE; i++) {
		SDRAM(i) =  (uint8_t) i & 0xFF;
	}

	/* Read back from SDRAM and verify */
	for (uint16_t i = 0; i < VECTOR_SIZE; i++) {
 40a:	a3 e4       	ldi	r26, 0x43	; 67
 40c:	e8 3e       	cpi	r30, 0xE8	; 232
 40e:	fa 07       	cpc	r31, r26
 410:	c1 f7       	brne	.-16     	; 0x402 <main+0x9e>
 412:	09 c0       	rjmp	.+18     	; 0x426 <main+0xc2>
		/* Breakpoint for success. */
			nop();
		}
	}
	else {
	PORTC.OUT=~0x02;
 414:	8d ef       	ldi	r24, 0xFD	; 253
 416:	e0 e4       	ldi	r30, 0x40	; 64
 418:	f6 e0       	ldi	r31, 0x06	; 6
 41a:	84 83       	std	Z+4, r24	; 0x04
 41c:	02 c0       	rjmp	.+4      	; 0x422 <main+0xbe>

	if (equal) {
	PORTC.OUT=~0x01;
		while(true) {
		/* Breakpoint for success. */
			nop();
 41e:	00 00       	nop
 420:	fe cf       	rjmp	.-4      	; 0x41e <main+0xba>
	}
	else {
	PORTC.OUT=~0x02;
		while(true) {
		/* Breakpoint for failure. */
			nop();
 422:	00 00       	nop
 424:	fe cf       	rjmp	.-4      	; 0x422 <main+0xbe>
	}

	/* Report success or failure. */

	if (equal) {
	PORTC.OUT=~0x01;
 426:	8e ef       	ldi	r24, 0xFE	; 254
 428:	e0 e4       	ldi	r30, 0x40	; 64
 42a:	f6 e0       	ldi	r31, 0x06	; 6
 42c:	84 83       	std	Z+4, r24	; 0x04
 42e:	f7 cf       	rjmp	.-18     	; 0x41e <main+0xba>

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
