Interrupt Vectors
    00000 940C 003D JMP	__text_start|__start

Program Code (text area)
__text_start|__start:
    0003D E5CF      LDI	R28,0x5F
    0003E E0D4      LDI	R29,4
    0003F BFCD      OUT	0x3D,R28
    00040 BFDE      OUT	0x3E,R29
    00041 51C0      SUBI	R28,0x10
    00042 40D0      SBCI	R29,0
    00043 EA0A      LDI	R16,0xAA
    00044 8308      ST	Y,R16
    00045 2400      CLR	R0
    00046 E8E5      LDI	R30,0x85
    00047 E0F0      LDI	R31,0
    00048 E010      LDI	R17,0
    00049 38EB      CPI	R30,0x8B
    0004A 07F1      CPC	R31,R17
    0004B F011      BEQ	0x004E
    0004C 9201      ST	Z+,R0
    0004D CFFB      RJMP	0x0049
    0004E 8300      ST	Z,R16
    0004F E5E4      LDI	R30,0x54
    00050 E0F0      LDI	R31,0
    00051 E6A0      LDI	R26,0x60
    00052 E0B0      LDI	R27,0
    00053 E010      LDI	R17,0
    00054 E000      LDI	R16,0
    00055 BF0B      OUT	0x3B,R16
    00056 37E9      CPI	R30,0x79
    00057 07F1      CPC	R31,R17
    00058 F021      BEQ	0x005D
    00059 95C8      LPM
    0005A 9631      ADIW	R30,1
    0005B 920D      ST	X+,R0
    0005C CFF9      RJMP	0x0056
    0005D 940E 03F8 CALL	_main
_exit:
    0005F CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    00060 940E 041C CALL	push_arg4
    00062 940E 0501 CALL	push_xgsetF03C
    00064 9728      SBIW	R28,0x8
    00065 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00066 24AA      CLR	R10
    00067 E081      LDI	R24,1
    00068 8388      ST	Y,R24
    00069 E080      LDI	R24,0
    0006A 8389      STD	Y+1,R24
    0006B 838A      STD	Y+2,R24
    0006C 838B      STD	Y+3,R24
    0006D C03C      RJMP	0x00AA
(0120)     {
(0121)         y=dat/j;
    0006E 8028      LD	R2,Y
    0006F 8039      LDD	R3,Y+1
    00070 804A      LDD	R4,Y+2
    00071 805B      LDD	R5,Y+3
    00072 8908      LDD	R16,Y+16
    00073 8919      LDD	R17,Y+17
    00074 892A      LDD	R18,Y+18
    00075 893B      LDD	R19,Y+19
    00076 925A      ST	-Y,R5
    00077 924A      ST	-Y,R4
    00078 923A      ST	-Y,R3
    00079 922A      ST	-Y,R2
    0007A 940E 0421 CALL	div32u
    0007C 830C      STD	Y+4,R16
    0007D 831D      STD	Y+5,R17
    0007E 832E      STD	Y+6,R18
    0007F 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    00080 E04A      LDI	R20,0xA
    00081 E050      LDI	R21,0
    00082 E060      LDI	R22,0
    00083 E070      LDI	R23,0
    00084 810C      LDD	R16,Y+4
    00085 811D      LDD	R17,Y+5
    00086 812E      LDD	R18,Y+6
    00087 813F      LDD	R19,Y+7
    00088 937A      ST	-Y,R23
    00089 936A      ST	-Y,R22
    0008A 935A      ST	-Y,R21
    0008B 934A      ST	-Y,R20
    0008C 940E 0423 CALL	mod32u
    0008E E885      LDI	R24,0x85
    0008F E090      LDI	R25,0
    00090 2DEA      MOV	R30,R10
    00091 27FF      CLR	R31
    00092 0FE8      ADD	R30,R24
    00093 1FF9      ADC	R31,R25
    00094 8300      ST	Z,R16
(0123)         j*=10;
    00095 8028      LD	R2,Y
    00096 8039      LDD	R3,Y+1
    00097 804A      LDD	R4,Y+2
    00098 805B      LDD	R5,Y+3
    00099 E04A      LDI	R20,0xA
    0009A E050      LDI	R21,0
    0009B E060      LDI	R22,0
    0009C E070      LDI	R23,0
    0009D 925A      ST	-Y,R5
    0009E 924A      ST	-Y,R4
    0009F 923A      ST	-Y,R3
    000A0 922A      ST	-Y,R2
    000A1 018A      MOVW	R16,R20
    000A2 019B      MOVW	R18,R22
    000A3 940E 048B CALL	empy32u|empy32s
    000A5 8308      ST	Y,R16
    000A6 8319      STD	Y+1,R17
    000A7 832A      STD	Y+2,R18
    000A8 833B      STD	Y+3,R19
    000A9 94A3      INC	R10
    000AA 2C2C      MOV	R2,R12
    000AB 2433      CLR	R3
    000AC FC27      SBRC	R2,7
    000AD 9430      COM	R3
    000AE 2C4A      MOV	R4,R10
    000AF 2455      CLR	R5
    000B0 1442      CP	R4,R2
    000B1 0453      CPC	R5,R3
    000B2 F40C      BGE	0x00B4
    000B3 CFBA      RJMP	0x006E
    000B4 9628      ADIW	R28,0x8
    000B5 940E 050A CALL	pop_xgsetF03C
    000B7 9624      ADIW	R28,4
    000B8 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    000B9 EA84      LDI	R24,0xA4
    000BA BF86      OUT	0x36,R24
(0128) 	I2CWaitAck();
    000BB B626      IN	R2,0x36
    000BC FE27      SBRS	R2,7
    000BD CFFD      RJMP	0x00BB
(0129) 	if( I2CChkAck()!=I2C_START ) 
    000BE B181      IN	R24,0x01
    000BF 7F88      ANDI	R24,0xF8
    000C0 3088      CPI	R24,0x8
    000C1 F011      BEQ	0x00C4
(0130) 		return I2C_ERR;
    000C2 2700      CLR	R16
    000C3 C001      RJMP	0x00C5
(0131) 	return I2C_CRR;
    000C4 E001      LDI	R16,1
    000C5 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    000C6 EA84      LDI	R24,0xA4
    000C7 BF86      OUT	0x36,R24
(0144) 	I2CWaitAck();
    000C8 B626      IN	R2,0x36
    000C9 FE27      SBRS	R2,7
    000CA CFFD      RJMP	0x00C8
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    000CB B181      IN	R24,0x01
    000CC 7F88      ANDI	R24,0xF8
    000CD 3180      CPI	R24,0x10
    000CE F011      BEQ	0x00D1
(0146) 		return I2C_ERR;
    000CF 2700      CLR	R16
    000D0 C001      RJMP	0x00D2
(0147) 	return I2C_CRR;
    000D1 E001      LDI	R16,1
    000D2 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    000D3 B903      OUT	0x03,R16
    000D4 E884      LDI	R24,0x84
    000D5 BF86      OUT	0x36,R24
(0160) 	I2CWaitAck();
    000D6 B626      IN	R2,0x36
    000D7 FE27      SBRS	R2,7
    000D8 CFFD      RJMP	0x00D6
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    000D9 B181      IN	R24,0x01
    000DA 7F88      ANDI	R24,0xF8
    000DB 3188      CPI	R24,0x18
    000DC F011      BEQ	0x00DF
(0162) 		return I2C_ERR;
    000DD 2700      CLR	R16
    000DE C001      RJMP	0x00E0
(0163) 	return I2C_CRR;		
    000DF E001      LDI	R16,1
    000E0 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    000E1 92AA      ST	-Y,R10
    000E2 92BA      ST	-Y,R11
    000E3 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    000E4 FEA0      SBRS	R10,0
    000E5 C00E      RJMP	0x00F4
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    000E6 2D0A      MOV	R16,R10
    000E7 9506      LSR	R16
    000E8 9506      LSR	R16
    000E9 9506      LSR	R16
    000EA 9506      LSR	R16
    000EB 9506      LSR	R16
    000EC 9506      LSR	R16
    000ED 9506      LSR	R16
    000EE 9506      LSR	R16
    000EF DFE3      RCALL	_I2C_SendWrDAdr
    000F0 2300      TST	R16
    000F1 F411      BNE	0x00F4
(0177) 			return I2C_ERR;
    000F2 2700      CLR	R16
    000F3 C007      RJMP	0x00FB
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    000F4 2D0A      MOV	R16,R10
    000F5 DFDD      RCALL	_I2C_SendWrDAdr
    000F6 2300      TST	R16
    000F7 F411      BNE	0x00FA
(0179) 		return I2C_ERR;
    000F8 2700      CLR	R16
    000F9 C001      RJMP	0x00FB
(0180) 	return I2C_CRR;
    000FA E001      LDI	R16,1
    000FB 90B9      LD	R11,Y+
    000FC 90A9      LD	R10,Y+
    000FD 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    000FE B903      OUT	0x03,R16
    000FF E884      LDI	R24,0x84
    00100 BF86      OUT	0x36,R24
(0193) 	I2CWaitAck();
    00101 B626      IN	R2,0x36
    00102 FE27      SBRS	R2,7
    00103 CFFD      RJMP	0x0101
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    00104 B181      IN	R24,0x01
    00105 7F88      ANDI	R24,0xF8
    00106 3480      CPI	R24,0x40
    00107 F011      BEQ	0x010A
(0195) 		return I2C_ERR;
    00108 2700      CLR	R16
    00109 C001      RJMP	0x010B
(0196) 	return I2C_CRR;	
    0010A E001      LDI	R16,1
    0010B 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    0010C 92AA      ST	-Y,R10
    0010D 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    0010E FEA0      SBRS	R10,0
    0010F C00E      RJMP	0x011E
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    00110 2D0A      MOV	R16,R10
    00111 9506      LSR	R16
    00112 9506      LSR	R16
    00113 9506      LSR	R16
    00114 9506      LSR	R16
    00115 9506      LSR	R16
    00116 9506      LSR	R16
    00117 9506      LSR	R16
    00118 9506      LSR	R16
    00119 DFB9      RCALL	_I2C_SendWrDAdr
    0011A 2300      TST	R16
    0011B F411      BNE	0x011E
(0210) 			return I2C_ERR;
    0011C 2700      CLR	R16
    0011D C007      RJMP	0x0125
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    0011E 2D0A      MOV	R16,R10
    0011F DFB3      RCALL	_I2C_SendWrDAdr
    00120 2300      TST	R16
    00121 F411      BNE	0x0124
(0212) 		return I2C_ERR;
    00122 2700      CLR	R16
    00123 C001      RJMP	0x0125
(0213) 	return I2C_CRR;
    00124 E001      LDI	R16,1
    00125 90A9      LD	R10,Y+
    00126 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    00127 B903      OUT	0x03,R16
    00128 E884      LDI	R24,0x84
    00129 BF86      OUT	0x36,R24
(0226) 	I2CWaitAck();
    0012A B626      IN	R2,0x36
    0012B FE27      SBRS	R2,7
    0012C CFFD      RJMP	0x012A
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    0012D B181      IN	R24,0x01
    0012E 7F88      ANDI	R24,0xF8
    0012F 3288      CPI	R24,0x28
    00130 F011      BEQ	0x0133
(0228) 		return I2C_ERR;
    00131 2700      CLR	R16
    00132 C001      RJMP	0x0134
(0229) 	return I2C_CRR;	
    00133 E001      LDI	R16,1
    00134 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    00135 E884      LDI	R24,0x84
    00136 BF86      OUT	0x36,R24
(0242) 	I2CWaitAck();
    00137 B626      IN	R2,0x36
    00138 FE27      SBRS	R2,7
    00139 CFFD      RJMP	0x0137
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    0013A B181      IN	R24,0x01
    0013B 7F88      ANDI	R24,0xF8
    0013C 3588      CPI	R24,0x58
    0013D F011      BEQ	0x0140
(0244) 		return I2C_ERR;
    0013E 2700      CLR	R16
    0013F C004      RJMP	0x0144
(0245) 	*pRdDat=TWDR;
    00140 B023      IN	R2,0x03
    00141 01F8      MOVW	R30,R16
    00142 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    00143 E001      LDI	R16,1
    00144 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    00145 EC84      LDI	R24,0xC4
    00146 BF86      OUT	0x36,R24
(0259) 	I2CWaitAck();
    00147 B626      IN	R2,0x36
    00148 FE27      SBRS	R2,7
    00149 CFFD      RJMP	0x0147
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    0014A B181      IN	R24,0x01
    0014B 7F88      ANDI	R24,0xF8
    0014C 3580      CPI	R24,0x50
    0014D F011      BEQ	0x0150
(0261) 		return I2C_ERR;
    0014E 2700      CLR	R16
    0014F C004      RJMP	0x0154
(0262) 	*pRdDat=TWDR;
    00150 B023      IN	R2,0x03
    00151 01F8      MOVW	R30,R16
    00152 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    00153 E001      LDI	R16,1
    00154 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    00155 940E 04DE CALL	push_xgset00FC
    00157 2EC2      MOV	R12,R18
    00158 0178      MOVW	R14,R16
    00159 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    0015A DF5E      RCALL	_I2C_Start
    0015B 2300      TST	R16
    0015C F411      BNE	0x015F
(0278) 		return I2C_ERR;
    0015D 2700      CLR	R16
    0015E C017      RJMP	0x0176
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    0015F 0187      MOVW	R16,R14
    00160 DF80      RCALL	_I2C_SendWrDAdr_
    00161 2300      TST	R16
    00162 F411      BNE	0x0165
(0281) 		return I2C_ERR;
    00163 2700      CLR	R16
    00164 C011      RJMP	0x0176
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00165 2D0C      MOV	R16,R12
    00166 DFC0      RCALL	_I2C_SendDat
    00167 2EC0      MOV	R12,R16
    00168 2300      TST	R16
    00169 F411      BNE	0x016C
(0284) 		return I2C_ERR;
    0016A 2700      CLR	R16
    0016B C00A      RJMP	0x0176
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    0016C 2D0A      MOV	R16,R10
    0016D DFB9      RCALL	_I2C_SendDat
    0016E 2EA0      MOV	R10,R16
    0016F 2300      TST	R16
    00170 F411      BNE	0x0173
(0287) 		return I2C_ERR;
    00171 2700      CLR	R16
    00172 C003      RJMP	0x0176
(0288) 
(0289) 	I2C_Stop();
    00173 E984      LDI	R24,0x94
    00174 BF86      OUT	0x36,R24
(0290) 
(0291) 	return I2C_CRR;
    00175 E001      LDI	R16,1
    00176 940C 04BF JMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    00178 940E 04DC CALL	push_xgset30FC
    0017A 2EE2      MOV	R14,R18
    0017B 01A8      MOVW	R20,R16
    0017C 84C8      LDD	R12,Y+8
    0017D 84AA      LDD	R10,Y+10
    0017E 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    0017F DF39      RCALL	_I2C_Start
    00180 2300      TST	R16
    00181 F411      BNE	0x0184
(0324) 		return I2C_ERR;
    00182 2700      CLR	R16
    00183 C024      RJMP	0x01A8
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    00184 018A      MOVW	R16,R20
    00185 DF5B      RCALL	_I2C_SendWrDAdr_
    00186 2300      TST	R16
    00187 F411      BNE	0x018A
(0327) 		return I2C_ERR;
    00188 2700      CLR	R16
    00189 C01E      RJMP	0x01A8
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    0018A 2D0E      MOV	R16,R14
    0018B DF9B      RCALL	_I2C_SendDat
    0018C 2EE0      MOV	R14,R16
    0018D 2300      TST	R16
    0018E F411      BNE	0x0191
(0330) 		return I2C_ERR;
    0018F 2700      CLR	R16
    00190 C017      RJMP	0x01A8
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    00191 DF34      RCALL	_I2C_Restart
    00192 2EE0      MOV	R14,R16
    00193 2300      TST	R16
    00194 F411      BNE	0x0197
(0333) 		return I2C_ERR;
    00195 2700      CLR	R16
    00196 C011      RJMP	0x01A8
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    00197 2D0C      MOV	R16,R12
    00198 DF65      RCALL	_I2C_SendRdDAdr
    00199 2EC0      MOV	R12,R16
    0019A 2300      TST	R16
    0019B F411      BNE	0x019E
(0336) 		return I2C_ERR;
    0019C 2700      CLR	R16
    0019D C00A      RJMP	0x01A8
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    0019E 0185      MOVW	R16,R10
    0019F DF95      RCALL	_I2C_RcvNAckDat
    001A0 2EA0      MOV	R10,R16
    001A1 2300      TST	R16
    001A2 F411      BNE	0x01A5
(0339) 		return I2C_ERR;
    001A3 2700      CLR	R16
    001A4 C003      RJMP	0x01A8
(0340) 
(0341) 	I2C_Stop();
    001A5 E984      LDI	R24,0x94
    001A6 BF86      OUT	0x36,R24
(0342) 
(0343) 	return I2C_CRR;
    001A7 E001      LDI	R16,1
    001A8 940C 04C6 JMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    001AA 940E 04DA CALL	push_xgsetF0FC
    001AC 2EE2      MOV	R14,R18
    001AD 01B8      MOVW	R22,R16
    001AE 84CA      LDD	R12,Y+10
    001AF 84AC      LDD	R10,Y+12
    001B0 84BD      LDD	R11,Y+13
    001B1 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    001B2 DF06      RCALL	_I2C_Start
    001B3 2300      TST	R16
    001B4 F411      BNE	0x01B7
(0363) 		return I2C_ERR;
    001B5 2700      CLR	R16
    001B6 C038      RJMP	0x01EF
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001B7 018B      MOVW	R16,R22
    001B8 DF28      RCALL	_I2C_SendWrDAdr_
    001B9 2300      TST	R16
    001BA F411      BNE	0x01BD
(0366) 		return I2C_ERR;
    001BB 2700      CLR	R16
    001BC C032      RJMP	0x01EF
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001BD 2D0E      MOV	R16,R14
    001BE DF68      RCALL	_I2C_SendDat
    001BF 2EE0      MOV	R14,R16
    001C0 2300      TST	R16
    001C1 F411      BNE	0x01C4
(0369) 		return I2C_ERR;
    001C2 2700      CLR	R16
    001C3 C02B      RJMP	0x01EF
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    001C4 DF01      RCALL	_I2C_Restart
    001C5 2EE0      MOV	R14,R16
    001C6 2300      TST	R16
    001C7 F411      BNE	0x01CA
(0372) 		return I2C_ERR;
    001C8 2700      CLR	R16
    001C9 C025      RJMP	0x01EF
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001CA 2D0C      MOV	R16,R12
    001CB DF32      RCALL	_I2C_SendRdDAdr
    001CC 2EC0      MOV	R12,R16
    001CD 2300      TST	R16
    001CE F411      BNE	0x01D1
(0375) 		return I2C_ERR;
    001CF 2700      CLR	R16
    001D0 C01E      RJMP	0x01EF
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    001D1 24CC      CLR	R12
    001D2 C00B      RJMP	0x01DE
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    001D3 2D0C      MOV	R16,R12
    001D4 2711      CLR	R17
    001D5 0D0A      ADD	R16,R10
    001D6 1D1B      ADC	R17,R11
    001D7 DF6D      RCALL	_I2C_RcvAckDat
    001D8 2EE0      MOV	R14,R16
    001D9 2300      TST	R16
    001DA F411      BNE	0x01DD
(0379) 			return I2C_ERR;
    001DB 2700      CLR	R16
    001DC C012      RJMP	0x01EF
    001DD 94C3      INC	R12
    001DE 2F84      MOV	R24,R20
    001DF 5081      SUBI	R24,1
    001E0 16C8      CP	R12,R24
    001E1 F388      BCS	0x01D3
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    001E2 2D0C      MOV	R16,R12
    001E3 2711      CLR	R17
    001E4 0D0A      ADD	R16,R10
    001E5 1D1B      ADC	R17,R11
    001E6 DF4E      RCALL	_I2C_RcvNAckDat
    001E7 2EA0      MOV	R10,R16
    001E8 2300      TST	R16
    001E9 F411      BNE	0x01EC
(0382) 			return I2C_ERR;
    001EA 2700      CLR	R16
    001EB C003      RJMP	0x01EF
(0383) 
(0384) 	I2C_Stop();
    001EC E984      LDI	R24,0x94
    001ED BF86      OUT	0x36,R24
(0385) 	
(0386) 	return I2C_CRR;
    001EE E001      LDI	R16,1
    001EF 940C 04CF JMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    001F1 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    001F2 C007      RJMP	0x01FA
(0108)         for(j=0;j<70;j++)	
    001F3 2744      CLR	R20
    001F4 C001      RJMP	0x01F6
    001F5 9543      INC	R20
    001F6 3446      CPI	R20,0x46
    001F7 F3E8      BCS	0x01F5
    001F8 5001      SUBI	R16,1
    001F9 4010      SBCI	R17,0
    001FA 2422      CLR	R2
    001FB 2433      CLR	R3
    001FC 1620      CP	R2,R16
    001FD 0631      CPC	R3,R17
    001FE F3A4      BLT	0x01F3
    001FF 9149      LD	R20,Y+
    00200 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    00201 934A      ST	-Y,R20
    00202 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    00203 C013      RJMP	0x0217
(0123) 		for(i=0;i<52642;i++)
    00204 2744      CLR	R20
    00205 2755      CLR	R21
    00206 C002      RJMP	0x0209
    00207 5F4F      SUBI	R20,0xFF
    00208 4F5F      SBCI	R21,0xFF
    00209 EA82      LDI	R24,0xA2
    0020A EC9D      LDI	R25,0xCD
    0020B E0A0      LDI	R26,0
    0020C E0B0      LDI	R27,0
    0020D 011A      MOVW	R2,R20
    0020E 2444      CLR	R4
    0020F 2455      CLR	R5
    00210 1628      CP	R2,R24
    00211 0639      CPC	R3,R25
    00212 064A      CPC	R4,R26
    00213 065B      CPC	R5,R27
    00214 F394      BLT	0x0207
    00215 5001      SUBI	R16,1
    00216 4010      SBCI	R17,0
    00217 2422      CLR	R2
    00218 2433      CLR	R3
    00219 1620      CP	R2,R16
    0021A 0631      CPC	R3,R17
    0021B F344      BLT	0x0204
    0021C 9159      LD	R21,Y+
    0021D 9149      LD	R20,Y+
    0021E 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    0021F 934A      ST	-Y,R20
    00220 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    00221 2744      CLR	R20
    00222 2755      CLR	R21
    00223 C002      RJMP	0x0226
    00224 5F4F      SUBI	R20,0xFF
    00225 4F5F      SBCI	R21,0xFF
    00226 1740      CP	R20,R16
    00227 0751      CPC	R21,R17
    00228 F3D8      BCS	0x0224
    00229 9159      LD	R21,Y+
    0022A 9149      LD	R20,Y+
    0022B 9508      RET
FILE: D:\ICC_H\LCD12864_ST7920.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 	                                                        
(0004) 目    的:   建立LCD12864_ST7920的串模式操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 	                                                                
(0008) 应用软件:   ICCAVR                                               
(0009) 	                                                                
(0010) 版    本:   Version 1.0
(0011) 	                                                                
(0012) 圆版时间:   2005-09-06
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) 
(0026) 
(0027) ----------------------------------------------------------------------
(0028) 入口参数说明：
(0029) 	//#define OUT_LCD_CS	sbi(DDRD,0)
(0030) 	//#define SET_LCD_CS	sbi(PORTD,0)
(0031) 	//#define CLR_LCD_CS	cbi(PORTD,0)
(0032) 
(0033) ----------------------------------------------------------------------
(0034) 待定参数说明：
(0035) 	
(0036) 
(0037) ----------------------------------------------------------------------	
(0038) 对外变量说明：
(0039) 
(0040) ----------------------------------------------------------------------
(0041) 对外函数说明：
(0042) 
(0043) ----------------------------------------------------------------------
(0044) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0045) 
(0046) 
(0047) /*--------------------------------------------------------------------
(0048) 接口定义：
(0049) 
(0050) LCD12864_ST7920			ATmega16
(0051) 1.GND		--------	GND
(0052) 2.VCC		--------	VCC
(0053) 3.V0		--------	V0
(0054) 4.RS(CS)	--------	VCC
(0055) 5.R/W(SID)	--------	MOSI/PB5
(0056) 6.E(SCLK)	--------	SCK/PB7
(0057) 7.D0		--------	NC
(0058) 8.D1		--------	NC
(0059) 9.D2		--------	NC
(0060) 10.D3		--------	NC
(0061) 11.D4		--------	NC
(0062) 12.D5		--------	NC
(0063) 13.D6		--------	NC
(0064) 14.D7		--------	NC
(0065) 15.PSB		--------	GND
(0066) 16.NC		--------	NC
(0067) 17.RST		--------	NC
(0068) 18.NC		--------	NC
(0069) 19.LED+		--------	VCC
(0070) 20.LED-		--------	GND
(0071) 
(0072) 说明：
(0073) （1）使用ATmega16的硬件SPI操作LCD12864_ST7920
(0074) （2）PIN4/CS接VCC，其实也可接到特定的IO口，但外部程序需要指定
(0075) --------------------------------------------------------------------*/
(0076) 
(0077) #ifndef LCD12864_ST7920_H
(0078) #define LCD12864_ST7920_H
(0079) 
(0080) #include "D:\ICC_H\CmmIcc.h"
(0081) 
(0082) void SPI_init()
(0083) {
(0084) 	DDRB |= 0xB0;
_SPI_init:
    0022C B387      IN	R24,0x17
    0022D 6B80      ORI	R24,0xB0
    0022E BB87      OUT	0x17,R24
(0085) 	SPCR = 0x50;	//setup SPI
    0022F E580      LDI	R24,0x50
    00230 B98D      OUT	0x0D,R24
(0086) 	SPSR = 0x01;	//setup SPI
    00231 E081      LDI	R24,1
    00232 B98E      OUT	0x0E,R24
(0087) 	SEI();
    00233 9478      BSET	7
    00234 9508      RET
(0088) }
(0089) 
(0090) void lcd_wrByte(uint8 data)
(0091) {  
(0092) 	SPDR = data;        
_lcd_wrByte:
  data                 --> R16
    00235 B90F      OUT	0x0F,R16
(0093) 	while ((SPSR & 0x80) == 0);  
    00236 9B77      SBIS	0x0E,7
    00237 CFFE      RJMP	0x0236
    00238 9508      RET
_lcd_wrCmd:
  LC                   --> R10
  HC                   --> R12
    00239 92AA      ST	-Y,R10
    0023A 92CA      ST	-Y,R12
    0023B 2EA2      MOV	R10,R18
    0023C 2EC0      MOV	R12,R16
(0094) }
(0095) 
(0096) void lcd_wrCmd(uint8 HC,uint8 LC)
(0097) {
(0098) 	lcd_wrByte(0xF8);
    0023D EF08      LDI	R16,0xF8
    0023E DFF6      RCALL	_lcd_wrByte
(0099) 	lcd_wrByte(HC);		//传输高四位
    0023F 2D0C      MOV	R16,R12
    00240 DFF4      RCALL	_lcd_wrByte
(0100) 	lcd_wrByte(LC);		//传输低四位
    00241 2D0A      MOV	R16,R10
    00242 DFF2      RCALL	_lcd_wrByte
    00243 90C9      LD	R12,Y+
    00244 90A9      LD	R10,Y+
    00245 9508      RET
_lcd_wrDat:
  LD                   --> R10
  HD                   --> R12
    00246 92AA      ST	-Y,R10
    00247 92CA      ST	-Y,R12
    00248 2EA2      MOV	R10,R18
    00249 2EC0      MOV	R12,R16
(0101) }
(0102) 
(0103) void lcd_wrDat(uint8 HD,uint8 LD)
(0104) {
(0105) 	lcd_wrByte(0xFA);
    0024A EF0A      LDI	R16,0xFA
    0024B DFE9      RCALL	_lcd_wrByte
(0106) 	lcd_wrByte(HD);		//传输高四位
    0024C 2D0C      MOV	R16,R12
    0024D DFE7      RCALL	_lcd_wrByte
(0107) 	lcd_wrByte(LD);		//传输低四位
    0024E 2D0A      MOV	R16,R10
    0024F DFE5      RCALL	_lcd_wrByte
    00250 90C9      LD	R12,Y+
    00251 90A9      LD	R10,Y+
    00252 9508      RET
_lcd_set_xy:
  adr                  --> R20
  y                    --> R22
  x                    --> R10
    00253 940E 04E5 CALL	push_xgsetF00C
    00255 2F62      MOV	R22,R18
    00256 2EA0      MOV	R10,R16
(0108) } 
(0109) 
(0110) /*
(0111) x表示在第几行显示，y表示在第几列显示
(0112) */
(0113) void lcd_set_xy(uint8 x,uint8 y) 
(0114) {
(0115) 	uint8 adr;
(0116) 
(0117) 	switch(x)
    00257 24BB      CLR	R11
    00258 01C5      MOVW	R24,R10
    00259 3081      CPI	R24,1
    0025A E0E0      LDI	R30,0
    0025B 079E      CPC	R25,R30
    0025C F069      BEQ	0x026A
    0025D 3082      CPI	R24,2
    0025E E0E0      LDI	R30,0
    0025F 079E      CPC	R25,R30
    00260 F061      BEQ	0x026D
    00261 3083      CPI	R24,3
    00262 E0E0      LDI	R30,0
    00263 079E      CPC	R25,R30
    00264 F059      BEQ	0x0270
    00265 3084      CPI	R24,4
    00266 E0E0      LDI	R30,0
    00267 079E      CPC	R25,R30
    00268 F051      BEQ	0x0273
    00269 C00B      RJMP	0x0275
(0118) 	{
(0119) 	case 1: adr = 0x7F + y;
    0026A 2F46      MOV	R20,R22
    0026B 5841      SUBI	R20,0x81
(0120) 		break;		//在第1行y列显示
    0026C C008      RJMP	0x0275
(0121) 	case 2: adr = 0x8F + y;
    0026D 2F46      MOV	R20,R22
    0026E 5741      SUBI	R20,0x71
(0122) 		break;		//在第2行y列显示
    0026F C005      RJMP	0x0275
(0123) 	case 3: adr = 0x87 + y;
    00270 2F46      MOV	R20,R22
    00271 5749      SUBI	R20,0x79
(0124) 		break;		//在第3行y列显示
    00272 C002      RJMP	0x0275
(0125) 	case 4: adr = 0x97 + y;
    00273 2F46      MOV	R20,R22
    00274 5649      SUBI	R20,0x69
(0126) 		break;		//在第4行y列显示
(0127) 	default:	;
(0128) 	}
(0129) 	lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
    00275 2F24      MOV	R18,R20
    00276 702F      ANDI	R18,0xF
    00277 702F      ANDI	R18,0xF
    00278 9522      SWAP	R18
    00279 2F04      MOV	R16,R20
    0027A 7F00      ANDI	R16,0xF0
    0027B DFBD      RCALL	_lcd_wrCmd
    0027C 940C 04EC JMP	pop_xgsetF00C
_lcd_putc:
  ch                   --> R20
  y                    --> R12
  x                    --> R10
    0027E 940E 04F3 CALL	push_xgset303C
    00280 2EC2      MOV	R12,R18
    00281 2EA0      MOV	R10,R16
    00282 814E      LDD	R20,Y+6
(0130) }
(0131) 
(0132) void lcd_putc(uint8 x,uint8 y,uint8 ch)
(0133) {
(0134) 	lcd_set_xy(x,y);
    00283 2D2C      MOV	R18,R12
    00284 2D0A      MOV	R16,R10
    00285 DFCD      RCALL	_lcd_set_xy
(0135) 	delay50us(20); 
    00286 E104      LDI	R16,0x14
    00287 E010      LDI	R17,0
    00288 DF68      RCALL	_delay50us
(0136) 	lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
    00289 2F24      MOV	R18,R20
    0028A 702F      ANDI	R18,0xF
    0028B 702F      ANDI	R18,0xF
    0028C 9522      SWAP	R18
    0028D 2F04      MOV	R16,R20
    0028E 7F00      ANDI	R16,0xF0
    0028F DFB6      RCALL	_lcd_wrDat
    00290 940C 04FA JMP	pop_xgset303C
_lcd_putd0:
  i                    --> R20
  length               --> R20
  dat                  --> Y,+7
  y                    --> R12
  x                    --> R10
    00292 940E 04F3 CALL	push_xgset303C
    00294 2EC2      MOV	R12,R18
    00295 2EA0      MOV	R10,R16
    00296 9721      SBIW	R28,1
    00297 854B      LDD	R20,Y+11
(0137) }
(0138) 
(0139) void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
(0140) {
(0141) 	sint8 i;
(0142) 
(0143) 	speaData(dat,length);
    00298 8348      ST	Y,R20
    00299 810F      LDD	R16,Y+7
    0029A 8518      LDD	R17,Y+8
    0029B 8529      LDD	R18,Y+9
    0029C 853A      LDD	R19,Y+10
    0029D DDC2      RCALL	_speaData
(0144) 	lcd_set_xy(x,y);
    0029E 2D2C      MOV	R18,R12
    0029F 2D0A      MOV	R16,R10
    002A0 DFB2      RCALL	_lcd_set_xy
(0145) 	delay50us(40);
    002A1 E208      LDI	R16,0x28
    002A2 E010      LDI	R17,0
    002A3 DF4D      RCALL	_delay50us
(0146) 	for(i=length-1;i>=0;i--)
    002A4 5041      SUBI	R20,1
    002A5 C01E      RJMP	0x02C4
(0147) 	{
(0148) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    002A6 E885      LDI	R24,0x85
    002A7 E090      LDI	R25,0
    002A8 2FE4      MOV	R30,R20
    002A9 27FF      CLR	R31
    002AA FDE7      SBRC	R30,7
    002AB 95F0      COM	R31
    002AC 0FE8      ADD	R30,R24
    002AD 1FF9      ADC	R31,R25
    002AE 8180      LD	R24,Z
    002AF 2799      CLR	R25
    002B0 96C0      ADIW	R24,0x30
    002B1 019C      MOVW	R18,R24
    002B2 702F      ANDI	R18,0xF
    002B3 7030      ANDI	R19,0
    002B4 0F22      LSL	R18
    002B5 1F33      ROL	R19
    002B6 0F22      LSL	R18
    002B7 1F33      ROL	R19
    002B8 0F22      LSL	R18
    002B9 1F33      ROL	R19
    002BA 0F22      LSL	R18
    002BB 1F33      ROL	R19
    002BC 018C      MOVW	R16,R24
    002BD 7F00      ANDI	R16,0xF0
    002BE 7010      ANDI	R17,0
    002BF DF86      RCALL	_lcd_wrDat
(0149) 		delay50us(40); 
    002C0 E208      LDI	R16,0x28
    002C1 E010      LDI	R17,0
    002C2 DF2E      RCALL	_delay50us
    002C3 954A      DEC	R20
    002C4 3040      CPI	R20,0
    002C5 F704      BGE	0x02A6
    002C6 9621      ADIW	R28,1
    002C7 940C 04FA JMP	pop_xgset303C
_lcd_putd:
  effectLen            --> R22
  i                    --> R20
  length               --> R10
  dat                  --> Y,+11
  y                    --> R14
  x                    --> R12
    002C9 940E 04DA CALL	push_xgsetF0FC
    002CB 2EE2      MOV	R14,R18
    002CC 2EC0      MOV	R12,R16
    002CD 9721      SBIW	R28,1
    002CE 84AF      LDD	R10,Y+15
(0150) 	}
(0151) }
(0152) 
(0153) void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
(0154) {
(0155) 	sint8 i;
(0156) 	sint8 effectLen;
(0157) 
(0158) 	if(dat>999999)
    002CF E38F      LDI	R24,0x3F
    002D0 E492      LDI	R25,0x42
    002D1 E0AF      LDI	R26,0xF
    002D2 E0B0      LDI	R27,0
    002D3 842B      LDD	R2,Y+11
    002D4 843C      LDD	R3,Y+12
    002D5 844D      LDD	R4,Y+13
    002D6 845E      LDD	R5,Y+14
    002D7 1582      CP	R24,R2
    002D8 0593      CPC	R25,R3
    002D9 05A4      CPC	R26,R4
    002DA 05B5      CPC	R27,R5
    002DB F410      BCC	0x02DE
(0159) 		effectLen=7;
    002DC E067      LDI	R22,7
    002DD C04C      RJMP	0x032A
(0160) 	else if(dat>99999)
    002DE E98F      LDI	R24,0x9F
    002DF E896      LDI	R25,0x86
    002E0 E0A1      LDI	R26,1
    002E1 E0B0      LDI	R27,0
    002E2 842B      LDD	R2,Y+11
    002E3 843C      LDD	R3,Y+12
    002E4 844D      LDD	R4,Y+13
    002E5 845E      LDD	R5,Y+14
    002E6 1582      CP	R24,R2
    002E7 0593      CPC	R25,R3
    002E8 05A4      CPC	R26,R4
    002E9 05B5      CPC	R27,R5
    002EA F410      BCC	0x02ED
(0161) 		effectLen=6;
    002EB E066      LDI	R22,6
    002EC C03D      RJMP	0x032A
(0162) 	else if(dat>9999)
    002ED E08F      LDI	R24,0xF
    002EE E297      LDI	R25,0x27
    002EF E0A0      LDI	R26,0
    002F0 E0B0      LDI	R27,0
    002F1 842B      LDD	R2,Y+11
    002F2 843C      LDD	R3,Y+12
    002F3 844D      LDD	R4,Y+13
    002F4 845E      LDD	R5,Y+14
    002F5 1582      CP	R24,R2
    002F6 0593      CPC	R25,R3
    002F7 05A4      CPC	R26,R4
    002F8 05B5      CPC	R27,R5
    002F9 F410      BCC	0x02FC
(0163) 		effectLen=5;
    002FA E065      LDI	R22,5
    002FB C02E      RJMP	0x032A
(0164) 	else if(dat>999)
    002FC EE87      LDI	R24,0xE7
    002FD E093      LDI	R25,3
    002FE E0A0      LDI	R26,0
    002FF E0B0      LDI	R27,0
    00300 842B      LDD	R2,Y+11
    00301 843C      LDD	R3,Y+12
    00302 844D      LDD	R4,Y+13
    00303 845E      LDD	R5,Y+14
    00304 1582      CP	R24,R2
    00305 0593      CPC	R25,R3
    00306 05A4      CPC	R26,R4
    00307 05B5      CPC	R27,R5
    00308 F410      BCC	0x030B
(0165) 		effectLen=4;
    00309 E064      LDI	R22,4
    0030A C01F      RJMP	0x032A
(0166) 	else if(dat>99)
    0030B E683      LDI	R24,0x63
    0030C E090      LDI	R25,0
    0030D E0A0      LDI	R26,0
    0030E E0B0      LDI	R27,0
    0030F 842B      LDD	R2,Y+11
    00310 843C      LDD	R3,Y+12
    00311 844D      LDD	R4,Y+13
    00312 845E      LDD	R5,Y+14
    00313 1582      CP	R24,R2
    00314 0593      CPC	R25,R3
    00315 05A4      CPC	R26,R4
    00316 05B5      CPC	R27,R5
    00317 F410      BCC	0x031A
(0167) 		effectLen=3;
    00318 E063      LDI	R22,3
    00319 C010      RJMP	0x032A
(0168) 	else if(dat>9)
    0031A E089      LDI	R24,0x9
    0031B E090      LDI	R25,0
    0031C E0A0      LDI	R26,0
    0031D E0B0      LDI	R27,0
    0031E 842B      LDD	R2,Y+11
    0031F 843C      LDD	R3,Y+12
    00320 844D      LDD	R4,Y+13
    00321 845E      LDD	R5,Y+14
    00322 1582      CP	R24,R2
    00323 0593      CPC	R25,R3
    00324 05A4      CPC	R26,R4
    00325 05B5      CPC	R27,R5
    00326 F410      BCC	0x0329
(0169) 		effectLen=2;
    00327 E062      LDI	R22,2
    00328 C001      RJMP	0x032A
(0170) 	else
(0171) 		effectLen=1;
    00329 E061      LDI	R22,1
(0172) 	speaData(dat,effectLen);
    0032A 8368      ST	Y,R22
    0032B 850B      LDD	R16,Y+11
    0032C 851C      LDD	R17,Y+12
    0032D 852D      LDD	R18,Y+13
    0032E 853E      LDD	R19,Y+14
    0032F DD30      RCALL	_speaData
(0173) 
(0174) 	lcd_set_xy(x,y);
    00330 2D2E      MOV	R18,R14
    00331 2D0C      MOV	R16,R12
    00332 DF20      RCALL	_lcd_set_xy
(0175) 	delay50us(40); 
    00333 E208      LDI	R16,0x28
    00334 E010      LDI	R17,0
    00335 DEBB      RCALL	_delay50us
(0176) 	if(length>effectLen)
    00336 2E26      MOV	R2,R22
    00337 2433      CLR	R3
    00338 FC27      SBRC	R2,7
    00339 9430      COM	R3
    0033A 2C4A      MOV	R4,R10
    0033B 2455      CLR	R5
    0033C 1424      CP	R2,R4
    0033D 0435      CPC	R3,R5
    0033E F46C      BGE	0x034C
(0177) 	{
(0178) 		for(i=length-effectLen-1;i>=0;i--)
    0033F 2D44      MOV	R20,R4
    00340 1B46      SUB	R20,R22
    00341 5041      SUBI	R20,1
    00342 C007      RJMP	0x034A
(0179) 		{
(0180) 			lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
    00343 2722      CLR	R18
    00344 E200      LDI	R16,0x20
    00345 DF00      RCALL	_lcd_wrDat
(0181) 			delay50us(40); 
    00346 E208      LDI	R16,0x28
    00347 E010      LDI	R17,0
    00348 DEA8      RCALL	_delay50us
    00349 954A      DEC	R20
    0034A 3040      CPI	R20,0
    0034B F7BC      BGE	0x0343
(0182) 		}
(0183) 	}
(0184) 	for(i=effectLen-1;i>=0;i--)
    0034C 2F46      MOV	R20,R22
    0034D 5041      SUBI	R20,1
    0034E C01E      RJMP	0x036D
(0185) 	{
(0186) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    0034F E885      LDI	R24,0x85
    00350 E090      LDI	R25,0
    00351 2FE4      MOV	R30,R20
    00352 27FF      CLR	R31
    00353 FDE7      SBRC	R30,7
    00354 95F0      COM	R31
    00355 0FE8      ADD	R30,R24
    00356 1FF9      ADC	R31,R25
    00357 8180      LD	R24,Z
    00358 2799      CLR	R25
    00359 96C0      ADIW	R24,0x30
    0035A 019C      MOVW	R18,R24
    0035B 702F      ANDI	R18,0xF
    0035C 7030      ANDI	R19,0
    0035D 0F22      LSL	R18
    0035E 1F33      ROL	R19
    0035F 0F22      LSL	R18
    00360 1F33      ROL	R19
    00361 0F22      LSL	R18
    00362 1F33      ROL	R19
    00363 0F22      LSL	R18
    00364 1F33      ROL	R19
    00365 018C      MOVW	R16,R24
    00366 7F00      ANDI	R16,0xF0
    00367 7010      ANDI	R17,0
    00368 DEDD      RCALL	_lcd_wrDat
(0187) 		delay50us(40);
    00369 E208      LDI	R16,0x28
    0036A E010      LDI	R17,0
    0036B DE85      RCALL	_delay50us
    0036C 954A      DEC	R20
    0036D 3040      CPI	R20,0
    0036E F704      BGE	0x034F
    0036F 9621      ADIW	R28,1
    00370 940C 04CF JMP	pop_xgsetF0FC
_lcd_puts:
  str                  --> R20
  y                    --> R12
  x                    --> R10
    00372 940E 04F3 CALL	push_xgset303C
    00374 2EC2      MOV	R12,R18
    00375 2EA0      MOV	R10,R16
    00376 814E      LDD	R20,Y+6
    00377 815F      LDD	R21,Y+7
(0188) 	}
(0189) }
(0190) 
(0191) void lcd_puts(uint8 x,uint8 y,uint8 *str)
(0192) { 
(0193) 	lcd_set_xy(x,y);
    00378 2D2C      MOV	R18,R12
    00379 2D0A      MOV	R16,R10
    0037A DED8      RCALL	_lcd_set_xy
(0194) 	delay50us(20);   
    0037B E104      LDI	R16,0x14
    0037C E010      LDI	R17,0
    0037D DE73      RCALL	_delay50us
    0037E C00F      RJMP	0x038E
(0195) 	while(*str)
(0196) 	{
(0197) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    0037F 01FA      MOVW	R30,R20
    00380 8020      LD	R2,Z
    00381 2433      CLR	R3
    00382 2D22      MOV	R18,R2
    00383 702F      ANDI	R18,0xF
    00384 702F      ANDI	R18,0xF
    00385 9522      SWAP	R18
    00386 2D02      MOV	R16,R2
    00387 7F00      ANDI	R16,0xF0
    00388 DEBD      RCALL	_lcd_wrDat
(0198) 		str++;
    00389 5F4F      SUBI	R20,0xFF
    0038A 4F5F      SBCI	R21,0xFF
(0199) 		delay50us(20);
    0038B E104      LDI	R16,0x14
    0038C E010      LDI	R17,0
    0038D DE63      RCALL	_delay50us
    0038E 01FA      MOVW	R30,R20
    0038F 8020      LD	R2,Z
    00390 2022      TST	R2
    00391 F769      BNE	0x037F
    00392 940C 04FA JMP	pop_xgset303C
_lcd_puts_:
  dlyMs                --> R10
  str                  --> R20
  y                    --> R14
  x                    --> R12
    00394 940E 04DC CALL	push_xgset30FC
    00396 2EE2      MOV	R14,R18
    00397 2EC0      MOV	R12,R16
    00398 8548      LDD	R20,Y+8
    00399 8559      LDD	R21,Y+9
    0039A 84AA      LDD	R10,Y+10
(0200) 	} 
(0201) }
(0202) 
(0203) void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
(0204) { 
(0205) 	lcd_set_xy(x,y);
    0039B 2D2E      MOV	R18,R14
    0039C 2D0C      MOV	R16,R12
    0039D DEB5      RCALL	_lcd_set_xy
(0206) 	delay50us(20);   
    0039E E104      LDI	R16,0x14
    0039F E010      LDI	R17,0
    003A0 DE50      RCALL	_delay50us
    003A1 C00F      RJMP	0x03B1
(0207) 	while(*str)
(0208) 	{
(0209) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    003A2 01FA      MOVW	R30,R20
    003A3 8020      LD	R2,Z
    003A4 2433      CLR	R3
    003A5 2D22      MOV	R18,R2
    003A6 702F      ANDI	R18,0xF
    003A7 702F      ANDI	R18,0xF
    003A8 9522      SWAP	R18
    003A9 2D02      MOV	R16,R2
    003AA 7F00      ANDI	R16,0xF0
    003AB DE9A      RCALL	_lcd_wrDat
(0210) 		str++;
    003AC 5F4F      SUBI	R20,0xFF
    003AD 4F5F      SBCI	R21,0xFF
(0211) 		delay50ms(dlyMs);
    003AE 2D0A      MOV	R16,R10
    003AF 2711      CLR	R17
    003B0 DE50      RCALL	_delay50ms
    003B1 01FA      MOVW	R30,R20
    003B2 8020      LD	R2,Z
    003B3 2022      TST	R2
    003B4 F769      BNE	0x03A2
    003B5 940C 04C6 JMP	pop_xgset30FC
(0212) 	} 
(0213) }
(0214) 
(0215) void lcd_clr()
(0216) {
(0217) 	lcd_wrCmd(0x00,0x10);
_lcd_clr:
    003B7 E120      LDI	R18,0x10
    003B8 2700      CLR	R16
    003B9 DE7F      RCALL	_lcd_wrCmd
(0218) 	delay50us(200);
    003BA EC08      LDI	R16,0xC8
    003BB E010      LDI	R17,0
    003BC CE34      RJMP	_delay50us
(0219) }
(0220) 
(0221) void lcd_init(void)
(0222) {
(0223) 	SPI_init();	
_lcd_init:
    003BD DE6E      RCALL	_SPI_init
(0224) 	//OUT_LCD_CS;		//若LCD_CS
(0225) 	//SET_LCD_CS;		
(0226) 	delay50ms(1);
    003BE E001      LDI	R16,1
    003BF E010      LDI	R17,0
    003C0 DE40      RCALL	_delay50ms
(0227) 	lcd_wrCmd(0x30,0x30);	//使用8位控制界面,使用基本指令集
    003C1 E320      LDI	R18,0x30
    003C2 E300      LDI	R16,0x30
    003C3 DE75      RCALL	_lcd_wrCmd
(0228) 	//lcd_wrCmd(0x00,0xF0);	//整体显示ON
(0229) 	lcd_wrCmd(0x00,0xC0);	//整体显示ON
    003C4 EC20      LDI	R18,0xC0
    003C5 2700      CLR	R16
    003C6 DE72      RCALL	_lcd_wrCmd
(0230) 	lcd_wrCmd(0x00,0x10);	//清屏
    003C7 E120      LDI	R18,0x10
    003C8 2700      CLR	R16
    003C9 DE6F      RCALL	_lcd_wrCmd
(0231) 	//lcd_wrCmd(0x10,0x00);	//光标
(0232) 	lcd_wrCmd(0x00,0x60);
    003CA E620      LDI	R18,0x60
    003CB 2700      CLR	R16
    003CC DE6C      RCALL	_lcd_wrCmd
(0233) 	//lcd_wrCmd(0x00,0x70);	//显示右移
(0234) 	delay50ms(1);		//不可省去！！！
    003CD E001      LDI	R16,1
    003CE E010      LDI	R17,0
    003CF CE31      RJMP	_delay50ms
FILE: E:\吴泽备份\DVK501光盘内容\STK16_~1.0\MAX232~1\MAX232_LCD12864\test.c
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立使用MAX232的示例程序
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2009-03-31
(0013) 	
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 先把写数据并显示在MAX232自发自收试验
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：
(0030) 			LCD12864_ST7920			ATmega16
(0031) 				RS(CS)	--------	VCC
(0032) 				R/W(SID)--------	MOSI/PB5
(0033) 				E(SCLK)	--------	SCK/PB7
(0034) 				PSB		--------	GND
(0035) 			   
(0036) 			   DVK501				  ATmega16+
(0037) 				VCC		---------	  VCC
(0038) 				GND		---------	  GND
(0039) 				RXD1   ---------	  PD0(TXD0)
(0040) 				TXD1	---------	  PD1(RXD0)
(0041) 				将DB9接口的2脚和3脚短接
(0042) ----------------------------------------------------------------------
(0043) 注意事项： 
(0044) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0045) （2）请详细阅读“使用必读”及相关资料。
(0046) ----------------------------------------------------------------------
(0047) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0048) 
(0049) #include <iom16v.h>
(0050) #include "D:\ICC_H\LCD12864_ST7920.H"
(0051) 
(0052) void UART_init(void)
(0053) {
(0054) // USART0 initialization
(0055) // Communication Parameters: 8 Data, 1 Stop, No Parity
(0056) // USART0 Receiver: On
(0057) // USART0 Transmitter: On
(0058) // USART0 Mode: Asynchronous
(0059) // USART0 Baud Rate: 9600
(0060) UCSRA=0x00;
_UART_init:
    003D0 2422      CLR	R2
    003D1 B82B      OUT	0x0B,R2
(0061) UCSRB=0x18;
    003D2 E188      LDI	R24,0x18
    003D3 B98A      OUT	0x0A,R24
(0062) UCSRC=0x06;
    003D4 E086      LDI	R24,6
    003D5 BD80      OUT	0x20,R24
(0063) UBRRH=0x00;
    003D6 BC20      OUT	0x20,R2
(0064) UBRRL=0x2F;
    003D7 E28F      LDI	R24,0x2F
    003D8 B989      OUT	0x09,R24
    003D9 9508      RET
(0065) }
(0066) 
(0067) 
(0068) //从RS232发送一个字节 
(0069) void uart_putchar0(char c) 
(0070) { 
(0071)     while(!(UCSRA & 0x20));
_uart_putchar0:
  c                    --> R16
    003DA 9B5D      SBIS	0x0B,5
    003DB CFFE      RJMP	_uart_putchar0
(0072)     UDR = c; 
    003DC B90C      OUT	0x0C,R16
    003DD 9508      RET
(0073) } 
(0074) //从RS232接收一个字节 
(0075) unsigned int uart_getchar0(void) 
(0076) { 
(0077)     unsigned char status,res; 
(0078)     if(!(UCSRA & 0x80)) return -1;        //no data to be received 
_uart_getchar0:
  res                  --> R16
  status               --> R18
    003DE 995F      SBIC	0x0B,7
    003DF C003      RJMP	0x03E3
    003E0 EF0F      LDI	R16,0xFF
    003E1 EF1F      LDI	R17,0xFF
    003E2 C009      RJMP	0x03EC
(0079)     status = UCSRA; 
    003E3 B12B      IN	R18,0x0B
(0080)     res = UDR; 
    003E4 B10C      IN	R16,0x0C
(0081)     if (status & 0x1c) return -1;        // If error, return -1 
    003E5 2F82      MOV	R24,R18
    003E6 718C      ANDI	R24,0x1C
    003E7 F019      BEQ	0x03EB
    003E8 EF0F      LDI	R16,0xFF
    003E9 EF1F      LDI	R17,0xFF
    003EA C001      RJMP	0x03EC
(0082)     return res; 
    003EB 2711      CLR	R17
    003EC 9508      RET
_uart_waitchar0:
  c                    --> R10
    003ED 92AA      ST	-Y,R10
    003EE 92BA      ST	-Y,R11
(0083) }
(0084) //等待从RS232接收一个有效的字节 
(0085) unsigned char uart_waitchar0(void) 
(0086) { 
(0087)     unsigned int c; 
(0088)     while((c=uart_getchar0())==-1); 
    003EF DFEE      RCALL	_uart_getchar0
    003F0 0158      MOVW	R10,R16
    003F1 3F0F      CPI	R16,0xFF
    003F2 EFEF      LDI	R30,0xFF
    003F3 071E      CPC	R17,R30
    003F4 F3D1      BEQ	0x03EF
(0089)     return (unsigned char)c; 
    003F5 90B9      LD	R11,Y+
    003F6 90A9      LD	R10,Y+
    003F7 9508      RET
_main:
  tmp                  --> R10
    003F8 9722      SBIW	R28,2
(0090) } 
(0091) 
(0092) void main(void)
(0093) {
(0094)  	unsigned char tmp;
(0095) 	lcd_init();
    003F9 DFC3      RCALL	_lcd_init
(0096) 	lcd_clr();
    003FA DFBC      RCALL	_lcd_clr
(0097) 	lcd_puts(1,1,"MAX232-LCD12864");
    003FB E785      LDI	R24,0x75
    003FC E090      LDI	R25,0
    003FD 8399      STD	Y+1,R25
    003FE 8388      ST	Y,R24
    003FF E021      LDI	R18,1
    00400 E001      LDI	R16,1
    00401 DF70      RCALL	_lcd_puts
(0098) 	lcd_puts(2,1,"串口  液晶显示");
    00402 E686      LDI	R24,0x66
    00403 E090      LDI	R25,0
    00404 8399      STD	Y+1,R25
    00405 8388      ST	Y,R24
    00406 E021      LDI	R18,1
    00407 E002      LDI	R16,2
    00408 DF69      RCALL	_lcd_puts
(0099) 	lcd_puts(3,1,"内容:");
    00409 E680      LDI	R24,0x60
    0040A E090      LDI	R25,0
    0040B 8399      STD	Y+1,R25
    0040C 8388      ST	Y,R24
    0040D E021      LDI	R18,1
    0040E E003      LDI	R16,3
    0040F DF62      RCALL	_lcd_puts
(0100) 	
(0101)  	UART_init();
    00410 DFBF      RCALL	_UART_init
(0102) 	uart_putchar0('c');
    00411 E603      LDI	R16,0x63
    00412 DFC7      RCALL	_uart_putchar0
(0103) 	
(0104) 	tmp=uart_waitchar0();
    00413 DFD9      RCALL	_uart_waitchar0
    00414 2EA0      MOV	R10,R16
(0105) 	
(0106) 	lcd_putc(3,4,tmp);
    00415 82A8      ST	Y,R10
    00416 E024      LDI	R18,4
    00417 E003      LDI	R16,3
    00418 DE65      RCALL	_lcd_putc
(0107) 	while(1);
FILE: <library>
    00419 CFFF      RJMP	0x0419
    0041A 9622      ADIW	R28,2
    0041B 9508      RET
push_arg4:
    0041C 933A      ST	-Y,R19
    0041D 932A      ST	-Y,R18
push_arg2:
    0041E 931A      ST	-Y,R17
    0041F 930A      ST	-Y,R16
    00420 9508      RET
div32u:
    00421 94E8      BCLR	6
    00422 C001      RJMP	0x0424
mod32u:
    00423 9468      BSET	6
    00424 D030      RCALL	long_div_prolog
    00425 24CC      CLR	R12
    00426 C009      RJMP	0x0430
div32s:
    00427 94E8      BCLR	6
    00428 C001      RJMP	0x042A
mod32s:
    00429 9468      BSET	6
    0042A D02A      RCALL	long_div_prolog
    0042B FD37      SBRC	R19,7
    0042C 940E 0513 CALL	neg32
    0042E FDB7      SBRC	R27,7
    0042F D052      RCALL	neg_R24_R27
    00430 2477      CLR	R7
    00431 2488      CLR	R8
    00432 2499      CLR	R9
    00433 24AA      CLR	R10
    00434 24BB      CLR	R11
    00435 D042      RCALL	tst_R16_R19
    00436 F0C1      BEQ	0x044F
    00437 D045      RCALL	tst_R24_R27
    00438 F0B1      BEQ	0x044F
    00439 E2E8      LDI	R30,0x28
    0043A 0F00      LSL	R16
    0043B 1F11      ROL	R17
    0043C 1F22      ROL	R18
    0043D 1F33      ROL	R19
    0043E 1C77      ROL	R7
    0043F 1C88      ROL	R8
    00440 1C99      ROL	R9
    00441 1CAA      ROL	R10
    00442 1CBB      ROL	R11
    00443 1688      CP	R8,R24
    00444 0699      CPC	R9,R25
    00445 06AA      CPC	R10,R26
    00446 06BB      CPC	R11,R27
    00447 F028      BCS	0x044D
    00448 1A88      SUB	R8,R24
    00449 0A99      SBC	R9,R25
    0044A 0AAA      SBC	R10,R26
    0044B 0ABB      SBC	R11,R27
    0044C 9503      INC	R16
    0044D 95EA      DEC	R30
    0044E F759      BNE	0x043A
    0044F F426      BRTC	0x0454
    00450 2D08      MOV	R16,R8
    00451 2D19      MOV	R17,R9
    00452 2D2A      MOV	R18,R10
    00453 2D3B      MOV	R19,R11
    00454 C013      RJMP	long_div_epilog
long_div_prolog:
    00455 927A      ST	-Y,R7
    00456 928A      ST	-Y,R8
    00457 929A      ST	-Y,R9
    00458 92AA      ST	-Y,R10
    00459 92BA      ST	-Y,R11
    0045A 92CA      ST	-Y,R12
    0045B 93EA      ST	-Y,R30
    0045C 938A      ST	-Y,R24
    0045D 939A      ST	-Y,R25
    0045E 93AA      ST	-Y,R26
    0045F 93BA      ST	-Y,R27
    00460 858B      LDD	R24,Y+11
    00461 859C      LDD	R25,Y+12
    00462 85AD      LDD	R26,Y+13
    00463 85BE      LDD	R27,Y+14
    00464 2EC3      MOV	R12,R19
    00465 F00E      BRTS	0x0467
    00466 26CB      EOR	R12,R27
    00467 9508      RET
long_div_epilog:
    00468 FCC7      SBRC	R12,7
    00469 940E 0513 CALL	neg32
    0046B 91B9      LD	R27,Y+
    0046C 91A9      LD	R26,Y+
    0046D 9199      LD	R25,Y+
    0046E 9189      LD	R24,Y+
    0046F 91E9      LD	R30,Y+
    00470 90C9      LD	R12,Y+
    00471 90B9      LD	R11,Y+
    00472 90A9      LD	R10,Y+
    00473 9099      LD	R9,Y+
    00474 9089      LD	R8,Y+
    00475 9079      LD	R7,Y+
    00476 9624      ADIW	R28,4
    00477 9508      RET
tst_R16_R19:
    00478 2FE0      MOV	R30,R16
    00479 2BE1      OR	R30,R17
    0047A 2BE2      OR	R30,R18
    0047B 2BE3      OR	R30,R19
    0047C 9508      RET
tst_R24_R27:
    0047D 2FE8      MOV	R30,R24
    0047E 2BE9      OR	R30,R25
    0047F 2BEA      OR	R30,R26
    00480 2BEB      OR	R30,R27
    00481 9508      RET
neg_R24_R27:
    00482 9580      COM	R24
    00483 9590      COM	R25
    00484 95A0      COM	R26
    00485 95B0      COM	R27
    00486 5F8F      SUBI	R24,0xFF
    00487 4F9F      SBCI	R25,0xFF
    00488 4FAF      SBCI	R26,0xFF
    00489 4FBF      SBCI	R27,0xFF
    0048A 9508      RET
empy32u|empy32s:
    0048B 940E 051C CALL	long_prolog
    0048D 927A      ST	-Y,R7
    0048E 940E 0535 CALL	tstzero1
    00490 F159      BEQ	0x04BC
    00491 2477      CLR	R7
    00492 940E 053B CALL	tstzero2
    00494 F419      BNE	0x0498
    00495 018C      MOVW	R16,R24
    00496 019D      MOVW	R18,R26
    00497 C024      RJMP	0x04BC
    00498 920A      ST	-Y,R0
    00499 921A      ST	-Y,R1
    0049A 9F08      MUL	R16,R24
    0049B 2CB0      MOV	R11,R0
    0049C 2CA1      MOV	R10,R1
    0049D 9F28      MUL	R18,R24
    0049E 2C90      MOV	R9,R0
    0049F 2C81      MOV	R8,R1
    004A0 9F18      MUL	R17,R24
    004A1 0CA0      ADD	R10,R0
    004A2 1C91      ADC	R9,R1
    004A3 1C87      ADC	R8,R7
    004A4 9F09      MUL	R16,R25
    004A5 0CA0      ADD	R10,R0
    004A6 1C91      ADC	R9,R1
    004A7 1C87      ADC	R8,R7
    004A8 9F19      MUL	R17,R25
    004A9 0C90      ADD	R9,R0
    004AA 1C81      ADC	R8,R1
    004AB 9F0A      MUL	R16,R26
    004AC 0C90      ADD	R9,R0
    004AD 1C81      ADC	R8,R1
    004AE 9F38      MUL	R19,R24
    004AF 0C80      ADD	R8,R0
    004B0 9F29      MUL	R18,R25
    004B1 0C80      ADD	R8,R0
    004B2 9F1A      MUL	R17,R26
    004B3 0C80      ADD	R8,R0
    004B4 9F0B      MUL	R16,R27
    004B5 0C80      ADD	R8,R0
    004B6 9019      LD	R1,Y+
    004B7 9009      LD	R0,Y+
    004B8 2D0B      MOV	R16,R11
    004B9 2D1A      MOV	R17,R10
    004BA 2D29      MOV	R18,R9
    004BB 2D38      MOV	R19,R8
    004BC 9079      LD	R7,Y+
    004BD 940C 052A JMP	long_epilog
pop_xgset00FC:
    004BF 90A9      LD	R10,Y+
    004C0 90B9      LD	R11,Y+
    004C1 90C9      LD	R12,Y+
    004C2 90D9      LD	R13,Y+
    004C3 90E9      LD	R14,Y+
    004C4 90F9      LD	R15,Y+
    004C5 9508      RET
pop_xgset30FC:
    004C6 90A9      LD	R10,Y+
    004C7 90B9      LD	R11,Y+
    004C8 90C9      LD	R12,Y+
    004C9 90D9      LD	R13,Y+
    004CA 90E9      LD	R14,Y+
    004CB 90F9      LD	R15,Y+
    004CC 9149      LD	R20,Y+
    004CD 9159      LD	R21,Y+
    004CE 9508      RET
pop_xgsetF0FC:
    004CF 90A9      LD	R10,Y+
    004D0 90B9      LD	R11,Y+
    004D1 90C9      LD	R12,Y+
    004D2 90D9      LD	R13,Y+
    004D3 90E9      LD	R14,Y+
    004D4 90F9      LD	R15,Y+
    004D5 9149      LD	R20,Y+
    004D6 9159      LD	R21,Y+
    004D7 9169      LD	R22,Y+
    004D8 9179      LD	R23,Y+
    004D9 9508      RET
push_xgsetF0FC:
    004DA 937A      ST	-Y,R23
    004DB 936A      ST	-Y,R22
push_xgset30FC:
    004DC 935A      ST	-Y,R21
    004DD 934A      ST	-Y,R20
push_xgset00FC:
    004DE 92FA      ST	-Y,R15
    004DF 92EA      ST	-Y,R14
push_xgset003C:
    004E0 92DA      ST	-Y,R13
    004E1 92CA      ST	-Y,R12
    004E2 92BA      ST	-Y,R11
    004E3 92AA      ST	-Y,R10
    004E4 9508      RET
push_xgsetF00C:
    004E5 937A      ST	-Y,R23
    004E6 936A      ST	-Y,R22
    004E7 935A      ST	-Y,R21
    004E8 934A      ST	-Y,R20
    004E9 92BA      ST	-Y,R11
    004EA 92AA      ST	-Y,R10
    004EB 9508      RET
pop_xgsetF00C:
    004EC 90A9      LD	R10,Y+
    004ED 90B9      LD	R11,Y+
    004EE 9149      LD	R20,Y+
    004EF 9159      LD	R21,Y+
    004F0 9169      LD	R22,Y+
    004F1 9179      LD	R23,Y+
    004F2 9508      RET
push_xgset303C:
    004F3 935A      ST	-Y,R21
    004F4 934A      ST	-Y,R20
    004F5 92DA      ST	-Y,R13
    004F6 92CA      ST	-Y,R12
    004F7 92BA      ST	-Y,R11
    004F8 92AA      ST	-Y,R10
    004F9 9508      RET
pop_xgset303C:
    004FA 90A9      LD	R10,Y+
    004FB 90B9      LD	R11,Y+
    004FC 90C9      LD	R12,Y+
    004FD 90D9      LD	R13,Y+
    004FE 9149      LD	R20,Y+
    004FF 9159      LD	R21,Y+
    00500 9508      RET
push_xgsetF03C:
    00501 937A      ST	-Y,R23
    00502 936A      ST	-Y,R22
    00503 935A      ST	-Y,R21
    00504 934A      ST	-Y,R20
    00505 92DA      ST	-Y,R13
    00506 92CA      ST	-Y,R12
    00507 92BA      ST	-Y,R11
    00508 92AA      ST	-Y,R10
    00509 9508      RET
pop_xgsetF03C:
    0050A 90A9      LD	R10,Y+
    0050B 90B9      LD	R11,Y+
    0050C 90C9      LD	R12,Y+
    0050D 90D9      LD	R13,Y+
    0050E 9149      LD	R20,Y+
    0050F 9159      LD	R21,Y+
    00510 9169      LD	R22,Y+
    00511 9179      LD	R23,Y+
    00512 9508      RET
neg32:
    00513 9500      COM	R16
    00514 9510      COM	R17
    00515 9520      COM	R18
    00516 9530      COM	R19
    00517 5F0F      SUBI	R16,0xFF
    00518 4F1F      SBCI	R17,0xFF
    00519 4F2F      SBCI	R18,0xFF
    0051A 4F3F      SBCI	R19,0xFF
    0051B 9508      RET
long_prolog:
    0051C 928A      ST	-Y,R8
    0051D 929A      ST	-Y,R9
    0051E 92AA      ST	-Y,R10
    0051F 92BA      ST	-Y,R11
    00520 93EA      ST	-Y,R30
    00521 938A      ST	-Y,R24
    00522 939A      ST	-Y,R25
    00523 93AA      ST	-Y,R26
    00524 93BA      ST	-Y,R27
    00525 8589      LDD	R24,Y+9
    00526 859A      LDD	R25,Y+10
    00527 85AB      LDD	R26,Y+11
    00528 85BC      LDD	R27,Y+12
    00529 9508      RET
long_epilog:
    0052A 91B9      LD	R27,Y+
    0052B 91A9      LD	R26,Y+
    0052C 9199      LD	R25,Y+
    0052D 9189      LD	R24,Y+
    0052E 91E9      LD	R30,Y+
    0052F 90B9      LD	R11,Y+
    00530 90A9      LD	R10,Y+
    00531 9099      LD	R9,Y+
    00532 9089      LD	R8,Y+
    00533 9624      ADIW	R28,4
    00534 9508      RET
tstzero1:
    00535 27EE      CLR	R30
    00536 2BE0      OR	R30,R16
    00537 2BE1      OR	R30,R17
    00538 2BE2      OR	R30,R18
    00539 2BE3      OR	R30,R19
    0053A 9508      RET
tstzero2:
    0053B 27EE      CLR	R30
    0053C 2BE8      OR	R30,R24
    0053D 2BE9      OR	R30,R25
    0053E 2BEA      OR	R30,R26
    0053F 2BEB      OR	R30,R27
    00540 9508      RET
