Interrupt Vectors
    00000 940C 002A JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0002A E5CF      LDI	R28,0x5F
    0002B E0D4      LDI	R29,4
    0002C BFCD      OUT	0x3D,R28
    0002D BFDE      OUT	0x3E,R29
    0002E 51CE      SUBI	R28,0x1E
    0002F 40D0      SBCI	R29,0
    00030 EA0A      LDI	R16,0xAA
    00031 8308      ST	Y,R16
    00032 2400      CLR	R0
    00033 E6E0      LDI	R30,0x60
    00034 E0F0      LDI	R31,0
    00035 E010      LDI	R17,0
    00036 36E6      CPI	R30,0x66
    00037 07F1      CPC	R31,R17
    00038 F011      BEQ	0x003B
    00039 9201      ST	Z+,R0
    0003A CFFB      RJMP	0x0036
    0003B 8300      ST	Z,R16
    0003C E5E4      LDI	R30,0x54
    0003D E0F0      LDI	R31,0
    0003E E6A0      LDI	R26,0x60
    0003F E0B0      LDI	R27,0
    00040 E010      LDI	R17,0
    00041 E000      LDI	R16,0
    00042 BF0B      OUT	0x3B,R16
    00043 35E4      CPI	R30,0x54
    00044 07F1      CPC	R31,R17
    00045 F021      BEQ	0x004A
    00046 95C8      LPM
    00047 9631      ADIW	R30,1
    00048 920D      ST	X+,R0
    00049 CFF9      RJMP	0x0043
    0004A 940E 00E1 CALL	_main
_exit:
    0004C CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0004D 940E 00EE CALL	push_arg4
    0004F 940E 0191 CALL	push_xgsetF03C
    00051 9728      SBIW	R28,0x8
    00052 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00053 24AA      CLR	R10
    00054 E081      LDI	R24,1
    00055 8388      ST	Y,R24
    00056 E080      LDI	R24,0
    00057 8389      STD	Y+1,R24
    00058 838A      STD	Y+2,R24
    00059 838B      STD	Y+3,R24
    0005A C03C      RJMP	0x0097
(0120)     {
(0121)         y=dat/j;
    0005B 8028      LD	R2,Y
    0005C 8039      LDD	R3,Y+1
    0005D 804A      LDD	R4,Y+2
    0005E 805B      LDD	R5,Y+3
    0005F 8908      LDD	R16,Y+16
    00060 8919      LDD	R17,Y+17
    00061 892A      LDD	R18,Y+18
    00062 893B      LDD	R19,Y+19
    00063 925A      ST	-Y,R5
    00064 924A      ST	-Y,R4
    00065 923A      ST	-Y,R3
    00066 922A      ST	-Y,R2
    00067 940E 00F3 CALL	div32u
    00069 830C      STD	Y+4,R16
    0006A 831D      STD	Y+5,R17
    0006B 832E      STD	Y+6,R18
    0006C 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0006D E04A      LDI	R20,0xA
    0006E E050      LDI	R21,0
    0006F E060      LDI	R22,0
    00070 E070      LDI	R23,0
    00071 810C      LDD	R16,Y+4
    00072 811D      LDD	R17,Y+5
    00073 812E      LDD	R18,Y+6
    00074 813F      LDD	R19,Y+7
    00075 937A      ST	-Y,R23
    00076 936A      ST	-Y,R22
    00077 935A      ST	-Y,R21
    00078 934A      ST	-Y,R20
    00079 940E 00F5 CALL	mod32u
    0007B E680      LDI	R24,0x60
    0007C E090      LDI	R25,0
    0007D 2DEA      MOV	R30,R10
    0007E 27FF      CLR	R31
    0007F 0FE8      ADD	R30,R24
    00080 1FF9      ADC	R31,R25
    00081 8300      ST	Z,R16
(0123)         j*=10;
    00082 8028      LD	R2,Y
    00083 8039      LDD	R3,Y+1
    00084 804A      LDD	R4,Y+2
    00085 805B      LDD	R5,Y+3
    00086 E04A      LDI	R20,0xA
    00087 E050      LDI	R21,0
    00088 E060      LDI	R22,0
    00089 E070      LDI	R23,0
    0008A 925A      ST	-Y,R5
    0008B 924A      ST	-Y,R4
    0008C 923A      ST	-Y,R3
    0008D 922A      ST	-Y,R2
    0008E 018A      MOVW	R16,R20
    0008F 019B      MOVW	R18,R22
    00090 940E 015D CALL	empy32s|empy32u
    00092 8308      ST	Y,R16
    00093 8319      STD	Y+1,R17
    00094 832A      STD	Y+2,R18
    00095 833B      STD	Y+3,R19
    00096 94A3      INC	R10
    00097 2C2C      MOV	R2,R12
    00098 2433      CLR	R3
    00099 FC27      SBRC	R2,7
    0009A 9430      COM	R3
    0009B 2C4A      MOV	R4,R10
    0009C 2455      CLR	R5
    0009D 1442      CP	R4,R2
    0009E 0453      CPC	R5,R3
    0009F F40C      BGE	0x00A1
    000A0 CFBA      RJMP	0x005B
    000A1 9628      ADIW	R28,0x8
    000A2 940E 019A CALL	pop_xgsetF03C
    000A4 9624      ADIW	R28,4
    000A5 9508      RET
_delay50us:
  j                    --> R20
  t                    --> R16
    000A6 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    000A7 C007      RJMP	0x00AF
(0108)         for(j=0;j<70;j++)	
    000A8 2744      CLR	R20
    000A9 C001      RJMP	0x00AB
    000AA 9543      INC	R20
    000AB 3446      CPI	R20,0x46
    000AC F3E8      BCS	0x00AA
    000AD 5001      SUBI	R16,1
    000AE 4010      SBCI	R17,0
    000AF 2422      CLR	R2
    000B0 2433      CLR	R3
    000B1 1620      CP	R2,R16
    000B2 0631      CPC	R3,R17
    000B3 F3A4      BLT	0x00A8
    000B4 9149      LD	R20,Y+
    000B5 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    000B6 934A      ST	-Y,R20
    000B7 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    000B8 C013      RJMP	0x00CC
(0123) 		for(i=0;i<52642;i++)
    000B9 2744      CLR	R20
    000BA 2755      CLR	R21
    000BB C002      RJMP	0x00BE
    000BC 5F4F      SUBI	R20,0xFF
    000BD 4F5F      SBCI	R21,0xFF
    000BE EA82      LDI	R24,0xA2
    000BF EC9D      LDI	R25,0xCD
    000C0 E0A0      LDI	R26,0
    000C1 E0B0      LDI	R27,0
    000C2 011A      MOVW	R2,R20
    000C3 2444      CLR	R4
    000C4 2455      CLR	R5
    000C5 1628      CP	R2,R24
    000C6 0639      CPC	R3,R25
    000C7 064A      CPC	R4,R26
    000C8 065B      CPC	R5,R27
    000C9 F394      BLT	0x00BC
    000CA 5001      SUBI	R16,1
    000CB 4010      SBCI	R17,0
    000CC 2422      CLR	R2
    000CD 2433      CLR	R3
    000CE 1620      CP	R2,R16
    000CF 0631      CPC	R3,R17
    000D0 F344      BLT	0x00B9
    000D1 9159      LD	R21,Y+
    000D2 9149      LD	R20,Y+
    000D3 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    000D4 934A      ST	-Y,R20
    000D5 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    000D6 2744      CLR	R20
    000D7 2755      CLR	R21
    000D8 C002      RJMP	0x00DB
    000D9 5F4F      SUBI	R20,0xFF
    000DA 4F5F      SBCI	R21,0xFF
    000DB 1740      CP	R20,R16
    000DC 0751      CPC	R21,R17
    000DD F3D8      BCS	0x00D9
    000DE 9159      LD	R21,Y+
    000DF 9149      LD	R20,Y+
    000E0 9508      RET
FILE: D:\DVK501_ICC\M16_EX~1\LED\LED.C
(0001) /*
(0002) *========================================================================================================
(0003) *
(0004) * File                : LED.c
(0005) * Hardware Environment:	
(0006) * Build Environment   : ICC 7.22
(0007) * Version             : V1.0
(0008) * By                  : Wu Ze
(0009) *
(0010) *                                  (c) Copyright 2005-2009, WaveShare
(0011) *                                       http://www.waveShare.net
(0012) *                                          All Rights Reserved
(0013) *
(0014) *========================================================================================================
(0015) */
(0016) 
(0017) 
(0018) /****************************例子程序效果介绍*****************************
(0019) *
(0020) *将单片机的某端口接到LED灯后，可以观察到LED在错位闪烁，闪烁周期为1秒
(0021) *
(0022) *****************************例子程序效果介绍****************************/
(0023) #define NO_INCLUDE_I2C_H 1
(0024) #include <iom16v.h>
(0025) #include "d:\icc_h\CmmICC.h"
(0026) int main(void)
(0027) {
(0028) 	DDRA=0xFF;	//PA口接LED
_main:
    000E1 EF8F      LDI	R24,0xFF
    000E2 BB8A      OUT	0x1A,R24
(0029) 	PORTA=0x55;
    000E3 E585      LDI	R24,0x55
    000E4 BB8B      OUT	0x1B,R24
    000E5 C006      RJMP	0x00EC
(0030) 	while(1)
(0031) 	{
(0032) 		delay50ms(500);	//延时500毫秒(0.5秒)
    000E6 EF04      LDI	R16,0xF4
    000E7 E011      LDI	R17,1
    000E8 DFCD      RCALL	_delay50ms
(0033) 		PORTA=~PORTA;	//PORTA电平取反
FILE: <library>
    000E9 B22B      IN	R2,0x1B
    000EA 9420      COM	R2
    000EB BA2B      OUT	0x1B,R2
    000EC CFF9      RJMP	0x00E6
    000ED 9508      RET
push_arg4:
    000EE 933A      ST	-Y,R19
    000EF 932A      ST	-Y,R18
push_arg2:
    000F0 931A      ST	-Y,R17
    000F1 930A      ST	-Y,R16
    000F2 9508      RET
div32u:
    000F3 94E8      BCLR	6
    000F4 C001      RJMP	0x00F6
mod32u:
    000F5 9468      BSET	6
    000F6 D030      RCALL	long_div_prolog
    000F7 24CC      CLR	R12
    000F8 C009      RJMP	0x0102
div32s:
    000F9 94E8      BCLR	6
    000FA C001      RJMP	0x00FC
mod32s:
    000FB 9468      BSET	6
    000FC D02A      RCALL	long_div_prolog
    000FD FD37      SBRC	R19,7
    000FE 940E 01A3 CALL	neg32
    00100 FDB7      SBRC	R27,7
    00101 D052      RCALL	neg_R24_R27
    00102 2477      CLR	R7
    00103 2488      CLR	R8
    00104 2499      CLR	R9
    00105 24AA      CLR	R10
    00106 24BB      CLR	R11
    00107 D042      RCALL	tst_R16_R19
    00108 F0C1      BEQ	0x0121
    00109 D045      RCALL	tst_R24_R27
    0010A F0B1      BEQ	0x0121
    0010B E2E8      LDI	R30,0x28
    0010C 0F00      LSL	R16
    0010D 1F11      ROL	R17
    0010E 1F22      ROL	R18
    0010F 1F33      ROL	R19
    00110 1C77      ROL	R7
    00111 1C88      ROL	R8
    00112 1C99      ROL	R9
    00113 1CAA      ROL	R10
    00114 1CBB      ROL	R11
    00115 1688      CP	R8,R24
    00116 0699      CPC	R9,R25
    00117 06AA      CPC	R10,R26
    00118 06BB      CPC	R11,R27
    00119 F028      BCS	0x011F
    0011A 1A88      SUB	R8,R24
    0011B 0A99      SBC	R9,R25
    0011C 0AAA      SBC	R10,R26
    0011D 0ABB      SBC	R11,R27
    0011E 9503      INC	R16
    0011F 95EA      DEC	R30
    00120 F759      BNE	0x010C
    00121 F426      BRTC	0x0126
    00122 2D08      MOV	R16,R8
    00123 2D19      MOV	R17,R9
    00124 2D2A      MOV	R18,R10
    00125 2D3B      MOV	R19,R11
    00126 C013      RJMP	long_div_epilog
long_div_prolog:
    00127 927A      ST	-Y,R7
    00128 928A      ST	-Y,R8
    00129 929A      ST	-Y,R9
    0012A 92AA      ST	-Y,R10
    0012B 92BA      ST	-Y,R11
    0012C 92CA      ST	-Y,R12
    0012D 93EA      ST	-Y,R30
    0012E 938A      ST	-Y,R24
    0012F 939A      ST	-Y,R25
    00130 93AA      ST	-Y,R26
    00131 93BA      ST	-Y,R27
    00132 858B      LDD	R24,Y+11
    00133 859C      LDD	R25,Y+12
    00134 85AD      LDD	R26,Y+13
    00135 85BE      LDD	R27,Y+14
    00136 2EC3      MOV	R12,R19
    00137 F00E      BRTS	0x0139
    00138 26CB      EOR	R12,R27
    00139 9508      RET
long_div_epilog:
    0013A FCC7      SBRC	R12,7
    0013B 940E 01A3 CALL	neg32
    0013D 91B9      LD	R27,Y+
    0013E 91A9      LD	R26,Y+
    0013F 9199      LD	R25,Y+
    00140 9189      LD	R24,Y+
    00141 91E9      LD	R30,Y+
    00142 90C9      LD	R12,Y+
    00143 90B9      LD	R11,Y+
    00144 90A9      LD	R10,Y+
    00145 9099      LD	R9,Y+
    00146 9089      LD	R8,Y+
    00147 9079      LD	R7,Y+
    00148 9624      ADIW	R28,4
    00149 9508      RET
tst_R16_R19:
    0014A 2FE0      MOV	R30,R16
    0014B 2BE1      OR	R30,R17
    0014C 2BE2      OR	R30,R18
    0014D 2BE3      OR	R30,R19
    0014E 9508      RET
tst_R24_R27:
    0014F 2FE8      MOV	R30,R24
    00150 2BE9      OR	R30,R25
    00151 2BEA      OR	R30,R26
    00152 2BEB      OR	R30,R27
    00153 9508      RET
neg_R24_R27:
    00154 9580      COM	R24
    00155 9590      COM	R25
    00156 95A0      COM	R26
    00157 95B0      COM	R27
    00158 5F8F      SUBI	R24,0xFF
    00159 4F9F      SBCI	R25,0xFF
    0015A 4FAF      SBCI	R26,0xFF
    0015B 4FBF      SBCI	R27,0xFF
    0015C 9508      RET
empy32s|empy32u:
    0015D 940E 01AC CALL	long_prolog
    0015F 927A      ST	-Y,R7
    00160 940E 01C5 CALL	tstzero1
    00162 F159      BEQ	0x018E
    00163 2477      CLR	R7
    00164 940E 01CB CALL	tstzero2
    00166 F419      BNE	0x016A
    00167 018C      MOVW	R16,R24
    00168 019D      MOVW	R18,R26
    00169 C024      RJMP	0x018E
    0016A 920A      ST	-Y,R0
    0016B 921A      ST	-Y,R1
    0016C 9F08      MUL	R16,R24
    0016D 2CB0      MOV	R11,R0
    0016E 2CA1      MOV	R10,R1
    0016F 9F28      MUL	R18,R24
    00170 2C90      MOV	R9,R0
    00171 2C81      MOV	R8,R1
    00172 9F18      MUL	R17,R24
    00173 0CA0      ADD	R10,R0
    00174 1C91      ADC	R9,R1
    00175 1C87      ADC	R8,R7
    00176 9F09      MUL	R16,R25
    00177 0CA0      ADD	R10,R0
    00178 1C91      ADC	R9,R1
    00179 1C87      ADC	R8,R7
    0017A 9F19      MUL	R17,R25
    0017B 0C90      ADD	R9,R0
    0017C 1C81      ADC	R8,R1
    0017D 9F0A      MUL	R16,R26
    0017E 0C90      ADD	R9,R0
    0017F 1C81      ADC	R8,R1
    00180 9F38      MUL	R19,R24
    00181 0C80      ADD	R8,R0
    00182 9F29      MUL	R18,R25
    00183 0C80      ADD	R8,R0
    00184 9F1A      MUL	R17,R26
    00185 0C80      ADD	R8,R0
    00186 9F0B      MUL	R16,R27
    00187 0C80      ADD	R8,R0
    00188 9019      LD	R1,Y+
    00189 9009      LD	R0,Y+
    0018A 2D0B      MOV	R16,R11
    0018B 2D1A      MOV	R17,R10
    0018C 2D29      MOV	R18,R9
    0018D 2D38      MOV	R19,R8
    0018E 9079      LD	R7,Y+
    0018F 940C 01BA JMP	long_epilog
push_xgsetF03C:
    00191 937A      ST	-Y,R23
    00192 936A      ST	-Y,R22
    00193 935A      ST	-Y,R21
    00194 934A      ST	-Y,R20
    00195 92DA      ST	-Y,R13
    00196 92CA      ST	-Y,R12
    00197 92BA      ST	-Y,R11
    00198 92AA      ST	-Y,R10
    00199 9508      RET
pop_xgsetF03C:
    0019A 90A9      LD	R10,Y+
    0019B 90B9      LD	R11,Y+
    0019C 90C9      LD	R12,Y+
    0019D 90D9      LD	R13,Y+
    0019E 9149      LD	R20,Y+
    0019F 9159      LD	R21,Y+
    001A0 9169      LD	R22,Y+
    001A1 9179      LD	R23,Y+
    001A2 9508      RET
neg32:
    001A3 9500      COM	R16
    001A4 9510      COM	R17
    001A5 9520      COM	R18
    001A6 9530      COM	R19
    001A7 5F0F      SUBI	R16,0xFF
    001A8 4F1F      SBCI	R17,0xFF
    001A9 4F2F      SBCI	R18,0xFF
    001AA 4F3F      SBCI	R19,0xFF
    001AB 9508      RET
long_prolog:
    001AC 928A      ST	-Y,R8
    001AD 929A      ST	-Y,R9
    001AE 92AA      ST	-Y,R10
    001AF 92BA      ST	-Y,R11
    001B0 93EA      ST	-Y,R30
    001B1 938A      ST	-Y,R24
    001B2 939A      ST	-Y,R25
    001B3 93AA      ST	-Y,R26
    001B4 93BA      ST	-Y,R27
    001B5 8589      LDD	R24,Y+9
    001B6 859A      LDD	R25,Y+10
    001B7 85AB      LDD	R26,Y+11
    001B8 85BC      LDD	R27,Y+12
    001B9 9508      RET
long_epilog:
    001BA 91B9      LD	R27,Y+
    001BB 91A9      LD	R26,Y+
    001BC 9199      LD	R25,Y+
    001BD 9189      LD	R24,Y+
    001BE 91E9      LD	R30,Y+
    001BF 90B9      LD	R11,Y+
    001C0 90A9      LD	R10,Y+
    001C1 9099      LD	R9,Y+
    001C2 9089      LD	R8,Y+
    001C3 9624      ADIW	R28,4
    001C4 9508      RET
tstzero1:
    001C5 27EE      CLR	R30
    001C6 2BE0      OR	R30,R16
    001C7 2BE1      OR	R30,R17
    001C8 2BE2      OR	R30,R18
    001C9 2BE3      OR	R30,R19
    001CA 9508      RET
tstzero2:
    001CB 27EE      CLR	R30
    001CC 2BE8      OR	R30,R24
    001CD 2BE9      OR	R30,R25
    001CE 2BEA      OR	R30,R26
    001CF 2BEB      OR	R30,R27
    001D0 9508      RET
