Interrupt Vectors
    00000 940C 00A2 JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    000A2 E5CF      LDI	R28,0x5F
    000A3 E0D4      LDI	R29,4
    000A4 BFCD      OUT	0x3D,R28
    000A5 BFDE      OUT	0x3E,R29
    000A6 51C0      SUBI	R28,0x10
    000A7 40D0      SBCI	R29,0
    000A8 EA0A      LDI	R16,0xAA
    000A9 8308      ST	Y,R16
    000AA 2400      CLR	R0
    000AB E5E0      LDI	R30,0x50
    000AC E0F1      LDI	R31,1
    000AD E011      LDI	R17,1
    000AE 35E7      CPI	R30,0x57
    000AF 07F1      CPC	R31,R17
    000B0 F011      BEQ	0x00B3
    000B1 9201      ST	Z+,R0
    000B2 CFFB      RJMP	0x00AE
    000B3 8300      ST	Z,R16
    000B4 E5E4      LDI	R30,0x54
    000B5 E0F0      LDI	R31,0
    000B6 E6A0      LDI	R26,0x60
    000B7 E0B0      LDI	R27,0
    000B8 E011      LDI	R17,1
    000B9 E000      LDI	R16,0
    000BA BF0B      OUT	0x3B,R16
    000BB 34E4      CPI	R30,0x44
    000BC 07F1      CPC	R31,R17
    000BD F021      BEQ	0x00C2
    000BE 95C8      LPM
    000BF 9631      ADIW	R30,1
    000C0 920D      ST	X+,R0
    000C1 CFF9      RJMP	0x00BB
    000C2 940E 034E CALL	_main
_exit:
    000C4 CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    000C5 940E 035D CALL	push_arg4
    000C7 940E 0426 CALL	push_xgsetF03C
    000C9 9728      SBIW	R28,0x8
    000CA 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    000CB 24AA      CLR	R10
    000CC E081      LDI	R24,1
    000CD 8388      ST	Y,R24
    000CE E080      LDI	R24,0
    000CF 8389      STD	Y+1,R24
    000D0 838A      STD	Y+2,R24
    000D1 838B      STD	Y+3,R24
    000D2 C03C      RJMP	0x010F
(0120)     {
(0121)         y=dat/j;
    000D3 8028      LD	R2,Y
    000D4 8039      LDD	R3,Y+1
    000D5 804A      LDD	R4,Y+2
    000D6 805B      LDD	R5,Y+3
    000D7 8908      LDD	R16,Y+16
    000D8 8919      LDD	R17,Y+17
    000D9 892A      LDD	R18,Y+18
    000DA 893B      LDD	R19,Y+19
    000DB 925A      ST	-Y,R5
    000DC 924A      ST	-Y,R4
    000DD 923A      ST	-Y,R3
    000DE 922A      ST	-Y,R2
    000DF 940E 0362 CALL	div32u
    000E1 830C      STD	Y+4,R16
    000E2 831D      STD	Y+5,R17
    000E3 832E      STD	Y+6,R18
    000E4 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    000E5 E04A      LDI	R20,0xA
    000E6 E050      LDI	R21,0
    000E7 E060      LDI	R22,0
    000E8 E070      LDI	R23,0
    000E9 810C      LDD	R16,Y+4
    000EA 811D      LDD	R17,Y+5
    000EB 812E      LDD	R18,Y+6
    000EC 813F      LDD	R19,Y+7
    000ED 937A      ST	-Y,R23
    000EE 936A      ST	-Y,R22
    000EF 935A      ST	-Y,R21
    000F0 934A      ST	-Y,R20
    000F1 940E 0364 CALL	mod32u
    000F3 E581      LDI	R24,0x51
    000F4 E091      LDI	R25,1
    000F5 2DEA      MOV	R30,R10
    000F6 27FF      CLR	R31
    000F7 0FE8      ADD	R30,R24
    000F8 1FF9      ADC	R31,R25
    000F9 8300      ST	Z,R16
(0123)         j*=10;
    000FA 8028      LD	R2,Y
    000FB 8039      LDD	R3,Y+1
    000FC 804A      LDD	R4,Y+2
    000FD 805B      LDD	R5,Y+3
    000FE E04A      LDI	R20,0xA
    000FF E050      LDI	R21,0
    00100 E060      LDI	R22,0
    00101 E070      LDI	R23,0
    00102 925A      ST	-Y,R5
    00103 924A      ST	-Y,R4
    00104 923A      ST	-Y,R3
    00105 922A      ST	-Y,R2
    00106 018A      MOVW	R16,R20
    00107 019B      MOVW	R18,R22
    00108 940E 03CC CALL	empy32s|empy32u
    0010A 8308      ST	Y,R16
    0010B 8319      STD	Y+1,R17
    0010C 832A      STD	Y+2,R18
    0010D 833B      STD	Y+3,R19
    0010E 94A3      INC	R10
    0010F 2C2C      MOV	R2,R12
    00110 2433      CLR	R3
    00111 FC27      SBRC	R2,7
    00112 9430      COM	R3
    00113 2C4A      MOV	R4,R10
    00114 2455      CLR	R5
    00115 1442      CP	R4,R2
    00116 0453      CPC	R5,R3
    00117 F40C      BGE	0x0119
    00118 CFBA      RJMP	0x00D3
    00119 9628      ADIW	R28,0x8
    0011A 940E 042F CALL	pop_xgsetF03C
    0011C 9624      ADIW	R28,4
    0011D 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    0011E EA84      LDI	R24,0xA4
    0011F BF86      OUT	0x36,R24
(0128) 	I2CWaitAck();
    00120 B626      IN	R2,0x36
    00121 FE27      SBRS	R2,7
    00122 CFFD      RJMP	0x0120
(0129) 	if( I2CChkAck()!=I2C_START ) 
    00123 B181      IN	R24,0x01
    00124 7F88      ANDI	R24,0xF8
    00125 3088      CPI	R24,0x8
    00126 F011      BEQ	0x0129
(0130) 		return I2C_ERR;
    00127 2700      CLR	R16
    00128 C001      RJMP	0x012A
(0131) 	return I2C_CRR;
    00129 E001      LDI	R16,1
    0012A 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    0012B EA84      LDI	R24,0xA4
    0012C BF86      OUT	0x36,R24
(0144) 	I2CWaitAck();
    0012D B626      IN	R2,0x36
    0012E FE27      SBRS	R2,7
    0012F CFFD      RJMP	0x012D
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    00130 B181      IN	R24,0x01
    00131 7F88      ANDI	R24,0xF8
    00132 3180      CPI	R24,0x10
    00133 F011      BEQ	0x0136
(0146) 		return I2C_ERR;
    00134 2700      CLR	R16
    00135 C001      RJMP	0x0137
(0147) 	return I2C_CRR;
    00136 E001      LDI	R16,1
    00137 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    00138 B903      OUT	0x03,R16
    00139 E884      LDI	R24,0x84
    0013A BF86      OUT	0x36,R24
(0160) 	I2CWaitAck();
    0013B B626      IN	R2,0x36
    0013C FE27      SBRS	R2,7
    0013D CFFD      RJMP	0x013B
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    0013E B181      IN	R24,0x01
    0013F 7F88      ANDI	R24,0xF8
    00140 3188      CPI	R24,0x18
    00141 F011      BEQ	0x0144
(0162) 		return I2C_ERR;
    00142 2700      CLR	R16
    00143 C001      RJMP	0x0145
(0163) 	return I2C_CRR;		
    00144 E001      LDI	R16,1
    00145 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    00146 92AA      ST	-Y,R10
    00147 92BA      ST	-Y,R11
    00148 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    00149 FEA0      SBRS	R10,0
    0014A C00E      RJMP	0x0159
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    0014B 2D0A      MOV	R16,R10
    0014C 9506      LSR	R16
    0014D 9506      LSR	R16
    0014E 9506      LSR	R16
    0014F 9506      LSR	R16
    00150 9506      LSR	R16
    00151 9506      LSR	R16
    00152 9506      LSR	R16
    00153 9506      LSR	R16
    00154 DFE3      RCALL	_I2C_SendWrDAdr
    00155 2300      TST	R16
    00156 F411      BNE	0x0159
(0177) 			return I2C_ERR;
    00157 2700      CLR	R16
    00158 C007      RJMP	0x0160
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    00159 2D0A      MOV	R16,R10
    0015A DFDD      RCALL	_I2C_SendWrDAdr
    0015B 2300      TST	R16
    0015C F411      BNE	0x015F
(0179) 		return I2C_ERR;
    0015D 2700      CLR	R16
    0015E C001      RJMP	0x0160
(0180) 	return I2C_CRR;
    0015F E001      LDI	R16,1
    00160 90B9      LD	R11,Y+
    00161 90A9      LD	R10,Y+
    00162 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    00163 B903      OUT	0x03,R16
    00164 E884      LDI	R24,0x84
    00165 BF86      OUT	0x36,R24
(0193) 	I2CWaitAck();
    00166 B626      IN	R2,0x36
    00167 FE27      SBRS	R2,7
    00168 CFFD      RJMP	0x0166
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    00169 B181      IN	R24,0x01
    0016A 7F88      ANDI	R24,0xF8
    0016B 3480      CPI	R24,0x40
    0016C F011      BEQ	0x016F
(0195) 		return I2C_ERR;
    0016D 2700      CLR	R16
    0016E C001      RJMP	0x0170
(0196) 	return I2C_CRR;	
    0016F E001      LDI	R16,1
    00170 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    00171 92AA      ST	-Y,R10
    00172 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    00173 FEA0      SBRS	R10,0
    00174 C00E      RJMP	0x0183
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    00175 2D0A      MOV	R16,R10
    00176 9506      LSR	R16
    00177 9506      LSR	R16
    00178 9506      LSR	R16
    00179 9506      LSR	R16
    0017A 9506      LSR	R16
    0017B 9506      LSR	R16
    0017C 9506      LSR	R16
    0017D 9506      LSR	R16
    0017E DFB9      RCALL	_I2C_SendWrDAdr
    0017F 2300      TST	R16
    00180 F411      BNE	0x0183
(0210) 			return I2C_ERR;
    00181 2700      CLR	R16
    00182 C007      RJMP	0x018A
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    00183 2D0A      MOV	R16,R10
    00184 DFB3      RCALL	_I2C_SendWrDAdr
    00185 2300      TST	R16
    00186 F411      BNE	0x0189
(0212) 		return I2C_ERR;
    00187 2700      CLR	R16
    00188 C001      RJMP	0x018A
(0213) 	return I2C_CRR;
    00189 E001      LDI	R16,1
    0018A 90A9      LD	R10,Y+
    0018B 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    0018C B903      OUT	0x03,R16
    0018D E884      LDI	R24,0x84
    0018E BF86      OUT	0x36,R24
(0226) 	I2CWaitAck();
    0018F B626      IN	R2,0x36
    00190 FE27      SBRS	R2,7
    00191 CFFD      RJMP	0x018F
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    00192 B181      IN	R24,0x01
    00193 7F88      ANDI	R24,0xF8
    00194 3288      CPI	R24,0x28
    00195 F011      BEQ	0x0198
(0228) 		return I2C_ERR;
    00196 2700      CLR	R16
    00197 C001      RJMP	0x0199
(0229) 	return I2C_CRR;	
    00198 E001      LDI	R16,1
    00199 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    0019A E884      LDI	R24,0x84
    0019B BF86      OUT	0x36,R24
(0242) 	I2CWaitAck();
    0019C B626      IN	R2,0x36
    0019D FE27      SBRS	R2,7
    0019E CFFD      RJMP	0x019C
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    0019F B181      IN	R24,0x01
    001A0 7F88      ANDI	R24,0xF8
    001A1 3588      CPI	R24,0x58
    001A2 F011      BEQ	0x01A5
(0244) 		return I2C_ERR;
    001A3 2700      CLR	R16
    001A4 C004      RJMP	0x01A9
(0245) 	*pRdDat=TWDR;
    001A5 B023      IN	R2,0x03
    001A6 01F8      MOVW	R30,R16
    001A7 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    001A8 E001      LDI	R16,1
    001A9 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    001AA EC84      LDI	R24,0xC4
    001AB BF86      OUT	0x36,R24
(0259) 	I2CWaitAck();
    001AC B626      IN	R2,0x36
    001AD FE27      SBRS	R2,7
    001AE CFFD      RJMP	0x01AC
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    001AF B181      IN	R24,0x01
    001B0 7F88      ANDI	R24,0xF8
    001B1 3580      CPI	R24,0x50
    001B2 F011      BEQ	0x01B5
(0261) 		return I2C_ERR;
    001B3 2700      CLR	R16
    001B4 C004      RJMP	0x01B9
(0262) 	*pRdDat=TWDR;
    001B5 B023      IN	R2,0x03
    001B6 01F8      MOVW	R30,R16
    001B7 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    001B8 E001      LDI	R16,1
    001B9 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    001BA 940E 041F CALL	push_xgset00FC
    001BC 2EC2      MOV	R12,R18
    001BD 0178      MOVW	R14,R16
    001BE 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    001BF DF5E      RCALL	_I2C_Start
    001C0 2300      TST	R16
    001C1 F411      BNE	0x01C4
(0278) 		return I2C_ERR;
    001C2 2700      CLR	R16
    001C3 C017      RJMP	0x01DB
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001C4 0187      MOVW	R16,R14
    001C5 DF80      RCALL	_I2C_SendWrDAdr_
    001C6 2300      TST	R16
    001C7 F411      BNE	0x01CA
(0281) 		return I2C_ERR;
    001C8 2700      CLR	R16
    001C9 C011      RJMP	0x01DB
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001CA 2D0C      MOV	R16,R12
    001CB DFC0      RCALL	_I2C_SendDat
    001CC 2EC0      MOV	R12,R16
    001CD 2300      TST	R16
    001CE F411      BNE	0x01D1
(0284) 		return I2C_ERR;
    001CF 2700      CLR	R16
    001D0 C00A      RJMP	0x01DB
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    001D1 2D0A      MOV	R16,R10
    001D2 DFB9      RCALL	_I2C_SendDat
    001D3 2EA0      MOV	R10,R16
    001D4 2300      TST	R16
    001D5 F411      BNE	0x01D8
(0287) 		return I2C_ERR;
    001D6 2700      CLR	R16
    001D7 C003      RJMP	0x01DB
(0288) 
(0289) 	I2C_Stop();
    001D8 E984      LDI	R24,0x94
    001D9 BF86      OUT	0x36,R24
(0290) 
(0291) 	return I2C_CRR;
    001DA E001      LDI	R16,1
    001DB 940C 0400 JMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    001DD 940E 041D CALL	push_xgset30FC
    001DF 2EE2      MOV	R14,R18
    001E0 01A8      MOVW	R20,R16
    001E1 84C8      LDD	R12,Y+8
    001E2 84AA      LDD	R10,Y+10
    001E3 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    001E4 DF39      RCALL	_I2C_Start
    001E5 2300      TST	R16
    001E6 F411      BNE	0x01E9
(0324) 		return I2C_ERR;
    001E7 2700      CLR	R16
    001E8 C024      RJMP	0x020D
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001E9 018A      MOVW	R16,R20
    001EA DF5B      RCALL	_I2C_SendWrDAdr_
    001EB 2300      TST	R16
    001EC F411      BNE	0x01EF
(0327) 		return I2C_ERR;
    001ED 2700      CLR	R16
    001EE C01E      RJMP	0x020D
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001EF 2D0E      MOV	R16,R14
    001F0 DF9B      RCALL	_I2C_SendDat
    001F1 2EE0      MOV	R14,R16
    001F2 2300      TST	R16
    001F3 F411      BNE	0x01F6
(0330) 		return I2C_ERR;
    001F4 2700      CLR	R16
    001F5 C017      RJMP	0x020D
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    001F6 DF34      RCALL	_I2C_Restart
    001F7 2EE0      MOV	R14,R16
    001F8 2300      TST	R16
    001F9 F411      BNE	0x01FC
(0333) 		return I2C_ERR;
    001FA 2700      CLR	R16
    001FB C011      RJMP	0x020D
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001FC 2D0C      MOV	R16,R12
    001FD DF65      RCALL	_I2C_SendRdDAdr
    001FE 2EC0      MOV	R12,R16
    001FF 2300      TST	R16
    00200 F411      BNE	0x0203
(0336) 		return I2C_ERR;
    00201 2700      CLR	R16
    00202 C00A      RJMP	0x020D
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    00203 0185      MOVW	R16,R10
    00204 DF95      RCALL	_I2C_RcvNAckDat
    00205 2EA0      MOV	R10,R16
    00206 2300      TST	R16
    00207 F411      BNE	0x020A
(0339) 		return I2C_ERR;
    00208 2700      CLR	R16
    00209 C003      RJMP	0x020D
(0340) 
(0341) 	I2C_Stop();
    0020A E984      LDI	R24,0x94
    0020B BF86      OUT	0x36,R24
(0342) 
(0343) 	return I2C_CRR;
    0020C E001      LDI	R16,1
    0020D 940C 0407 JMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    0020F 940E 041B CALL	push_xgsetF0FC
    00211 2EE2      MOV	R14,R18
    00212 01B8      MOVW	R22,R16
    00213 84CA      LDD	R12,Y+10
    00214 84AC      LDD	R10,Y+12
    00215 84BD      LDD	R11,Y+13
    00216 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    00217 DF06      RCALL	_I2C_Start
    00218 2300      TST	R16
    00219 F411      BNE	0x021C
(0363) 		return I2C_ERR;
    0021A 2700      CLR	R16
    0021B C038      RJMP	0x0254
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    0021C 018B      MOVW	R16,R22
    0021D DF28      RCALL	_I2C_SendWrDAdr_
    0021E 2300      TST	R16
    0021F F411      BNE	0x0222
(0366) 		return I2C_ERR;
    00220 2700      CLR	R16
    00221 C032      RJMP	0x0254
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00222 2D0E      MOV	R16,R14
    00223 DF68      RCALL	_I2C_SendDat
    00224 2EE0      MOV	R14,R16
    00225 2300      TST	R16
    00226 F411      BNE	0x0229
(0369) 		return I2C_ERR;
    00227 2700      CLR	R16
    00228 C02B      RJMP	0x0254
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    00229 DF01      RCALL	_I2C_Restart
    0022A 2EE0      MOV	R14,R16
    0022B 2300      TST	R16
    0022C F411      BNE	0x022F
(0372) 		return I2C_ERR;
    0022D 2700      CLR	R16
    0022E C025      RJMP	0x0254
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    0022F 2D0C      MOV	R16,R12
    00230 DF32      RCALL	_I2C_SendRdDAdr
    00231 2EC0      MOV	R12,R16
    00232 2300      TST	R16
    00233 F411      BNE	0x0236
(0375) 		return I2C_ERR;
    00234 2700      CLR	R16
    00235 C01E      RJMP	0x0254
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    00236 24CC      CLR	R12
    00237 C00B      RJMP	0x0243
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    00238 2D0C      MOV	R16,R12
    00239 2711      CLR	R17
    0023A 0D0A      ADD	R16,R10
    0023B 1D1B      ADC	R17,R11
    0023C DF6D      RCALL	_I2C_RcvAckDat
    0023D 2EE0      MOV	R14,R16
    0023E 2300      TST	R16
    0023F F411      BNE	0x0242
(0379) 			return I2C_ERR;
    00240 2700      CLR	R16
    00241 C012      RJMP	0x0254
    00242 94C3      INC	R12
    00243 2F84      MOV	R24,R20
    00244 5081      SUBI	R24,1
    00245 16C8      CP	R12,R24
    00246 F388      BCS	0x0238
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    00247 2D0C      MOV	R16,R12
    00248 2711      CLR	R17
    00249 0D0A      ADD	R16,R10
    0024A 1D1B      ADC	R17,R11
    0024B DF4E      RCALL	_I2C_RcvNAckDat
    0024C 2EA0      MOV	R10,R16
    0024D 2300      TST	R16
    0024E F411      BNE	0x0251
(0382) 			return I2C_ERR;
    0024F 2700      CLR	R16
    00250 C003      RJMP	0x0254
(0383) 
(0384) 	I2C_Stop();
    00251 E984      LDI	R24,0x94
    00252 BF86      OUT	0x36,R24
(0385) 	
(0386) 	return I2C_CRR;
    00253 E001      LDI	R16,1
    00254 940C 0410 JMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    00256 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    00257 C007      RJMP	0x025F
(0108)         for(j=0;j<70;j++)	
    00258 2744      CLR	R20
    00259 C001      RJMP	0x025B
    0025A 9543      INC	R20
    0025B 3446      CPI	R20,0x46
    0025C F3E8      BCS	0x025A
    0025D 5001      SUBI	R16,1
    0025E 4010      SBCI	R17,0
    0025F 2422      CLR	R2
    00260 2433      CLR	R3
    00261 1620      CP	R2,R16
    00262 0631      CPC	R3,R17
    00263 F3A4      BLT	0x0258
    00264 9149      LD	R20,Y+
    00265 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    00266 934A      ST	-Y,R20
    00267 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    00268 C013      RJMP	0x027C
(0123) 		for(i=0;i<52642;i++)
    00269 2744      CLR	R20
    0026A 2755      CLR	R21
    0026B C002      RJMP	0x026E
    0026C 5F4F      SUBI	R20,0xFF
    0026D 4F5F      SBCI	R21,0xFF
    0026E EA82      LDI	R24,0xA2
    0026F EC9D      LDI	R25,0xCD
    00270 E0A0      LDI	R26,0
    00271 E0B0      LDI	R27,0
    00272 011A      MOVW	R2,R20
    00273 2444      CLR	R4
    00274 2455      CLR	R5
    00275 1628      CP	R2,R24
    00276 0639      CPC	R3,R25
    00277 064A      CPC	R4,R26
    00278 065B      CPC	R5,R27
    00279 F394      BLT	0x026C
    0027A 5001      SUBI	R16,1
    0027B 4010      SBCI	R17,0
    0027C 2422      CLR	R2
    0027D 2433      CLR	R3
    0027E 1620      CP	R2,R16
    0027F 0631      CPC	R3,R17
    00280 F344      BLT	0x0269
    00281 9159      LD	R21,Y+
    00282 9149      LD	R20,Y+
    00283 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    00284 934A      ST	-Y,R20
    00285 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    00286 2744      CLR	R20
    00287 2755      CLR	R21
    00288 C002      RJMP	0x028B
    00289 5F4F      SUBI	R20,0xFF
    0028A 4F5F      SBCI	R21,0xFF
    0028B 1740      CP	R20,R16
    0028C 0751      CPC	R21,R17
    0028D F3D8      BCS	0x0289
    0028E 9159      LD	R21,Y+
    0028F 9149      LD	R20,Y+
    00290 9508      RET
FILE: E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PS2PC~1\PS2SimpleSoft\PS2SimpleSoft.c
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立PS/2的SimpleSoft测试程序（软件查询读取PS/2接收到的数据）
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 按PC键盘，观察单片机读到的数据，使用PD口的LED做指示。
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：
(0030) 将PD口的LED指示灯使用短路帽短接；
(0031) 将PC键盘插入PS2接口，
(0032) 使用短路帽短接PB0与DATA，
(0033) 使用短路帽短接PB1与CLK
(0034) ----------------------------------------------------------------------
(0035) 注意事项： 
(0036) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0037) （2）请详细阅读“使用必读”及相关资料。
(0038) ----------------------------------------------------------------------
(0039) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0040) 
(0041) #include <iom16v.h>
(0042) #include "D:\ICC_H\CmmICC.H"
(0043) #include "D:\ICC_H\PS2.H"
(0044) 
(0045) #define PRESS_DATA_DDR	DDRA
(0046) #define PRESS_DATA_PORT PORTA
(0047) #define SHIFT_DATA_DDR	DDRA
(0048) #define SHIFT_DATA_PORT PORTA
(0049) 
(0050) #define SET_SDA		sbi(PORTD,3)
(0051) #define CLR_SDA		cbi(PORTD,3)
(0052) #define GET_SDA		gbi(PIND,3)
(0053) #define OUT_SDA 	sbi(DDRD,3)
(0054) #define IN_SDA 		cbi(DDRD,3)
(0055) 
(0056) #define SET_SCK		sbi(PORTD,2)
(0057) #define CLR_SCK		cbi(PORTD,2)
(0058) #define GET_SCK		gbi(PIND,2)
(0059) #define OUT_SCK 	sbi(DDRD,2)
(0060) #define IN_SCK 		cbi(DDRD,2)
(0061) 
(0062) #define DELAY() {NOP();NOP();NOP();NOP();}
(0063) 
(0064) bool rcvF		= 0; 	//是否收到字符标志
(0065) uint8 keyVal; 			//键值
(0066) 
(0067) /*--------------------------------------------------------------------
(0068) 函数名称：
(0069) 函数功能：
(0070) 注意事项：
(0071) 提示说明：
(0072) 输    入：
(0073) 返    回：
(0074) --------------------------------------------------------------------*/
(0075) void check(void)
(0076) {
(0077)     static uint8 rcvBits = 0;	//接收次数，中断次数
(0078) 	
(0079) 	OUT_SCK; 		   			//设置"SCK_DDR"为输出
_check:
    00291 9A8A      SBI	0x11,2
(0080) 	DELAY();
    00292 0000      NOP
    00293 0000      NOP
    00294 0000      NOP
    00295 0000      NOP
(0081) 	SET_SCK;					//"SCK_PORT"输出"1"
    00296 9A92      SBI	0x12,2
(0082) 	DELAY();
    00297 0000      NOP
    00298 0000      NOP
    00299 0000      NOP
    0029A 0000      NOP
(0083) 	
(0084) 	IN_SCK;						//设置"SCK_DDR"为输入
    0029B 988A      CBI	0x11,2
(0085) 	DELAY();
    0029C 0000      NOP
    0029D 0000      NOP
    0029E 0000      NOP
    0029F 0000      NOP
(0086) 	if(!GET_SCK)
    002A0 9982      SBIC	0x10,2
    002A1 C025      RJMP	0x02C7
(0087) 	{
(0088) 		if((rcvBits>0) && (rcvBits<9))
    002A2 9020 014D LDS	R2,PS2SimpleSoft.c:rcvBits
    002A4 E080      LDI	R24,0
    002A5 1582      CP	R24,R2
    002A6 F470      BCC	0x02B5
    002A7 2D82      MOV	R24,R2
    002A8 3089      CPI	R24,0x9
    002A9 F458      BCC	0x02B5
(0089) 		{ 
(0090) 			keyVal=keyVal>>1; 	//数据是LSB格式
    002AA 9020 0150 LDS	R2,keyVal
    002AC 9426      LSR	R2
    002AD 9220 0150 STS	keyVal,R2
(0091) 			//IN_SDA;			//当有对键盘有属性设置时，注意输入输出切换
(0092) 			//DELAY();
(0093) 			if(GET_SDA) 
    002AF 9B83      SBIS	0x10,3
    002B0 C004      RJMP	0x02B5
(0094) 	 			keyVal=keyVal|0x80; 
    002B1 2D82      MOV	R24,R2
    002B2 6880      ORI	R24,0x80
    002B3 9380 0150 STS	keyVal,R24
(0095) 		}
(0096) 		rcvBits++;
    002B5 9180 014D LDS	R24,PS2SimpleSoft.c:rcvBits
    002B7 5F8F      SUBI	R24,0xFF
    002B8 9380 014D STS	PS2SimpleSoft.c:rcvBits,R24
(0097) 		while(!GET_SCK); 		//等待PS/2CLK拉高
    002BA 9B82      SBIS	0x10,2
    002BB CFFE      RJMP	0x02BA
(0098) 	
(0099) 		if(rcvBits>10)
    002BC E08A      LDI	R24,0xA
    002BD 9020 014D LDS	R2,PS2SimpleSoft.c:rcvBits
    002BF 1582      CP	R24,R2
    002C0 F430      BCC	0x02C7
(0100) 		{
(0101) 			rcvBits=0; 			//接收11次表示接收完一帧数据
    002C1 2422      CLR	R2
    002C2 9220 014D STS	PS2SimpleSoft.c:rcvBits,R2
(0102) 			rcvF=1; 			//标识有字符已经输入
    002C4 E081      LDI	R24,1
    002C5 9380 014C STS	rcvF,R24
(0103) 		}
(0104) 	}
    002C7 9508      RET
_keyHandle:
  i                    --> R20
  val                  --> R16
    002C8 934A      ST	-Y,R20
    002C9 935A      ST	-Y,R21
(0105) }
(0106) /*--------------------------------------------------------------------
(0107) 函数名称：
(0108) 函数功能：
(0109) 注意事项：
(0110) 提示说明：
(0111) 输    入：
(0112) 返    回：
(0113) --------------------------------------------------------------------*/
(0114) void keyHandle(uint8 val) 
(0115) {
(0116) 	uint8 i;
(0117) 	static bool isUp=0;			//按键释放动作标志
(0118) 	static bool shift=0;		//shift键按下标志
(0119) 	rcvF = 0; 
    002CA 2422      CLR	R2
    002CB 9220 014C STS	rcvF,R2
(0120) 	PRESS_DATA_PORT = val;		//状态指示
    002CD BB0B      OUT	0x1B,R16
(0121) 	if(!isUp)
    002CE 9020 014E LDS	R2,PS2SimpleSoft.c:isUp
    002D0 2022      TST	R2
    002D1 F009      BEQ	0x02D3
    002D2 C05F      RJMP	0x0332
(0122) 	{
(0123) 		switch(val)
    002D3 2F40      MOV	R20,R16
    002D4 2755      CLR	R21
    002D5 3549      CPI	R20,0x59
    002D6 E0E0      LDI	R30,0
    002D7 075E      CPC	R21,R30
    002D8 F0B9      BEQ	0x02F0
    002D9 E589      LDI	R24,0x59
    002DA E090      LDI	R25,0
    002DB 1784      CP	R24,R20
    002DC 0795      CPC	R25,R21
    002DD F02C      BLT	0x02E3
    002DE 3142      CPI	R20,0x12
    002DF E0E0      LDI	R30,0
    002E0 075E      CPC	R21,R30
    002E1 F051      BEQ	0x02EC
    002E2 C011      RJMP	0x02F4
    002E3 3F40      CPI	R20,0xF0
    002E4 E0E0      LDI	R30,0
    002E5 075E      CPC	R21,R30
    002E6 F009      BEQ	0x02E8
    002E7 C00C      RJMP	0x02F4
(0124) 		{
(0125) 			case 0xF0 :			// a relase action
(0126) 				isUp = 1;
    002E8 E081      LDI	R24,1
    002E9 9380 014E STS	PS2SimpleSoft.c:isUp,R24
(0127) 				break;
    002EB C05F      RJMP	0x034B
(0128) 			case 0x12 :			// Left shift
(0129) 				shift = 1;
    002EC E081      LDI	R24,1
    002ED 9380 014F STS	PS2SimpleSoft.c:shift,R24
(0130) 				break;
    002EF C05B      RJMP	0x034B
(0131) 			case 0x59 :			// Right shift
(0132) 				shift = 1;
    002F0 E081      LDI	R24,1
    002F1 9380 014F STS	PS2SimpleSoft.c:shift,R24
(0133) 				break;
    002F3 C057      RJMP	0x034B
(0134) 			default:
(0135) 				if(!shift)		// If shift not pressed
    002F4 9020 014F LDS	R2,PS2SimpleSoft.c:shift
    002F6 2022      TST	R2
    002F7 F4E9      BNE	0x0315
(0136) 				{ 
(0137) /*
(0138) 					for(i=0; unshifted[i][0]!=val && unshifted[i][0]; i++)
(0139) 						;
(0140) 					上述写法较为灵活，但KEIL非UNIXC标准，不能采用该写法
(0141) */
(0142) 					for(i=0; unshifted[i][0]!=val && i<59; i++)
    002F8 2744      CLR	R20
    002F9 C001      RJMP	0x02FB
    002FA 9543      INC	R20
    002FB E680      LDI	R24,0x60
    002FC E090      LDI	R25,0
    002FD 2FE4      MOV	R30,R20
    002FE 27FF      CLR	R31
    002FF 0FEE      LSL	R30
    00300 1FFF      ROL	R31
    00301 0FE8      ADD	R30,R24
    00302 1FF9      ADC	R31,R25
    00303 8020      LD	R2,Z
    00304 1620      CP	R2,R16
    00305 F011      BEQ	0x0308
    00306 334B      CPI	R20,0x3B
    00307 F390      BCS	0x02FA
(0143) 						;
(0144) 					if(unshifted[i][0] == val) 
    00308 E680      LDI	R24,0x60
    00309 E090      LDI	R25,0
    0030A 2FE4      MOV	R30,R20
    0030B 27FF      CLR	R31
    0030C 0FEE      LSL	R30
    0030D 1FFF      ROL	R31
    0030E 0FE8      ADD	R30,R24
    0030F 1FF9      ADC	R31,R25
    00310 8020      LD	R2,Z
    00311 1620      CP	R2,R16
    00312 F009      BEQ	0x0314
    00313 C037      RJMP	0x034B
(0145) 						;		//状态指示
(0146) 					
(0147) 				} 
    00314 C036      RJMP	0x034B
(0148) 				else			// If shift pressed
(0149) 				{			
(0150) /*
(0151) 					for(i=0; unshifted[i][0]!=val && unshifted[i][0]; i++)
(0152) 						;
(0153) 					上述写法较为灵活，但KEIL非UNIXC标准，不能采用该写法
(0154) */
(0155) 					for(i=0; shifted[i][0]!=val && i<59; i++)
    00315 2744      CLR	R20
    00316 C001      RJMP	0x0318
    00317 9543      INC	R20
    00318 ED86      LDI	R24,0xD6
    00319 E090      LDI	R25,0
    0031A 2FE4      MOV	R30,R20
    0031B 27FF      CLR	R31
    0031C 0FEE      LSL	R30
    0031D 1FFF      ROL	R31
    0031E 0FE8      ADD	R30,R24
    0031F 1FF9      ADC	R31,R25
    00320 8020      LD	R2,Z
    00321 1620      CP	R2,R16
    00322 F011      BEQ	0x0325
    00323 334B      CPI	R20,0x3B
    00324 F390      BCS	0x0317
(0156) 						;
(0157) 					if(shifted[i][0] == val) 
    00325 ED86      LDI	R24,0xD6
    00326 E090      LDI	R25,0
    00327 2FE4      MOV	R30,R20
    00328 27FF      CLR	R31
    00329 0FEE      LSL	R30
    0032A 1FFF      ROL	R31
    0032B 0FE8      ADD	R30,R24
    0032C 1FF9      ADC	R31,R25
    0032D 8020      LD	R2,Z
    0032E 1620      CP	R2,R16
    0032F F4D9      BNE	0x034B
(0158) 						SHIFT_DATA_PORT = val;//状态指示
    00330 BB0B      OUT	0x1B,R16
(0159) 				}
(0160) 		}
(0161) 	}
    00331 C019      RJMP	0x034B
(0162) 	else 
(0163) 	{
(0164) 		isUp=0;					
    00332 2422      CLR	R2
    00333 9220 014E STS	PS2SimpleSoft.c:isUp,R2
(0165) 		switch(val)
    00335 2F40      MOV	R20,R16
    00336 2755      CLR	R21
    00337 3142      CPI	R20,0x12
    00338 E0E0      LDI	R30,0
    00339 075E      CPC	R21,R30
    0033A F049      BEQ	0x0344
    0033B 3142      CPI	R20,0x12
    0033C E0E0      LDI	R30,0
    0033D 075E      CPC	R21,R30
    0033E F064      BLT	0x034B
    0033F 3549      CPI	R20,0x59
    00340 E0E0      LDI	R30,0
    00341 075E      CPC	R21,R30
    00342 F029      BEQ	0x0348
    00343 C007      RJMP	0x034B
(0166) 		{
(0167) 			case 0x12 :			// Left SHIFT
(0168) 				shift = 0;
    00344 2422      CLR	R2
    00345 9220 014F STS	PS2SimpleSoft.c:shift,R2
(0169) 				break;
    00347 C003      RJMP	0x034B
(0170) 			case 0x59 :			// Right SHIFT
(0171) 				shift = 0;
    00348 2422      CLR	R2
    00349 9220 014F STS	PS2SimpleSoft.c:shift,R2
(0172) 				break;
(0173) 		}
(0174) 	}
    0034B 9159      LD	R21,Y+
    0034C 9149      LD	R20,Y+
    0034D 9508      RET
(0175) }  
(0176) /*--------------------------------------------------------------------
(0177) 函数名称：
(0178) 函数功能：
(0179) 注意事项：
(0180) 提示说明：
(0181) 输    入：
(0182) 返    回：
(0183) --------------------------------------------------------------------*/
(0184) void main(void)
(0185) {
(0186)     PRESS_DATA_DDR = 0XFF;
_main:
    0034E EF8F      LDI	R24,0xFF
    0034F BB8A      OUT	0x1A,R24
(0187) 	SHIFT_DATA_DDR = 0XFF;
    00350 BB8A      OUT	0x1A,R24
(0188) 	IN_SDA;
    00351 988B      CBI	0x11,3
    00352 C008      RJMP	0x035B
(0189) 	while(1)
(0190) 	{
(0191) 		check();
    00353 DF3D      RCALL	_check
(0192) 		if(rcvF)
    00354 9020 014C LDS	R2,rcvF
    00356 2022      TST	R2
    00357 F019      BEQ	0x035B
(0193) 			keyHandle(keyVal);
FILE: <library>
    00358 9100 0150 LDS	R16,keyVal
    0035A DF6D      RCALL	_keyHandle
    0035B CFF7      RJMP	0x0353
    0035C 9508      RET
push_arg4:
    0035D 933A      ST	-Y,R19
    0035E 932A      ST	-Y,R18
push_arg2:
    0035F 931A      ST	-Y,R17
    00360 930A      ST	-Y,R16
    00361 9508      RET
div32u:
    00362 94E8      BCLR	6
    00363 C001      RJMP	0x0365
mod32u:
    00364 9468      BSET	6
    00365 D030      RCALL	long_div_prolog
    00366 24CC      CLR	R12
    00367 C009      RJMP	0x0371
div32s:
    00368 94E8      BCLR	6
    00369 C001      RJMP	0x036B
mod32s:
    0036A 9468      BSET	6
    0036B D02A      RCALL	long_div_prolog
    0036C FD37      SBRC	R19,7
    0036D 940E 0438 CALL	neg32
    0036F FDB7      SBRC	R27,7
    00370 D052      RCALL	neg_R24_R27
    00371 2477      CLR	R7
    00372 2488      CLR	R8
    00373 2499      CLR	R9
    00374 24AA      CLR	R10
    00375 24BB      CLR	R11
    00376 D042      RCALL	tst_R16_R19
    00377 F0C1      BEQ	0x0390
    00378 D045      RCALL	tst_R24_R27
    00379 F0B1      BEQ	0x0390
    0037A E2E8      LDI	R30,0x28
    0037B 0F00      LSL	R16
    0037C 1F11      ROL	R17
    0037D 1F22      ROL	R18
    0037E 1F33      ROL	R19
    0037F 1C77      ROL	R7
    00380 1C88      ROL	R8
    00381 1C99      ROL	R9
    00382 1CAA      ROL	R10
    00383 1CBB      ROL	R11
    00384 1688      CP	R8,R24
    00385 0699      CPC	R9,R25
    00386 06AA      CPC	R10,R26
    00387 06BB      CPC	R11,R27
    00388 F028      BCS	0x038E
    00389 1A88      SUB	R8,R24
    0038A 0A99      SBC	R9,R25
    0038B 0AAA      SBC	R10,R26
    0038C 0ABB      SBC	R11,R27
    0038D 9503      INC	R16
    0038E 95EA      DEC	R30
    0038F F759      BNE	0x037B
    00390 F426      BRTC	0x0395
    00391 2D08      MOV	R16,R8
    00392 2D19      MOV	R17,R9
    00393 2D2A      MOV	R18,R10
    00394 2D3B      MOV	R19,R11
    00395 C013      RJMP	long_div_epilog
long_div_prolog:
    00396 927A      ST	-Y,R7
    00397 928A      ST	-Y,R8
    00398 929A      ST	-Y,R9
    00399 92AA      ST	-Y,R10
    0039A 92BA      ST	-Y,R11
    0039B 92CA      ST	-Y,R12
    0039C 93EA      ST	-Y,R30
    0039D 938A      ST	-Y,R24
    0039E 939A      ST	-Y,R25
    0039F 93AA      ST	-Y,R26
    003A0 93BA      ST	-Y,R27
    003A1 858B      LDD	R24,Y+11
    003A2 859C      LDD	R25,Y+12
    003A3 85AD      LDD	R26,Y+13
    003A4 85BE      LDD	R27,Y+14
    003A5 2EC3      MOV	R12,R19
    003A6 F00E      BRTS	0x03A8
    003A7 26CB      EOR	R12,R27
    003A8 9508      RET
long_div_epilog:
    003A9 FCC7      SBRC	R12,7
    003AA 940E 0438 CALL	neg32
    003AC 91B9      LD	R27,Y+
    003AD 91A9      LD	R26,Y+
    003AE 9199      LD	R25,Y+
    003AF 9189      LD	R24,Y+
    003B0 91E9      LD	R30,Y+
    003B1 90C9      LD	R12,Y+
    003B2 90B9      LD	R11,Y+
    003B3 90A9      LD	R10,Y+
    003B4 9099      LD	R9,Y+
    003B5 9089      LD	R8,Y+
    003B6 9079      LD	R7,Y+
    003B7 9624      ADIW	R28,4
    003B8 9508      RET
tst_R16_R19:
    003B9 2FE0      MOV	R30,R16
    003BA 2BE1      OR	R30,R17
    003BB 2BE2      OR	R30,R18
    003BC 2BE3      OR	R30,R19
    003BD 9508      RET
tst_R24_R27:
    003BE 2FE8      MOV	R30,R24
    003BF 2BE9      OR	R30,R25
    003C0 2BEA      OR	R30,R26
    003C1 2BEB      OR	R30,R27
    003C2 9508      RET
neg_R24_R27:
    003C3 9580      COM	R24
    003C4 9590      COM	R25
    003C5 95A0      COM	R26
    003C6 95B0      COM	R27
    003C7 5F8F      SUBI	R24,0xFF
    003C8 4F9F      SBCI	R25,0xFF
    003C9 4FAF      SBCI	R26,0xFF
    003CA 4FBF      SBCI	R27,0xFF
    003CB 9508      RET
empy32s|empy32u:
    003CC 940E 0441 CALL	long_prolog
    003CE 927A      ST	-Y,R7
    003CF 940E 045A CALL	tstzero1
    003D1 F159      BEQ	0x03FD
    003D2 2477      CLR	R7
    003D3 940E 0460 CALL	tstzero2
    003D5 F419      BNE	0x03D9
    003D6 018C      MOVW	R16,R24
    003D7 019D      MOVW	R18,R26
    003D8 C024      RJMP	0x03FD
    003D9 920A      ST	-Y,R0
    003DA 921A      ST	-Y,R1
    003DB 9F08      MUL	R16,R24
    003DC 2CB0      MOV	R11,R0
    003DD 2CA1      MOV	R10,R1
    003DE 9F28      MUL	R18,R24
    003DF 2C90      MOV	R9,R0
    003E0 2C81      MOV	R8,R1
    003E1 9F18      MUL	R17,R24
    003E2 0CA0      ADD	R10,R0
    003E3 1C91      ADC	R9,R1
    003E4 1C87      ADC	R8,R7
    003E5 9F09      MUL	R16,R25
    003E6 0CA0      ADD	R10,R0
    003E7 1C91      ADC	R9,R1
    003E8 1C87      ADC	R8,R7
    003E9 9F19      MUL	R17,R25
    003EA 0C90      ADD	R9,R0
    003EB 1C81      ADC	R8,R1
    003EC 9F0A      MUL	R16,R26
    003ED 0C90      ADD	R9,R0
    003EE 1C81      ADC	R8,R1
    003EF 9F38      MUL	R19,R24
    003F0 0C80      ADD	R8,R0
    003F1 9F29      MUL	R18,R25
    003F2 0C80      ADD	R8,R0
    003F3 9F1A      MUL	R17,R26
    003F4 0C80      ADD	R8,R0
    003F5 9F0B      MUL	R16,R27
    003F6 0C80      ADD	R8,R0
    003F7 9019      LD	R1,Y+
    003F8 9009      LD	R0,Y+
    003F9 2D0B      MOV	R16,R11
    003FA 2D1A      MOV	R17,R10
    003FB 2D29      MOV	R18,R9
    003FC 2D38      MOV	R19,R8
    003FD 9079      LD	R7,Y+
    003FE 940C 044F JMP	long_epilog
pop_xgset00FC:
    00400 90A9      LD	R10,Y+
    00401 90B9      LD	R11,Y+
    00402 90C9      LD	R12,Y+
    00403 90D9      LD	R13,Y+
    00404 90E9      LD	R14,Y+
    00405 90F9      LD	R15,Y+
    00406 9508      RET
pop_xgset30FC:
    00407 90A9      LD	R10,Y+
    00408 90B9      LD	R11,Y+
    00409 90C9      LD	R12,Y+
    0040A 90D9      LD	R13,Y+
    0040B 90E9      LD	R14,Y+
    0040C 90F9      LD	R15,Y+
    0040D 9149      LD	R20,Y+
    0040E 9159      LD	R21,Y+
    0040F 9508      RET
pop_xgsetF0FC:
    00410 90A9      LD	R10,Y+
    00411 90B9      LD	R11,Y+
    00412 90C9      LD	R12,Y+
    00413 90D9      LD	R13,Y+
    00414 90E9      LD	R14,Y+
    00415 90F9      LD	R15,Y+
    00416 9149      LD	R20,Y+
    00417 9159      LD	R21,Y+
    00418 9169      LD	R22,Y+
    00419 9179      LD	R23,Y+
    0041A 9508      RET
push_xgsetF0FC:
    0041B 937A      ST	-Y,R23
    0041C 936A      ST	-Y,R22
push_xgset30FC:
    0041D 935A      ST	-Y,R21
    0041E 934A      ST	-Y,R20
push_xgset00FC:
    0041F 92FA      ST	-Y,R15
    00420 92EA      ST	-Y,R14
push_xgset003C:
    00421 92DA      ST	-Y,R13
    00422 92CA      ST	-Y,R12
    00423 92BA      ST	-Y,R11
    00424 92AA      ST	-Y,R10
    00425 9508      RET
push_xgsetF03C:
    00426 937A      ST	-Y,R23
    00427 936A      ST	-Y,R22
    00428 935A      ST	-Y,R21
    00429 934A      ST	-Y,R20
    0042A 92DA      ST	-Y,R13
    0042B 92CA      ST	-Y,R12
    0042C 92BA      ST	-Y,R11
    0042D 92AA      ST	-Y,R10
    0042E 9508      RET
pop_xgsetF03C:
    0042F 90A9      LD	R10,Y+
    00430 90B9      LD	R11,Y+
    00431 90C9      LD	R12,Y+
    00432 90D9      LD	R13,Y+
    00433 9149      LD	R20,Y+
    00434 9159      LD	R21,Y+
    00435 9169      LD	R22,Y+
    00436 9179      LD	R23,Y+
    00437 9508      RET
neg32:
    00438 9500      COM	R16
    00439 9510      COM	R17
    0043A 9520      COM	R18
    0043B 9530      COM	R19
    0043C 5F0F      SUBI	R16,0xFF
    0043D 4F1F      SBCI	R17,0xFF
    0043E 4F2F      SBCI	R18,0xFF
    0043F 4F3F      SBCI	R19,0xFF
    00440 9508      RET
long_prolog:
    00441 928A      ST	-Y,R8
    00442 929A      ST	-Y,R9
    00443 92AA      ST	-Y,R10
    00444 92BA      ST	-Y,R11
    00445 93EA      ST	-Y,R30
    00446 938A      ST	-Y,R24
    00447 939A      ST	-Y,R25
    00448 93AA      ST	-Y,R26
    00449 93BA      ST	-Y,R27
    0044A 8589      LDD	R24,Y+9
    0044B 859A      LDD	R25,Y+10
    0044C 85AB      LDD	R26,Y+11
    0044D 85BC      LDD	R27,Y+12
    0044E 9508      RET
long_epilog:
    0044F 91B9      LD	R27,Y+
    00450 91A9      LD	R26,Y+
    00451 9199      LD	R25,Y+
    00452 9189      LD	R24,Y+
    00453 91E9      LD	R30,Y+
    00454 90B9      LD	R11,Y+
    00455 90A9      LD	R10,Y+
    00456 9099      LD	R9,Y+
    00457 9089      LD	R8,Y+
    00458 9624      ADIW	R28,4
    00459 9508      RET
tstzero1:
    0045A 27EE      CLR	R30
    0045B 2BE0      OR	R30,R16
    0045C 2BE1      OR	R30,R17
    0045D 2BE2      OR	R30,R18
    0045E 2BE3      OR	R30,R19
    0045F 9508      RET
tstzero2:
    00460 27EE      CLR	R30
    00461 2BE8      OR	R30,R24
    00462 2BE9      OR	R30,R25
    00463 2BEA      OR	R30,R26
    00464 2BEB      OR	R30,R27
    00465 9508      RET
