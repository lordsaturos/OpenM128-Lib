                        .module PS2SimpleSoft.c
                        .area text(rom, con, rel)
 0000                   .dbfile ..\..\..\STK16_~1.0\PS2PC~1\PS2SimpleSoft_LCD12864\PS2SimpleSoft.c
 0000                   .dbfile D:\ICC_H\Software.H
 0000                   .dbfunc e speaData _speaData fV
 0000           ;              y -> y+4
 0000           ;              j -> y+0
 0000           ;              i -> R10
 0000           ;            len -> R12
 0000           ;            dat -> y+16
                        .even
 0000           _speaData::
 0000 0E940000          xcall push_arg4
 0004 0E940000          xcall push_xgsetF03C
 0008 2897              sbiw R28,8
 000A CC88              ldd R12,y+20
 000C                   .dbline -1
 000C                   .dbline 116
 000C           ; /*********************************************************************
 000C           ;       微 雪 电 子   WaveShare   http://www.waveShare.net              
 000C           ;                                                                       
 000C           ; 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
 000C           ;       
 000C           ; 目标系统:   基于AVR单片机
 000C           ;                                                                               
 000C           ; 应用软件:   ICCAVR
 000C           ;                                                                               
 000C           ; 版    本:   Version 1.0                                                       
 000C           ;                                                                               
 000C           ; 圆版时间:   2005-06-25
 000C           ;       
 000C           ; 开发人员:   SEE
 000C           ; 
 000C           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 000C           ;       
 000C           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
 000C           ; *********************************************************************/
 000C           ; 
 000C           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 000C           ; ----------------------------------------------------------------------
 000C           ; 版本更新记录：
 000C           ; 
 000C           ; ----------------------------------------------------------------------
 000C           ; 入口参数说明：
 000C           ; 
 000C           ; ----------------------------------------------------------------------
 000C           ; 待定参数说明：
 000C           ; 
 000C           ; ----------------------------------------------------------------------        
 000C           ; 对外变量说明：
 000C           ;     
 000C           ; ----------------------------------------------------------------------
 000C           ; 对外函数说明：
 000C           ;    
 000C           ; ----------------------------------------------------------------------
 000C           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 000C           ; 
 000C           ; #ifndef Software_H
 000C           ; #define Software_H
 000C           ; 
 000C           ; #include <math.h>
 000C           ; #include <string.h>
 000C           ; 
 000C           ; /* 兼容一般程序员的常用写法 */
 000C           ; typedef unsigned char uchar;
 000C           ; typedef unsigned int  uint;
 000C           ; typedef unsigned long ulong;
 000C           ; typedef signed char           schar;
 000C           ; typedef signed int            sint;
 000C           ; typedef signed long           slong;
 000C           ; 
 000C           ; /* 为方便移植，建议使用下面写法 */
 000C           ; typedef unsigned char bool;
 000C           ; typedef unsigned char uint8;
 000C           ; typedef unsigned int  uint16;
 000C           ; typedef unsigned long   uint32;
 000C           ; typedef signed  char  sint8;
 000C           ; typedef signed        int             sint16;
 000C           ; typedef signed        long    sint32;
 000C           ; typedef signed  char  int8;
 000C           ; typedef signed  int           int16;
 000C           ; typedef signed  long  int32;
 000C           ; 
 000C           ; /* 下面写法一般不推荐 */
 000C           ; //typedef unsigned char ubyte;
 000C           ; //typedef unsigned int        uword;
 000C           ; //typedef unsigned long udword;
 000C           ; //typedef signed   char       sbyte;
 000C           ; //typedef signed   int        sword;
 000C           ; //typedef signed   long       sdword;
 000C           ; 
 000C           ; /* 一般程序定义的默认值 */
 000C           ; //#define NULL                        0
 000C           ; //#define EOF                 -1
 000C           ; //#define TRUE                1
 000C           ; //#define FALSE               0
 000C           ; //#define YES                 1
 000C           ; //#define NO                          0
 000C           ; //#define ON                  1
 000C           ; //#define OFF                 0
 000C           ; //#define ENABLE              1
 000C           ; //#define DISABLE             0
 000C           ; //#define CRR                 1
 000C           ; //#define ERR                 0
 000C           ; //#define RIGHT                       1
 000C           ; //#define WRONG                       0
 000C           ; //#define SUCCESS             1
 000C           ; //#define FAILURE             0
 000C           ; //#define PI                  3.1415926       //3.1415926535897932
 000C           ; 
 000C           ; /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
 000C           ; //#define _CALLOC(a)          ( (a *)calloc(n,sizeof(a)) )
 000C           ; //#define _MALLOC(a)          ( (a *)malloc(sizeof(a)) )
 000C           ; //#define _MIN(a,b)                   ( (a) < (b) ? (a) : (b) )
 000C           ; //#define _MAX(a,b)                   ( (a) > (b) ? (a) : (b) )
 000C           ; //#define _EXCHANGE(a,b)      { int t; t=a; a=b; b=t; }
 000C           ; //#define _TOLOWER(c)         ( (c)+32 )
 000C           ; //#define _TOUPPER(c)         ( (c)-32 )
 000C           ; 
 000C           ; //#ifndef BIT
 000C           ; //#define BIT(x)      ( 1<<(x) )
 000C           ; //#endif
 000C           ; 
 000C           ; /*--------------------------------------------------------------------
 000C           ; 函数全称：数据拆字
 000C           ; 函数功能：
 000C           ; 注意事项：D<=999999,C<=6
 000C           ; 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
 000C           ; 输    入：
 000C           ; 返    回：无
 000C           ; --------------------------------------------------------------------*/
 000C           ; uint8 dataElem[6];
 000C           ; void speaData(uint32 dat,sint8 len)
 000C           ; {
 000C                   .dbline 119
 000C           ;     uint8 i;
 000C           ;     uint32 j,y;
 000C           ;     for(i=0,j=1;i<len;i++)
 000C AA24              clr R10
 000E 81E0              ldi R24,1
 0010 8883              std y+0,R24
 0012 80E0              ldi R24,0
 0014 8983              std y+1,R24
 0016 8A83              std y+2,R24
 0018 8B83              std y+3,R24
 001A 3CC0              xjmp L5
 001C           L2:
 001C                   .dbline 120
 001C           ;     {
 001C                   .dbline 121
 001C           ;         y=dat/j;
 001C 2880              ldd R2,y+0
 001E 3980              ldd R3,y+1
 0020 4A80              ldd R4,y+2
 0022 5B80              ldd R5,y+3
 0024 0889              ldd R16,y+16
 0026 1989              ldd R17,y+17
 0028 2A89              ldd R18,y+18
 002A 3B89              ldd R19,y+19
 002C 5A92              st -y,R5
 002E 4A92              st -y,R4
 0030 3A92              st -y,R3
 0032 2A92              st -y,R2
 0034 0E940000          xcall div32u
 0038 0C83              std y+4,R16
 003A 1D83              std y+5,R17
 003C 2E83              std y+6,R18
 003E 3F83              std y+7,R19
 0040                   .dbline 122
 0040           ;         dataElem[i]=y%10;
 0040 4AE0              ldi R20,10
 0042 50E0              ldi R21,0
 0044 60E0              ldi R22,0
 0046 70E0              ldi R23,0
 0048 0C81              ldd R16,y+4
 004A 1D81              ldd R17,y+5
 004C 2E81              ldd R18,y+6
 004E 3F81              ldd R19,y+7
 0050 7A93              st -y,R23
 0052 6A93              st -y,R22
 0054 5A93              st -y,R21
 0056 4A93              st -y,R20
 0058 0E940000          xcall mod32u
 005C 80E0              ldi R24,<_dataElem
 005E 90E0              ldi R25,>_dataElem
 0060 EA2D              mov R30,R10
 0062 FF27              clr R31
 0064 E80F              add R30,R24
 0066 F91F              adc R31,R25
 0068 0083              std z+0,R16
 006A                   .dbline 123
 006A           ;         j*=10;
 006A 2880              ldd R2,y+0
 006C 3980              ldd R3,y+1
 006E 4A80              ldd R4,y+2
 0070 5B80              ldd R5,y+3
 0072 4AE0              ldi R20,10
 0074 50E0              ldi R21,0
 0076 60E0              ldi R22,0
 0078 70E0              ldi R23,0
 007A 5A92              st -y,R5
 007C 4A92              st -y,R4
 007E 3A92              st -y,R3
 0080 2A92              st -y,R2
 0082 8A01              movw R16,R20
 0084 9B01              movw R18,R22
 0086 0E940000          xcall empy32u
 008A 0883              std y+0,R16
 008C 1983              std y+1,R17
 008E 2A83              std y+2,R18
 0090 3B83              std y+3,R19
 0092                   .dbline 124
 0092           ;     }
 0092           L3:
 0092                   .dbline 119
 0092 A394              inc R10
 0094           L5:
 0094                   .dbline 119
 0094 2C2C              mov R2,R12
 0096 3324              clr R3
 0098 27FC              sbrc R2,7
 009A 3094              com R3
 009C 4A2C              mov R4,R10
 009E 5524              clr R5
 00A0 4214              cp R4,R2
 00A2 5304              cpc R5,R3
 00A4 0CF4              brge X1
 00A6 BACF              xjmp L2
 00A8           X1:
 00A8           X0:
 00A8                   .dbline -2
 00A8           L1:
 00A8                   .dbline 0 ; func end
 00A8 2896              adiw R28,8
 00AA 0E940000          xcall pop_xgsetF03C
 00AE 2496              adiw R28,4
 00B0 0895              ret
 00B2                   .dbsym l y 4 l
 00B2                   .dbsym l j 0 l
 00B2                   .dbsym r i 10 c
 00B2                   .dbsym r len 12 C
 00B2                   .dbsym l dat 16 l
 00B2                   .dbend
 00B2                   .dbfile D:\ICC_H\I2C.H
 00B2                   .dbfunc e I2C_Start _I2C_Start fc
                        .even
 00B2           _I2C_Start::
 00B2                   .dbline -1
 00B2                   .dbline 126
 00B2           ; /*********************************************************************
 00B2           ;       微 雪 电 子   WaveShare   http://www.waveShare.net              
 00B2           ;                                                                       
 00B2           ; 目    的:   建立I2C操作库
 00B2           ;       
 00B2           ; 目标系统:   基于AVR单片机
 00B2           ;                                                                               
 00B2           ; 应用软件:   ICCAVR
 00B2           ;                                                                               
 00B2           ; 版    本:   Version 1.0                                                          
 00B2           ;                                                                               
 00B2           ; 圆版时间:   2005-06-25
 00B2           ;       
 00B2           ; 开发人员:   SEE
 00B2           ; 
 00B2           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 00B2           ;       
 00B2           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
 00B2           ; *********************************************************************/
 00B2           ; 
 00B2           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 00B2           ; ----------------------------------------------------------------------
 00B2           ; 版本更新记录：
 00B2           ; 
 00B2           ; ----------------------------------------------------------------------
 00B2           ; 入口参数说明：
 00B2           ; 
 00B2           ; ----------------------------------------------------------------------
 00B2           ; 待定参数说明：
 00B2           ; 
 00B2           ; ----------------------------------------------------------------------        
 00B2           ; 对外变量说明：
 00B2           ; 
 00B2           ; ----------------------------------------------------------------------
 00B2           ; 对外函数说明：
 00B2           ; 
 00B2           ; ----------------------------------------------------------------------
 00B2           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 00B2           ; 
 00B2           ; #ifndef I2C_H
 00B2           ; #define I2C_H
 00B2           ; 
 00B2           ; /* TWSR values (not bits) */
 00B2           ; /* Master */
 00B2           ; #define I2C_START                     0x08
 00B2           ; #define I2C_RESTART                   0x10
 00B2           ; 
 00B2           ; /* Master Transmitter */
 00B2           ; #define I2C_MT_SLA_ACK                0x18
 00B2           ; #define I2C_MT_SLA_NACK               0x20
 00B2           ; #define I2C_MT_DATA_ACK               0x28
 00B2           ; #define I2C_MT_DATA_NACK      0x30
 00B2           ; #define I2C_MT_ARB_LOST               0x38
 00B2           ; 
 00B2           ; /* Master Receiver */
 00B2           ; #define I2C_MR_ARB_LOST               0x38
 00B2           ; #define I2C_MR_SLA_ACK                0x40
 00B2           ; #define I2C_MR_SLA_NACK               0x48
 00B2           ; #define I2C_MR_DATA_ACK               0x50
 00B2           ; #define I2C_MR_DATA_NACK      0x58
 00B2           ; 
 00B2           ; /* Slave Transmitter */
 00B2           ; #define I2C_ST_SLA_ACK                        0xA8
 00B2           ; #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
 00B2           ; #define I2C_ST_DATA_ACK                       0xB8
 00B2           ; #define I2C_ST_DATA_NACK              0xC0
 00B2           ; #define I2C_ST_LAST_DATA              0xC8
 00B2           ; 
 00B2           ; /* Slave Receiver */
 00B2           ; #define I2C_SR_SLA_ACK                                0x60
 00B2           ; #define I2C_SR_ARB_LOST_SLA_ACK               0x68
 00B2           ; #define I2C_SR_GCALL_ACK                      0x70
 00B2           ; #define I2C_SR_ARB_LOST_GCALL_ACK     0x78
 00B2           ; #define I2C_SR_DATA_ACK                               0x80
 00B2           ; #define I2C_SR_DATA_NACK                      0x88
 00B2           ; #define I2C_SR_GCALL_DATA_ACK         0x90
 00B2           ; #define I2C_SR_GCALL_DATA_NACK                0x98
 00B2           ; #define I2C_SR_STOP                                   0xA0
 00B2           ; 
 00B2           ; /* Misc */
 00B2           ; #define I2C_NO_INFO                   0xF8
 00B2           ; #define I2C_BUS_ERROR         0x00
 00B2           ; 
 00B2           ; /*
 00B2           ;  * The lower 3 bits of TWSR are reserved on the ATmega163.
 00B2           ;  * The 2 LSB carry the prescaler bits on the newer ATmegas.
 00B2           ;  */
 00B2           ; #define I2C_STATUS_MASK       (_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
 00B2           ; #define I2C_STATUS            (TWSR & I2C_STATUS_MASK)
 00B2           ; 
 00B2           ; /*
 00B2           ;  * R/~W bit in SLA+R/W address field.
 00B2           ;  */
 00B2           ; #define I2C_READ              1
 00B2           ; #define I2C_WRITE             0
 00B2           ; 
 00B2           ; #define I2CStart()            (TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
 00B2           ; #define I2CStop()             (TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
 00B2           ; #define I2CWaitAck()  {while(!(TWCR&(1<<TWINT)));}
 00B2           ; #define I2CChkAck()   (TWSR&0xf8)                                     //check ack
 00B2           ; #define I2CSendAck()  (TWCR|=(1<<TWEA))
 00B2           ; #define I2CSendNoAck()        (TWCR&=~(1<<TWEA))
 00B2           ; #define I2CSendByte(x)        {TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
 00B2           ; #define I2CRcvNckByte()       (TWCR=(1<<TWINT)|(1<<TWEN))
 00B2           ; #define I2CRcvAckByte()       (TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
 00B2           ; 
 00B2           ; /* For Program */
 00B2           ; #define I2C_Stop()            I2CStop()
 00B2           ; #define I2C_SendAck() I2CSendAck()
 00B2           ; #define I2C_SendNoAck() I2CSendNoAck()
 00B2           ; #define I2C_WaitAck() I2CWaitAck()
 00B2           ; 
 00B2           ; /* I2C Config */
 00B2           ; #define I2C_ERR                       0
 00B2           ; #define I2C_CRR                       1
 00B2           ; 
 00B2           ; /*--------------------------------------------------------------------
 00B2           ; 函数名称：I2C Start
 00B2           ; 函数功能：
 00B2           ; 注意事项：
 00B2           ; 提示说明：
 00B2           ; 输    入：
 00B2           ; 返    回：
 00B2           ; --------------------------------------------------------------------*/
 00B2           ; bool I2C_Start()                                      
 00B2           ; {
 00B2                   .dbline 127
 00B2           ;       I2CStart();                                             
 00B2 84EA              ldi R24,164
 00B4 86BF              out 0x36,R24
 00B6                   .dbline 128
 00B6           ;       I2CWaitAck();
 00B6           L7:
 00B6                   .dbline 128
 00B6           L8:
 00B6                   .dbline 128
 00B6 26B6              in R2,0x36
 00B8 27FE              sbrs R2,7
 00BA FDCF              rjmp L7
 00BC           X2:
 00BC                   .dbline 128
 00BC                   .dbline 128
 00BC                   .dbline 129
 00BC           ;       if( I2CChkAck()!=I2C_START ) 
 00BC 81B1              in R24,0x1
 00BE 887F              andi R24,248
 00C0 8830              cpi R24,8
 00C2 11F0              breq L10
 00C4           X3:
 00C4                   .dbline 130
 00C4           ;               return I2C_ERR;
 00C4 0027              clr R16
 00C6 01C0              xjmp L6
 00C8           L10:
 00C8                   .dbline 131
 00C8           ;       return I2C_CRR;
 00C8 01E0              ldi R16,1
 00CA                   .dbline -2
 00CA           L6:
 00CA                   .dbline 0 ; func end
 00CA 0895              ret
 00CC                   .dbend
 00CC                   .dbfunc e I2C_Restart _I2C_Restart fc
                        .even
 00CC           _I2C_Restart::
 00CC                   .dbline -1
 00CC                   .dbline 142
 00CC           ; }
 00CC           ; /*--------------------------------------------------------------------
 00CC           ; 函数名称：I2C ReStart
 00CC           ; 函数功能：
 00CC           ; 注意事项：
 00CC           ; 提示说明：
 00CC           ; 输    入：
 00CC           ; 返    回：
 00CC           ; --------------------------------------------------------------------*/
 00CC           ; bool I2C_Restart()                                    
 00CC           ; {
 00CC                   .dbline 143
 00CC           ;       I2CStart();                                             
 00CC 84EA              ldi R24,164
 00CE 86BF              out 0x36,R24
 00D0                   .dbline 144
 00D0           ;       I2CWaitAck();
 00D0           L13:
 00D0                   .dbline 144
 00D0           L14:
 00D0                   .dbline 144
 00D0 26B6              in R2,0x36
 00D2 27FE              sbrs R2,7
 00D4 FDCF              rjmp L13
 00D6           X4:
 00D6                   .dbline 144
 00D6                   .dbline 144
 00D6                   .dbline 145
 00D6           ;       if( I2CChkAck()!=I2C_RESTART ) 
 00D6 81B1              in R24,0x1
 00D8 887F              andi R24,248
 00DA 8031              cpi R24,16
 00DC 11F0              breq L16
 00DE           X5:
 00DE                   .dbline 146
 00DE           ;               return I2C_ERR;
 00DE 0027              clr R16
 00E0 01C0              xjmp L12
 00E2           L16:
 00E2                   .dbline 147
 00E2           ;       return I2C_CRR;
 00E2 01E0              ldi R16,1
 00E4                   .dbline -2
 00E4           L12:
 00E4                   .dbline 0 ; func end
 00E4 0895              ret
 00E6                   .dbend
 00E6                   .dbfunc e I2C_SendWrDAdr _I2C_SendWrDAdr fc
 00E6           ;         wrDAdr -> R16
                        .even
 00E6           _I2C_SendWrDAdr::
 00E6                   .dbline -1
 00E6                   .dbline 158
 00E6           ; }
 00E6           ; /*--------------------------------------------------------------------
 00E6           ; 函数名称：发送 7位 器件写地址: XXXX XXX0
 00E6           ; 函数功能：
 00E6           ; 注意事项：
 00E6           ; 提示说明：
 00E6           ; 输    入：
 00E6           ; 返    回：
 00E6           ; --------------------------------------------------------------------*/
 00E6           ; bool I2C_SendWrDAdr(uint8 wrDAdr)     
 00E6           ; {
 00E6                   .dbline 159
 00E6           ;       I2CSendByte(wrDAdr);                    //设置 器件写地址
 00E6                   .dbline 159
 00E6 03B9              out 0x3,R16
 00E8                   .dbline 159
 00E8 84E8              ldi R24,132
 00EA 86BF              out 0x36,R24
 00EC                   .dbline 159
 00EC                   .dbline 159
 00EC                   .dbline 160
 00EC           ;       I2CWaitAck();
 00EC           L19:
 00EC                   .dbline 160
 00EC           L20:
 00EC                   .dbline 160
 00EC 26B6              in R2,0x36
 00EE 27FE              sbrs R2,7
 00F0 FDCF              rjmp L19
 00F2           X6:
 00F2                   .dbline 160
 00F2                   .dbline 160
 00F2                   .dbline 161
 00F2           ;       if( I2CChkAck()!=I2C_MT_SLA_ACK )  
 00F2 81B1              in R24,0x1
 00F4 887F              andi R24,248
 00F6 8831              cpi R24,24
 00F8 11F0              breq L22
 00FA           X7:
 00FA                   .dbline 162
 00FA           ;               return I2C_ERR;
 00FA 0027              clr R16
 00FC 01C0              xjmp L18
 00FE           L22:
 00FE                   .dbline 163
 00FE           ;       return I2C_CRR;         
 00FE 01E0              ldi R16,1
 0100                   .dbline -2
 0100           L18:
 0100                   .dbline 0 ; func end
 0100 0895              ret
 0102                   .dbsym r wrDAdr 16 c
 0102                   .dbend
 0102                   .dbfunc e I2C_SendWrDAdr_ _I2C_SendWrDAdr_ fc
 0102           ;         wrDAdr -> R10,R11
                        .even
 0102           _I2C_SendWrDAdr_::
 0102 AA92              st -y,R10
 0104 BA92              st -y,R11
 0106 5801              movw R10,R16
 0108                   .dbline -1
 0108                   .dbline 174
 0108           ; }
 0108           ; /*--------------------------------------------------------------------
 0108           ; 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
 0108           ; 函数功能：
 0108           ; 注意事项：
 0108           ; 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
 0108           ; 输    入：
 0108           ; 返    回：
 0108           ; --------------------------------------------------------------------*/
 0108           ; bool I2C_SendWrDAdr_(uint16 wrDAdr)   
 0108           ; {
 0108                   .dbline 175
 0108           ;       if( wrDAdr&0xF000 == 0xF000 )   //判断是否为 10位 器件地址
 0108 A0FE              sbrs R10,0
 010A 0EC0              rjmp L25
 010C           X8:
 010C                   .dbline 176
 010C           ;               if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )       //设置 （高位）器件写地址
 010C 0A2D              mov R16,R10
 010E 0695              lsr R16
 0110 0695              lsr R16
 0112 0695              lsr R16
 0114 0695              lsr R16
 0116 0695              lsr R16
 0118 0695              lsr R16
 011A 0695              lsr R16
 011C 0695              lsr R16
 011E E3DF              xcall _I2C_SendWrDAdr
 0120 0023              tst R16
 0122 11F4              brne L27
 0124           X9:
 0124                   .dbline 177
 0124           ;                       return I2C_ERR;
 0124 0027              clr R16
 0126 07C0              xjmp L24
 0128           L27:
 0128           L25:
 0128                   .dbline 178
 0128           ;       if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )  //设置 （低位）器件写地址
 0128 0A2D              mov R16,R10
 012A DDDF              xcall _I2C_SendWrDAdr
 012C 0023              tst R16
 012E 11F4              brne L29
 0130           X10:
 0130                   .dbline 179
 0130           ;               return I2C_ERR;
 0130 0027              clr R16
 0132 01C0              xjmp L24
 0134           L29:
 0134                   .dbline 180
 0134           ;       return I2C_CRR;
 0134 01E0              ldi R16,1
 0136                   .dbline -2
 0136           L24:
 0136                   .dbline 0 ; func end
 0136 B990              ld R11,y+
 0138 A990              ld R10,y+
 013A 0895              ret
 013C                   .dbsym r wrDAdr 10 i
 013C                   .dbend
 013C                   .dbfunc e I2C_SendRdDAdr _I2C_SendRdDAdr fc
 013C           ;         rdDAdr -> R16
                        .even
 013C           _I2C_SendRdDAdr::
 013C                   .dbline -1
 013C                   .dbline 191
 013C           ; }
 013C           ; /*--------------------------------------------------------------------
 013C           ; 函数名称：发送 7位 器件读地址: XXXX XXX1
 013C           ; 函数功能：
 013C           ; 注意事项：
 013C           ; 提示说明：
 013C           ; 输    入：
 013C           ; 返    回：
 013C           ; --------------------------------------------------------------------*/
 013C           ; bool I2C_SendRdDAdr(uint8 rdDAdr)     
 013C           ; {
 013C                   .dbline 192
 013C           ;       I2CSendByte(rdDAdr);                    //设置 器件读地址
 013C                   .dbline 192
 013C 03B9              out 0x3,R16
 013E                   .dbline 192
 013E 84E8              ldi R24,132
 0140 86BF              out 0x36,R24
 0142                   .dbline 192
 0142                   .dbline 192
 0142                   .dbline 193
 0142           ;       I2CWaitAck();
 0142           L32:
 0142                   .dbline 193
 0142           L33:
 0142                   .dbline 193
 0142 26B6              in R2,0x36
 0144 27FE              sbrs R2,7
 0146 FDCF              rjmp L32
 0148           X11:
 0148                   .dbline 193
 0148                   .dbline 193
 0148                   .dbline 194
 0148           ;       if( I2CChkAck()!=I2C_MR_SLA_ACK )  
 0148 81B1              in R24,0x1
 014A 887F              andi R24,248
 014C 8034              cpi R24,64
 014E 11F0              breq L35
 0150           X12:
 0150                   .dbline 195
 0150           ;               return I2C_ERR;
 0150 0027              clr R16
 0152 01C0              xjmp L31
 0154           L35:
 0154                   .dbline 196
 0154           ;       return I2C_CRR; 
 0154 01E0              ldi R16,1
 0156                   .dbline -2
 0156           L31:
 0156                   .dbline 0 ; func end
 0156 0895              ret
 0158                   .dbsym r rdDAdr 16 c
 0158                   .dbend
 0158                   .dbfunc e I2C_SendRdDAdr_ _I2C_SendRdDAdr_ fc
 0158           ;         rdDAdr -> R10
                        .even
 0158           _I2C_SendRdDAdr_::
 0158 AA92              st -y,R10
 015A A02E              mov R10,R16
 015C                   .dbline -1
 015C                   .dbline 207
 015C           ; }
 015C           ; /*--------------------------------------------------------------------
 015C           ; 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
 015C           ; 函数功能：
 015C           ; 注意事项：
 015C           ; 提示说明：
 015C           ; 输    入：
 015C           ; 返    回：
 015C           ; --------------------------------------------------------------------*/
 015C           ; bool I2C_SendRdDAdr_(uint8 rdDAdr)    
 015C           ; {
 015C                   .dbline 208
 015C           ;       if( rdDAdr&0xF000 == 0xF000 )   //判断是否为 10位 器件地址
 015C A0FE              sbrs R10,0
 015E 0EC0              rjmp L38
 0160           X13:
 0160                   .dbline 209
 0160           ;               if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )       //设置 （高位）器件读地址
 0160 0A2D              mov R16,R10
 0162 0695              lsr R16
 0164 0695              lsr R16
 0166 0695              lsr R16
 0168 0695              lsr R16
 016A 0695              lsr R16
 016C 0695              lsr R16
 016E 0695              lsr R16
 0170 0695              lsr R16
 0172 B9DF              xcall _I2C_SendWrDAdr
 0174 0023              tst R16
 0176 11F4              brne L40
 0178           X14:
 0178                   .dbline 210
 0178           ;                       return I2C_ERR;
 0178 0027              clr R16
 017A 07C0              xjmp L37
 017C           L40:
 017C           L38:
 017C                   .dbline 211
 017C           ;       if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )  //设置 （低位）器件读地址
 017C 0A2D              mov R16,R10
 017E B3DF              xcall _I2C_SendWrDAdr
 0180 0023              tst R16
 0182 11F4              brne L42
 0184           X15:
 0184                   .dbline 212
 0184           ;               return I2C_ERR;
 0184 0027              clr R16
 0186 01C0              xjmp L37
 0188           L42:
 0188                   .dbline 213
 0188           ;       return I2C_CRR;
 0188 01E0              ldi R16,1
 018A                   .dbline -2
 018A           L37:
 018A                   .dbline 0 ; func end
 018A A990              ld R10,y+
 018C 0895              ret
 018E                   .dbsym r rdDAdr 10 c
 018E                   .dbend
 018E                   .dbfunc e I2C_SendDat _I2C_SendDat fc
 018E           ;      configDat -> R16
                        .even
 018E           _I2C_SendDat::
 018E                   .dbline -1
 018E                   .dbline 224
 018E           ; }
 018E           ; /*--------------------------------------------------------------------
 018E           ; 函数名称：I2C发送数据
 018E           ; 函数功能：
 018E           ; 注意事项：
 018E           ; 提示说明：
 018E           ; 输    入：
 018E           ; 返    回：
 018E           ; --------------------------------------------------------------------*/
 018E           ; bool I2C_SendDat(uint8 configDat)     
 018E           ; {
 018E                   .dbline 225
 018E           ;       I2CSendByte(configDat);                 
 018E                   .dbline 225
 018E 03B9              out 0x3,R16
 0190                   .dbline 225
 0190 84E8              ldi R24,132
 0192 86BF              out 0x36,R24
 0194                   .dbline 225
 0194                   .dbline 225
 0194                   .dbline 226
 0194           ;       I2CWaitAck();
 0194           L45:
 0194                   .dbline 226
 0194           L46:
 0194                   .dbline 226
 0194 26B6              in R2,0x36
 0196 27FE              sbrs R2,7
 0198 FDCF              rjmp L45
 019A           X16:
 019A                   .dbline 226
 019A                   .dbline 226
 019A                   .dbline 227
 019A           ;       if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 019A 81B1              in R24,0x1
 019C 887F              andi R24,248
 019E 8832              cpi R24,40
 01A0 11F0              breq L48
 01A2           X17:
 01A2                   .dbline 228
 01A2           ;               return I2C_ERR;
 01A2 0027              clr R16
 01A4 01C0              xjmp L44
 01A6           L48:
 01A6                   .dbline 229
 01A6           ;       return I2C_CRR; 
 01A6 01E0              ldi R16,1
 01A8                   .dbline -2
 01A8           L44:
 01A8                   .dbline 0 ; func end
 01A8 0895              ret
 01AA                   .dbsym r configDat 16 c
 01AA                   .dbend
 01AA                   .dbfunc e I2C_RcvNAckDat _I2C_RcvNAckDat fc
 01AA           ;         pRdDat -> R16,R17
                        .even
 01AA           _I2C_RcvNAckDat::
 01AA                   .dbline -1
 01AA                   .dbline 240
 01AA           ; }
 01AA           ; /*--------------------------------------------------------------------
 01AA           ; 函数名称：I2C接收数据且不产生应答
 01AA           ; 函数功能：
 01AA           ; 注意事项：
 01AA           ; 提示说明：
 01AA           ; 输    入：
 01AA           ; 返    回：
 01AA           ; --------------------------------------------------------------------*/
 01AA           ; bool I2C_RcvNAckDat(uint8 *pRdDat)    
 01AA           ; {
 01AA                   .dbline 241
 01AA           ;       I2CRcvNckByte();
 01AA 84E8              ldi R24,132
 01AC 86BF              out 0x36,R24
 01AE                   .dbline 242
 01AE           ;       I2CWaitAck();
 01AE           L51:
 01AE                   .dbline 242
 01AE           L52:
 01AE                   .dbline 242
 01AE 26B6              in R2,0x36
 01B0 27FE              sbrs R2,7
 01B2 FDCF              rjmp L51
 01B4           X18:
 01B4                   .dbline 242
 01B4                   .dbline 242
 01B4                   .dbline 243
 01B4           ;       if( I2CChkAck()!=I2C_MR_DATA_NACK )
 01B4 81B1              in R24,0x1
 01B6 887F              andi R24,248
 01B8 8835              cpi R24,88
 01BA 11F0              breq L54
 01BC           X19:
 01BC                   .dbline 244
 01BC           ;               return I2C_ERR;
 01BC 0027              clr R16
 01BE 04C0              xjmp L50
 01C0           L54:
 01C0                   .dbline 245
 01C0           ;       *pRdDat=TWDR;
 01C0 23B0              in R2,0x3
 01C2 F801              movw R30,R16
 01C4 2082              std z+0,R2
 01C6                   .dbline 246
 01C6           ;       return I2C_CRR;
 01C6 01E0              ldi R16,1
 01C8                   .dbline -2
 01C8           L50:
 01C8                   .dbline 0 ; func end
 01C8 0895              ret
 01CA                   .dbsym r pRdDat 16 pc
 01CA                   .dbend
 01CA                   .dbfunc e I2C_RcvAckDat _I2C_RcvAckDat fc
 01CA           ;         pRdDat -> R16,R17
                        .even
 01CA           _I2C_RcvAckDat::
 01CA                   .dbline -1
 01CA                   .dbline 257
 01CA           ; }
 01CA           ; /*--------------------------------------------------------------------
 01CA           ; 函数名称：I2C接收数据且产生应答
 01CA           ; 函数功能：
 01CA           ; 注意事项：
 01CA           ; 提示说明：
 01CA           ; 输    入：
 01CA           ; 返    回：
 01CA           ; --------------------------------------------------------------------*/
 01CA           ; bool I2C_RcvAckDat(uint8 *pRdDat)     
 01CA           ; {
 01CA                   .dbline 258
 01CA           ;       I2CRcvAckByte();                                        
 01CA 84EC              ldi R24,196
 01CC 86BF              out 0x36,R24
 01CE                   .dbline 259
 01CE           ;       I2CWaitAck();
 01CE           L57:
 01CE                   .dbline 259
 01CE           L58:
 01CE                   .dbline 259
 01CE 26B6              in R2,0x36
 01D0 27FE              sbrs R2,7
 01D2 FDCF              rjmp L57
 01D4           X20:
 01D4                   .dbline 259
 01D4                   .dbline 259
 01D4                   .dbline 260
 01D4           ;       if( I2CChkAck()!=I2C_MR_DATA_ACK )
 01D4 81B1              in R24,0x1
 01D6 887F              andi R24,248
 01D8 8035              cpi R24,80
 01DA 11F0              breq L60
 01DC           X21:
 01DC                   .dbline 261
 01DC           ;               return I2C_ERR;
 01DC 0027              clr R16
 01DE 04C0              xjmp L56
 01E0           L60:
 01E0                   .dbline 262
 01E0           ;       *pRdDat=TWDR;
 01E0 23B0              in R2,0x3
 01E2 F801              movw R30,R16
 01E4 2082              std z+0,R2
 01E6                   .dbline 263
 01E6           ;       return I2C_CRR;
 01E6 01E0              ldi R16,1
 01E8                   .dbline -2
 01E8           L56:
 01E8                   .dbline 0 ; func end
 01E8 0895              ret
 01EA                   .dbsym r pRdDat 16 pc
 01EA                   .dbend
 01EA                   .dbfunc e I2C_Write _I2C_Write fc
 01EA           ;            dat -> R10
 01EA           ;        wordAdr -> R12
 01EA           ;         wrDAdr -> R14,R15
                        .even
 01EA           _I2C_Write::
 01EA 0E940000          xcall push_xgset00FC
 01EE C22E              mov R12,R18
 01F0 7801              movw R14,R16
 01F2 AE80              ldd R10,y+6
 01F4                   .dbline -1
 01F4                   .dbline 276
 01F4           ; }
 01F4           ; /*--------------------------------------------------------------------
 01F4           ; 函数名称：I2C写器件，写一个数据
 01F4           ; 函数功能：
 01F4           ; 注意事项：
 01F4           ; 提示说明：
 01F4           ; 输    入：wrDAdr: write device-address 写器件地址
 01F4           ;                wordAdr: word address 字地址
 01F4           ;                dat: data 数据
 01F4           ; 返    回：
 01F4           ; --------------------------------------------------------------------*/
 01F4           ; bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
 01F4           ; {
 01F4                   .dbline 277
 01F4           ;       if( I2C_Start()==I2C_ERR )
 01F4 5EDF              xcall _I2C_Start
 01F6 0023              tst R16
 01F8 11F4              brne L63
 01FA           X22:
 01FA                   .dbline 278
 01FA           ;               return I2C_ERR;
 01FA 0027              clr R16
 01FC 17C0              xjmp L62
 01FE           L63:
 01FE                   .dbline 280
 01FE           ; 
 01FE           ;       if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 01FE 8701              movw R16,R14
 0200 80DF              xcall _I2C_SendWrDAdr_
 0202 0023              tst R16
 0204 11F4              brne L65
 0206           X23:
 0206                   .dbline 281
 0206           ;               return I2C_ERR;
 0206 0027              clr R16
 0208 11C0              xjmp L62
 020A           L65:
 020A                   .dbline 283
 020A           ; 
 020A           ;       if( I2C_SendDat(wordAdr)==I2C_ERR )
 020A 0C2D              mov R16,R12
 020C C0DF              xcall _I2C_SendDat
 020E C02E              mov R12,R16
 0210 0023              tst R16
 0212 11F4              brne L67
 0214           X24:
 0214                   .dbline 284
 0214           ;               return I2C_ERR;
 0214 0027              clr R16
 0216 0AC0              xjmp L62
 0218           L67:
 0218                   .dbline 286
 0218           ; 
 0218           ;       if( I2C_SendDat(dat)==I2C_ERR )
 0218 0A2D              mov R16,R10
 021A B9DF              xcall _I2C_SendDat
 021C A02E              mov R10,R16
 021E 0023              tst R16
 0220 11F4              brne L69
 0222           X25:
 0222                   .dbline 287
 0222           ;               return I2C_ERR;
 0222 0027              clr R16
 0224 03C0              xjmp L62
 0226           L69:
 0226                   .dbline 289
 0226           ; 
 0226           ;       I2C_Stop();
 0226 84E9              ldi R24,148
 0228 86BF              out 0x36,R24
 022A                   .dbline 291
 022A           ; 
 022A           ;       return I2C_CRR;
 022A 01E0              ldi R16,1
 022C                   .dbline -2
 022C           L62:
 022C                   .dbline 0 ; func end
 022C 0C940000          xjmp pop_xgset00FC
 0230                   .dbsym r dat 10 c
 0230                   .dbsym r wordAdr 12 c
 0230                   .dbsym r wrDAdr 14 i
 0230                   .dbend
 0230                   .dbfunc e I2C_Read _I2C_Read fc
 0230           ;         pRdDat -> R10,R11
 0230           ;         rdDAdr -> R12
 0230           ;        wordAdr -> R14
 0230           ;         wrDAdr -> R20,R21
                        .even
 0230           _I2C_Read::
 0230 0E940000          xcall push_xgset30FC
 0234 E22E              mov R14,R18
 0236 A801              movw R20,R16
 0238 C884              ldd R12,y+8
 023A AA84              ldd R10,y+10
 023C BB84              ldd R11,y+11
 023E                   .dbline -1
 023E                   .dbline 322
 023E           ; }
 023E           ; /*--------------------------------------------------------------------
 023E           ; 函数名称：I2C写器件，写N个数据
 023E           ; 函数功能：
 023E           ; 注意事项：
 023E           ; 提示说明：
 023E           ; 输    入：wrDAdr: write device-address 写器件地址
 023E           ;                wordAdr: word address 字地址
 023E           ;                *pWrDat: p->write data 写入数据指针
 023E           ;                num: number 写入数据个数
 023E           ; 返    回：
 023E           ; --------------------------------------------------------------------*/
 023E           ; //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
 023E           ; //                              uint8 *pWrDat,uint8 num)
 023E           ; //{
 023E           ; //
 023E           ; //} 
 023E           ; /*--------------------------------------------------------------------
 023E           ; 函数名称：I2C读器件，读一个数据
 023E           ; 函数功能：
 023E           ; 注意事项：
 023E           ; 提示说明：
 023E           ; 输    入：wrDAdr: write device-address 写器件地址
 023E           ;                wordAdr: word address 字地址
 023E           ;                rdDAdr: read device-address 读器件地址
 023E           ;                *pRdDat: p->read data 读取数据指针
 023E           ; 返    回：
 023E           ; --------------------------------------------------------------------*/
 023E           ; bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
 023E           ;                         uint8 rdDAdr,uint8 *pRdDat)
 023E           ; {
 023E                   .dbline 323
 023E           ;       if( I2C_Start()==I2C_ERR )
 023E 39DF              xcall _I2C_Start
 0240 0023              tst R16
 0242 11F4              brne L72
 0244           X26:
 0244                   .dbline 324
 0244           ;               return I2C_ERR;
 0244 0027              clr R16
 0246 24C0              xjmp L71
 0248           L72:
 0248                   .dbline 326
 0248           ; 
 0248           ;       if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 0248 8A01              movw R16,R20
 024A 5BDF              xcall _I2C_SendWrDAdr_
 024C 0023              tst R16
 024E 11F4              brne L74
 0250           X27:
 0250                   .dbline 327
 0250           ;               return I2C_ERR;
 0250 0027              clr R16
 0252 1EC0              xjmp L71
 0254           L74:
 0254                   .dbline 329
 0254           ; 
 0254           ;       if( I2C_SendDat(wordAdr)==I2C_ERR )
 0254 0E2D              mov R16,R14
 0256 9BDF              xcall _I2C_SendDat
 0258 E02E              mov R14,R16
 025A 0023              tst R16
 025C 11F4              brne L76
 025E           X28:
 025E                   .dbline 330
 025E           ;               return I2C_ERR;
 025E 0027              clr R16
 0260 17C0              xjmp L71
 0262           L76:
 0262                   .dbline 332
 0262           ; 
 0262           ;       if( I2C_Restart()==I2C_ERR )
 0262 34DF              xcall _I2C_Restart
 0264 E02E              mov R14,R16
 0266 0023              tst R16
 0268 11F4              brne L78
 026A           X29:
 026A                   .dbline 333
 026A           ;               return I2C_ERR;
 026A 0027              clr R16
 026C 11C0              xjmp L71
 026E           L78:
 026E                   .dbline 335
 026E           ; 
 026E           ;       if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
 026E 0C2D              mov R16,R12
 0270 65DF              xcall _I2C_SendRdDAdr
 0272 C02E              mov R12,R16
 0274 0023              tst R16
 0276 11F4              brne L80
 0278           X30:
 0278                   .dbline 336
 0278           ;               return I2C_ERR;
 0278 0027              clr R16
 027A 0AC0              xjmp L71
 027C           L80:
 027C                   .dbline 338
 027C           ; 
 027C           ;       if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
 027C 8501              movw R16,R10
 027E 95DF              xcall _I2C_RcvNAckDat
 0280 A02E              mov R10,R16
 0282 0023              tst R16
 0284 11F4              brne L82
 0286           X31:
 0286                   .dbline 339
 0286           ;               return I2C_ERR;
 0286 0027              clr R16
 0288 03C0              xjmp L71
 028A           L82:
 028A                   .dbline 341
 028A           ; 
 028A           ;       I2C_Stop();
 028A 84E9              ldi R24,148
 028C 86BF              out 0x36,R24
 028E                   .dbline 343
 028E           ; 
 028E           ;       return I2C_CRR;
 028E 01E0              ldi R16,1
 0290                   .dbline -2
 0290           L71:
 0290                   .dbline 0 ; func end
 0290 0C940000          xjmp pop_xgset30FC
 0294                   .dbsym r pRdDat 10 pc
 0294                   .dbsym r rdDAdr 12 c
 0294                   .dbsym r wordAdr 14 c
 0294                   .dbsym r wrDAdr 20 i
 0294                   .dbend
 0294                   .dbfunc e I2C_Read_ _I2C_Read_ fc
 0294           ;              i -> R12
 0294           ;            num -> R20
 0294           ;         pRdDat -> R10,R11
 0294           ;         rdDAdr -> R12
 0294           ;        wordAdr -> R14
 0294           ;         wrDAdr -> R22,R23
                        .even
 0294           _I2C_Read_::
 0294 0E940000          xcall push_xgsetF0FC
 0298 E22E              mov R14,R18
 029A B801              movw R22,R16
 029C CA84              ldd R12,y+10
 029E AC84              ldd R10,y+12
 02A0 BD84              ldd R11,y+13
 02A2 4E85              ldd R20,y+14
 02A4                   .dbline -1
 02A4                   .dbline 359
 02A4           ; }
 02A4           ; /*--------------------------------------------------------------------
 02A4           ; 函数名称：I2C读器件，读N个数据
 02A4           ; 函数功能：
 02A4           ; 注意事项：
 02A4           ; 提示说明：
 02A4           ; 输    入：wrDAdr: write device-address 写器件地址
 02A4           ;                wordAdr: word address 字地址
 02A4           ;                rdDAdr: read device-address 读器件地址
 02A4           ;                *pRdDat: p->read data 读取数据指针
 02A4           ;                num: number 读取数据个数
 02A4           ; 返    回：
 02A4           ; --------------------------------------------------------------------*/
 02A4           ; bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
 02A4           ;                          uint8 rdDAdr,uint8 *pRdDat,uint8 num)
 02A4           ; {
 02A4                   .dbline 362
 02A4           ;       uint8 i;
 02A4           ;       
 02A4           ;       if( I2C_Start()==I2C_ERR )
 02A4 06DF              xcall _I2C_Start
 02A6 0023              tst R16
 02A8 11F4              brne L85
 02AA           X32:
 02AA                   .dbline 363
 02AA           ;               return I2C_ERR;
 02AA 0027              clr R16
 02AC 38C0              xjmp L84
 02AE           L85:
 02AE                   .dbline 365
 02AE           ; 
 02AE           ;       if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 02AE 8B01              movw R16,R22
 02B0 28DF              xcall _I2C_SendWrDAdr_
 02B2 0023              tst R16
 02B4 11F4              brne L87
 02B6           X33:
 02B6                   .dbline 366
 02B6           ;               return I2C_ERR;
 02B6 0027              clr R16
 02B8 32C0              xjmp L84
 02BA           L87:
 02BA                   .dbline 368
 02BA           ; 
 02BA           ;       if( I2C_SendDat(wordAdr)==I2C_ERR )
 02BA 0E2D              mov R16,R14
 02BC 68DF              xcall _I2C_SendDat
 02BE E02E              mov R14,R16
 02C0 0023              tst R16
 02C2 11F4              brne L89
 02C4           X34:
 02C4                   .dbline 369
 02C4           ;               return I2C_ERR;
 02C4 0027              clr R16
 02C6 2BC0              xjmp L84
 02C8           L89:
 02C8                   .dbline 371
 02C8           ; 
 02C8           ;       if( I2C_Restart()==I2C_ERR )
 02C8 01DF              xcall _I2C_Restart
 02CA E02E              mov R14,R16
 02CC 0023              tst R16
 02CE 11F4              brne L91
 02D0           X35:
 02D0                   .dbline 372
 02D0           ;               return I2C_ERR;
 02D0 0027              clr R16
 02D2 25C0              xjmp L84
 02D4           L91:
 02D4                   .dbline 374
 02D4           ; 
 02D4           ;       if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
 02D4 0C2D              mov R16,R12
 02D6 32DF              xcall _I2C_SendRdDAdr
 02D8 C02E              mov R12,R16
 02DA 0023              tst R16
 02DC 11F4              brne L93
 02DE           X36:
 02DE                   .dbline 375
 02DE           ;               return I2C_ERR;
 02DE 0027              clr R16
 02E0 1EC0              xjmp L84
 02E2           L93:
 02E2                   .dbline 377
 02E2           ; 
 02E2           ;       for(i=0;i<num-1;i++)
 02E2 CC24              clr R12
 02E4 0BC0              xjmp L98
 02E6           L95:
 02E6                   .dbline 378
 02E6           ;               if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
 02E6 0C2D              mov R16,R12
 02E8 1127              clr R17
 02EA 0A0D              add R16,R10
 02EC 1B1D              adc R17,R11
 02EE 6DDF              xcall _I2C_RcvAckDat
 02F0 E02E              mov R14,R16
 02F2 0023              tst R16
 02F4 11F4              brne L99
 02F6           X37:
 02F6                   .dbline 379
 02F6           ;                       return I2C_ERR;
 02F6 0027              clr R16
 02F8 12C0              xjmp L84
 02FA           L99:
 02FA           L96:
 02FA                   .dbline 377
 02FA C394              inc R12
 02FC           L98:
 02FC                   .dbline 377
 02FC 842F              mov R24,R20
 02FE 8150              subi R24,1
 0300 C816              cp R12,R24
 0302 88F3              brlo L95
 0304           X38:
 0304                   .dbline 381
 0304           ;       
 0304           ;       if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
 0304 0C2D              mov R16,R12
 0306 1127              clr R17
 0308 0A0D              add R16,R10
 030A 1B1D              adc R17,R11
 030C 4EDF              xcall _I2C_RcvNAckDat
 030E A02E              mov R10,R16
 0310 0023              tst R16
 0312 11F4              brne L101
 0314           X39:
 0314                   .dbline 382
 0314           ;                       return I2C_ERR;
 0314 0027              clr R16
 0316 03C0              xjmp L84
 0318           L101:
 0318                   .dbline 384
 0318           ; 
 0318           ;       I2C_Stop();
 0318 84E9              ldi R24,148
 031A 86BF              out 0x36,R24
 031C                   .dbline 386
 031C           ;       
 031C           ;       return I2C_CRR;
 031C 01E0              ldi R16,1
 031E                   .dbline -2
 031E           L84:
 031E                   .dbline 0 ; func end
 031E 0C940000          xjmp pop_xgsetF0FC
 0322                   .dbsym r i 12 c
 0322                   .dbsym r num 20 c
 0322                   .dbsym r pRdDat 10 pc
 0322                   .dbsym r rdDAdr 12 c
 0322                   .dbsym r wordAdr 14 c
 0322                   .dbsym r wrDAdr 22 i
 0322                   .dbend
 0322                   .dbfile D:\ICC_H\Hardware.H
 0322                   .dbfunc e delay50us _delay50us fV
 0322           ;              j -> R20
 0322           ;              t -> R16,R17
                        .even
 0322           _delay50us::
 0322 4A93              st -y,R20
 0324                   .dbline -1
 0324                   .dbline 105
 0324           ; /*********************************************************************
 0324           ;       微 雪 电 子   WaveShare   http://www.waveShare.net              
 0324           ;                                                                       
 0324           ; 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
 0324           ;                                       
 0324           ; 目标系统:   基于AVR单片机
 0324           ;                                                                               
 0324           ; 应用软件:   ICCAVR
 0324           ;                                                                               
 0324           ; 版    本:   Version 1.0                                                          
 0324           ;                                                                               
 0324           ; 圆版时间:   2005-06-25
 0324           ;       
 0324           ; 开发人员:   SEE
 0324           ; 
 0324           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 0324           ;       
 0324           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
 0324           ; *********************************************************************/
 0324           ; 
 0324           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 0324           ; ----------------------------------------------------------------------
 0324           ; 版本更新记录：
 0324           ; 
 0324           ; ----------------------------------------------------------------------
 0324           ; 入口参数说明：
 0324           ; 
 0324           ; ----------------------------------------------------------------------
 0324           ; 待定参数说明：
 0324           ; 
 0324           ; ----------------------------------------------------------------------        
 0324           ; 对外变量说明：
 0324           ;     
 0324           ; ----------------------------------------------------------------------
 0324           ; 对外函数说明：
 0324           ;    
 0324           ; ----------------------------------------------------------------------
 0324           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 0324           ; 
 0324           ; #ifndef Hardware_H
 0324           ; #define Hardware_H
 0324           ; 
 0324           ; #include <math.h>
 0324           ; #include <string.h>
 0324           ; #include <stdio.h>
 0324           ; #include <macros.h>
 0324           ; #include <eeprom.h>
 0324           ; //#include <wdt.h>
 0324           ; 
 0324           ; /* TWI configs */
 0324           ; //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
 0324           ; #if NO_INCLUDE_I2C_H
 0324           ; ;
 0324           ; #else
 0324           ; #include "D:\ICC_H\I2C.H"     //i2c即AVR的"twi"
 0324           ; #endif
 0324           ; 
 0324           ; /* hard configs */
 0324           ; #ifndef flash
 0324           ;       #define flash   const
 0324           ; #endif
 0324           ; 
 0324           ; #ifndef code
 0324           ;       #define code    const
 0324           ; #endif
 0324           ; 
 0324           ; #ifndef NOP
 0324           ;       #define NOP()   asm("nop")
 0324           ; #endif
 0324           ; 
 0324           ; /* io configs */
 0324           ; #define sbi(io,bit)           (  io |=  (1<<bit) )    //example: sbi(PORTA,0);sbi(DDRA,0);
 0324           ; #define cbi(io,bit)           (  io &= ~(1<<bit) )    //example: cbi(PORTA,0);cbi(DDRA,0);
 0324           ; #define gbi(pin ,bit) ( pin &   (1<<bit) )    //example: gbi(PINA,0);
 0324           ; 
 0324           ; /* interrupt configs */
 0324           ; #define DIS_INT  asm("sei")
 0324           ; #define EN_INT   asm("cli")
 0324           ; 
 0324           ; /* wdt configs */
 0324           ; #define WDT()    asm("wdr")
 0324           ; 
 0324           ; /* bit operation */
 0324           ; //#ifndef BIT
 0324           ; //#define BIT(x)      ( 1<<(x) )
 0324           ; //#endif
 0324           ; 
 0324           ; /* USART configs for 4 Mhz crystal */
 0324           ; //#define BAUD9600                    25
 0324           ; //#define BAUD19000                   12
 0324           ; //#define UART_TRAN_ON()      UCR |=  0x08
 0324           ; //#define UART_TRAN_OFF()     UCR &= ~0x08
 0324           ; //#define UART_RCV_ON()               UCR |=  0x10
 0324           ; //#define UART_RCV_OFF()      UCR &= ~0x10
 0324           ; 
 0324           ; /*--------------------------------------------------------------------
 0324           ; 函数全称：50us 延时
 0324           ; 函数功能：当然是 50us延时 啦
 0324           ; 注意事项：基于7.3728M晶振，稍微有点误差
 0324           ; 提示说明：调用delay50us（20），得到1ms延时
 0324           ; 输    入：    
 0324           ; 返    回：无 
 0324           ; --------------------------------------------------------------------*/
 0324           ; void delay50us(sint16 t)
 0324           ; {
 0324                   .dbline 107
 0324           ;     uint8 j;          
 0324           ;     for(;t>0;t--)                     
 0324 07C0              xjmp L107
 0326           L104:
 0326                   .dbline 108
 0326           ;         for(j=0;j<70;j++)     
 0326 4427              clr R20
 0328 01C0              xjmp L111
 032A           L108:
 032A                   .dbline 109
 032A           ;             ;
 032A           L109:
 032A                   .dbline 108
 032A 4395              inc R20
 032C           L111:
 032C                   .dbline 108
 032C 4634              cpi R20,70
 032E E8F3              brlo L108
 0330           X40:
 0330           L105:
 0330                   .dbline 107
 0330 0150              subi R16,1
 0332 1040              sbci R17,0
 0334           L107:
 0334                   .dbline 107
 0334 2224              clr R2
 0336 3324              clr R3
 0338 2016              cp R2,R16
 033A 3106              cpc R3,R17
 033C A4F3              brlt L104
 033E           X41:
 033E                   .dbline -2
 033E           L103:
 033E                   .dbline 0 ; func end
 033E 4991              ld R20,y+
 0340 0895              ret
 0342                   .dbsym r j 20 c
 0342                   .dbsym r t 16 I
 0342                   .dbend
 0342                   .dbfunc e delay50ms _delay50ms fV
 0342           ;              i -> R20,R21
 0342           ;              t -> R16,R17
                        .even
 0342           _delay50ms::
 0342 4A93              st -y,R20
 0344 5A93              st -y,R21
 0346                   .dbline -1
 0346                   .dbline 120
 0346           ; }
 0346           ; /*--------------------------------------------------------------------
 0346           ; 函数全称：50ms 延时
 0346           ; 函数功能：当然是 50ms延时 啦
 0346           ; 注意事项：基于7.3728M晶振，稍微有点误差
 0346           ; 提示说明：调用delay50ms（20），得到1s延时 
 0346           ; 输    入：
 0346           ; 返    回：无
 0346           ; --------------------------------------------------------------------*/
 0346           ; void delay50ms(sint16 t)
 0346           ; {
 0346                   .dbline 122
 0346           ;       uint16 i; 
 0346           ;       for(;t>0;t--)
 0346 13C0              xjmp L116
 0348           L113:
 0348                   .dbline 123
 0348           ;               for(i=0;i<52642;i++)
 0348 4427              clr R20
 034A 5527              clr R21
 034C 02C0              xjmp L120
 034E           L117:
 034E                   .dbline 124
 034E           ;                       ; 
 034E           L118:
 034E                   .dbline 123
 034E 4F5F              subi R20,255  ; offset = 1
 0350 5F4F              sbci R21,255
 0352           L120:
 0352                   .dbline 123
 0352 82EA              ldi R24,162
 0354 9DEC              ldi R25,205
 0356 A0E0              ldi R26,0
 0358 B0E0              ldi R27,0
 035A 1A01              movw R2,R20
 035C 4424              clr R4
 035E 5524              clr R5
 0360 2816              cp R2,R24
 0362 3906              cpc R3,R25
 0364 4A06              cpc R4,R26
 0366 5B06              cpc R5,R27
 0368 94F3              brlt L117
 036A           X42:
 036A           L114:
 036A                   .dbline 122
 036A 0150              subi R16,1
 036C 1040              sbci R17,0
 036E           L116:
 036E                   .dbline 122
 036E 2224              clr R2
 0370 3324              clr R3
 0372 2016              cp R2,R16
 0374 3106              cpc R3,R17
 0376 44F3              brlt L113
 0378           X43:
 0378                   .dbline -2
 0378           L112:
 0378                   .dbline 0 ; func end
 0378 5991              ld R21,y+
 037A 4991              ld R20,y+
 037C 0895              ret
 037E                   .dbsym r i 20 i
 037E                   .dbsym r t 16 I
 037E                   .dbend
 037E                   .dbfunc e delayus _delayus fV
 037E           ;              i -> R20,R21
 037E           ;              t -> R16,R17
                        .even
 037E           _delayus::
 037E 4A93              st -y,R20
 0380 5A93              st -y,R21
 0382                   .dbline -1
 0382                   .dbline 129
 0382           ; }
 0382           ; 
 0382           ; 
 0382           ; void delayus(uint16 t)
 0382           ; {
 0382                   .dbline 131
 0382           ;       uint16 i;
 0382           ;       for(i=0;i<t;i++)
 0382 4427              clr R20
 0384 5527              clr R21
 0386 02C0              xjmp L125
 0388           L122:
 0388                   .dbline 132
 0388           ;               {
 0388                   .dbline 135
 0388           ;                       //asm("NOP\n");
 0388           ;                       //asm("NOP\n");
 0388           ;               }
 0388           L123:
 0388                   .dbline 131
 0388 4F5F              subi R20,255  ; offset = 1
 038A 5F4F              sbci R21,255
 038C           L125:
 038C                   .dbline 131
 038C 4017              cp R20,R16
 038E 5107              cpc R21,R17
 0390 D8F3              brlo L122
 0392           X44:
 0392                   .dbline -2
 0392           L121:
 0392                   .dbline 0 ; func end
 0392 5991              ld R21,y+
 0394 4991              ld R20,y+
 0396 0895              ret
 0398                   .dbsym r i 20 i
 0398                   .dbsym r t 16 i
 0398                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile D:\ICC_H\Hardware.H
 0000           _unshifted::
 0000                   .blkb 2
                        .area idata
 0000 1C61              .byte 28,'a
                        .area data(ram, con, rel)
 0002                   .dbfile D:\ICC_H\Hardware.H
 0002                   .blkb 2
                        .area idata
 0002 3262              .byte 50,'b
                        .area data(ram, con, rel)
 0004                   .dbfile D:\ICC_H\Hardware.H
 0004                   .blkb 2
                        .area idata
 0004 2163              .byte 33,'c
                        .area data(ram, con, rel)
 0006                   .dbfile D:\ICC_H\Hardware.H
 0006                   .blkb 2
                        .area idata
 0006 2364              .byte 35,'d
                        .area data(ram, con, rel)
 0008                   .dbfile D:\ICC_H\Hardware.H
 0008                   .blkb 2
                        .area idata
 0008 2465              .byte 36,'e
                        .area data(ram, con, rel)
 000A                   .dbfile D:\ICC_H\Hardware.H
 000A                   .blkb 2
                        .area idata
 000A 2B66              .byte 43,'f
                        .area data(ram, con, rel)
 000C                   .dbfile D:\ICC_H\Hardware.H
 000C                   .blkb 2
                        .area idata
 000C 3467              .byte 52,'g
                        .area data(ram, con, rel)
 000E                   .dbfile D:\ICC_H\Hardware.H
 000E                   .blkb 2
                        .area idata
 000E 3368              .byte 51,'h
                        .area data(ram, con, rel)
 0010                   .dbfile D:\ICC_H\Hardware.H
 0010                   .blkb 2
                        .area idata
 0010 4369              .byte 'C,'i
                        .area data(ram, con, rel)
 0012                   .dbfile D:\ICC_H\Hardware.H
 0012                   .blkb 2
                        .area idata
 0012 3B6A              .byte 59,'j
                        .area data(ram, con, rel)
 0014                   .dbfile D:\ICC_H\Hardware.H
 0014                   .blkb 2
                        .area idata
 0014 426B              .byte 'B,'k
                        .area data(ram, con, rel)
 0016                   .dbfile D:\ICC_H\Hardware.H
 0016                   .blkb 2
                        .area idata
 0016 4B6C              .byte 'K,'l
                        .area data(ram, con, rel)
 0018                   .dbfile D:\ICC_H\Hardware.H
 0018                   .blkb 2
                        .area idata
 0018 3A6D              .byte 58,'m
                        .area data(ram, con, rel)
 001A                   .dbfile D:\ICC_H\Hardware.H
 001A                   .blkb 2
                        .area idata
 001A 316E              .byte 49,'n
                        .area data(ram, con, rel)
 001C                   .dbfile D:\ICC_H\Hardware.H
 001C                   .blkb 2
                        .area idata
 001C 446F              .byte 'D,'o
                        .area data(ram, con, rel)
 001E                   .dbfile D:\ICC_H\Hardware.H
 001E                   .blkb 2
                        .area idata
 001E 4D70              .byte 'M,'p
                        .area data(ram, con, rel)
 0020                   .dbfile D:\ICC_H\Hardware.H
 0020                   .blkb 2
                        .area idata
 0020 1571              .byte 21,'q
                        .area data(ram, con, rel)
 0022                   .dbfile D:\ICC_H\Hardware.H
 0022                   .blkb 2
                        .area idata
 0022 2D72              .byte 45,'r
                        .area data(ram, con, rel)
 0024                   .dbfile D:\ICC_H\Hardware.H
 0024                   .blkb 2
                        .area idata
 0024 1B73              .byte 27,'s
                        .area data(ram, con, rel)
 0026                   .dbfile D:\ICC_H\Hardware.H
 0026                   .blkb 2
                        .area idata
 0026 2C74              .byte 44,'t
                        .area data(ram, con, rel)
 0028                   .dbfile D:\ICC_H\Hardware.H
 0028                   .blkb 2
                        .area idata
 0028 3C75              .byte 60,'u
                        .area data(ram, con, rel)
 002A                   .dbfile D:\ICC_H\Hardware.H
 002A                   .blkb 2
                        .area idata
 002A 2A76              .byte 42,'v
                        .area data(ram, con, rel)
 002C                   .dbfile D:\ICC_H\Hardware.H
 002C                   .blkb 2
                        .area idata
 002C 1D77              .byte 29,'w
                        .area data(ram, con, rel)
 002E                   .dbfile D:\ICC_H\Hardware.H
 002E                   .blkb 2
                        .area idata
 002E 2278              .byte 34,'x
                        .area data(ram, con, rel)
 0030                   .dbfile D:\ICC_H\Hardware.H
 0030                   .blkb 2
                        .area idata
 0030 3579              .byte 53,'y
                        .area data(ram, con, rel)
 0032                   .dbfile D:\ICC_H\Hardware.H
 0032                   .blkb 2
                        .area idata
 0032 1A7A              .byte 26,'z
                        .area data(ram, con, rel)
 0034                   .dbfile D:\ICC_H\Hardware.H
 0034                   .blkb 2
                        .area idata
 0034 4530              .byte 'E,48
                        .area data(ram, con, rel)
 0036                   .dbfile D:\ICC_H\Hardware.H
 0036                   .blkb 2
                        .area idata
 0036 1631              .byte 22,49
                        .area data(ram, con, rel)
 0038                   .dbfile D:\ICC_H\Hardware.H
 0038                   .blkb 2
                        .area idata
 0038 1E32              .byte 30,50
                        .area data(ram, con, rel)
 003A                   .dbfile D:\ICC_H\Hardware.H
 003A                   .blkb 2
                        .area idata
 003A 2633              .byte 38,51
                        .area data(ram, con, rel)
 003C                   .dbfile D:\ICC_H\Hardware.H
 003C                   .blkb 2
                        .area idata
 003C 2534              .byte 37,52
                        .area data(ram, con, rel)
 003E                   .dbfile D:\ICC_H\Hardware.H
 003E                   .blkb 2
                        .area idata
 003E 2E35              .byte 46,53
                        .area data(ram, con, rel)
 0040                   .dbfile D:\ICC_H\Hardware.H
 0040                   .blkb 2
                        .area idata
 0040 3636              .byte 54,54
                        .area data(ram, con, rel)
 0042                   .dbfile D:\ICC_H\Hardware.H
 0042                   .blkb 2
                        .area idata
 0042 3D37              .byte 61,55
                        .area data(ram, con, rel)
 0044                   .dbfile D:\ICC_H\Hardware.H
 0044                   .blkb 2
                        .area idata
 0044 3E38              .byte 62,56
                        .area data(ram, con, rel)
 0046                   .dbfile D:\ICC_H\Hardware.H
 0046                   .blkb 2
                        .area idata
 0046 4639              .byte 'F,57
                        .area data(ram, con, rel)
 0048                   .dbfile D:\ICC_H\Hardware.H
 0048                   .blkb 2
                        .area idata
 0048 0E60              .byte 14,96
                        .area data(ram, con, rel)
 004A                   .dbfile D:\ICC_H\Hardware.H
 004A                   .blkb 2
                        .area idata
 004A 4E2D              .byte 'N,45
                        .area data(ram, con, rel)
 004C                   .dbfile D:\ICC_H\Hardware.H
 004C                   .blkb 2
                        .area idata
 004C 553D              .byte 'U,61
                        .area data(ram, con, rel)
 004E                   .dbfile D:\ICC_H\Hardware.H
 004E                   .blkb 2
                        .area idata
 004E 5D5C              .byte 93,92
                        .area data(ram, con, rel)
 0050                   .dbfile D:\ICC_H\Hardware.H
 0050                   .blkb 2
                        .area idata
 0050 2920              .byte 41,32
                        .area data(ram, con, rel)
 0052                   .dbfile D:\ICC_H\Hardware.H
 0052                   .blkb 2
                        .area idata
 0052 545B              .byte 'T,91
                        .area data(ram, con, rel)
 0054                   .dbfile D:\ICC_H\Hardware.H
 0054                   .blkb 2
                        .area idata
 0054 5B5D              .byte 91,93
                        .area data(ram, con, rel)
 0056                   .dbfile D:\ICC_H\Hardware.H
 0056                   .blkb 2
                        .area idata
 0056 4C3B              .byte 'L,59
                        .area data(ram, con, rel)
 0058                   .dbfile D:\ICC_H\Hardware.H
 0058                   .blkb 2
                        .area idata
 0058 5227              .byte 'R,39
                        .area data(ram, con, rel)
 005A                   .dbfile D:\ICC_H\Hardware.H
 005A                   .blkb 2
                        .area idata
 005A 412C              .byte 'A,44
                        .area data(ram, con, rel)
 005C                   .dbfile D:\ICC_H\Hardware.H
 005C                   .blkb 2
                        .area idata
 005C 492E              .byte 'I,46
                        .area data(ram, con, rel)
 005E                   .dbfile D:\ICC_H\Hardware.H
 005E                   .blkb 2
                        .area idata
 005E 4A2F              .byte 'J,47
                        .area data(ram, con, rel)
 0060                   .dbfile D:\ICC_H\Hardware.H
 0060                   .blkb 2
                        .area idata
 0060 712E              .byte 'q,46
                        .area data(ram, con, rel)
 0062                   .dbfile D:\ICC_H\Hardware.H
 0062                   .blkb 2
                        .area idata
 0062 7030              .byte 'p,48
                        .area data(ram, con, rel)
 0064                   .dbfile D:\ICC_H\Hardware.H
 0064                   .blkb 2
                        .area idata
 0064 6931              .byte 'i,49
                        .area data(ram, con, rel)
 0066                   .dbfile D:\ICC_H\Hardware.H
 0066                   .blkb 2
                        .area idata
 0066 7232              .byte 'r,50
                        .area data(ram, con, rel)
 0068                   .dbfile D:\ICC_H\Hardware.H
 0068                   .blkb 2
                        .area idata
 0068 7A33              .byte 'z,51
                        .area data(ram, con, rel)
 006A                   .dbfile D:\ICC_H\Hardware.H
 006A                   .blkb 2
                        .area idata
 006A 6B34              .byte 'k,52
                        .area data(ram, con, rel)
 006C                   .dbfile D:\ICC_H\Hardware.H
 006C                   .blkb 2
                        .area idata
 006C 7335              .byte 's,53
                        .area data(ram, con, rel)
 006E                   .dbfile D:\ICC_H\Hardware.H
 006E                   .blkb 2
                        .area idata
 006E 7436              .byte 't,54
                        .area data(ram, con, rel)
 0070                   .dbfile D:\ICC_H\Hardware.H
 0070                   .blkb 2
                        .area idata
 0070 6C37              .byte 'l,55
                        .area data(ram, con, rel)
 0072                   .dbfile D:\ICC_H\Hardware.H
 0072                   .blkb 2
                        .area idata
 0072 7538              .byte 'u,56
                        .area data(ram, con, rel)
 0074                   .dbfile D:\ICC_H\Hardware.H
 0074                   .blkb 2
                        .area idata
 0074 7D39              .byte 125,57
                        .area data(ram, con, rel)
 0076                   .dbfile D:\ICC_H\Hardware.H
 0076                   .dbfile D:\ICC_H\PS2.H
 0076                   .dbsym e unshifted _unshifted A[118:59:2]c
 0076           _shifted::
 0076                   .blkb 2
                        .area idata
 0076 1C41              .byte 28,'A
                        .area data(ram, con, rel)
 0078                   .dbfile D:\ICC_H\PS2.H
 0078                   .blkb 2
                        .area idata
 0078 3242              .byte 50,'B
                        .area data(ram, con, rel)
 007A                   .dbfile D:\ICC_H\PS2.H
 007A                   .blkb 2
                        .area idata
 007A 2143              .byte 33,'C
                        .area data(ram, con, rel)
 007C                   .dbfile D:\ICC_H\PS2.H
 007C                   .blkb 2
                        .area idata
 007C 2344              .byte 35,'D
                        .area data(ram, con, rel)
 007E                   .dbfile D:\ICC_H\PS2.H
 007E                   .blkb 2
                        .area idata
 007E 2445              .byte 36,'E
                        .area data(ram, con, rel)
 0080                   .dbfile D:\ICC_H\PS2.H
 0080                   .blkb 2
                        .area idata
 0080 2B46              .byte 43,'F
                        .area data(ram, con, rel)
 0082                   .dbfile D:\ICC_H\PS2.H
 0082                   .blkb 2
                        .area idata
 0082 3447              .byte 52,'G
                        .area data(ram, con, rel)
 0084                   .dbfile D:\ICC_H\PS2.H
 0084                   .blkb 2
                        .area idata
 0084 3348              .byte 51,'H
                        .area data(ram, con, rel)
 0086                   .dbfile D:\ICC_H\PS2.H
 0086                   .blkb 2
                        .area idata
 0086 4349              .byte 'C,'I
                        .area data(ram, con, rel)
 0088                   .dbfile D:\ICC_H\PS2.H
 0088                   .blkb 2
                        .area idata
 0088 3B4A              .byte 59,'J
                        .area data(ram, con, rel)
 008A                   .dbfile D:\ICC_H\PS2.H
 008A                   .blkb 2
                        .area idata
 008A 424B              .byte 'B,'K
                        .area data(ram, con, rel)
 008C                   .dbfile D:\ICC_H\PS2.H
 008C                   .blkb 2
                        .area idata
 008C 4B4C              .byte 'K,'L
                        .area data(ram, con, rel)
 008E                   .dbfile D:\ICC_H\PS2.H
 008E                   .blkb 2
                        .area idata
 008E 3A4D              .byte 58,'M
                        .area data(ram, con, rel)
 0090                   .dbfile D:\ICC_H\PS2.H
 0090                   .blkb 2
                        .area idata
 0090 314E              .byte 49,'N
                        .area data(ram, con, rel)
 0092                   .dbfile D:\ICC_H\PS2.H
 0092                   .blkb 2
                        .area idata
 0092 444F              .byte 'D,'O
                        .area data(ram, con, rel)
 0094                   .dbfile D:\ICC_H\PS2.H
 0094                   .blkb 2
                        .area idata
 0094 4D50              .byte 'M,'P
                        .area data(ram, con, rel)
 0096                   .dbfile D:\ICC_H\PS2.H
 0096                   .blkb 2
                        .area idata
 0096 1551              .byte 21,'Q
                        .area data(ram, con, rel)
 0098                   .dbfile D:\ICC_H\PS2.H
 0098                   .blkb 2
                        .area idata
 0098 2D52              .byte 45,'R
                        .area data(ram, con, rel)
 009A                   .dbfile D:\ICC_H\PS2.H
 009A                   .blkb 2
                        .area idata
 009A 1B53              .byte 27,'S
                        .area data(ram, con, rel)
 009C                   .dbfile D:\ICC_H\PS2.H
 009C                   .blkb 2
                        .area idata
 009C 2C54              .byte 44,'T
                        .area data(ram, con, rel)
 009E                   .dbfile D:\ICC_H\PS2.H
 009E                   .blkb 2
                        .area idata
 009E 3C55              .byte 60,'U
                        .area data(ram, con, rel)
 00A0                   .dbfile D:\ICC_H\PS2.H
 00A0                   .blkb 2
                        .area idata
 00A0 2A56              .byte 42,'V
                        .area data(ram, con, rel)
 00A2                   .dbfile D:\ICC_H\PS2.H
 00A2                   .blkb 2
                        .area idata
 00A2 1D57              .byte 29,'W
                        .area data(ram, con, rel)
 00A4                   .dbfile D:\ICC_H\PS2.H
 00A4                   .blkb 2
                        .area idata
 00A4 2258              .byte 34,'X
                        .area data(ram, con, rel)
 00A6                   .dbfile D:\ICC_H\PS2.H
 00A6                   .blkb 2
                        .area idata
 00A6 3559              .byte 53,'Y
                        .area data(ram, con, rel)
 00A8                   .dbfile D:\ICC_H\PS2.H
 00A8                   .blkb 2
                        .area idata
 00A8 1A5A              .byte 26,'Z
                        .area data(ram, con, rel)
 00AA                   .dbfile D:\ICC_H\PS2.H
 00AA                   .blkb 2
                        .area idata
 00AA 4530              .byte 'E,48
                        .area data(ram, con, rel)
 00AC                   .dbfile D:\ICC_H\PS2.H
 00AC                   .blkb 2
                        .area idata
 00AC 1631              .byte 22,49
                        .area data(ram, con, rel)
 00AE                   .dbfile D:\ICC_H\PS2.H
 00AE                   .blkb 2
                        .area idata
 00AE 1E32              .byte 30,50
                        .area data(ram, con, rel)
 00B0                   .dbfile D:\ICC_H\PS2.H
 00B0                   .blkb 2
                        .area idata
 00B0 2633              .byte 38,51
                        .area data(ram, con, rel)
 00B2                   .dbfile D:\ICC_H\PS2.H
 00B2                   .blkb 2
                        .area idata
 00B2 2534              .byte 37,52
                        .area data(ram, con, rel)
 00B4                   .dbfile D:\ICC_H\PS2.H
 00B4                   .blkb 2
                        .area idata
 00B4 2E35              .byte 46,53
                        .area data(ram, con, rel)
 00B6                   .dbfile D:\ICC_H\PS2.H
 00B6                   .blkb 2
                        .area idata
 00B6 3636              .byte 54,54
                        .area data(ram, con, rel)
 00B8                   .dbfile D:\ICC_H\PS2.H
 00B8                   .blkb 2
                        .area idata
 00B8 3D37              .byte 61,55
                        .area data(ram, con, rel)
 00BA                   .dbfile D:\ICC_H\PS2.H
 00BA                   .blkb 2
                        .area idata
 00BA 3E38              .byte 62,56
                        .area data(ram, con, rel)
 00BC                   .dbfile D:\ICC_H\PS2.H
 00BC                   .blkb 2
                        .area idata
 00BC 4639              .byte 'F,57
                        .area data(ram, con, rel)
 00BE                   .dbfile D:\ICC_H\PS2.H
 00BE                   .blkb 2
                        .area idata
 00BE 0E7E              .byte 14,126
                        .area data(ram, con, rel)
 00C0                   .dbfile D:\ICC_H\PS2.H
 00C0                   .blkb 2
                        .area idata
 00C0 4E5F              .byte 'N,95
                        .area data(ram, con, rel)
 00C2                   .dbfile D:\ICC_H\PS2.H
 00C2                   .blkb 2
                        .area idata
 00C2 552B              .byte 'U,43
                        .area data(ram, con, rel)
 00C4                   .dbfile D:\ICC_H\PS2.H
 00C4                   .blkb 2
                        .area idata
 00C4 5D7C              .byte 93,124
                        .area data(ram, con, rel)
 00C6                   .dbfile D:\ICC_H\PS2.H
 00C6                   .blkb 2
                        .area idata
 00C6 2920              .byte 41,32
                        .area data(ram, con, rel)
 00C8                   .dbfile D:\ICC_H\PS2.H
 00C8                   .blkb 2
                        .area idata
 00C8 547B              .byte 'T,123
                        .area data(ram, con, rel)
 00CA                   .dbfile D:\ICC_H\PS2.H
 00CA                   .blkb 2
                        .area idata
 00CA 5B7D              .byte 91,125
                        .area data(ram, con, rel)
 00CC                   .dbfile D:\ICC_H\PS2.H
 00CC                   .blkb 2
                        .area idata
 00CC 4C3A              .byte 'L,58
                        .area data(ram, con, rel)
 00CE                   .dbfile D:\ICC_H\PS2.H
 00CE                   .blkb 2
                        .area idata
 00CE 5222              .byte 'R,34
                        .area data(ram, con, rel)
 00D0                   .dbfile D:\ICC_H\PS2.H
 00D0                   .blkb 2
                        .area idata
 00D0 413C              .byte 'A,60
                        .area data(ram, con, rel)
 00D2                   .dbfile D:\ICC_H\PS2.H
 00D2                   .blkb 2
                        .area idata
 00D2 493E              .byte 'I,62
                        .area data(ram, con, rel)
 00D4                   .dbfile D:\ICC_H\PS2.H
 00D4                   .blkb 2
                        .area idata
 00D4 4A3F              .byte 'J,63
                        .area data(ram, con, rel)
 00D6                   .dbfile D:\ICC_H\PS2.H
 00D6                   .blkb 2
                        .area idata
 00D6 712E              .byte 'q,46
                        .area data(ram, con, rel)
 00D8                   .dbfile D:\ICC_H\PS2.H
 00D8                   .blkb 2
                        .area idata
 00D8 7030              .byte 'p,48
                        .area data(ram, con, rel)
 00DA                   .dbfile D:\ICC_H\PS2.H
 00DA                   .blkb 2
                        .area idata
 00DA 6931              .byte 'i,49
                        .area data(ram, con, rel)
 00DC                   .dbfile D:\ICC_H\PS2.H
 00DC                   .blkb 2
                        .area idata
 00DC 7232              .byte 'r,50
                        .area data(ram, con, rel)
 00DE                   .dbfile D:\ICC_H\PS2.H
 00DE                   .blkb 2
                        .area idata
 00DE 7A33              .byte 'z,51
                        .area data(ram, con, rel)
 00E0                   .dbfile D:\ICC_H\PS2.H
 00E0                   .blkb 2
                        .area idata
 00E0 6B34              .byte 'k,52
                        .area data(ram, con, rel)
 00E2                   .dbfile D:\ICC_H\PS2.H
 00E2                   .blkb 2
                        .area idata
 00E2 7335              .byte 's,53
                        .area data(ram, con, rel)
 00E4                   .dbfile D:\ICC_H\PS2.H
 00E4                   .blkb 2
                        .area idata
 00E4 7436              .byte 't,54
                        .area data(ram, con, rel)
 00E6                   .dbfile D:\ICC_H\PS2.H
 00E6                   .blkb 2
                        .area idata
 00E6 6C37              .byte 'l,55
                        .area data(ram, con, rel)
 00E8                   .dbfile D:\ICC_H\PS2.H
 00E8                   .blkb 2
                        .area idata
 00E8 7538              .byte 'u,56
                        .area data(ram, con, rel)
 00EA                   .dbfile D:\ICC_H\PS2.H
 00EA                   .blkb 2
                        .area idata
 00EA 7D39              .byte 125,57
                        .area data(ram, con, rel)
 00EC                   .dbfile D:\ICC_H\PS2.H
 00EC                   .dbsym e shifted _shifted A[118:59:2]c
                        .area text(rom, con, rel)
 0398                   .dbfile D:\ICC_H\PS2.H
 0398                   .dbfile D:\ICC_H\LCD12864_ST7920.H
 0398                   .dbfunc e SPI_init _SPI_init fV
                        .even
 0398           _SPI_init::
 0398                   .dbline -1
 0398                   .dbline 83
 0398           ; /*********************************************************************
 0398           ;       微 雪 电 子   WaveShare   http://www.waveShare.net              
 0398           ;                                                               
 0398           ; 目    的:   建立LCD12864_ST7920的串模式操作库
 0398           ; 
 0398           ; 目标系统:   基于AVR单片机
 0398           ;                                                                       
 0398           ; 应用软件:   ICCAVR                                               
 0398           ;                                                                       
 0398           ; 版    本:   Version 1.0
 0398           ;                                                                       
 0398           ; 圆版时间:   2005-09-06
 0398           ; 
 0398           ; 开发人员:   SEE
 0398           ; 
 0398           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 0398           ; 
 0398           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
 0398           ; *********************************************************************/
 0398           ; 
 0398           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 0398           ; ----------------------------------------------------------------------
 0398           ; 版本更新记录：
 0398           ; 
 0398           ; 
 0398           ; 
 0398           ; ----------------------------------------------------------------------
 0398           ; 入口参数说明：
 0398           ;       //#define OUT_LCD_CS    sbi(DDRD,0)
 0398           ;       //#define SET_LCD_CS    sbi(PORTD,0)
 0398           ;       //#define CLR_LCD_CS    cbi(PORTD,0)
 0398           ; 
 0398           ; ----------------------------------------------------------------------
 0398           ; 待定参数说明：
 0398           ;       
 0398           ; 
 0398           ; ----------------------------------------------------------------------        
 0398           ; 对外变量说明：
 0398           ; 
 0398           ; ----------------------------------------------------------------------
 0398           ; 对外函数说明：
 0398           ; 
 0398           ; ----------------------------------------------------------------------
 0398           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 0398           ; 
 0398           ; 
 0398           ; /*--------------------------------------------------------------------
 0398           ; 接口定义：
 0398           ; 
 0398           ; LCD12864_ST7920                       ATmega16
 0398           ; 1.GND         --------        GND
 0398           ; 2.VCC         --------        VCC
 0398           ; 3.V0          --------        V0
 0398           ; 4.RS(CS)      --------        VCC
 0398           ; 5.R/W(SID)    --------        MOSI/PB5
 0398           ; 6.E(SCLK)     --------        SCK/PB7
 0398           ; 7.D0          --------        NC
 0398           ; 8.D1          --------        NC
 0398           ; 9.D2          --------        NC
 0398           ; 10.D3         --------        NC
 0398           ; 11.D4         --------        NC
 0398           ; 12.D5         --------        NC
 0398           ; 13.D6         --------        NC
 0398           ; 14.D7         --------        NC
 0398           ; 15.PSB                --------        GND
 0398           ; 16.NC         --------        NC
 0398           ; 17.RST                --------        NC
 0398           ; 18.NC         --------        NC
 0398           ; 19.LED+               --------        VCC
 0398           ; 20.LED-               --------        GND
 0398           ; 
 0398           ; 说明：
 0398           ; （1）使用ATmega16的硬件SPI操作LCD12864_ST7920
 0398           ; （2）PIN4/CS接VCC，其实也可接到特定的IO口，但外部程序需要指定
 0398           ; --------------------------------------------------------------------*/
 0398           ; 
 0398           ; #ifndef LCD12864_ST7920_H
 0398           ; #define LCD12864_ST7920_H
 0398           ; 
 0398           ; #include "D:\ICC_H\CmmIcc.h"
 0398           ; 
 0398           ; void SPI_init()
 0398           ; {
 0398                   .dbline 84
 0398           ;       DDRB |= 0xB0;
 0398 87B3              in R24,0x17
 039A 806B              ori R24,176
 039C 87BB              out 0x17,R24
 039E                   .dbline 85
 039E           ;       SPCR = 0x50;    //setup SPI
 039E 80E5              ldi R24,80
 03A0 8DB9              out 0xd,R24
 03A2                   .dbline 86
 03A2           ;       SPSR = 0x01;    //setup SPI
 03A2 81E0              ldi R24,1
 03A4 8EB9              out 0xe,R24
 03A6                   .dbline 87
 03A6           ;       SEI();
 03A6 7894              sei
 03A8                   .dbline -2
 03A8           L126:
 03A8                   .dbline 0 ; func end
 03A8 0895              ret
 03AA                   .dbend
 03AA                   .dbfunc e lcd_wrByte _lcd_wrByte fV
 03AA           ;           data -> R16
                        .even
 03AA           _lcd_wrByte::
 03AA                   .dbline -1
 03AA                   .dbline 91
 03AA           ; }
 03AA           ; 
 03AA           ; void lcd_wrByte(uint8 data)
 03AA           ; {  
 03AA                   .dbline 92
 03AA           ;       SPDR = data;        
 03AA 0FB9              out 0xf,R16
 03AC           L128:
 03AC                   .dbline 93
 03AC           ;       while ((SPSR & 0x80) == 0);  
 03AC           L129:
 03AC                   .dbline 93
 03AC 779B              sbis 0xe,7
 03AE FECF              rjmp L128
 03B0           X45:
 03B0                   .dbline -2
 03B0           L127:
 03B0                   .dbline 0 ; func end
 03B0 0895              ret
 03B2                   .dbsym r data 16 c
 03B2                   .dbend
 03B2                   .dbfunc e lcd_wrCmd _lcd_wrCmd fV
 03B2           ;             LC -> R10
 03B2           ;             HC -> R12
                        .even
 03B2           _lcd_wrCmd::
 03B2 AA92              st -y,R10
 03B4 CA92              st -y,R12
 03B6 A22E              mov R10,R18
 03B8 C02E              mov R12,R16
 03BA                   .dbline -1
 03BA                   .dbline 97
 03BA           ; }
 03BA           ; 
 03BA           ; void lcd_wrCmd(uint8 HC,uint8 LC)
 03BA           ; {
 03BA                   .dbline 98
 03BA           ;       lcd_wrByte(0xF8);
 03BA 08EF              ldi R16,248
 03BC F6DF              xcall _lcd_wrByte
 03BE                   .dbline 99
 03BE           ;       lcd_wrByte(HC);         //传输高四位
 03BE 0C2D              mov R16,R12
 03C0 F4DF              xcall _lcd_wrByte
 03C2                   .dbline 100
 03C2           ;       lcd_wrByte(LC);         //传输低四位
 03C2 0A2D              mov R16,R10
 03C4 F2DF              xcall _lcd_wrByte
 03C6                   .dbline -2
 03C6           L131:
 03C6                   .dbline 0 ; func end
 03C6 C990              ld R12,y+
 03C8 A990              ld R10,y+
 03CA 0895              ret
 03CC                   .dbsym r LC 10 c
 03CC                   .dbsym r HC 12 c
 03CC                   .dbend
 03CC                   .dbfunc e lcd_wrDat _lcd_wrDat fV
 03CC           ;             LD -> R10
 03CC           ;             HD -> R12
                        .even
 03CC           _lcd_wrDat::
 03CC AA92              st -y,R10
 03CE CA92              st -y,R12
 03D0 A22E              mov R10,R18
 03D2 C02E              mov R12,R16
 03D4                   .dbline -1
 03D4                   .dbline 104
 03D4           ; }
 03D4           ; 
 03D4           ; void lcd_wrDat(uint8 HD,uint8 LD)
 03D4           ; {
 03D4                   .dbline 105
 03D4           ;       lcd_wrByte(0xFA);
 03D4 0AEF              ldi R16,250
 03D6 E9DF              xcall _lcd_wrByte
 03D8                   .dbline 106
 03D8           ;       lcd_wrByte(HD);         //传输高四位
 03D8 0C2D              mov R16,R12
 03DA E7DF              xcall _lcd_wrByte
 03DC                   .dbline 107
 03DC           ;       lcd_wrByte(LD);         //传输低四位
 03DC 0A2D              mov R16,R10
 03DE E5DF              xcall _lcd_wrByte
 03E0                   .dbline -2
 03E0           L132:
 03E0                   .dbline 0 ; func end
 03E0 C990              ld R12,y+
 03E2 A990              ld R10,y+
 03E4 0895              ret
 03E6                   .dbsym r LD 10 c
 03E6                   .dbsym r HD 12 c
 03E6                   .dbend
 03E6                   .dbfunc e lcd_set_xy _lcd_set_xy fV
 03E6           ;            adr -> R20
 03E6           ;              y -> R22
 03E6           ;              x -> R10
                        .even
 03E6           _lcd_set_xy::
 03E6 0E940000          xcall push_xgsetF00C
 03EA 622F              mov R22,R18
 03EC A02E              mov R10,R16
 03EE                   .dbline -1
 03EE                   .dbline 114
 03EE           ; } 
 03EE           ; 
 03EE           ; /*
 03EE           ; x表示在第几行显示，y表示在第几列显示
 03EE           ; */
 03EE           ; void lcd_set_xy(uint8 x,uint8 y) 
 03EE           ; {
 03EE                   .dbline 117
 03EE           ;       uint8 adr;
 03EE           ; 
 03EE           ;       switch(x)
 03EE BB24              clr R11
 03F0 C501              movw R24,R10
 03F2 8130              cpi R24,1
 03F4 E0E0              ldi R30,0
 03F6 9E07              cpc R25,R30
 03F8 69F0              breq L137
 03FA           X46:
 03FA 8230              cpi R24,2
 03FC E0E0              ldi R30,0
 03FE 9E07              cpc R25,R30
 0400 61F0              breq L138
 0402           X47:
 0402 8330              cpi R24,3
 0404 E0E0              ldi R30,0
 0406 9E07              cpc R25,R30
 0408 59F0              breq L139
 040A           X48:
 040A 8430              cpi R24,4
 040C E0E0              ldi R30,0
 040E 9E07              cpc R25,R30
 0410 51F0              breq L140
 0412           X49:
 0412 0BC0              xjmp L134
 0414           L137:
 0414                   .dbline 119
 0414           ;       {
 0414           ;       case 1: adr = 0x7F + y;
 0414 462F              mov R20,R22
 0416 4158              subi R20,129    ; addi 127
 0418                   .dbline 120
 0418           ;               break;          //在第1行y列显示
 0418 08C0              xjmp L135
 041A           L138:
 041A                   .dbline 121
 041A           ;       case 2: adr = 0x8F + y;
 041A 462F              mov R20,R22
 041C 4157              subi R20,113    ; addi 143
 041E                   .dbline 122
 041E           ;               break;          //在第2行y列显示
 041E 05C0              xjmp L135
 0420           L139:
 0420                   .dbline 123
 0420           ;       case 3: adr = 0x87 + y;
 0420 462F              mov R20,R22
 0422 4957              subi R20,121    ; addi 135
 0424                   .dbline 124
 0424           ;               break;          //在第3行y列显示
 0424 02C0              xjmp L135
 0426           L140:
 0426                   .dbline 125
 0426           ;       case 4: adr = 0x97 + y;
 0426 462F              mov R20,R22
 0428 4956              subi R20,105    ; addi 151
 042A                   .dbline 126
 042A           ;               break;          //在第4行y列显示
 042A           L134:
 042A                   .dbline 127
 042A           ;       default:        ;
 042A                   .dbline 128
 042A           ;       }
 042A           L135:
 042A                   .dbline 129
 042A           ;       lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
 042A 242F              mov R18,R20
 042C 2F70              andi R18,15
 042E 2F70              andi R18,#0x0F
 0430 2295              swap R18
 0432 042F              mov R16,R20
 0434 007F              andi R16,240
 0436 BDDF              xcall _lcd_wrCmd
 0438                   .dbline -2
 0438           L133:
 0438                   .dbline 0 ; func end
 0438 0C940000          xjmp pop_xgsetF00C
 043C                   .dbsym r adr 20 c
 043C                   .dbsym r y 22 c
 043C                   .dbsym r x 10 c
 043C                   .dbend
 043C                   .dbfunc e lcd_putc _lcd_putc fV
 043C           ;             ch -> R20
 043C           ;              y -> R12
 043C           ;              x -> R10
                        .even
 043C           _lcd_putc::
 043C 0E940000          xcall push_xgset303C
 0440 C22E              mov R12,R18
 0442 A02E              mov R10,R16
 0444 4E81              ldd R20,y+6
 0446                   .dbline -1
 0446                   .dbline 133
 0446           ; }
 0446           ; 
 0446           ; void lcd_putc(uint8 x,uint8 y,uint8 ch)
 0446           ; {
 0446                   .dbline 134
 0446           ;       lcd_set_xy(x,y);
 0446 2C2D              mov R18,R12
 0448 0A2D              mov R16,R10
 044A CDDF              xcall _lcd_set_xy
 044C                   .dbline 135
 044C           ;       delay50us(20); 
 044C 04E1              ldi R16,20
 044E 10E0              ldi R17,0
 0450 68DF              xcall _delay50us
 0452                   .dbline 136
 0452           ;       lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
 0452 242F              mov R18,R20
 0454 2F70              andi R18,15
 0456 2F70              andi R18,#0x0F
 0458 2295              swap R18
 045A 042F              mov R16,R20
 045C 007F              andi R16,240
 045E B6DF              xcall _lcd_wrDat
 0460                   .dbline -2
 0460           L141:
 0460                   .dbline 0 ; func end
 0460 0C940000          xjmp pop_xgset303C
 0464                   .dbsym r ch 20 c
 0464                   .dbsym r y 12 c
 0464                   .dbsym r x 10 c
 0464                   .dbend
 0464                   .dbfunc e lcd_putd0 _lcd_putd0 fV
 0464           ;              i -> R20
 0464           ;         length -> R20
 0464           ;            dat -> y+7
 0464           ;              y -> R12
 0464           ;              x -> R10
                        .even
 0464           _lcd_putd0::
 0464 0E940000          xcall push_xgset303C
 0468 C22E              mov R12,R18
 046A A02E              mov R10,R16
 046C 2197              sbiw R28,1
 046E 4B85              ldd R20,y+11
 0470                   .dbline -1
 0470                   .dbline 140
 0470           ; }
 0470           ; 
 0470           ; void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
 0470           ; {
 0470                   .dbline 143
 0470           ;       sint8 i;
 0470           ; 
 0470           ;       speaData(dat,length);
 0470 4883              std y+0,R20
 0472 0F81              ldd R16,y+7
 0474 1885              ldd R17,y+8
 0476 2985              ldd R18,y+9
 0478 3A85              ldd R19,y+10
 047A C2DD              xcall _speaData
 047C                   .dbline 144
 047C           ;       lcd_set_xy(x,y);
 047C 2C2D              mov R18,R12
 047E 0A2D              mov R16,R10
 0480 B2DF              xcall _lcd_set_xy
 0482                   .dbline 145
 0482           ;       delay50us(40);
 0482 08E2              ldi R16,40
 0484 10E0              ldi R17,0
 0486 4DDF              xcall _delay50us
 0488                   .dbline 146
 0488           ;       for(i=length-1;i>=0;i--)
 0488 4150              subi R20,1
 048A 1EC0              xjmp L146
 048C           L143:
 048C                   .dbline 147
 048C           ;       {
 048C                   .dbline 148
 048C           ;               lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
 048C 80E0              ldi R24,<_dataElem
 048E 90E0              ldi R25,>_dataElem
 0490 E42F              mov R30,R20
 0492 FF27              clr R31
 0494 E7FD              sbrc R30,7
 0496 F095              com R31
 0498 E80F              add R30,R24
 049A F91F              adc R31,R25
 049C 8081              ldd R24,z+0
 049E 9927              clr R25
 04A0 C096              adiw R24,48
 04A2 9C01              movw R18,R24
 04A4 2F70              andi R18,15
 04A6 3070              andi R19,0
 04A8 220F              lsl R18
 04AA 331F              rol R19
 04AC 220F              lsl R18
 04AE 331F              rol R19
 04B0 220F              lsl R18
 04B2 331F              rol R19
 04B4 220F              lsl R18
 04B6 331F              rol R19
 04B8 8C01              movw R16,R24
 04BA 007F              andi R16,240
 04BC 1070              andi R17,0
 04BE 86DF              xcall _lcd_wrDat
 04C0                   .dbline 149
 04C0           ;               delay50us(40); 
 04C0 08E2              ldi R16,40
 04C2 10E0              ldi R17,0
 04C4 2EDF              xcall _delay50us
 04C6                   .dbline 150
 04C6           ;       }
 04C6           L144:
 04C6                   .dbline 146
 04C6 4A95              dec R20
 04C8           L146:
 04C8                   .dbline 146
 04C8 4030              cpi R20,0
 04CA 04F7              brge L143
 04CC           X50:
 04CC                   .dbline -2
 04CC           L142:
 04CC                   .dbline 0 ; func end
 04CC 2196              adiw R28,1
 04CE 0C940000          xjmp pop_xgset303C
 04D2                   .dbsym r i 20 C
 04D2                   .dbsym r length 20 c
 04D2                   .dbsym l dat 7 l
 04D2                   .dbsym r y 12 c
 04D2                   .dbsym r x 10 c
 04D2                   .dbend
 04D2                   .dbfunc e lcd_putd _lcd_putd fV
 04D2           ;      effectLen -> R22
 04D2           ;              i -> R20
 04D2           ;         length -> R10
 04D2           ;            dat -> y+11
 04D2           ;              y -> R14
 04D2           ;              x -> R12
                        .even
 04D2           _lcd_putd::
 04D2 0E940000          xcall push_xgsetF0FC
 04D6 E22E              mov R14,R18
 04D8 C02E              mov R12,R16
 04DA 2197              sbiw R28,1
 04DC AF84              ldd R10,y+15
 04DE                   .dbline -1
 04DE                   .dbline 154
 04DE           ; }
 04DE           ; 
 04DE           ; void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
 04DE           ; {
 04DE                   .dbline 158
 04DE           ;       sint8 i;
 04DE           ;       sint8 effectLen;
 04DE           ; 
 04DE           ;       if(dat>999999)
 04DE 8FE3              ldi R24,63
 04E0 92E4              ldi R25,66
 04E2 AFE0              ldi R26,15
 04E4 B0E0              ldi R27,0
 04E6 2B84              ldd R2,y+11
 04E8 3C84              ldd R3,y+12
 04EA 4D84              ldd R4,y+13
 04EC 5E84              ldd R5,y+14
 04EE 8215              cp R24,R2
 04F0 9305              cpc R25,R3
 04F2 A405              cpc R26,R4
 04F4 B505              cpc R27,R5
 04F6 10F4              brsh L148
 04F8           X51:
 04F8                   .dbline 159
 04F8           ;               effectLen=7;
 04F8 67E0              ldi R22,7
 04FA 4CC0              xjmp L149
 04FC           L148:
 04FC                   .dbline 160
 04FC           ;       else if(dat>99999)
 04FC 8FE9              ldi R24,159
 04FE 96E8              ldi R25,134
 0500 A1E0              ldi R26,1
 0502 B0E0              ldi R27,0
 0504 2B84              ldd R2,y+11
 0506 3C84              ldd R3,y+12
 0508 4D84              ldd R4,y+13
 050A 5E84              ldd R5,y+14
 050C 8215              cp R24,R2
 050E 9305              cpc R25,R3
 0510 A405              cpc R26,R4
 0512 B505              cpc R27,R5
 0514 10F4              brsh L150
 0516           X52:
 0516                   .dbline 161
 0516           ;               effectLen=6;
 0516 66E0              ldi R22,6
 0518 3DC0              xjmp L151
 051A           L150:
 051A                   .dbline 162
 051A           ;       else if(dat>9999)
 051A 8FE0              ldi R24,15
 051C 97E2              ldi R25,39
 051E A0E0              ldi R26,0
 0520 B0E0              ldi R27,0
 0522 2B84              ldd R2,y+11
 0524 3C84              ldd R3,y+12
 0526 4D84              ldd R4,y+13
 0528 5E84              ldd R5,y+14
 052A 8215              cp R24,R2
 052C 9305              cpc R25,R3
 052E A405              cpc R26,R4
 0530 B505              cpc R27,R5
 0532 10F4              brsh L152
 0534           X53:
 0534                   .dbline 163
 0534           ;               effectLen=5;
 0534 65E0              ldi R22,5
 0536 2EC0              xjmp L153
 0538           L152:
 0538                   .dbline 164
 0538           ;       else if(dat>999)
 0538 87EE              ldi R24,231
 053A 93E0              ldi R25,3
 053C A0E0              ldi R26,0
 053E B0E0              ldi R27,0
 0540 2B84              ldd R2,y+11
 0542 3C84              ldd R3,y+12
 0544 4D84              ldd R4,y+13
 0546 5E84              ldd R5,y+14
 0548 8215              cp R24,R2
 054A 9305              cpc R25,R3
 054C A405              cpc R26,R4
 054E B505              cpc R27,R5
 0550 10F4              brsh L154
 0552           X54:
 0552                   .dbline 165
 0552           ;               effectLen=4;
 0552 64E0              ldi R22,4
 0554 1FC0              xjmp L155
 0556           L154:
 0556                   .dbline 166
 0556           ;       else if(dat>99)
 0556 83E6              ldi R24,99
 0558 90E0              ldi R25,0
 055A A0E0              ldi R26,0
 055C B0E0              ldi R27,0
 055E 2B84              ldd R2,y+11
 0560 3C84              ldd R3,y+12
 0562 4D84              ldd R4,y+13
 0564 5E84              ldd R5,y+14
 0566 8215              cp R24,R2
 0568 9305              cpc R25,R3
 056A A405              cpc R26,R4
 056C B505              cpc R27,R5
 056E 10F4              brsh L156
 0570           X55:
 0570                   .dbline 167
 0570           ;               effectLen=3;
 0570 63E0              ldi R22,3
 0572 10C0              xjmp L157
 0574           L156:
 0574                   .dbline 168
 0574           ;       else if(dat>9)
 0574 89E0              ldi R24,9
 0576 90E0              ldi R25,0
 0578 A0E0              ldi R26,0
 057A B0E0              ldi R27,0
 057C 2B84              ldd R2,y+11
 057E 3C84              ldd R3,y+12
 0580 4D84              ldd R4,y+13
 0582 5E84              ldd R5,y+14
 0584 8215              cp R24,R2
 0586 9305              cpc R25,R3
 0588 A405              cpc R26,R4
 058A B505              cpc R27,R5
 058C 10F4              brsh L158
 058E           X56:
 058E                   .dbline 169
 058E           ;               effectLen=2;
 058E 62E0              ldi R22,2
 0590 01C0              xjmp L159
 0592           L158:
 0592                   .dbline 171
 0592           ;       else
 0592           ;               effectLen=1;
 0592 61E0              ldi R22,1
 0594           L159:
 0594           L157:
 0594           L155:
 0594           L153:
 0594           L151:
 0594           L149:
 0594                   .dbline 172
 0594           ;       speaData(dat,effectLen);
 0594 6883              std y+0,R22
 0596 0B85              ldd R16,y+11
 0598 1C85              ldd R17,y+12
 059A 2D85              ldd R18,y+13
 059C 3E85              ldd R19,y+14
 059E 30DD              xcall _speaData
 05A0                   .dbline 174
 05A0           ; 
 05A0           ;       lcd_set_xy(x,y);
 05A0 2E2D              mov R18,R14
 05A2 0C2D              mov R16,R12
 05A4 20DF              xcall _lcd_set_xy
 05A6                   .dbline 175
 05A6           ;       delay50us(40); 
 05A6 08E2              ldi R16,40
 05A8 10E0              ldi R17,0
 05AA BBDE              xcall _delay50us
 05AC                   .dbline 176
 05AC           ;       if(length>effectLen)
 05AC 262E              mov R2,R22
 05AE 3324              clr R3
 05B0 27FC              sbrc R2,7
 05B2 3094              com R3
 05B4 4A2C              mov R4,R10
 05B6 5524              clr R5
 05B8 2414              cp R2,R4
 05BA 3504              cpc R3,R5
 05BC 6CF4              brge L160
 05BE           X57:
 05BE                   .dbline 177
 05BE           ;       {
 05BE                   .dbline 178
 05BE           ;               for(i=length-effectLen-1;i>=0;i--)
 05BE 442D              mov R20,R4
 05C0 461B              sub R20,R22
 05C2 4150              subi R20,1
 05C4 07C0              xjmp L165
 05C6           L162:
 05C6                   .dbline 179
 05C6           ;               {
 05C6                   .dbline 180
 05C6           ;                       lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
 05C6 2227              clr R18
 05C8 00E2              ldi R16,32
 05CA 00DF              xcall _lcd_wrDat
 05CC                   .dbline 181
 05CC           ;                       delay50us(40); 
 05CC 08E2              ldi R16,40
 05CE 10E0              ldi R17,0
 05D0 A8DE              xcall _delay50us
 05D2                   .dbline 182
 05D2           ;               }
 05D2           L163:
 05D2                   .dbline 178
 05D2 4A95              dec R20
 05D4           L165:
 05D4                   .dbline 178
 05D4 4030              cpi R20,0
 05D6 BCF7              brge L162
 05D8           X58:
 05D8                   .dbline 183
 05D8           ;       }
 05D8           L160:
 05D8                   .dbline 184
 05D8           ;       for(i=effectLen-1;i>=0;i--)
 05D8 462F              mov R20,R22
 05DA 4150              subi R20,1
 05DC 1EC0              xjmp L169
 05DE           L166:
 05DE                   .dbline 185
 05DE           ;       {
 05DE                   .dbline 186
 05DE           ;               lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
 05DE 80E0              ldi R24,<_dataElem
 05E0 90E0              ldi R25,>_dataElem
 05E2 E42F              mov R30,R20
 05E4 FF27              clr R31
 05E6 E7FD              sbrc R30,7
 05E8 F095              com R31
 05EA E80F              add R30,R24
 05EC F91F              adc R31,R25
 05EE 8081              ldd R24,z+0
 05F0 9927              clr R25
 05F2 C096              adiw R24,48
 05F4 9C01              movw R18,R24
 05F6 2F70              andi R18,15
 05F8 3070              andi R19,0
 05FA 220F              lsl R18
 05FC 331F              rol R19
 05FE 220F              lsl R18
 0600 331F              rol R19
 0602 220F              lsl R18
 0604 331F              rol R19
 0606 220F              lsl R18
 0608 331F              rol R19
 060A 8C01              movw R16,R24
 060C 007F              andi R16,240
 060E 1070              andi R17,0
 0610 DDDE              xcall _lcd_wrDat
 0612                   .dbline 187
 0612           ;               delay50us(40);
 0612 08E2              ldi R16,40
 0614 10E0              ldi R17,0
 0616 85DE              xcall _delay50us
 0618                   .dbline 188
 0618           ;       }
 0618           L167:
 0618                   .dbline 184
 0618 4A95              dec R20
 061A           L169:
 061A                   .dbline 184
 061A 4030              cpi R20,0
 061C 04F7              brge L166
 061E           X59:
 061E                   .dbline -2
 061E           L147:
 061E                   .dbline 0 ; func end
 061E 2196              adiw R28,1
 0620 0C940000          xjmp pop_xgsetF0FC
 0624                   .dbsym r effectLen 22 C
 0624                   .dbsym r i 20 C
 0624                   .dbsym r length 10 c
 0624                   .dbsym l dat 11 l
 0624                   .dbsym r y 14 c
 0624                   .dbsym r x 12 c
 0624                   .dbend
 0624                   .dbfunc e lcd_puts _lcd_puts fV
 0624           ;            str -> R20,R21
 0624           ;              y -> R12
 0624           ;              x -> R10
                        .even
 0624           _lcd_puts::
 0624 0E940000          xcall push_xgset303C
 0628 C22E              mov R12,R18
 062A A02E              mov R10,R16
 062C 4E81              ldd R20,y+6
 062E 5F81              ldd R21,y+7
 0630                   .dbline -1
 0630                   .dbline 192
 0630           ; }
 0630           ; 
 0630           ; void lcd_puts(uint8 x,uint8 y,uint8 *str)
 0630           ; { 
 0630                   .dbline 193
 0630           ;       lcd_set_xy(x,y);
 0630 2C2D              mov R18,R12
 0632 0A2D              mov R16,R10
 0634 D8DE              xcall _lcd_set_xy
 0636                   .dbline 194
 0636           ;       delay50us(20);   
 0636 04E1              ldi R16,20
 0638 10E0              ldi R17,0
 063A 73DE              xcall _delay50us
 063C 0FC0              xjmp L172
 063E           L171:
 063E                   .dbline 196
 063E           ;       while(*str)
 063E           ;       {
 063E                   .dbline 197
 063E           ;               lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
 063E FA01              movw R30,R20
 0640 2080              ldd R2,z+0
 0642 3324              clr R3
 0644 222D              mov R18,R2
 0646 2F70              andi R18,15
 0648 2F70              andi R18,#0x0F
 064A 2295              swap R18
 064C 022D              mov R16,R2
 064E 007F              andi R16,240
 0650 BDDE              xcall _lcd_wrDat
 0652                   .dbline 198
 0652           ;               str++;
 0652 4F5F              subi R20,255  ; offset = 1
 0654 5F4F              sbci R21,255
 0656                   .dbline 199
 0656           ;               delay50us(20);
 0656 04E1              ldi R16,20
 0658 10E0              ldi R17,0
 065A 63DE              xcall _delay50us
 065C                   .dbline 200
 065C           ;       } 
 065C           L172:
 065C                   .dbline 195
 065C FA01              movw R30,R20
 065E 2080              ldd R2,z+0
 0660 2220              tst R2
 0662 69F7              brne L171
 0664           X60:
 0664                   .dbline -2
 0664           L170:
 0664                   .dbline 0 ; func end
 0664 0C940000          xjmp pop_xgset303C
 0668                   .dbsym r str 20 pc
 0668                   .dbsym r y 12 c
 0668                   .dbsym r x 10 c
 0668                   .dbend
 0668                   .dbfunc e lcd_puts_ _lcd_puts_ fV
 0668           ;          dlyMs -> R10
 0668           ;            str -> R20,R21
 0668           ;              y -> R14
 0668           ;              x -> R12
                        .even
 0668           _lcd_puts_::
 0668 0E940000          xcall push_xgset30FC
 066C E22E              mov R14,R18
 066E C02E              mov R12,R16
 0670 4885              ldd R20,y+8
 0672 5985              ldd R21,y+9
 0674 AA84              ldd R10,y+10
 0676                   .dbline -1
 0676                   .dbline 204
 0676           ; }
 0676           ; 
 0676           ; void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
 0676           ; { 
 0676                   .dbline 205
 0676           ;       lcd_set_xy(x,y);
 0676 2E2D              mov R18,R14
 0678 0C2D              mov R16,R12
 067A B5DE              xcall _lcd_set_xy
 067C                   .dbline 206
 067C           ;       delay50us(20);   
 067C 04E1              ldi R16,20
 067E 10E0              ldi R17,0
 0680 50DE              xcall _delay50us
 0682 0FC0              xjmp L176
 0684           L175:
 0684                   .dbline 208
 0684           ;       while(*str)
 0684           ;       {
 0684                   .dbline 209
 0684           ;               lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
 0684 FA01              movw R30,R20
 0686 2080              ldd R2,z+0
 0688 3324              clr R3
 068A 222D              mov R18,R2
 068C 2F70              andi R18,15
 068E 2F70              andi R18,#0x0F
 0690 2295              swap R18
 0692 022D              mov R16,R2
 0694 007F              andi R16,240
 0696 9ADE              xcall _lcd_wrDat
 0698                   .dbline 210
 0698           ;               str++;
 0698 4F5F              subi R20,255  ; offset = 1
 069A 5F4F              sbci R21,255
 069C                   .dbline 211
 069C           ;               delay50ms(dlyMs);
 069C 0A2D              mov R16,R10
 069E 1127              clr R17
 06A0 50DE              xcall _delay50ms
 06A2                   .dbline 212
 06A2           ;       } 
 06A2           L176:
 06A2                   .dbline 207
 06A2 FA01              movw R30,R20
 06A4 2080              ldd R2,z+0
 06A6 2220              tst R2
 06A8 69F7              brne L175
 06AA           X61:
 06AA                   .dbline -2
 06AA           L174:
 06AA                   .dbline 0 ; func end
 06AA 0C940000          xjmp pop_xgset30FC
 06AE                   .dbsym r dlyMs 10 c
 06AE                   .dbsym r str 20 pc
 06AE                   .dbsym r y 14 c
 06AE                   .dbsym r x 12 c
 06AE                   .dbend
 06AE                   .dbfunc e lcd_clr _lcd_clr fV
                        .even
 06AE           _lcd_clr::
 06AE                   .dbline -1
 06AE                   .dbline 216
 06AE           ; }
 06AE           ; 
 06AE           ; void lcd_clr()
 06AE           ; {
 06AE                   .dbline 217
 06AE           ;       lcd_wrCmd(0x00,0x10);
 06AE 20E1              ldi R18,16
 06B0 0027              clr R16
 06B2 7FDE              xcall _lcd_wrCmd
 06B4                   .dbline 218
 06B4           ;       delay50us(200);
 06B4 08EC              ldi R16,200
 06B6 10E0              ldi R17,0
 06B8                   .dbline -2
 06B8           L178:
 06B8                   .dbline 0 ; func end
 06B8 34CE              xjmp _delay50us
 06BA                   .dbend
 06BA                   .dbfunc e lcd_init _lcd_init fV
                        .even
 06BA           _lcd_init::
 06BA                   .dbline -1
 06BA                   .dbline 222
 06BA           ; }
 06BA           ; 
 06BA           ; void lcd_init(void)
 06BA           ; {
 06BA                   .dbline 223
 06BA           ;       SPI_init();     
 06BA 6EDE              xcall _SPI_init
 06BC                   .dbline 226
 06BC           ;       //OUT_LCD_CS;           //若LCD_CS
 06BC           ;       //SET_LCD_CS;           
 06BC           ;       delay50ms(1);
 06BC 01E0              ldi R16,1
 06BE 10E0              ldi R17,0
 06C0 40DE              xcall _delay50ms
 06C2                   .dbline 227
 06C2           ;       lcd_wrCmd(0x30,0x30);   //使用8位控制界面,使用基本指令集
 06C2 20E3              ldi R18,48
 06C4 00E3              ldi R16,48
 06C6 75DE              xcall _lcd_wrCmd
 06C8                   .dbline 229
 06C8           ;       //lcd_wrCmd(0x00,0xF0); //整体显示ON
 06C8           ;       lcd_wrCmd(0x00,0xC0);   //整体显示ON
 06C8 20EC              ldi R18,192
 06CA 0027              clr R16
 06CC 72DE              xcall _lcd_wrCmd
 06CE                   .dbline 230
 06CE           ;       lcd_wrCmd(0x00,0x10);   //清屏
 06CE 20E1              ldi R18,16
 06D0 0027              clr R16
 06D2 6FDE              xcall _lcd_wrCmd
 06D4                   .dbline 232
 06D4           ;       //lcd_wrCmd(0x10,0x00); //光标
 06D4           ;       lcd_wrCmd(0x00,0x60);
 06D4 20E6              ldi R18,96
 06D6 0027              clr R16
 06D8 6CDE              xcall _lcd_wrCmd
 06DA                   .dbline 234
 06DA           ;       //lcd_wrCmd(0x00,0x70); //显示右移
 06DA           ;       delay50ms(1);           //不可省去！！！
 06DA 01E0              ldi R16,1
 06DC 10E0              ldi R17,0
 06DE                   .dbline -2
 06DE           L179:
 06DE                   .dbline 0 ; func end
 06DE 31CE              xjmp _delay50ms
 06E0                   .dbend
                        .area data(ram, con, rel)
 00EC                   .dbfile D:\ICC_H\LCD12864_ST7920.H
 00EC           _rcvF::
 00EC                   .blkb 1
                        .area idata
 00EC 00                .byte 0
                        .area data(ram, con, rel)
 00ED                   .dbfile D:\ICC_H\LCD12864_ST7920.H
 00ED                   .dbfile E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PS2PC~1\PS2SimpleSoft_LCD12864\PS2SimpleSoft.c
 00ED                   .dbsym e rcvF _rcvF c
 00ED           L181:
 00ED                   .blkb 1
                        .area idata
 00ED 00                .byte 0
                        .area data(ram, con, rel)
 00EE                   .dbfile E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PS2PC~1\PS2SimpleSoft_LCD12864\PS2SimpleSoft.c
                        .area text(rom, con, rel)
 06E0                   .dbfile E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PS2PC~1\PS2SimpleSoft_LCD12864\PS2SimpleSoft.c
 06E0                   .dbfunc e check _check fV
 06E0                   .dbsym s rcvBits L181 c
                        .even
 06E0           _check::
 06E0                   .dbline -1
 06E0                   .dbline 78
 06E0           ; /*********************************************************************
 06E0           ;       微 雪 电 子   WaveShare   http://www.waveShare.net              
 06E0           ;                                                                       
 06E0           ; 目    的:   建立PS/2的SimpleSoft测试程序（软件查询读取PS/2接收到的数据）
 06E0           ;       
 06E0           ; 目标系统:   基于AVR单片机
 06E0           ;                                                                               
 06E0           ; 应用软件:   ICCAVR
 06E0           ;                                                                               
 06E0           ; 版    本:   Version 1.0                                                          
 06E0           ;                                                                               
 06E0           ; 圆版时间:   2005-06-25
 06E0           ;       
 06E0           ; 开发人员:   SEE
 06E0           ; 
 06E0           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 06E0           ;       
 06E0           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
 06E0           ; *********************************************************************/
 06E0           ; 
 06E0           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 06E0           ; ----------------------------------------------------------------------
 06E0           ; 版本更新记录：
 06E0           ; 
 06E0           ; ----------------------------------------------------------------------
 06E0           ; 实验内容：
 06E0           ; 按PC键盘，观察单片机读到的数据，使用LCD12864观察。
 06E0           ; ----------------------------------------------------------------------
 06E0           ; 硬件连接：
 06E0           ; 将PD口的LED指示灯使用短路帽短接；
 06E0           ; 将PC键盘插入PS2接口，
 06E0           ; 使用短路帽短接PC0与DATA，
 06E0           ; 使用短路帽短接PC1与CLK
 06E0           ; 
 06E0           ;                       LCD12864_ST7920                 ATmega48
 06E0           ;                               RS(CS)  --------        VCC
 06E0           ;                               R/W(SID)--------        MOSI/PB5
 06E0           ;                               E(SCLK) --------        SCK/PB7
 06E0           ;                               PSB             --------        GND
 06E0           ; ----------------------------------------------------------------------
 06E0           ; 注意事项： 
 06E0           ; （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
 06E0           ; （2）请详细阅读“使用必读”及相关资料。
 06E0           ; ----------------------------------------------------------------------
 06E0           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 06E0           ; 
 06E0           ; #include <iom16v.h>
 06E0           ; #include "D:\ICC_H\CmmICC.H"
 06E0           ; #include "D:\ICC_H\PS2.H"
 06E0           ; #include "D:\ICC_H\LCD12864_ST7920.H"
 06E0           ; 
 06E0           ; /*
 06E0           ; #define PRESS_DATA_DDR        DDRD
 06E0           ; #define PRESS_DATA_PORT PORTD
 06E0           ; #define SHIFT_DATA_DDR        DDRD
 06E0           ; #define SHIFT_DATA_PORT PORTD
 06E0           ; */
 06E0           ; 
 06E0           ; #define SET_SDA               sbi(PORTD,3)
 06E0           ; #define CLR_SDA               cbi(PORTD,3)
 06E0           ; #define GET_SDA               gbi(PIND,3)
 06E0           ; #define OUT_SDA       sbi(DDRD,3)
 06E0           ; #define IN_SDA                cbi(DDRD,3)
 06E0           ; 
 06E0           ; #define SET_SCK               sbi(PORTD,2)
 06E0           ; #define CLR_SCK               cbi(PORTD,2)
 06E0           ; #define GET_SCK               gbi(PIND,2)
 06E0           ; #define OUT_SCK       sbi(DDRD,2)
 06E0           ; #define IN_SCK                cbi(DDRD,2)
 06E0           ; 
 06E0           ; #define DELAY() {NOP();NOP();NOP();NOP();}
 06E0           ; 
 06E0           ; bool rcvF             = 0;    //是否收到字符标志
 06E0           ; uint8 keyVal;                         //键值
 06E0           ; uint8 tmp,tmp2;
 06E0           ; 
 06E0           ; void check(void)
 06E0           ; {
 06E0                   .dbline 81
 06E0           ;     static uint8 rcvBits = 0; //接收次数，中断次数
 06E0           ;       
 06E0           ;       OUT_SCK;                                        //设置"SCK_DDR"为输出
 06E0 8A9A              sbi 0x11,2
 06E2                   .dbline 82
 06E2           ;       DELAY();
 06E2                   .dbline 82
 06E2 0000              nop
 06E4                   .dbline 82
 06E4 0000              nop
 06E6                   .dbline 82
 06E6 0000              nop
 06E8                   .dbline 82
 06E8 0000              nop
 06EA                   .dbline 82
 06EA                   .dbline 82
 06EA                   .dbline 83
 06EA           ;       SET_SCK;                                        //"SCK_PORT"输出"1"
 06EA 929A              sbi 0x12,2
 06EC                   .dbline 84
 06EC           ;       DELAY();
 06EC                   .dbline 84
 06EC 0000              nop
 06EE                   .dbline 84
 06EE 0000              nop
 06F0                   .dbline 84
 06F0 0000              nop
 06F2                   .dbline 84
 06F2 0000              nop
 06F4                   .dbline 84
 06F4                   .dbline 84
 06F4                   .dbline 86
 06F4           ;       
 06F4           ;       IN_SCK;                                         //设置"SCK_DDR"为输入
 06F4 8A98              cbi 0x11,2
 06F6                   .dbline 87
 06F6           ;       DELAY();
 06F6                   .dbline 87
 06F6 0000              nop
 06F8                   .dbline 87
 06F8 0000              nop
 06FA                   .dbline 87
 06FA 0000              nop
 06FC                   .dbline 87
 06FC 0000              nop
 06FE                   .dbline 87
 06FE                   .dbline 87
 06FE                   .dbline 88
 06FE           ;       if(!GET_SCK)
 06FE 8299              sbic 0x10,2
 0700 25C0              rjmp L182
 0702           X62:
 0702                   .dbline 89
 0702           ;       {
 0702                   .dbline 90
 0702           ;               if((rcvBits>0) && (rcvBits<9))
 0702 2090ED00          lds R2,L181
 0706 80E0              ldi R24,0
 0708 8215              cp R24,R2
 070A 70F4              brsh L184
 070C           X63:
 070C 822D              mov R24,R2
 070E 8930              cpi R24,9
 0710 58F4              brsh L184
 0712           X64:
 0712                   .dbline 91
 0712           ;               { 
 0712                   .dbline 92
 0712           ;                       keyVal=keyVal>>1;       //数据是LSB格式
 0712 20900200          lds R2,_keyVal
 0716 2694              lsr R2
 0718 20920200          sts _keyVal,R2
 071C                   .dbline 95
 071C           ;                       //IN_SDA;                       //当有对键盘有属性设置时，注意输入输出切换
 071C           ;                       //DELAY();
 071C           ;                       if(GET_SDA) 
 071C 839B              sbis 0x10,3
 071E 04C0              rjmp L186
 0720           X65:
 0720                   .dbline 96
 0720           ;                               keyVal=keyVal|0x80; 
 0720 822D              mov R24,R2
 0722 8068              ori R24,128
 0724 80930200          sts _keyVal,R24
 0728           L186:
 0728                   .dbline 97
 0728           ;               }
 0728           L184:
 0728                   .dbline 98
 0728           ;               rcvBits++;
 0728 8091ED00          lds R24,L181
 072C 8F5F              subi R24,255    ; addi 1
 072E 8093ED00          sts L181,R24
 0732           L188:
 0732                   .dbline 99
 0732           ;               while(!GET_SCK);                //等待PS/2CLK拉高
 0732           L189:
 0732                   .dbline 99
 0732 829B              sbis 0x10,2
 0734 FECF              rjmp L188
 0736           X66:
 0736                   .dbline 101
 0736           ;       
 0736           ;               if(rcvBits>10)
 0736 8AE0              ldi R24,10
 0738 2090ED00          lds R2,L181
 073C 8215              cp R24,R2
 073E 30F4              brsh L191
 0740           X67:
 0740                   .dbline 102
 0740           ;               {
 0740                   .dbline 103
 0740           ;                       rcvBits=0;                      //接收11次表示接收完一帧数据
 0740 2224              clr R2
 0742 2092ED00          sts L181,R2
 0746                   .dbline 104
 0746           ;                       rcvF=1;                         //标识有字符已经输入
 0746 81E0              ldi R24,1
 0748 8093EC00          sts _rcvF,R24
 074C                   .dbline 105
 074C           ;               }
 074C           L191:
 074C                   .dbline 106
 074C           ;       }
 074C           L182:
 074C                   .dbline -2
 074C           L180:
 074C                   .dbline 0 ; func end
 074C 0895              ret
 074E                   .dbend
                        .area data(ram, con, rel)
 00EE                   .dbfile E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PS2PC~1\PS2SimpleSoft_LCD12864\PS2SimpleSoft.c
 00EE           L194:
 00EE                   .blkb 1
                        .area idata
 00EE 00                .byte 0
                        .area data(ram, con, rel)
 00EF                   .dbfile E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PS2PC~1\PS2SimpleSoft_LCD12864\PS2SimpleSoft.c
 00EF           L195:
 00EF                   .blkb 1
                        .area idata
 00EF 00                .byte 0
                        .area data(ram, con, rel)
 00F0                   .dbfile E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PS2PC~1\PS2SimpleSoft_LCD12864\PS2SimpleSoft.c
                        .area text(rom, con, rel)
 074E                   .dbfile E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PS2PC~1\PS2SimpleSoft_LCD12864\PS2SimpleSoft.c
 074E                   .dbfunc e keyHandle _keyHandle fV
 074E                   .dbsym s shift L195 c
 074E                   .dbsym s isUp L194 c
 074E           ;              i -> R20
 074E           ;            val -> R16
                        .even
 074E           _keyHandle::
 074E 4A93              st -y,R20
 0750 5A93              st -y,R21
 0752                   .dbline -1
 0752                   .dbline 117
 0752           ; }
 0752           ; /*--------------------------------------------------------------------
 0752           ; 函数名称：
 0752           ; 函数功能：
 0752           ; 注意事项：
 0752           ; 提示说明：
 0752           ; 输    入：
 0752           ; 返    回：
 0752           ; --------------------------------------------------------------------*/
 0752           ; void keyHandle(uint8 val) 
 0752           ; {
 0752                   .dbline 121
 0752           ;       uint8 i;
 0752           ;       static bool isUp=0;                     //按键释放动作标志
 0752           ;       static bool shift=0;            //shift键按下标志
 0752           ;       rcvF = 0; 
 0752 2224              clr R2
 0754 2092EC00          sts _rcvF,R2
 0758                   .dbline 122
 0758           ;       tmp= val;               //状态指示 //PRESS_DATA_PORT =
 0758 00930100          sts _tmp,R16
 075C                   .dbline 123
 075C           ;       if(!isUp)
 075C 2090EE00          lds R2,L194
 0760 2220              tst R2
 0762 09F0              breq X82
 0764 52C0              xjmp L196
 0766           X82:
 0766           X68:
 0766                   .dbline 124
 0766           ;       {
 0766                   .dbline 125
 0766           ;               switch(val)
 0766 402F              mov R20,R16
 0768 5527              clr R21
 076A 4935              cpi R20,89
 076C E0E0              ldi R30,0
 076E 5E07              cpc R21,R30
 0770 B9F0              breq L203
 0772           X69:
 0772 89E5              ldi R24,89
 0774 90E0              ldi R25,0
 0776 8417              cp R24,R20
 0778 9507              cpc R25,R21
 077A 2CF0              brlt L219
 077C           X70:
 077C           L218:
 077C 4231              cpi R20,18
 077E E0E0              ldi R30,0
 0780 5E07              cpc R21,R30
 0782 51F0              breq L202
 0784           X71:
 0784 11C0              xjmp L198
 0786           L219:
 0786 403F              cpi R20,240
 0788 E0E0              ldi R30,0
 078A 5E07              cpc R21,R30
 078C 09F0              breq L201
 078E           X72:
 078E 0CC0              xjmp L198
 0790           L201:
 0790                   .dbline 128
 0790           ;               {
 0790           ;                       case 0xF0 :                     // a relase action
 0790           ;                               isUp = 1;
 0790 81E0              ldi R24,1
 0792 8093EE00          sts L194,R24
 0796                   .dbline 129
 0796           ;                               break;
 0796 52C0              xjmp L197
 0798           L202:
 0798                   .dbline 131
 0798           ;                       case 0x12 :                     // Left shift
 0798           ;                               shift = 1;
 0798 81E0              ldi R24,1
 079A 8093EF00          sts L195,R24
 079E                   .dbline 132
 079E           ;                               break;
 079E 4EC0              xjmp L197
 07A0           L203:
 07A0                   .dbline 134
 07A0           ;                       case 0x59 :                     // Right shift
 07A0           ;                               shift = 1;
 07A0 81E0              ldi R24,1
 07A2 8093EF00          sts L195,R24
 07A6                   .dbline 135
 07A6           ;                               break;
 07A6 4AC0              xjmp L197
 07A8           L198:
 07A8                   .dbline 137
 07A8           ;                       default:
 07A8           ;                               if(!shift)              // If shift not pressed
 07A8 2090EF00          lds R2,L195
 07AC 2220              tst R2
 07AE E1F4              brne L204
 07B0           X73:
 07B0                   .dbline 138
 07B0           ;                               { 
 07B0                   .dbline 144
 07B0           ; /*
 07B0           ;                                       for(i=0; unshifted[i][0]!=val && unshifted[i][0]; i++)
 07B0           ;                                               ;
 07B0           ;                                       上述写法较为灵活，但KEIL非UNIXC标准，不能采用该写法
 07B0           ; */
 07B0           ;                                       for(i=0; unshifted[i][0]!=val && i<59; i++)
 07B0 4427              clr R20
 07B2 01C0              xjmp L209
 07B4           L206:
 07B4                   .dbline 145
 07B4           ;                                               ;
 07B4           L207:
 07B4                   .dbline 144
 07B4 4395              inc R20
 07B6           L209:
 07B6                   .dbline 144
 07B6 80E0              ldi R24,<_unshifted
 07B8 90E0              ldi R25,>_unshifted
 07BA E42F              mov R30,R20
 07BC FF27              clr R31
 07BE EE0F              lsl R30
 07C0 FF1F              rol R31
 07C2 E80F              add R30,R24
 07C4 F91F              adc R31,R25
 07C6 2080              ldd R2,z+0
 07C8 2016              cp R2,R16
 07CA 11F0              breq L210
 07CC           X74:
 07CC 4B33              cpi R20,59
 07CE 90F3              brlo L206
 07D0           X75:
 07D0           L210:
 07D0                   .dbline 146
 07D0           ;                                       if(unshifted[i][0] == val) 
 07D0 80E0              ldi R24,<_unshifted
 07D2 90E0              ldi R25,>_unshifted
 07D4 E42F              mov R30,R20
 07D6 FF27              clr R31
 07D8 EE0F              lsl R30
 07DA FF1F              rol R31
 07DC E80F              add R30,R24
 07DE F91F              adc R31,R25
 07E0 2080              ldd R2,z+0
 07E2 2016              cp R2,R16
 07E4 59F5              brne L197
 07E6           X76:
 07E6                   .dbline 147
 07E6           ;                                               ;               //状态指示
 07E6                   .dbline 149
 07E6           ;                                       
 07E6           ;                               } 
 07E6 2AC0              xjmp L197
 07E8           L204:
 07E8                   .dbline 151
 07E8           ;                               else                    // If shift pressed
 07E8           ;                               {                       
 07E8                   .dbline 157
 07E8           ; /*
 07E8           ;                                       for(i=0; unshifted[i][0]!=val && unshifted[i][0]; i++)
 07E8           ;                                               ;
 07E8           ;                                       上述写法较为灵活，但KEIL非UNIXC标准，不能采用该写法
 07E8           ; */
 07E8           ;                                       for(i=0; shifted[i][0]!=val && i<59; i++)
 07E8 4427              clr R20
 07EA 01C0              xjmp L216
 07EC           L213:
 07EC                   .dbline 158
 07EC           ;                                               ;
 07EC           L214:
 07EC                   .dbline 157
 07EC 4395              inc R20
 07EE           L216:
 07EE                   .dbline 157
 07EE 80E0              ldi R24,<_shifted
 07F0 90E0              ldi R25,>_shifted
 07F2 E42F              mov R30,R20
 07F4 FF27              clr R31
 07F6 EE0F              lsl R30
 07F8 FF1F              rol R31
 07FA E80F              add R30,R24
 07FC F91F              adc R31,R25
 07FE 2080              ldd R2,z+0
 0800 2016              cp R2,R16
 0802 11F0              breq L217
 0804           X77:
 0804 4B33              cpi R20,59
 0806 90F3              brlo L213
 0808           X78:
 0808           L217:
 0808                   .dbline 161
 0808           ;                                       //if(shifted[i][0] == val) 
 0808           ;                                               //SHIFT_DATA_PORT = val;//状态指示
 0808           ;                               }
 0808                   .dbline 162
 0808           ;               }
 0808                   .dbline 163
 0808           ;       }
 0808 19C0              xjmp L197
 080A           L196:
 080A                   .dbline 165
 080A           ;       else 
 080A           ;       {
 080A                   .dbline 166
 080A           ;               isUp=0;                                 
 080A 2224              clr R2
 080C 2092EE00          sts L194,R2
 0810                   .dbline 167
 0810           ;               switch(val)
 0810 402F              mov R20,R16
 0812 5527              clr R21
 0814 4231              cpi R20,18
 0816 E0E0              ldi R30,0
 0818 5E07              cpc R21,R30
 081A 49F0              breq L223
 081C           X79:
 081C 4231              cpi R20,18
 081E E0E0              ldi R30,0
 0820 5E07              cpc R21,R30
 0822 64F0              brlt L220
 0824           X80:
 0824           L225:
 0824 4935              cpi R20,89
 0826 E0E0              ldi R30,0
 0828 5E07              cpc R21,R30
 082A 29F0              breq L224
 082C           X81:
 082C 07C0              xjmp L220
 082E           L223:
 082E                   .dbline 170
 082E           ;               {
 082E           ;                       case 0x12 :                     // Left SHIFT
 082E           ;                               shift = 0;
 082E 2224              clr R2
 0830 2092EF00          sts L195,R2
 0834                   .dbline 171
 0834           ;                               break;
 0834 03C0              xjmp L221
 0836           L224:
 0836                   .dbline 173
 0836           ;                       case 0x59 :                     // Right SHIFT
 0836           ;                               shift = 0;
 0836 2224              clr R2
 0838 2092EF00          sts L195,R2
 083C                   .dbline 174
 083C           ;                               break;
 083C           L220:
 083C           L221:
 083C                   .dbline 176
 083C           ;               }
 083C           ;       }
 083C           L197:
 083C                   .dbline -2
 083C           L193:
 083C                   .dbline 0 ; func end
 083C 5991              ld R21,y+
 083E 4991              ld R20,y+
 0840 0895              ret
 0842                   .dbsym r i 20 c
 0842                   .dbsym r val 16 c
 0842                   .dbend
 0842                   .dbfunc e main _main fV
 0842           ;              i -> R20
                        .even
 0842           _main::
 0842 2297              sbiw R28,2
 0844                   .dbline -1
 0844                   .dbline 187
 0844           ; }  
 0844           ; /*--------------------------------------------------------------------
 0844           ; 函数名称：
 0844           ; 函数功能：
 0844           ; 注意事项：
 0844           ; 提示说明：
 0844           ; 输    入：
 0844           ; 返    回：
 0844           ; --------------------------------------------------------------------*/
 0844           ; void main(void)
 0844           ; {
 0844                   .dbline 191
 0844           ;    unsigned char i;
 0844           ;     //PRESS_DATA_DDR = 0XFF;
 0844           ;       //SHIFT_DATA_DDR = 0XFF;
 0844           ;       DDRC=0xFF;
 0844 8FEF              ldi R24,255
 0846 84BB              out 0x14,R24
 0848                   .dbline 192
 0848           ;       PORTC|=0x01;
 0848 A89A              sbi 0x15,0
 084A                   .dbline 193
 084A           ;       lcd_init();
 084A 37DF              xcall _lcd_init
 084C                   .dbline 194
 084C           ;       lcd_clr();
 084C 30DF              xcall _lcd_clr
 084E                   .dbline 195
 084E           ;       lcd_puts(1,1,"PS2 键盘实验");
 084E 80E0              ldi R24,<L227
 0850 90E0              ldi R25,>L227
 0852 9983              std y+1,R25
 0854 8883              std y+0,R24
 0856 21E0              ldi R18,1
 0858 01E0              ldi R16,1
 085A E4DE              xcall _lcd_puts
 085C                   .dbline 196
 085C           ;       lcd_puts(2,1,"PS2 PORT");
 085C 80E0              ldi R24,<L228
 085E 90E0              ldi R25,>L228
 0860 9983              std y+1,R25
 0862 8883              std y+0,R24
 0864 21E0              ldi R18,1
 0866 02E0              ldi R16,2
 0868 DDDE              xcall _lcd_puts
 086A                   .dbline 197
 086A           ;       lcd_puts(3,1,"读取键盘的值:");  
 086A 80E0              ldi R24,<L229
 086C 90E0              ldi R25,>L229
 086E 9983              std y+1,R25
 0870 8883              std y+0,R24
 0872 21E0              ldi R18,1
 0874 03E0              ldi R16,3
 0876 D6DE              xcall _lcd_puts
 0878                   .dbline 199
 0878           ;       
 0878           ;       PORTC=0x00;
 0878 2224              clr R2
 087A 25BA              out 0x15,R2
 087C                   .dbline 201
 087C           ;       
 087C           ;       IN_SDA;
 087C 8B98              cbi 0x11,3
 087E 33C0              xjmp L231
 0880           L230:
 0880                   .dbline 203
 0880           ;       while(1)
 0880           ;       {
 0880                   .dbline 205
 0880           ;               
 0880           ;               check();
 0880 2FDF              xcall _check
 0882                   .dbline 206
 0882           ;               if(rcvF)
 0882 2090EC00          lds R2,_rcvF
 0886 2220              tst R2
 0888 71F1              breq L233
 088A           X83:
 088A                   .dbline 207
 088A           ;               {
 088A                   .dbline 208
 088A           ;                       keyHandle(keyVal);
 088A 00910200          lds R16,_keyVal
 088E 5FDF              xcall _keyHandle
 0890                   .dbline 209
 0890           ;                       PORTC=0x01;
 0890 81E0              ldi R24,1
 0892 85BB              out 0x15,R24
 0894                   .dbline 210
 0894           ;                       lcd_clr();
 0894 0CDF              xcall _lcd_clr
 0896                   .dbline 213
 0896           ;                       
 0896           ;                       //lcd_puts(3,1,"写入并读取内容");       
 0896           ;                       for(i=0;i<59;i++)
 0896 4427              clr R20
 0898 19C0              xjmp L238
 089A           L235:
 089A                   .dbline 214
 089A           ;                       {
 089A                   .dbline 215
 089A           ;                         if(unshifted[i][0]==tmp) 
 089A 80E0              ldi R24,<_unshifted
 089C 90E0              ldi R25,>_unshifted
 089E E42F              mov R30,R20
 08A0 FF27              clr R31
 08A2 EE0F              lsl R30
 08A4 FF1F              rol R31
 08A6 E80F              add R30,R24
 08A8 F91F              adc R31,R25
 08AA 2080              ldd R2,z+0
 08AC 30900100          lds R3,_tmp
 08B0 2314              cp R2,R3
 08B2 59F4              brne L239
 08B4           X84:
 08B4                   .dbline 216
 08B4           ;                         {
 08B4                   .dbline 217
 08B4           ;                          tmp2=unshifted[i][1];
 08B4 80E0              ldi R24,<_unshifted+1
 08B6 90E0              ldi R25,>_unshifted+1
 08B8 E42F              mov R30,R20
 08BA FF27              clr R31
 08BC EE0F              lsl R30
 08BE FF1F              rol R31
 08C0 E80F              add R30,R24
 08C2 F91F              adc R31,R25
 08C4 2080              ldd R2,z+0
 08C6 20920000          sts _tmp2,R2
 08CA                   .dbline 218
 08CA           ;                         }
 08CA           L239:
 08CA                   .dbline 219
 08CA           ;                       }
 08CA           L236:
 08CA                   .dbline 213
 08CA 4395              inc R20
 08CC           L238:
 08CC                   .dbline 213
 08CC 4B33              cpi R20,59
 08CE 28F3              brlo L235
 08D0           X85:
 08D0                   .dbline 221
 08D0           ;                       //PRESS_DATA_PORT = tmp2;
 08D0           ;                       lcd_putc(4,5,tmp2);
 08D0 20900000          lds R2,_tmp2
 08D4 2882              std y+0,R2
 08D6 25E0              ldi R18,5
 08D8 04E0              ldi R16,4
 08DA B0DD              xcall _lcd_putc
 08DC                   .dbline 222
 08DC           ;                       delay50us(2);
 08DC 02E0              ldi R16,2
 08DE 10E0              ldi R17,0
 08E0 20DD              xcall _delay50us
 08E2                   .dbline 223
 08E2           ;                       PORTC=0x00;
 08E2 2224              clr R2
 08E4 25BA              out 0x15,R2
 08E6                   .dbline 224
 08E6           ;               }       
 08E6           L233:
 08E6                   .dbline 225
 08E6           ;       }
 08E6           L231:
 08E6                   .dbline 202
 08E6 CCCF              xjmp L230
 08E8           X86:
 08E8                   .dbline -2
 08E8           L226:
 08E8                   .dbline 0 ; func end
 08E8 2296              adiw R28,2
 08EA 0895              ret
 08EC                   .dbsym r i 20 c
 08EC                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PS2PC~1\PS2SimpleSoft_LCD12864\PS2SimpleSoft.c
 0000           _tmp2::
 0000                   .blkb 1
 0001                   .dbsym e tmp2 _tmp2 c
 0001           _tmp::
 0001                   .blkb 1
 0002                   .dbsym e tmp _tmp c
 0002           _keyVal::
 0002                   .blkb 1
 0003                   .dbsym e keyVal _keyVal c
 0003           _dataElem::
 0003                   .blkb 6
 0009                   .dbfile D:\ICC_H\Software.H
 0009                   .dbsym e dataElem _dataElem A[6:6]c
                        .area data(ram, con, rel)
 00F0                   .dbfile D:\ICC_H\Software.H
 00F0           L229:
 00F0                   .blkb 14
                        .area idata
 00F0 B6C1C8A1BCFCC5CCB5C4D6B53A00      .byte 182,193,200,161,188,252,197,204,181,196,214,181,58,0
                        .area data(ram, con, rel)
 00FE                   .dbfile D:\ICC_H\Software.H
 00FE           L228:
 00FE                   .blkb 9
                        .area idata
 00FE 50533220504F525400        .byte 'P,'S,50,32,'P,'O,'R,'T,0
                        .area data(ram, con, rel)
 0107                   .dbfile D:\ICC_H\Software.H
 0107           L227:
 0107                   .blkb 13
                        .area idata
 0107 50533220BCFCC5CCCAB5D1E900        .byte 'P,'S,50,32,188,252,197,204,202,181,209,233,0
                        .area data(ram, con, rel)
 0114                   .dbfile D:\ICC_H\Software.H
 0114           ; }
 0114           ; 
