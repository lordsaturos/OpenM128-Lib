Interrupt Vectors
    00000 940C 00B4 JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    000B4 E5CF      LDI	R28,0x5F
    000B5 E0D4      LDI	R29,4
    000B6 BFCD      OUT	0x3D,R28
    000B7 BFDE      OUT	0x3E,R29
    000B8 51C0      SUBI	R28,0x10
    000B9 40D0      SBCI	R29,0
    000BA EA0A      LDI	R16,0xAA
    000BB 8308      ST	Y,R16
    000BC 2400      CLR	R0
    000BD E7E4      LDI	R30,0x74
    000BE E0F1      LDI	R31,1
    000BF E011      LDI	R17,1
    000C0 37ED      CPI	R30,0x7D
    000C1 07F1      CPC	R31,R17
    000C2 F011      BEQ	0x00C5
    000C3 9201      ST	Z+,R0
    000C4 CFFB      RJMP	0x00C0
    000C5 8300      ST	Z,R16
    000C6 E5E4      LDI	R30,0x54
    000C7 E0F0      LDI	R31,0
    000C8 E6A0      LDI	R26,0x60
    000C9 E0B0      LDI	R27,0
    000CA E011      LDI	R17,1
    000CB E000      LDI	R16,0
    000CC BF0B      OUT	0x3B,R16
    000CD 36E8      CPI	R30,0x68
    000CE 07F1      CPC	R31,R17
    000CF F021      BEQ	0x00D4
    000D0 95C8      LPM
    000D1 9631      ADIW	R30,1
    000D2 920D      ST	X+,R0
    000D3 CFF9      RJMP	0x00CD
    000D4 940E 04F8 CALL	_main
_exit:
    000D6 CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    000D7 940E 054D CALL	push_arg4
    000D9 940E 0632 CALL	push_xgsetF03C
    000DB 9728      SBIW	R28,0x8
    000DC 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    000DD 24AA      CLR	R10
    000DE E081      LDI	R24,1
    000DF 8388      ST	Y,R24
    000E0 E080      LDI	R24,0
    000E1 8389      STD	Y+1,R24
    000E2 838A      STD	Y+2,R24
    000E3 838B      STD	Y+3,R24
    000E4 C03C      RJMP	0x0121
(0120)     {
(0121)         y=dat/j;
    000E5 8028      LD	R2,Y
    000E6 8039      LDD	R3,Y+1
    000E7 804A      LDD	R4,Y+2
    000E8 805B      LDD	R5,Y+3
    000E9 8908      LDD	R16,Y+16
    000EA 8919      LDD	R17,Y+17
    000EB 892A      LDD	R18,Y+18
    000EC 893B      LDD	R19,Y+19
    000ED 925A      ST	-Y,R5
    000EE 924A      ST	-Y,R4
    000EF 923A      ST	-Y,R3
    000F0 922A      ST	-Y,R2
    000F1 940E 0552 CALL	div32u
    000F3 830C      STD	Y+4,R16
    000F4 831D      STD	Y+5,R17
    000F5 832E      STD	Y+6,R18
    000F6 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    000F7 E04A      LDI	R20,0xA
    000F8 E050      LDI	R21,0
    000F9 E060      LDI	R22,0
    000FA E070      LDI	R23,0
    000FB 810C      LDD	R16,Y+4
    000FC 811D      LDD	R17,Y+5
    000FD 812E      LDD	R18,Y+6
    000FE 813F      LDD	R19,Y+7
    000FF 937A      ST	-Y,R23
    00100 936A      ST	-Y,R22
    00101 935A      ST	-Y,R21
    00102 934A      ST	-Y,R20
    00103 940E 0554 CALL	mod32u
    00105 E787      LDI	R24,0x77
    00106 E091      LDI	R25,1
    00107 2DEA      MOV	R30,R10
    00108 27FF      CLR	R31
    00109 0FE8      ADD	R30,R24
    0010A 1FF9      ADC	R31,R25
    0010B 8300      ST	Z,R16
(0123)         j*=10;
    0010C 8028      LD	R2,Y
    0010D 8039      LDD	R3,Y+1
    0010E 804A      LDD	R4,Y+2
    0010F 805B      LDD	R5,Y+3
    00110 E04A      LDI	R20,0xA
    00111 E050      LDI	R21,0
    00112 E060      LDI	R22,0
    00113 E070      LDI	R23,0
    00114 925A      ST	-Y,R5
    00115 924A      ST	-Y,R4
    00116 923A      ST	-Y,R3
    00117 922A      ST	-Y,R2
    00118 018A      MOVW	R16,R20
    00119 019B      MOVW	R18,R22
    0011A 940E 05BC CALL	empy32u|empy32s
    0011C 8308      ST	Y,R16
    0011D 8319      STD	Y+1,R17
    0011E 832A      STD	Y+2,R18
    0011F 833B      STD	Y+3,R19
    00120 94A3      INC	R10
    00121 2C2C      MOV	R2,R12
    00122 2433      CLR	R3
    00123 FC27      SBRC	R2,7
    00124 9430      COM	R3
    00125 2C4A      MOV	R4,R10
    00126 2455      CLR	R5
    00127 1442      CP	R4,R2
    00128 0453      CPC	R5,R3
    00129 F40C      BGE	0x012B
    0012A CFBA      RJMP	0x00E5
    0012B 9628      ADIW	R28,0x8
    0012C 940E 063B CALL	pop_xgsetF03C
    0012E 9624      ADIW	R28,4
    0012F 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    00130 EA84      LDI	R24,0xA4
    00131 BF86      OUT	0x36,R24
(0128) 	I2CWaitAck();
    00132 B626      IN	R2,0x36
    00133 FE27      SBRS	R2,7
    00134 CFFD      RJMP	0x0132
(0129) 	if( I2CChkAck()!=I2C_START ) 
    00135 B181      IN	R24,0x01
    00136 7F88      ANDI	R24,0xF8
    00137 3088      CPI	R24,0x8
    00138 F011      BEQ	0x013B
(0130) 		return I2C_ERR;
    00139 2700      CLR	R16
    0013A C001      RJMP	0x013C
(0131) 	return I2C_CRR;
    0013B E001      LDI	R16,1
    0013C 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    0013D EA84      LDI	R24,0xA4
    0013E BF86      OUT	0x36,R24
(0144) 	I2CWaitAck();
    0013F B626      IN	R2,0x36
    00140 FE27      SBRS	R2,7
    00141 CFFD      RJMP	0x013F
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    00142 B181      IN	R24,0x01
    00143 7F88      ANDI	R24,0xF8
    00144 3180      CPI	R24,0x10
    00145 F011      BEQ	0x0148
(0146) 		return I2C_ERR;
    00146 2700      CLR	R16
    00147 C001      RJMP	0x0149
(0147) 	return I2C_CRR;
    00148 E001      LDI	R16,1
    00149 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    0014A B903      OUT	0x03,R16
    0014B E884      LDI	R24,0x84
    0014C BF86      OUT	0x36,R24
(0160) 	I2CWaitAck();
    0014D B626      IN	R2,0x36
    0014E FE27      SBRS	R2,7
    0014F CFFD      RJMP	0x014D
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    00150 B181      IN	R24,0x01
    00151 7F88      ANDI	R24,0xF8
    00152 3188      CPI	R24,0x18
    00153 F011      BEQ	0x0156
(0162) 		return I2C_ERR;
    00154 2700      CLR	R16
    00155 C001      RJMP	0x0157
(0163) 	return I2C_CRR;		
    00156 E001      LDI	R16,1
    00157 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    00158 92AA      ST	-Y,R10
    00159 92BA      ST	-Y,R11
    0015A 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    0015B FEA0      SBRS	R10,0
    0015C C00E      RJMP	0x016B
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    0015D 2D0A      MOV	R16,R10
    0015E 9506      LSR	R16
    0015F 9506      LSR	R16
    00160 9506      LSR	R16
    00161 9506      LSR	R16
    00162 9506      LSR	R16
    00163 9506      LSR	R16
    00164 9506      LSR	R16
    00165 9506      LSR	R16
    00166 DFE3      RCALL	_I2C_SendWrDAdr
    00167 2300      TST	R16
    00168 F411      BNE	0x016B
(0177) 			return I2C_ERR;
    00169 2700      CLR	R16
    0016A C007      RJMP	0x0172
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    0016B 2D0A      MOV	R16,R10
    0016C DFDD      RCALL	_I2C_SendWrDAdr
    0016D 2300      TST	R16
    0016E F411      BNE	0x0171
(0179) 		return I2C_ERR;
    0016F 2700      CLR	R16
    00170 C001      RJMP	0x0172
(0180) 	return I2C_CRR;
    00171 E001      LDI	R16,1
    00172 90B9      LD	R11,Y+
    00173 90A9      LD	R10,Y+
    00174 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    00175 B903      OUT	0x03,R16
    00176 E884      LDI	R24,0x84
    00177 BF86      OUT	0x36,R24
(0193) 	I2CWaitAck();
    00178 B626      IN	R2,0x36
    00179 FE27      SBRS	R2,7
    0017A CFFD      RJMP	0x0178
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    0017B B181      IN	R24,0x01
    0017C 7F88      ANDI	R24,0xF8
    0017D 3480      CPI	R24,0x40
    0017E F011      BEQ	0x0181
(0195) 		return I2C_ERR;
    0017F 2700      CLR	R16
    00180 C001      RJMP	0x0182
(0196) 	return I2C_CRR;	
    00181 E001      LDI	R16,1
    00182 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    00183 92AA      ST	-Y,R10
    00184 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    00185 FEA0      SBRS	R10,0
    00186 C00E      RJMP	0x0195
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    00187 2D0A      MOV	R16,R10
    00188 9506      LSR	R16
    00189 9506      LSR	R16
    0018A 9506      LSR	R16
    0018B 9506      LSR	R16
    0018C 9506      LSR	R16
    0018D 9506      LSR	R16
    0018E 9506      LSR	R16
    0018F 9506      LSR	R16
    00190 DFB9      RCALL	_I2C_SendWrDAdr
    00191 2300      TST	R16
    00192 F411      BNE	0x0195
(0210) 			return I2C_ERR;
    00193 2700      CLR	R16
    00194 C007      RJMP	0x019C
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    00195 2D0A      MOV	R16,R10
    00196 DFB3      RCALL	_I2C_SendWrDAdr
    00197 2300      TST	R16
    00198 F411      BNE	0x019B
(0212) 		return I2C_ERR;
    00199 2700      CLR	R16
    0019A C001      RJMP	0x019C
(0213) 	return I2C_CRR;
    0019B E001      LDI	R16,1
    0019C 90A9      LD	R10,Y+
    0019D 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    0019E B903      OUT	0x03,R16
    0019F E884      LDI	R24,0x84
    001A0 BF86      OUT	0x36,R24
(0226) 	I2CWaitAck();
    001A1 B626      IN	R2,0x36
    001A2 FE27      SBRS	R2,7
    001A3 CFFD      RJMP	0x01A1
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    001A4 B181      IN	R24,0x01
    001A5 7F88      ANDI	R24,0xF8
    001A6 3288      CPI	R24,0x28
    001A7 F011      BEQ	0x01AA
(0228) 		return I2C_ERR;
    001A8 2700      CLR	R16
    001A9 C001      RJMP	0x01AB
(0229) 	return I2C_CRR;	
    001AA E001      LDI	R16,1
    001AB 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    001AC E884      LDI	R24,0x84
    001AD BF86      OUT	0x36,R24
(0242) 	I2CWaitAck();
    001AE B626      IN	R2,0x36
    001AF FE27      SBRS	R2,7
    001B0 CFFD      RJMP	0x01AE
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    001B1 B181      IN	R24,0x01
    001B2 7F88      ANDI	R24,0xF8
    001B3 3588      CPI	R24,0x58
    001B4 F011      BEQ	0x01B7
(0244) 		return I2C_ERR;
    001B5 2700      CLR	R16
    001B6 C004      RJMP	0x01BB
(0245) 	*pRdDat=TWDR;
    001B7 B023      IN	R2,0x03
    001B8 01F8      MOVW	R30,R16
    001B9 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    001BA E001      LDI	R16,1
    001BB 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    001BC EC84      LDI	R24,0xC4
    001BD BF86      OUT	0x36,R24
(0259) 	I2CWaitAck();
    001BE B626      IN	R2,0x36
    001BF FE27      SBRS	R2,7
    001C0 CFFD      RJMP	0x01BE
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    001C1 B181      IN	R24,0x01
    001C2 7F88      ANDI	R24,0xF8
    001C3 3580      CPI	R24,0x50
    001C4 F011      BEQ	0x01C7
(0261) 		return I2C_ERR;
    001C5 2700      CLR	R16
    001C6 C004      RJMP	0x01CB
(0262) 	*pRdDat=TWDR;
    001C7 B023      IN	R2,0x03
    001C8 01F8      MOVW	R30,R16
    001C9 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    001CA E001      LDI	R16,1
    001CB 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    001CC 940E 060F CALL	push_xgset00FC
    001CE 2EC2      MOV	R12,R18
    001CF 0178      MOVW	R14,R16
    001D0 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    001D1 DF5E      RCALL	_I2C_Start
    001D2 2300      TST	R16
    001D3 F411      BNE	0x01D6
(0278) 		return I2C_ERR;
    001D4 2700      CLR	R16
    001D5 C017      RJMP	0x01ED
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001D6 0187      MOVW	R16,R14
    001D7 DF80      RCALL	_I2C_SendWrDAdr_
    001D8 2300      TST	R16
    001D9 F411      BNE	0x01DC
(0281) 		return I2C_ERR;
    001DA 2700      CLR	R16
    001DB C011      RJMP	0x01ED
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001DC 2D0C      MOV	R16,R12
    001DD DFC0      RCALL	_I2C_SendDat
    001DE 2EC0      MOV	R12,R16
    001DF 2300      TST	R16
    001E0 F411      BNE	0x01E3
(0284) 		return I2C_ERR;
    001E1 2700      CLR	R16
    001E2 C00A      RJMP	0x01ED
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    001E3 2D0A      MOV	R16,R10
    001E4 DFB9      RCALL	_I2C_SendDat
    001E5 2EA0      MOV	R10,R16
    001E6 2300      TST	R16
    001E7 F411      BNE	0x01EA
(0287) 		return I2C_ERR;
    001E8 2700      CLR	R16
    001E9 C003      RJMP	0x01ED
(0288) 
(0289) 	I2C_Stop();
    001EA E984      LDI	R24,0x94
    001EB BF86      OUT	0x36,R24
(0290) 
(0291) 	return I2C_CRR;
    001EC E001      LDI	R16,1
    001ED 940C 05F0 JMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    001EF 940E 060D CALL	push_xgset30FC
    001F1 2EE2      MOV	R14,R18
    001F2 01A8      MOVW	R20,R16
    001F3 84C8      LDD	R12,Y+8
    001F4 84AA      LDD	R10,Y+10
    001F5 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    001F6 DF39      RCALL	_I2C_Start
    001F7 2300      TST	R16
    001F8 F411      BNE	0x01FB
(0324) 		return I2C_ERR;
    001F9 2700      CLR	R16
    001FA C024      RJMP	0x021F
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001FB 018A      MOVW	R16,R20
    001FC DF5B      RCALL	_I2C_SendWrDAdr_
    001FD 2300      TST	R16
    001FE F411      BNE	0x0201
(0327) 		return I2C_ERR;
    001FF 2700      CLR	R16
    00200 C01E      RJMP	0x021F
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00201 2D0E      MOV	R16,R14
    00202 DF9B      RCALL	_I2C_SendDat
    00203 2EE0      MOV	R14,R16
    00204 2300      TST	R16
    00205 F411      BNE	0x0208
(0330) 		return I2C_ERR;
    00206 2700      CLR	R16
    00207 C017      RJMP	0x021F
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    00208 DF34      RCALL	_I2C_Restart
    00209 2EE0      MOV	R14,R16
    0020A 2300      TST	R16
    0020B F411      BNE	0x020E
(0333) 		return I2C_ERR;
    0020C 2700      CLR	R16
    0020D C011      RJMP	0x021F
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    0020E 2D0C      MOV	R16,R12
    0020F DF65      RCALL	_I2C_SendRdDAdr
    00210 2EC0      MOV	R12,R16
    00211 2300      TST	R16
    00212 F411      BNE	0x0215
(0336) 		return I2C_ERR;
    00213 2700      CLR	R16
    00214 C00A      RJMP	0x021F
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    00215 0185      MOVW	R16,R10
    00216 DF95      RCALL	_I2C_RcvNAckDat
    00217 2EA0      MOV	R10,R16
    00218 2300      TST	R16
    00219 F411      BNE	0x021C
(0339) 		return I2C_ERR;
    0021A 2700      CLR	R16
    0021B C003      RJMP	0x021F
(0340) 
(0341) 	I2C_Stop();
    0021C E984      LDI	R24,0x94
    0021D BF86      OUT	0x36,R24
(0342) 
(0343) 	return I2C_CRR;
    0021E E001      LDI	R16,1
    0021F 940C 05F7 JMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    00221 940E 060B CALL	push_xgsetF0FC
    00223 2EE2      MOV	R14,R18
    00224 01B8      MOVW	R22,R16
    00225 84CA      LDD	R12,Y+10
    00226 84AC      LDD	R10,Y+12
    00227 84BD      LDD	R11,Y+13
    00228 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    00229 DF06      RCALL	_I2C_Start
    0022A 2300      TST	R16
    0022B F411      BNE	0x022E
(0363) 		return I2C_ERR;
    0022C 2700      CLR	R16
    0022D C038      RJMP	0x0266
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    0022E 018B      MOVW	R16,R22
    0022F DF28      RCALL	_I2C_SendWrDAdr_
    00230 2300      TST	R16
    00231 F411      BNE	0x0234
(0366) 		return I2C_ERR;
    00232 2700      CLR	R16
    00233 C032      RJMP	0x0266
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00234 2D0E      MOV	R16,R14
    00235 DF68      RCALL	_I2C_SendDat
    00236 2EE0      MOV	R14,R16
    00237 2300      TST	R16
    00238 F411      BNE	0x023B
(0369) 		return I2C_ERR;
    00239 2700      CLR	R16
    0023A C02B      RJMP	0x0266
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    0023B DF01      RCALL	_I2C_Restart
    0023C 2EE0      MOV	R14,R16
    0023D 2300      TST	R16
    0023E F411      BNE	0x0241
(0372) 		return I2C_ERR;
    0023F 2700      CLR	R16
    00240 C025      RJMP	0x0266
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    00241 2D0C      MOV	R16,R12
    00242 DF32      RCALL	_I2C_SendRdDAdr
    00243 2EC0      MOV	R12,R16
    00244 2300      TST	R16
    00245 F411      BNE	0x0248
(0375) 		return I2C_ERR;
    00246 2700      CLR	R16
    00247 C01E      RJMP	0x0266
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    00248 24CC      CLR	R12
    00249 C00B      RJMP	0x0255
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    0024A 2D0C      MOV	R16,R12
    0024B 2711      CLR	R17
    0024C 0D0A      ADD	R16,R10
    0024D 1D1B      ADC	R17,R11
    0024E DF6D      RCALL	_I2C_RcvAckDat
    0024F 2EE0      MOV	R14,R16
    00250 2300      TST	R16
    00251 F411      BNE	0x0254
(0379) 			return I2C_ERR;
    00252 2700      CLR	R16
    00253 C012      RJMP	0x0266
    00254 94C3      INC	R12
    00255 2F84      MOV	R24,R20
    00256 5081      SUBI	R24,1
    00257 16C8      CP	R12,R24
    00258 F388      BCS	0x024A
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    00259 2D0C      MOV	R16,R12
    0025A 2711      CLR	R17
    0025B 0D0A      ADD	R16,R10
    0025C 1D1B      ADC	R17,R11
    0025D DF4E      RCALL	_I2C_RcvNAckDat
    0025E 2EA0      MOV	R10,R16
    0025F 2300      TST	R16
    00260 F411      BNE	0x0263
(0382) 			return I2C_ERR;
    00261 2700      CLR	R16
    00262 C003      RJMP	0x0266
(0383) 
(0384) 	I2C_Stop();
    00263 E984      LDI	R24,0x94
    00264 BF86      OUT	0x36,R24
(0385) 	
(0386) 	return I2C_CRR;
    00265 E001      LDI	R16,1
    00266 940C 0600 JMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    00268 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    00269 C007      RJMP	0x0271
(0108)         for(j=0;j<70;j++)	
    0026A 2744      CLR	R20
    0026B C001      RJMP	0x026D
    0026C 9543      INC	R20
    0026D 3446      CPI	R20,0x46
    0026E F3E8      BCS	0x026C
    0026F 5001      SUBI	R16,1
    00270 4010      SBCI	R17,0
    00271 2422      CLR	R2
    00272 2433      CLR	R3
    00273 1620      CP	R2,R16
    00274 0631      CPC	R3,R17
    00275 F3A4      BLT	0x026A
    00276 9149      LD	R20,Y+
    00277 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    00278 934A      ST	-Y,R20
    00279 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    0027A C013      RJMP	0x028E
(0123) 		for(i=0;i<52642;i++)
    0027B 2744      CLR	R20
    0027C 2755      CLR	R21
    0027D C002      RJMP	0x0280
    0027E 5F4F      SUBI	R20,0xFF
    0027F 4F5F      SBCI	R21,0xFF
    00280 EA82      LDI	R24,0xA2
    00281 EC9D      LDI	R25,0xCD
    00282 E0A0      LDI	R26,0
    00283 E0B0      LDI	R27,0
    00284 011A      MOVW	R2,R20
    00285 2444      CLR	R4
    00286 2455      CLR	R5
    00287 1628      CP	R2,R24
    00288 0639      CPC	R3,R25
    00289 064A      CPC	R4,R26
    0028A 065B      CPC	R5,R27
    0028B F394      BLT	0x027E
    0028C 5001      SUBI	R16,1
    0028D 4010      SBCI	R17,0
    0028E 2422      CLR	R2
    0028F 2433      CLR	R3
    00290 1620      CP	R2,R16
    00291 0631      CPC	R3,R17
    00292 F344      BLT	0x027B
    00293 9159      LD	R21,Y+
    00294 9149      LD	R20,Y+
    00295 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    00296 934A      ST	-Y,R20
    00297 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    00298 2744      CLR	R20
    00299 2755      CLR	R21
    0029A C002      RJMP	0x029D
    0029B 5F4F      SUBI	R20,0xFF
    0029C 4F5F      SBCI	R21,0xFF
    0029D 1740      CP	R20,R16
    0029E 0751      CPC	R21,R17
    0029F F3D8      BCS	0x029B
    002A0 9159      LD	R21,Y+
    002A1 9149      LD	R20,Y+
    002A2 9508      RET
FILE: D:\ICC_H\LCD12864_ST7920.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 	                                                        
(0004) 目    的:   建立LCD12864_ST7920的串模式操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 	                                                                
(0008) 应用软件:   ICCAVR                                               
(0009) 	                                                                
(0010) 版    本:   Version 1.0
(0011) 	                                                                
(0012) 圆版时间:   2005-09-06
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) 
(0026) 
(0027) ----------------------------------------------------------------------
(0028) 入口参数说明：
(0029) 	//#define OUT_LCD_CS	sbi(DDRD,0)
(0030) 	//#define SET_LCD_CS	sbi(PORTD,0)
(0031) 	//#define CLR_LCD_CS	cbi(PORTD,0)
(0032) 
(0033) ----------------------------------------------------------------------
(0034) 待定参数说明：
(0035) 	
(0036) 
(0037) ----------------------------------------------------------------------	
(0038) 对外变量说明：
(0039) 
(0040) ----------------------------------------------------------------------
(0041) 对外函数说明：
(0042) 
(0043) ----------------------------------------------------------------------
(0044) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0045) 
(0046) 
(0047) /*--------------------------------------------------------------------
(0048) 接口定义：
(0049) 
(0050) LCD12864_ST7920			ATmega16
(0051) 1.GND		--------	GND
(0052) 2.VCC		--------	VCC
(0053) 3.V0		--------	V0
(0054) 4.RS(CS)	--------	VCC
(0055) 5.R/W(SID)	--------	MOSI/PB5
(0056) 6.E(SCLK)	--------	SCK/PB7
(0057) 7.D0		--------	NC
(0058) 8.D1		--------	NC
(0059) 9.D2		--------	NC
(0060) 10.D3		--------	NC
(0061) 11.D4		--------	NC
(0062) 12.D5		--------	NC
(0063) 13.D6		--------	NC
(0064) 14.D7		--------	NC
(0065) 15.PSB		--------	GND
(0066) 16.NC		--------	NC
(0067) 17.RST		--------	NC
(0068) 18.NC		--------	NC
(0069) 19.LED+		--------	VCC
(0070) 20.LED-		--------	GND
(0071) 
(0072) 说明：
(0073) （1）使用ATmega16的硬件SPI操作LCD12864_ST7920
(0074) （2）PIN4/CS接VCC，其实也可接到特定的IO口，但外部程序需要指定
(0075) --------------------------------------------------------------------*/
(0076) 
(0077) #ifndef LCD12864_ST7920_H
(0078) #define LCD12864_ST7920_H
(0079) 
(0080) #include "D:\ICC_H\CmmIcc.h"
(0081) 
(0082) void SPI_init()
(0083) {
(0084) 	DDRB |= 0xB0;
_SPI_init:
    002A3 B387      IN	R24,0x17
    002A4 6B80      ORI	R24,0xB0
    002A5 BB87      OUT	0x17,R24
(0085) 	SPCR = 0x50;	//setup SPI
    002A6 E580      LDI	R24,0x50
    002A7 B98D      OUT	0x0D,R24
(0086) 	SPSR = 0x01;	//setup SPI
    002A8 E081      LDI	R24,1
    002A9 B98E      OUT	0x0E,R24
(0087) 	SEI();
    002AA 9478      BSET	7
    002AB 9508      RET
(0088) }
(0089) 
(0090) void lcd_wrByte(uint8 data)
(0091) {  
(0092) 	SPDR = data;        
_lcd_wrByte:
  data                 --> R16
    002AC B90F      OUT	0x0F,R16
(0093) 	while ((SPSR & 0x80) == 0);  
    002AD 9B77      SBIS	0x0E,7
    002AE CFFE      RJMP	0x02AD
    002AF 9508      RET
_lcd_wrCmd:
  LC                   --> R10
  HC                   --> R12
    002B0 92AA      ST	-Y,R10
    002B1 92CA      ST	-Y,R12
    002B2 2EA2      MOV	R10,R18
    002B3 2EC0      MOV	R12,R16
(0094) }
(0095) 
(0096) void lcd_wrCmd(uint8 HC,uint8 LC)
(0097) {
(0098) 	lcd_wrByte(0xF8);
    002B4 EF08      LDI	R16,0xF8
    002B5 DFF6      RCALL	_lcd_wrByte
(0099) 	lcd_wrByte(HC);		//传输高四位
    002B6 2D0C      MOV	R16,R12
    002B7 DFF4      RCALL	_lcd_wrByte
(0100) 	lcd_wrByte(LC);		//传输低四位
    002B8 2D0A      MOV	R16,R10
    002B9 DFF2      RCALL	_lcd_wrByte
    002BA 90C9      LD	R12,Y+
    002BB 90A9      LD	R10,Y+
    002BC 9508      RET
_lcd_wrDat:
  LD                   --> R10
  HD                   --> R12
    002BD 92AA      ST	-Y,R10
    002BE 92CA      ST	-Y,R12
    002BF 2EA2      MOV	R10,R18
    002C0 2EC0      MOV	R12,R16
(0101) }
(0102) 
(0103) void lcd_wrDat(uint8 HD,uint8 LD)
(0104) {
(0105) 	lcd_wrByte(0xFA);
    002C1 EF0A      LDI	R16,0xFA
    002C2 DFE9      RCALL	_lcd_wrByte
(0106) 	lcd_wrByte(HD);		//传输高四位
    002C3 2D0C      MOV	R16,R12
    002C4 DFE7      RCALL	_lcd_wrByte
(0107) 	lcd_wrByte(LD);		//传输低四位
    002C5 2D0A      MOV	R16,R10
    002C6 DFE5      RCALL	_lcd_wrByte
    002C7 90C9      LD	R12,Y+
    002C8 90A9      LD	R10,Y+
    002C9 9508      RET
_lcd_set_xy:
  adr                  --> R20
  y                    --> R22
  x                    --> R10
    002CA 940E 0616 CALL	push_xgsetF00C
    002CC 2F62      MOV	R22,R18
    002CD 2EA0      MOV	R10,R16
(0108) } 
(0109) 
(0110) /*
(0111) x表示在第几行显示，y表示在第几列显示
(0112) */
(0113) void lcd_set_xy(uint8 x,uint8 y) 
(0114) {
(0115) 	uint8 adr;
(0116) 
(0117) 	switch(x)
    002CE 24BB      CLR	R11
    002CF 01C5      MOVW	R24,R10
    002D0 3081      CPI	R24,1
    002D1 E0E0      LDI	R30,0
    002D2 079E      CPC	R25,R30
    002D3 F069      BEQ	0x02E1
    002D4 3082      CPI	R24,2
    002D5 E0E0      LDI	R30,0
    002D6 079E      CPC	R25,R30
    002D7 F061      BEQ	0x02E4
    002D8 3083      CPI	R24,3
    002D9 E0E0      LDI	R30,0
    002DA 079E      CPC	R25,R30
    002DB F059      BEQ	0x02E7
    002DC 3084      CPI	R24,4
    002DD E0E0      LDI	R30,0
    002DE 079E      CPC	R25,R30
    002DF F051      BEQ	0x02EA
    002E0 C00B      RJMP	0x02EC
(0118) 	{
(0119) 	case 1: adr = 0x7F + y;
    002E1 2F46      MOV	R20,R22
    002E2 5841      SUBI	R20,0x81
(0120) 		break;		//在第1行y列显示
    002E3 C008      RJMP	0x02EC
(0121) 	case 2: adr = 0x8F + y;
    002E4 2F46      MOV	R20,R22
    002E5 5741      SUBI	R20,0x71
(0122) 		break;		//在第2行y列显示
    002E6 C005      RJMP	0x02EC
(0123) 	case 3: adr = 0x87 + y;
    002E7 2F46      MOV	R20,R22
    002E8 5749      SUBI	R20,0x79
(0124) 		break;		//在第3行y列显示
    002E9 C002      RJMP	0x02EC
(0125) 	case 4: adr = 0x97 + y;
    002EA 2F46      MOV	R20,R22
    002EB 5649      SUBI	R20,0x69
(0126) 		break;		//在第4行y列显示
(0127) 	default:	;
(0128) 	}
(0129) 	lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
    002EC 2F24      MOV	R18,R20
    002ED 702F      ANDI	R18,0xF
    002EE 702F      ANDI	R18,0xF
    002EF 9522      SWAP	R18
    002F0 2F04      MOV	R16,R20
    002F1 7F00      ANDI	R16,0xF0
    002F2 DFBD      RCALL	_lcd_wrCmd
    002F3 940C 061D JMP	pop_xgsetF00C
_lcd_putc:
  ch                   --> R20
  y                    --> R12
  x                    --> R10
    002F5 940E 0624 CALL	push_xgset303C
    002F7 2EC2      MOV	R12,R18
    002F8 2EA0      MOV	R10,R16
    002F9 814E      LDD	R20,Y+6
(0130) }
(0131) 
(0132) void lcd_putc(uint8 x,uint8 y,uint8 ch)
(0133) {
(0134) 	lcd_set_xy(x,y);
    002FA 2D2C      MOV	R18,R12
    002FB 2D0A      MOV	R16,R10
    002FC DFCD      RCALL	_lcd_set_xy
(0135) 	delay50us(20); 
    002FD E104      LDI	R16,0x14
    002FE E010      LDI	R17,0
    002FF DF68      RCALL	_delay50us
(0136) 	lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
    00300 2F24      MOV	R18,R20
    00301 702F      ANDI	R18,0xF
    00302 702F      ANDI	R18,0xF
    00303 9522      SWAP	R18
    00304 2F04      MOV	R16,R20
    00305 7F00      ANDI	R16,0xF0
    00306 DFB6      RCALL	_lcd_wrDat
    00307 940C 062B JMP	pop_xgset303C
_lcd_putd0:
  i                    --> R20
  length               --> R20
  dat                  --> Y,+7
  y                    --> R12
  x                    --> R10
    00309 940E 0624 CALL	push_xgset303C
    0030B 2EC2      MOV	R12,R18
    0030C 2EA0      MOV	R10,R16
    0030D 9721      SBIW	R28,1
    0030E 854B      LDD	R20,Y+11
(0137) }
(0138) 
(0139) void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
(0140) {
(0141) 	sint8 i;
(0142) 
(0143) 	speaData(dat,length);
    0030F 8348      ST	Y,R20
    00310 810F      LDD	R16,Y+7
    00311 8518      LDD	R17,Y+8
    00312 8529      LDD	R18,Y+9
    00313 853A      LDD	R19,Y+10
    00314 DDC2      RCALL	_speaData
(0144) 	lcd_set_xy(x,y);
    00315 2D2C      MOV	R18,R12
    00316 2D0A      MOV	R16,R10
    00317 DFB2      RCALL	_lcd_set_xy
(0145) 	delay50us(40);
    00318 E208      LDI	R16,0x28
    00319 E010      LDI	R17,0
    0031A DF4D      RCALL	_delay50us
(0146) 	for(i=length-1;i>=0;i--)
    0031B 5041      SUBI	R20,1
    0031C C01E      RJMP	0x033B
(0147) 	{
(0148) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    0031D E787      LDI	R24,0x77
    0031E E091      LDI	R25,1
    0031F 2FE4      MOV	R30,R20
    00320 27FF      CLR	R31
    00321 FDE7      SBRC	R30,7
    00322 95F0      COM	R31
    00323 0FE8      ADD	R30,R24
    00324 1FF9      ADC	R31,R25
    00325 8180      LD	R24,Z
    00326 2799      CLR	R25
    00327 96C0      ADIW	R24,0x30
    00328 019C      MOVW	R18,R24
    00329 702F      ANDI	R18,0xF
    0032A 7030      ANDI	R19,0
    0032B 0F22      LSL	R18
    0032C 1F33      ROL	R19
    0032D 0F22      LSL	R18
    0032E 1F33      ROL	R19
    0032F 0F22      LSL	R18
    00330 1F33      ROL	R19
    00331 0F22      LSL	R18
    00332 1F33      ROL	R19
    00333 018C      MOVW	R16,R24
    00334 7F00      ANDI	R16,0xF0
    00335 7010      ANDI	R17,0
    00336 DF86      RCALL	_lcd_wrDat
(0149) 		delay50us(40); 
    00337 E208      LDI	R16,0x28
    00338 E010      LDI	R17,0
    00339 DF2E      RCALL	_delay50us
    0033A 954A      DEC	R20
    0033B 3040      CPI	R20,0
    0033C F704      BGE	0x031D
    0033D 9621      ADIW	R28,1
    0033E 940C 062B JMP	pop_xgset303C
_lcd_putd:
  effectLen            --> R22
  i                    --> R20
  length               --> R10
  dat                  --> Y,+11
  y                    --> R14
  x                    --> R12
    00340 940E 060B CALL	push_xgsetF0FC
    00342 2EE2      MOV	R14,R18
    00343 2EC0      MOV	R12,R16
    00344 9721      SBIW	R28,1
    00345 84AF      LDD	R10,Y+15
(0150) 	}
(0151) }
(0152) 
(0153) void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
(0154) {
(0155) 	sint8 i;
(0156) 	sint8 effectLen;
(0157) 
(0158) 	if(dat>999999)
    00346 E38F      LDI	R24,0x3F
    00347 E492      LDI	R25,0x42
    00348 E0AF      LDI	R26,0xF
    00349 E0B0      LDI	R27,0
    0034A 842B      LDD	R2,Y+11
    0034B 843C      LDD	R3,Y+12
    0034C 844D      LDD	R4,Y+13
    0034D 845E      LDD	R5,Y+14
    0034E 1582      CP	R24,R2
    0034F 0593      CPC	R25,R3
    00350 05A4      CPC	R26,R4
    00351 05B5      CPC	R27,R5
    00352 F410      BCC	0x0355
(0159) 		effectLen=7;
    00353 E067      LDI	R22,7
    00354 C04C      RJMP	0x03A1
(0160) 	else if(dat>99999)
    00355 E98F      LDI	R24,0x9F
    00356 E896      LDI	R25,0x86
    00357 E0A1      LDI	R26,1
    00358 E0B0      LDI	R27,0
    00359 842B      LDD	R2,Y+11
    0035A 843C      LDD	R3,Y+12
    0035B 844D      LDD	R4,Y+13
    0035C 845E      LDD	R5,Y+14
    0035D 1582      CP	R24,R2
    0035E 0593      CPC	R25,R3
    0035F 05A4      CPC	R26,R4
    00360 05B5      CPC	R27,R5
    00361 F410      BCC	0x0364
(0161) 		effectLen=6;
    00362 E066      LDI	R22,6
    00363 C03D      RJMP	0x03A1
(0162) 	else if(dat>9999)
    00364 E08F      LDI	R24,0xF
    00365 E297      LDI	R25,0x27
    00366 E0A0      LDI	R26,0
    00367 E0B0      LDI	R27,0
    00368 842B      LDD	R2,Y+11
    00369 843C      LDD	R3,Y+12
    0036A 844D      LDD	R4,Y+13
    0036B 845E      LDD	R5,Y+14
    0036C 1582      CP	R24,R2
    0036D 0593      CPC	R25,R3
    0036E 05A4      CPC	R26,R4
    0036F 05B5      CPC	R27,R5
    00370 F410      BCC	0x0373
(0163) 		effectLen=5;
    00371 E065      LDI	R22,5
    00372 C02E      RJMP	0x03A1
(0164) 	else if(dat>999)
    00373 EE87      LDI	R24,0xE7
    00374 E093      LDI	R25,3
    00375 E0A0      LDI	R26,0
    00376 E0B0      LDI	R27,0
    00377 842B      LDD	R2,Y+11
    00378 843C      LDD	R3,Y+12
    00379 844D      LDD	R4,Y+13
    0037A 845E      LDD	R5,Y+14
    0037B 1582      CP	R24,R2
    0037C 0593      CPC	R25,R3
    0037D 05A4      CPC	R26,R4
    0037E 05B5      CPC	R27,R5
    0037F F410      BCC	0x0382
(0165) 		effectLen=4;
    00380 E064      LDI	R22,4
    00381 C01F      RJMP	0x03A1
(0166) 	else if(dat>99)
    00382 E683      LDI	R24,0x63
    00383 E090      LDI	R25,0
    00384 E0A0      LDI	R26,0
    00385 E0B0      LDI	R27,0
    00386 842B      LDD	R2,Y+11
    00387 843C      LDD	R3,Y+12
    00388 844D      LDD	R4,Y+13
    00389 845E      LDD	R5,Y+14
    0038A 1582      CP	R24,R2
    0038B 0593      CPC	R25,R3
    0038C 05A4      CPC	R26,R4
    0038D 05B5      CPC	R27,R5
    0038E F410      BCC	0x0391
(0167) 		effectLen=3;
    0038F E063      LDI	R22,3
    00390 C010      RJMP	0x03A1
(0168) 	else if(dat>9)
    00391 E089      LDI	R24,0x9
    00392 E090      LDI	R25,0
    00393 E0A0      LDI	R26,0
    00394 E0B0      LDI	R27,0
    00395 842B      LDD	R2,Y+11
    00396 843C      LDD	R3,Y+12
    00397 844D      LDD	R4,Y+13
    00398 845E      LDD	R5,Y+14
    00399 1582      CP	R24,R2
    0039A 0593      CPC	R25,R3
    0039B 05A4      CPC	R26,R4
    0039C 05B5      CPC	R27,R5
    0039D F410      BCC	0x03A0
(0169) 		effectLen=2;
    0039E E062      LDI	R22,2
    0039F C001      RJMP	0x03A1
(0170) 	else
(0171) 		effectLen=1;
    003A0 E061      LDI	R22,1
(0172) 	speaData(dat,effectLen);
    003A1 8368      ST	Y,R22
    003A2 850B      LDD	R16,Y+11
    003A3 851C      LDD	R17,Y+12
    003A4 852D      LDD	R18,Y+13
    003A5 853E      LDD	R19,Y+14
    003A6 DD30      RCALL	_speaData
(0173) 
(0174) 	lcd_set_xy(x,y);
    003A7 2D2E      MOV	R18,R14
    003A8 2D0C      MOV	R16,R12
    003A9 DF20      RCALL	_lcd_set_xy
(0175) 	delay50us(40); 
    003AA E208      LDI	R16,0x28
    003AB E010      LDI	R17,0
    003AC DEBB      RCALL	_delay50us
(0176) 	if(length>effectLen)
    003AD 2E26      MOV	R2,R22
    003AE 2433      CLR	R3
    003AF FC27      SBRC	R2,7
    003B0 9430      COM	R3
    003B1 2C4A      MOV	R4,R10
    003B2 2455      CLR	R5
    003B3 1424      CP	R2,R4
    003B4 0435      CPC	R3,R5
    003B5 F46C      BGE	0x03C3
(0177) 	{
(0178) 		for(i=length-effectLen-1;i>=0;i--)
    003B6 2D44      MOV	R20,R4
    003B7 1B46      SUB	R20,R22
    003B8 5041      SUBI	R20,1
    003B9 C007      RJMP	0x03C1
(0179) 		{
(0180) 			lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
    003BA 2722      CLR	R18
    003BB E200      LDI	R16,0x20
    003BC DF00      RCALL	_lcd_wrDat
(0181) 			delay50us(40); 
    003BD E208      LDI	R16,0x28
    003BE E010      LDI	R17,0
    003BF DEA8      RCALL	_delay50us
    003C0 954A      DEC	R20
    003C1 3040      CPI	R20,0
    003C2 F7BC      BGE	0x03BA
(0182) 		}
(0183) 	}
(0184) 	for(i=effectLen-1;i>=0;i--)
    003C3 2F46      MOV	R20,R22
    003C4 5041      SUBI	R20,1
    003C5 C01E      RJMP	0x03E4
(0185) 	{
(0186) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    003C6 E787      LDI	R24,0x77
    003C7 E091      LDI	R25,1
    003C8 2FE4      MOV	R30,R20
    003C9 27FF      CLR	R31
    003CA FDE7      SBRC	R30,7
    003CB 95F0      COM	R31
    003CC 0FE8      ADD	R30,R24
    003CD 1FF9      ADC	R31,R25
    003CE 8180      LD	R24,Z
    003CF 2799      CLR	R25
    003D0 96C0      ADIW	R24,0x30
    003D1 019C      MOVW	R18,R24
    003D2 702F      ANDI	R18,0xF
    003D3 7030      ANDI	R19,0
    003D4 0F22      LSL	R18
    003D5 1F33      ROL	R19
    003D6 0F22      LSL	R18
    003D7 1F33      ROL	R19
    003D8 0F22      LSL	R18
    003D9 1F33      ROL	R19
    003DA 0F22      LSL	R18
    003DB 1F33      ROL	R19
    003DC 018C      MOVW	R16,R24
    003DD 7F00      ANDI	R16,0xF0
    003DE 7010      ANDI	R17,0
    003DF DEDD      RCALL	_lcd_wrDat
(0187) 		delay50us(40);
    003E0 E208      LDI	R16,0x28
    003E1 E010      LDI	R17,0
    003E2 DE85      RCALL	_delay50us
    003E3 954A      DEC	R20
    003E4 3040      CPI	R20,0
    003E5 F704      BGE	0x03C6
    003E6 9621      ADIW	R28,1
    003E7 940C 0600 JMP	pop_xgsetF0FC
_lcd_puts:
  str                  --> R20
  y                    --> R12
  x                    --> R10
    003E9 940E 0624 CALL	push_xgset303C
    003EB 2EC2      MOV	R12,R18
    003EC 2EA0      MOV	R10,R16
    003ED 814E      LDD	R20,Y+6
    003EE 815F      LDD	R21,Y+7
(0188) 	}
(0189) }
(0190) 
(0191) void lcd_puts(uint8 x,uint8 y,uint8 *str)
(0192) { 
(0193) 	lcd_set_xy(x,y);
    003EF 2D2C      MOV	R18,R12
    003F0 2D0A      MOV	R16,R10
    003F1 DED8      RCALL	_lcd_set_xy
(0194) 	delay50us(20);   
    003F2 E104      LDI	R16,0x14
    003F3 E010      LDI	R17,0
    003F4 DE73      RCALL	_delay50us
    003F5 C00F      RJMP	0x0405
(0195) 	while(*str)
(0196) 	{
(0197) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    003F6 01FA      MOVW	R30,R20
    003F7 8020      LD	R2,Z
    003F8 2433      CLR	R3
    003F9 2D22      MOV	R18,R2
    003FA 702F      ANDI	R18,0xF
    003FB 702F      ANDI	R18,0xF
    003FC 9522      SWAP	R18
    003FD 2D02      MOV	R16,R2
    003FE 7F00      ANDI	R16,0xF0
    003FF DEBD      RCALL	_lcd_wrDat
(0198) 		str++;
    00400 5F4F      SUBI	R20,0xFF
    00401 4F5F      SBCI	R21,0xFF
(0199) 		delay50us(20);
    00402 E104      LDI	R16,0x14
    00403 E010      LDI	R17,0
    00404 DE63      RCALL	_delay50us
    00405 01FA      MOVW	R30,R20
    00406 8020      LD	R2,Z
    00407 2022      TST	R2
    00408 F769      BNE	0x03F6
    00409 940C 062B JMP	pop_xgset303C
_lcd_puts_:
  dlyMs                --> R10
  str                  --> R20
  y                    --> R14
  x                    --> R12
    0040B 940E 060D CALL	push_xgset30FC
    0040D 2EE2      MOV	R14,R18
    0040E 2EC0      MOV	R12,R16
    0040F 8548      LDD	R20,Y+8
    00410 8559      LDD	R21,Y+9
    00411 84AA      LDD	R10,Y+10
(0200) 	} 
(0201) }
(0202) 
(0203) void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
(0204) { 
(0205) 	lcd_set_xy(x,y);
    00412 2D2E      MOV	R18,R14
    00413 2D0C      MOV	R16,R12
    00414 DEB5      RCALL	_lcd_set_xy
(0206) 	delay50us(20);   
    00415 E104      LDI	R16,0x14
    00416 E010      LDI	R17,0
    00417 DE50      RCALL	_delay50us
    00418 C00F      RJMP	0x0428
(0207) 	while(*str)
(0208) 	{
(0209) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    00419 01FA      MOVW	R30,R20
    0041A 8020      LD	R2,Z
    0041B 2433      CLR	R3
    0041C 2D22      MOV	R18,R2
    0041D 702F      ANDI	R18,0xF
    0041E 702F      ANDI	R18,0xF
    0041F 9522      SWAP	R18
    00420 2D02      MOV	R16,R2
    00421 7F00      ANDI	R16,0xF0
    00422 DE9A      RCALL	_lcd_wrDat
(0210) 		str++;
    00423 5F4F      SUBI	R20,0xFF
    00424 4F5F      SBCI	R21,0xFF
(0211) 		delay50ms(dlyMs);
    00425 2D0A      MOV	R16,R10
    00426 2711      CLR	R17
    00427 DE50      RCALL	_delay50ms
    00428 01FA      MOVW	R30,R20
    00429 8020      LD	R2,Z
    0042A 2022      TST	R2
    0042B F769      BNE	0x0419
    0042C 940C 05F7 JMP	pop_xgset30FC
(0212) 	} 
(0213) }
(0214) 
(0215) void lcd_clr()
(0216) {
(0217) 	lcd_wrCmd(0x00,0x10);
_lcd_clr:
    0042E E120      LDI	R18,0x10
    0042F 2700      CLR	R16
    00430 DE7F      RCALL	_lcd_wrCmd
(0218) 	delay50us(200);
    00431 EC08      LDI	R16,0xC8
    00432 E010      LDI	R17,0
    00433 CE34      RJMP	_delay50us
(0219) }
(0220) 
(0221) void lcd_init(void)
(0222) {
(0223) 	SPI_init();	
_lcd_init:
    00434 DE6E      RCALL	_SPI_init
(0224) 	//OUT_LCD_CS;		//若LCD_CS
(0225) 	//SET_LCD_CS;		
(0226) 	delay50ms(1);
    00435 E001      LDI	R16,1
    00436 E010      LDI	R17,0
    00437 DE40      RCALL	_delay50ms
(0227) 	lcd_wrCmd(0x30,0x30);	//使用8位控制界面,使用基本指令集
    00438 E320      LDI	R18,0x30
    00439 E300      LDI	R16,0x30
    0043A DE75      RCALL	_lcd_wrCmd
(0228) 	//lcd_wrCmd(0x00,0xF0);	//整体显示ON
(0229) 	lcd_wrCmd(0x00,0xC0);	//整体显示ON
    0043B EC20      LDI	R18,0xC0
    0043C 2700      CLR	R16
    0043D DE72      RCALL	_lcd_wrCmd
(0230) 	lcd_wrCmd(0x00,0x10);	//清屏
    0043E E120      LDI	R18,0x10
    0043F 2700      CLR	R16
    00440 DE6F      RCALL	_lcd_wrCmd
(0231) 	//lcd_wrCmd(0x10,0x00);	//光标
(0232) 	lcd_wrCmd(0x00,0x60);
    00441 E620      LDI	R18,0x60
    00442 2700      CLR	R16
    00443 DE6C      RCALL	_lcd_wrCmd
(0233) 	//lcd_wrCmd(0x00,0x70);	//显示右移
(0234) 	delay50ms(1);		//不可省去！！！
    00444 E001      LDI	R16,1
    00445 E010      LDI	R17,0
    00446 CE31      RJMP	_delay50ms
FILE: E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PS2PC~1\PS2SimpleSoft_LCD12864\PS2SimpleSoft.c
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立PS/2的SimpleSoft测试程序（软件查询读取PS/2接收到的数据）
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 按PC键盘，观察单片机读到的数据，使用LCD12864观察。
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：
(0030) 将PD口的LED指示灯使用短路帽短接；
(0031) 将PC键盘插入PS2接口，
(0032) 使用短路帽短接PC0与DATA，
(0033) 使用短路帽短接PC1与CLK
(0034) 
(0035) 			LCD12864_ST7920			ATmega48
(0036) 				RS(CS)	--------	VCC
(0037) 				R/W(SID)--------	MOSI/PB5
(0038) 				E(SCLK)	--------	SCK/PB7
(0039) 				PSB		--------	GND
(0040) ----------------------------------------------------------------------
(0041) 注意事项： 
(0042) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0043) （2）请详细阅读“使用必读”及相关资料。
(0044) ----------------------------------------------------------------------
(0045) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0046) 
(0047) #include <iom16v.h>
(0048) #include "D:\ICC_H\CmmICC.H"
(0049) #include "D:\ICC_H\PS2.H"
(0050) #include "D:\ICC_H\LCD12864_ST7920.H"
(0051) 
(0052) /*
(0053) #define PRESS_DATA_DDR	DDRD
(0054) #define PRESS_DATA_PORT PORTD
(0055) #define SHIFT_DATA_DDR	DDRD
(0056) #define SHIFT_DATA_PORT PORTD
(0057) */
(0058) 
(0059) #define SET_SDA		sbi(PORTD,3)
(0060) #define CLR_SDA		cbi(PORTD,3)
(0061) #define GET_SDA		gbi(PIND,3)
(0062) #define OUT_SDA 	sbi(DDRD,3)
(0063) #define IN_SDA 		cbi(DDRD,3)
(0064) 
(0065) #define SET_SCK		sbi(PORTD,2)
(0066) #define CLR_SCK		cbi(PORTD,2)
(0067) #define GET_SCK		gbi(PIND,2)
(0068) #define OUT_SCK 	sbi(DDRD,2)
(0069) #define IN_SCK 		cbi(DDRD,2)
(0070) 
(0071) #define DELAY() {NOP();NOP();NOP();NOP();}
(0072) 
(0073) bool rcvF		= 0; 	//是否收到字符标志
(0074) uint8 keyVal; 			//键值
(0075) uint8 tmp,tmp2;
(0076) 
(0077) void check(void)
(0078) {
(0079)     static uint8 rcvBits = 0;	//接收次数，中断次数
(0080) 	
(0081) 	OUT_SCK; 		   			//设置"SCK_DDR"为输出
_check:
    00447 9A8A      SBI	0x11,2
(0082) 	DELAY();
    00448 0000      NOP
    00449 0000      NOP
    0044A 0000      NOP
    0044B 0000      NOP
(0083) 	SET_SCK;					//"SCK_PORT"输出"1"
    0044C 9A92      SBI	0x12,2
(0084) 	DELAY();
    0044D 0000      NOP
    0044E 0000      NOP
    0044F 0000      NOP
    00450 0000      NOP
(0085) 	
(0086) 	IN_SCK;						//设置"SCK_DDR"为输入
    00451 988A      CBI	0x11,2
(0087) 	DELAY();
    00452 0000      NOP
    00453 0000      NOP
    00454 0000      NOP
    00455 0000      NOP
(0088) 	if(!GET_SCK)
    00456 9982      SBIC	0x10,2
    00457 C025      RJMP	0x047D
(0089) 	{
(0090) 		if((rcvBits>0) && (rcvBits<9))
    00458 9020 014D LDS	R2,PS2SimpleSoft.c:rcvBits
    0045A E080      LDI	R24,0
    0045B 1582      CP	R24,R2
    0045C F470      BCC	0x046B
    0045D 2D82      MOV	R24,R2
    0045E 3089      CPI	R24,0x9
    0045F F458      BCC	0x046B
(0091) 		{ 
(0092) 			keyVal=keyVal>>1; 	//数据是LSB格式
    00460 9020 0176 LDS	R2,keyVal
    00462 9426      LSR	R2
    00463 9220 0176 STS	keyVal,R2
(0093) 			//IN_SDA;			//当有对键盘有属性设置时，注意输入输出切换
(0094) 			//DELAY();
(0095) 			if(GET_SDA) 
    00465 9B83      SBIS	0x10,3
    00466 C004      RJMP	0x046B
(0096) 	 			keyVal=keyVal|0x80; 
    00467 2D82      MOV	R24,R2
    00468 6880      ORI	R24,0x80
    00469 9380 0176 STS	keyVal,R24
(0097) 		}
(0098) 		rcvBits++;
    0046B 9180 014D LDS	R24,PS2SimpleSoft.c:rcvBits
    0046D 5F8F      SUBI	R24,0xFF
    0046E 9380 014D STS	PS2SimpleSoft.c:rcvBits,R24
(0099) 		while(!GET_SCK); 		//等待PS/2CLK拉高
    00470 9B82      SBIS	0x10,2
    00471 CFFE      RJMP	0x0470
(0100) 	
(0101) 		if(rcvBits>10)
    00472 E08A      LDI	R24,0xA
    00473 9020 014D LDS	R2,PS2SimpleSoft.c:rcvBits
    00475 1582      CP	R24,R2
    00476 F430      BCC	0x047D
(0102) 		{
(0103) 			rcvBits=0; 			//接收11次表示接收完一帧数据
    00477 2422      CLR	R2
    00478 9220 014D STS	PS2SimpleSoft.c:rcvBits,R2
(0104) 			rcvF=1; 			//标识有字符已经输入
    0047A E081      LDI	R24,1
    0047B 9380 014C STS	rcvF,R24
(0105) 		}
(0106) 	}
    0047D 9508      RET
_keyHandle:
  i                    --> R20
  val                  --> R16
    0047E 934A      ST	-Y,R20
    0047F 935A      ST	-Y,R21
(0107) }
(0108) /*--------------------------------------------------------------------
(0109) 函数名称：
(0110) 函数功能：
(0111) 注意事项：
(0112) 提示说明：
(0113) 输    入：
(0114) 返    回：
(0115) --------------------------------------------------------------------*/
(0116) void keyHandle(uint8 val) 
(0117) {
(0118) 	uint8 i;
(0119) 	static bool isUp=0;			//按键释放动作标志
(0120) 	static bool shift=0;		//shift键按下标志
(0121) 	rcvF = 0; 
    00480 2422      CLR	R2
    00481 9220 014C STS	rcvF,R2
(0122) 	tmp= val;		//状态指示 //PRESS_DATA_PORT =
    00483 9300 0175 STS	tmp,R16
(0123) 	if(!isUp)
    00485 9020 014E LDS	R2,PS2SimpleSoft.c:isUp
    00487 2022      TST	R2
    00488 F009      BEQ	0x048A
    00489 C052      RJMP	0x04DC
(0124) 	{
(0125) 		switch(val)
    0048A 2F40      MOV	R20,R16
    0048B 2755      CLR	R21
    0048C 3549      CPI	R20,0x59
    0048D E0E0      LDI	R30,0
    0048E 075E      CPC	R21,R30
    0048F F0B9      BEQ	0x04A7
    00490 E589      LDI	R24,0x59
    00491 E090      LDI	R25,0
    00492 1784      CP	R24,R20
    00493 0795      CPC	R25,R21
    00494 F02C      BLT	0x049A
    00495 3142      CPI	R20,0x12
    00496 E0E0      LDI	R30,0
    00497 075E      CPC	R21,R30
    00498 F051      BEQ	0x04A3
    00499 C011      RJMP	0x04AB
    0049A 3F40      CPI	R20,0xF0
    0049B E0E0      LDI	R30,0
    0049C 075E      CPC	R21,R30
    0049D F009      BEQ	0x049F
    0049E C00C      RJMP	0x04AB
(0126) 		{
(0127) 			case 0xF0 :			// a relase action
(0128) 				isUp = 1;
    0049F E081      LDI	R24,1
    004A0 9380 014E STS	PS2SimpleSoft.c:isUp,R24
(0129) 				break;
    004A2 C052      RJMP	0x04F5
(0130) 			case 0x12 :			// Left shift
(0131) 				shift = 1;
    004A3 E081      LDI	R24,1
    004A4 9380 014F STS	PS2SimpleSoft.c:shift,R24
(0132) 				break;
    004A6 C04E      RJMP	0x04F5
(0133) 			case 0x59 :			// Right shift
(0134) 				shift = 1;
    004A7 E081      LDI	R24,1
    004A8 9380 014F STS	PS2SimpleSoft.c:shift,R24
(0135) 				break;
    004AA C04A      RJMP	0x04F5
(0136) 			default:
(0137) 				if(!shift)		// If shift not pressed
    004AB 9020 014F LDS	R2,PS2SimpleSoft.c:shift
    004AD 2022      TST	R2
    004AE F4E1      BNE	0x04CB
(0138) 				{ 
(0139) /*
(0140) 					for(i=0; unshifted[i][0]!=val && unshifted[i][0]; i++)
(0141) 						;
(0142) 					上述写法较为灵活，但KEIL非UNIXC标准，不能采用该写法
(0143) */
(0144) 					for(i=0; unshifted[i][0]!=val && i<59; i++)
    004AF 2744      CLR	R20
    004B0 C001      RJMP	0x04B2
    004B1 9543      INC	R20
    004B2 E680      LDI	R24,0x60
    004B3 E090      LDI	R25,0
    004B4 2FE4      MOV	R30,R20
    004B5 27FF      CLR	R31
    004B6 0FEE      LSL	R30
    004B7 1FFF      ROL	R31
    004B8 0FE8      ADD	R30,R24
    004B9 1FF9      ADC	R31,R25
    004BA 8020      LD	R2,Z
    004BB 1620      CP	R2,R16
    004BC F011      BEQ	0x04BF
    004BD 334B      CPI	R20,0x3B
    004BE F390      BCS	0x04B1
(0145) 						;
(0146) 					if(unshifted[i][0] == val) 
    004BF E680      LDI	R24,0x60
    004C0 E090      LDI	R25,0
    004C1 2FE4      MOV	R30,R20
    004C2 27FF      CLR	R31
    004C3 0FEE      LSL	R30
    004C4 1FFF      ROL	R31
    004C5 0FE8      ADD	R30,R24
    004C6 1FF9      ADC	R31,R25
    004C7 8020      LD	R2,Z
    004C8 1620      CP	R2,R16
    004C9 F559      BNE	0x04F5
(0147) 						;		//状态指示
(0148) 					
(0149) 				} 
    004CA C02A      RJMP	0x04F5
(0150) 				else			// If shift pressed
(0151) 				{			
(0152) /*
(0153) 					for(i=0; unshifted[i][0]!=val && unshifted[i][0]; i++)
(0154) 						;
(0155) 					上述写法较为灵活，但KEIL非UNIXC标准，不能采用该写法
(0156) */
(0157) 					for(i=0; shifted[i][0]!=val && i<59; i++)
    004CB 2744      CLR	R20
    004CC C001      RJMP	0x04CE
    004CD 9543      INC	R20
    004CE ED86      LDI	R24,0xD6
    004CF E090      LDI	R25,0
    004D0 2FE4      MOV	R30,R20
    004D1 27FF      CLR	R31
    004D2 0FEE      LSL	R30
    004D3 1FFF      ROL	R31
    004D4 0FE8      ADD	R30,R24
    004D5 1FF9      ADC	R31,R25
    004D6 8020      LD	R2,Z
    004D7 1620      CP	R2,R16
    004D8 F011      BEQ	0x04DB
    004D9 334B      CPI	R20,0x3B
    004DA F390      BCS	0x04CD
(0158) 						;
(0159) 					//if(shifted[i][0] == val) 
(0160) 						//SHIFT_DATA_PORT = val;//状态指示
(0161) 				}
(0162) 		}
(0163) 	}
    004DB C019      RJMP	0x04F5
(0164) 	else 
(0165) 	{
(0166) 		isUp=0;					
    004DC 2422      CLR	R2
    004DD 9220 014E STS	PS2SimpleSoft.c:isUp,R2
(0167) 		switch(val)
    004DF 2F40      MOV	R20,R16
    004E0 2755      CLR	R21
    004E1 3142      CPI	R20,0x12
    004E2 E0E0      LDI	R30,0
    004E3 075E      CPC	R21,R30
    004E4 F049      BEQ	0x04EE
    004E5 3142      CPI	R20,0x12
    004E6 E0E0      LDI	R30,0
    004E7 075E      CPC	R21,R30
    004E8 F064      BLT	0x04F5
    004E9 3549      CPI	R20,0x59
    004EA E0E0      LDI	R30,0
    004EB 075E      CPC	R21,R30
    004EC F029      BEQ	0x04F2
    004ED C007      RJMP	0x04F5
(0168) 		{
(0169) 			case 0x12 :			// Left SHIFT
(0170) 				shift = 0;
    004EE 2422      CLR	R2
    004EF 9220 014F STS	PS2SimpleSoft.c:shift,R2
(0171) 				break;
    004F1 C003      RJMP	0x04F5
(0172) 			case 0x59 :			// Right SHIFT
(0173) 				shift = 0;
    004F2 2422      CLR	R2
    004F3 9220 014F STS	PS2SimpleSoft.c:shift,R2
(0174) 				break;
(0175) 		}
(0176) 	}
    004F5 9159      LD	R21,Y+
    004F6 9149      LD	R20,Y+
    004F7 9508      RET
_main:
  i                    --> R20
    004F8 9722      SBIW	R28,2
(0177) }  
(0178) /*--------------------------------------------------------------------
(0179) 函数名称：
(0180) 函数功能：
(0181) 注意事项：
(0182) 提示说明：
(0183) 输    入：
(0184) 返    回：
(0185) --------------------------------------------------------------------*/
(0186) void main(void)
(0187) {
(0188)    unsigned char i;
(0189)     //PRESS_DATA_DDR = 0XFF;
(0190) 	//SHIFT_DATA_DDR = 0XFF;
(0191) 	DDRC=0xFF;
    004F9 EF8F      LDI	R24,0xFF
    004FA BB84      OUT	0x14,R24
(0192) 	PORTC|=0x01;
    004FB 9AA8      SBI	0x15,0
(0193) 	lcd_init();
    004FC DF37      RCALL	_lcd_init
(0194) 	lcd_clr();
    004FD DF30      RCALL	_lcd_clr
(0195) 	lcd_puts(1,1,"PS2 键盘实验");
    004FE E687      LDI	R24,0x67
    004FF E091      LDI	R25,1
    00500 8399      STD	Y+1,R25
    00501 8388      ST	Y,R24
    00502 E021      LDI	R18,1
    00503 E001      LDI	R16,1
    00504 DEE4      RCALL	_lcd_puts
(0196) 	lcd_puts(2,1,"PS2 PORT");
    00505 E58E      LDI	R24,0x5E
    00506 E091      LDI	R25,1
    00507 8399      STD	Y+1,R25
    00508 8388      ST	Y,R24
    00509 E021      LDI	R18,1
    0050A E002      LDI	R16,2
    0050B DEDD      RCALL	_lcd_puts
(0197) 	lcd_puts(3,1,"读取键盘的值:");	
    0050C E580      LDI	R24,0x50
    0050D E091      LDI	R25,1
    0050E 8399      STD	Y+1,R25
    0050F 8388      ST	Y,R24
    00510 E021      LDI	R18,1
    00511 E003      LDI	R16,3
    00512 DED6      RCALL	_lcd_puts
(0198) 	
(0199) 	PORTC=0x00;
    00513 2422      CLR	R2
    00514 BA25      OUT	0x15,R2
(0200) 	
(0201) 	IN_SDA;
    00515 988B      CBI	0x11,3
    00516 C033      RJMP	0x054A
(0202) 	while(1)
(0203) 	{
(0204) 	 	
(0205) 		check();
    00517 DF2F      RCALL	_check
(0206) 		if(rcvF)
    00518 9020 014C LDS	R2,rcvF
    0051A 2022      TST	R2
    0051B F171      BEQ	0x054A
(0207) 		{
(0208) 			keyHandle(keyVal);
    0051C 9100 0176 LDS	R16,keyVal
    0051E DF5F      RCALL	_keyHandle
(0209) 			PORTC=0x01;
    0051F E081      LDI	R24,1
    00520 BB85      OUT	0x15,R24
(0210) 			lcd_clr();
    00521 DF0C      RCALL	_lcd_clr
(0211) 			
(0212) 			//lcd_puts(3,1,"写入并读取内容");	
(0213) 			for(i=0;i<59;i++)
    00522 2744      CLR	R20
    00523 C019      RJMP	0x053D
(0214) 			{
(0215) 			  if(unshifted[i][0]==tmp) 
    00524 E680      LDI	R24,0x60
    00525 E090      LDI	R25,0
    00526 2FE4      MOV	R30,R20
    00527 27FF      CLR	R31
    00528 0FEE      LSL	R30
    00529 1FFF      ROL	R31
    0052A 0FE8      ADD	R30,R24
    0052B 1FF9      ADC	R31,R25
    0052C 8020      LD	R2,Z
    0052D 9030 0175 LDS	R3,tmp
    0052F 1423      CP	R2,R3
    00530 F459      BNE	0x053C
(0216) 			  {
(0217) 			   tmp2=unshifted[i][1];
    00531 E681      LDI	R24,0x61
    00532 E090      LDI	R25,0
    00533 2FE4      MOV	R30,R20
    00534 27FF      CLR	R31
    00535 0FEE      LSL	R30
    00536 1FFF      ROL	R31
    00537 0FE8      ADD	R30,R24
    00538 1FF9      ADC	R31,R25
    00539 8020      LD	R2,Z
    0053A 9220 0174 STS	tmp2,R2
    0053C 9543      INC	R20
    0053D 334B      CPI	R20,0x3B
    0053E F328      BCS	0x0524
(0218) 			  }
(0219) 			}
(0220) 			//PRESS_DATA_PORT = tmp2;
(0221) 			lcd_putc(4,5,tmp2);
    0053F 9020 0174 LDS	R2,tmp2
    00541 8228      ST	Y,R2
    00542 E025      LDI	R18,5
    00543 E004      LDI	R16,4
    00544 DDB0      RCALL	_lcd_putc
(0222) 			delay50us(2);
    00545 E002      LDI	R16,2
    00546 E010      LDI	R17,0
    00547 DD20      RCALL	_delay50us
(0223) 			PORTC=0x00;
FILE: <library>
    00548 2422      CLR	R2
    00549 BA25      OUT	0x15,R2
    0054A CFCC      RJMP	0x0517
    0054B 9622      ADIW	R28,2
    0054C 9508      RET
push_arg4:
    0054D 933A      ST	-Y,R19
    0054E 932A      ST	-Y,R18
push_arg2:
    0054F 931A      ST	-Y,R17
    00550 930A      ST	-Y,R16
    00551 9508      RET
div32u:
    00552 94E8      BCLR	6
    00553 C001      RJMP	0x0555
mod32u:
    00554 9468      BSET	6
    00555 D030      RCALL	long_div_prolog
    00556 24CC      CLR	R12
    00557 C009      RJMP	0x0561
div32s:
    00558 94E8      BCLR	6
    00559 C001      RJMP	0x055B
mod32s:
    0055A 9468      BSET	6
    0055B D02A      RCALL	long_div_prolog
    0055C FD37      SBRC	R19,7
    0055D 940E 0644 CALL	neg32
    0055F FDB7      SBRC	R27,7
    00560 D052      RCALL	neg_R24_R27
    00561 2477      CLR	R7
    00562 2488      CLR	R8
    00563 2499      CLR	R9
    00564 24AA      CLR	R10
    00565 24BB      CLR	R11
    00566 D042      RCALL	tst_R16_R19
    00567 F0C1      BEQ	0x0580
    00568 D045      RCALL	tst_R24_R27
    00569 F0B1      BEQ	0x0580
    0056A E2E8      LDI	R30,0x28
    0056B 0F00      LSL	R16
    0056C 1F11      ROL	R17
    0056D 1F22      ROL	R18
    0056E 1F33      ROL	R19
    0056F 1C77      ROL	R7
    00570 1C88      ROL	R8
    00571 1C99      ROL	R9
    00572 1CAA      ROL	R10
    00573 1CBB      ROL	R11
    00574 1688      CP	R8,R24
    00575 0699      CPC	R9,R25
    00576 06AA      CPC	R10,R26
    00577 06BB      CPC	R11,R27
    00578 F028      BCS	0x057E
    00579 1A88      SUB	R8,R24
    0057A 0A99      SBC	R9,R25
    0057B 0AAA      SBC	R10,R26
    0057C 0ABB      SBC	R11,R27
    0057D 9503      INC	R16
    0057E 95EA      DEC	R30
    0057F F759      BNE	0x056B
    00580 F426      BRTC	0x0585
    00581 2D08      MOV	R16,R8
    00582 2D19      MOV	R17,R9
    00583 2D2A      MOV	R18,R10
    00584 2D3B      MOV	R19,R11
    00585 C013      RJMP	long_div_epilog
long_div_prolog:
    00586 927A      ST	-Y,R7
    00587 928A      ST	-Y,R8
    00588 929A      ST	-Y,R9
    00589 92AA      ST	-Y,R10
    0058A 92BA      ST	-Y,R11
    0058B 92CA      ST	-Y,R12
    0058C 93EA      ST	-Y,R30
    0058D 938A      ST	-Y,R24
    0058E 939A      ST	-Y,R25
    0058F 93AA      ST	-Y,R26
    00590 93BA      ST	-Y,R27
    00591 858B      LDD	R24,Y+11
    00592 859C      LDD	R25,Y+12
    00593 85AD      LDD	R26,Y+13
    00594 85BE      LDD	R27,Y+14
    00595 2EC3      MOV	R12,R19
    00596 F00E      BRTS	0x0598
    00597 26CB      EOR	R12,R27
    00598 9508      RET
long_div_epilog:
    00599 FCC7      SBRC	R12,7
    0059A 940E 0644 CALL	neg32
    0059C 91B9      LD	R27,Y+
    0059D 91A9      LD	R26,Y+
    0059E 9199      LD	R25,Y+
    0059F 9189      LD	R24,Y+
    005A0 91E9      LD	R30,Y+
    005A1 90C9      LD	R12,Y+
    005A2 90B9      LD	R11,Y+
    005A3 90A9      LD	R10,Y+
    005A4 9099      LD	R9,Y+
    005A5 9089      LD	R8,Y+
    005A6 9079      LD	R7,Y+
    005A7 9624      ADIW	R28,4
    005A8 9508      RET
tst_R16_R19:
    005A9 2FE0      MOV	R30,R16
    005AA 2BE1      OR	R30,R17
    005AB 2BE2      OR	R30,R18
    005AC 2BE3      OR	R30,R19
    005AD 9508      RET
tst_R24_R27:
    005AE 2FE8      MOV	R30,R24
    005AF 2BE9      OR	R30,R25
    005B0 2BEA      OR	R30,R26
    005B1 2BEB      OR	R30,R27
    005B2 9508      RET
neg_R24_R27:
    005B3 9580      COM	R24
    005B4 9590      COM	R25
    005B5 95A0      COM	R26
    005B6 95B0      COM	R27
    005B7 5F8F      SUBI	R24,0xFF
    005B8 4F9F      SBCI	R25,0xFF
    005B9 4FAF      SBCI	R26,0xFF
    005BA 4FBF      SBCI	R27,0xFF
    005BB 9508      RET
empy32u|empy32s:
    005BC 940E 064D CALL	long_prolog
    005BE 927A      ST	-Y,R7
    005BF 940E 0666 CALL	tstzero1
    005C1 F159      BEQ	0x05ED
    005C2 2477      CLR	R7
    005C3 940E 066C CALL	tstzero2
    005C5 F419      BNE	0x05C9
    005C6 018C      MOVW	R16,R24
    005C7 019D      MOVW	R18,R26
    005C8 C024      RJMP	0x05ED
    005C9 920A      ST	-Y,R0
    005CA 921A      ST	-Y,R1
    005CB 9F08      MUL	R16,R24
    005CC 2CB0      MOV	R11,R0
    005CD 2CA1      MOV	R10,R1
    005CE 9F28      MUL	R18,R24
    005CF 2C90      MOV	R9,R0
    005D0 2C81      MOV	R8,R1
    005D1 9F18      MUL	R17,R24
    005D2 0CA0      ADD	R10,R0
    005D3 1C91      ADC	R9,R1
    005D4 1C87      ADC	R8,R7
    005D5 9F09      MUL	R16,R25
    005D6 0CA0      ADD	R10,R0
    005D7 1C91      ADC	R9,R1
    005D8 1C87      ADC	R8,R7
    005D9 9F19      MUL	R17,R25
    005DA 0C90      ADD	R9,R0
    005DB 1C81      ADC	R8,R1
    005DC 9F0A      MUL	R16,R26
    005DD 0C90      ADD	R9,R0
    005DE 1C81      ADC	R8,R1
    005DF 9F38      MUL	R19,R24
    005E0 0C80      ADD	R8,R0
    005E1 9F29      MUL	R18,R25
    005E2 0C80      ADD	R8,R0
    005E3 9F1A      MUL	R17,R26
    005E4 0C80      ADD	R8,R0
    005E5 9F0B      MUL	R16,R27
    005E6 0C80      ADD	R8,R0
    005E7 9019      LD	R1,Y+
    005E8 9009      LD	R0,Y+
    005E9 2D0B      MOV	R16,R11
    005EA 2D1A      MOV	R17,R10
    005EB 2D29      MOV	R18,R9
    005EC 2D38      MOV	R19,R8
    005ED 9079      LD	R7,Y+
    005EE 940C 065B JMP	long_epilog
pop_xgset00FC:
    005F0 90A9      LD	R10,Y+
    005F1 90B9      LD	R11,Y+
    005F2 90C9      LD	R12,Y+
    005F3 90D9      LD	R13,Y+
    005F4 90E9      LD	R14,Y+
    005F5 90F9      LD	R15,Y+
    005F6 9508      RET
pop_xgset30FC:
    005F7 90A9      LD	R10,Y+
    005F8 90B9      LD	R11,Y+
    005F9 90C9      LD	R12,Y+
    005FA 90D9      LD	R13,Y+
    005FB 90E9      LD	R14,Y+
    005FC 90F9      LD	R15,Y+
    005FD 9149      LD	R20,Y+
    005FE 9159      LD	R21,Y+
    005FF 9508      RET
pop_xgsetF0FC:
    00600 90A9      LD	R10,Y+
    00601 90B9      LD	R11,Y+
    00602 90C9      LD	R12,Y+
    00603 90D9      LD	R13,Y+
    00604 90E9      LD	R14,Y+
    00605 90F9      LD	R15,Y+
    00606 9149      LD	R20,Y+
    00607 9159      LD	R21,Y+
    00608 9169      LD	R22,Y+
    00609 9179      LD	R23,Y+
    0060A 9508      RET
push_xgsetF0FC:
    0060B 937A      ST	-Y,R23
    0060C 936A      ST	-Y,R22
push_xgset30FC:
    0060D 935A      ST	-Y,R21
    0060E 934A      ST	-Y,R20
push_xgset00FC:
    0060F 92FA      ST	-Y,R15
    00610 92EA      ST	-Y,R14
push_xgset003C:
    00611 92DA      ST	-Y,R13
    00612 92CA      ST	-Y,R12
    00613 92BA      ST	-Y,R11
    00614 92AA      ST	-Y,R10
    00615 9508      RET
push_xgsetF00C:
    00616 937A      ST	-Y,R23
    00617 936A      ST	-Y,R22
    00618 935A      ST	-Y,R21
    00619 934A      ST	-Y,R20
    0061A 92BA      ST	-Y,R11
    0061B 92AA      ST	-Y,R10
    0061C 9508      RET
pop_xgsetF00C:
    0061D 90A9      LD	R10,Y+
    0061E 90B9      LD	R11,Y+
    0061F 9149      LD	R20,Y+
    00620 9159      LD	R21,Y+
    00621 9169      LD	R22,Y+
    00622 9179      LD	R23,Y+
    00623 9508      RET
push_xgset303C:
    00624 935A      ST	-Y,R21
    00625 934A      ST	-Y,R20
    00626 92DA      ST	-Y,R13
    00627 92CA      ST	-Y,R12
    00628 92BA      ST	-Y,R11
    00629 92AA      ST	-Y,R10
    0062A 9508      RET
pop_xgset303C:
    0062B 90A9      LD	R10,Y+
    0062C 90B9      LD	R11,Y+
    0062D 90C9      LD	R12,Y+
    0062E 90D9      LD	R13,Y+
    0062F 9149      LD	R20,Y+
    00630 9159      LD	R21,Y+
    00631 9508      RET
push_xgsetF03C:
    00632 937A      ST	-Y,R23
    00633 936A      ST	-Y,R22
    00634 935A      ST	-Y,R21
    00635 934A      ST	-Y,R20
    00636 92DA      ST	-Y,R13
    00637 92CA      ST	-Y,R12
    00638 92BA      ST	-Y,R11
    00639 92AA      ST	-Y,R10
    0063A 9508      RET
pop_xgsetF03C:
    0063B 90A9      LD	R10,Y+
    0063C 90B9      LD	R11,Y+
    0063D 90C9      LD	R12,Y+
    0063E 90D9      LD	R13,Y+
    0063F 9149      LD	R20,Y+
    00640 9159      LD	R21,Y+
    00641 9169      LD	R22,Y+
    00642 9179      LD	R23,Y+
    00643 9508      RET
neg32:
    00644 9500      COM	R16
    00645 9510      COM	R17
    00646 9520      COM	R18
    00647 9530      COM	R19
    00648 5F0F      SUBI	R16,0xFF
    00649 4F1F      SBCI	R17,0xFF
    0064A 4F2F      SBCI	R18,0xFF
    0064B 4F3F      SBCI	R19,0xFF
    0064C 9508      RET
long_prolog:
    0064D 928A      ST	-Y,R8
    0064E 929A      ST	-Y,R9
    0064F 92AA      ST	-Y,R10
    00650 92BA      ST	-Y,R11
    00651 93EA      ST	-Y,R30
    00652 938A      ST	-Y,R24
    00653 939A      ST	-Y,R25
    00654 93AA      ST	-Y,R26
    00655 93BA      ST	-Y,R27
    00656 8589      LDD	R24,Y+9
    00657 859A      LDD	R25,Y+10
    00658 85AB      LDD	R26,Y+11
    00659 85BC      LDD	R27,Y+12
    0065A 9508      RET
long_epilog:
    0065B 91B9      LD	R27,Y+
    0065C 91A9      LD	R26,Y+
    0065D 9199      LD	R25,Y+
    0065E 9189      LD	R24,Y+
    0065F 91E9      LD	R30,Y+
    00660 90B9      LD	R11,Y+
    00661 90A9      LD	R10,Y+
    00662 9099      LD	R9,Y+
    00663 9089      LD	R8,Y+
    00664 9624      ADIW	R28,4
    00665 9508      RET
tstzero1:
    00666 27EE      CLR	R30
    00667 2BE0      OR	R30,R16
    00668 2BE1      OR	R30,R17
    00669 2BE2      OR	R30,R18
    0066A 2BE3      OR	R30,R19
    0066B 9508      RET
tstzero2:
    0066C 27EE      CLR	R30
    0066D 2BE8      OR	R30,R24
    0066E 2BE9      OR	R30,R25
    0066F 2BEA      OR	R30,R26
    00670 2BEB      OR	R30,R27
    00671 9508      RET
