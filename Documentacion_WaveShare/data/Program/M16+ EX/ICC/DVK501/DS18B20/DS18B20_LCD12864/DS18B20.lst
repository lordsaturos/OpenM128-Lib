Interrupt Vectors
    00000 940C 003F JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0003F E5CF      LDI	R28,0x5F
    00040 E0D4      LDI	R29,4
    00041 BFCD      OUT	0x3D,R28
    00042 BFDE      OUT	0x3E,R29
    00043 51C0      SUBI	R28,0x10
    00044 40D0      SBCI	R29,0
    00045 EA0A      LDI	R16,0xAA
    00046 8308      ST	Y,R16
    00047 2400      CLR	R0
    00048 E8E9      LDI	R30,0x89
    00049 E0F0      LDI	R31,0
    0004A E010      LDI	R17,0
    0004B 38EF      CPI	R30,0x8F
    0004C 07F1      CPC	R31,R17
    0004D F011      BEQ	0x0050
    0004E 9201      ST	Z+,R0
    0004F CFFB      RJMP	0x004B
    00050 8300      ST	Z,R16
    00051 E5E4      LDI	R30,0x54
    00052 E0F0      LDI	R31,0
    00053 E6A0      LDI	R26,0x60
    00054 E0B0      LDI	R27,0
    00055 E010      LDI	R17,0
    00056 E000      LDI	R16,0
    00057 BF0B      OUT	0x3B,R16
    00058 37ED      CPI	R30,0x7D
    00059 07F1      CPC	R31,R17
    0005A F021      BEQ	0x005F
    0005B 95C8      LPM
    0005C 9631      ADIW	R30,1
    0005D 920D      ST	X+,R0
    0005E CFF9      RJMP	0x0058
    0005F 940E 0449 CALL	_main
_exit:
    00061 CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    00062 940E 0478 CALL	push_arg4
    00064 940E 055D CALL	push_xgsetF03C
    00066 9728      SBIW	R28,0x8
    00067 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00068 24AA      CLR	R10
    00069 E081      LDI	R24,1
    0006A 8388      ST	Y,R24
    0006B E080      LDI	R24,0
    0006C 8389      STD	Y+1,R24
    0006D 838A      STD	Y+2,R24
    0006E 838B      STD	Y+3,R24
    0006F C03C      RJMP	0x00AC
(0120)     {
(0121)         y=dat/j;
    00070 8028      LD	R2,Y
    00071 8039      LDD	R3,Y+1
    00072 804A      LDD	R4,Y+2
    00073 805B      LDD	R5,Y+3
    00074 8908      LDD	R16,Y+16
    00075 8919      LDD	R17,Y+17
    00076 892A      LDD	R18,Y+18
    00077 893B      LDD	R19,Y+19
    00078 925A      ST	-Y,R5
    00079 924A      ST	-Y,R4
    0007A 923A      ST	-Y,R3
    0007B 922A      ST	-Y,R2
    0007C 940E 047D CALL	div32u
    0007E 830C      STD	Y+4,R16
    0007F 831D      STD	Y+5,R17
    00080 832E      STD	Y+6,R18
    00081 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    00082 E04A      LDI	R20,0xA
    00083 E050      LDI	R21,0
    00084 E060      LDI	R22,0
    00085 E070      LDI	R23,0
    00086 810C      LDD	R16,Y+4
    00087 811D      LDD	R17,Y+5
    00088 812E      LDD	R18,Y+6
    00089 813F      LDD	R19,Y+7
    0008A 937A      ST	-Y,R23
    0008B 936A      ST	-Y,R22
    0008C 935A      ST	-Y,R21
    0008D 934A      ST	-Y,R20
    0008E 940E 047F CALL	mod32u
    00090 E889      LDI	R24,0x89
    00091 E090      LDI	R25,0
    00092 2DEA      MOV	R30,R10
    00093 27FF      CLR	R31
    00094 0FE8      ADD	R30,R24
    00095 1FF9      ADC	R31,R25
    00096 8300      ST	Z,R16
(0123)         j*=10;
    00097 8028      LD	R2,Y
    00098 8039      LDD	R3,Y+1
    00099 804A      LDD	R4,Y+2
    0009A 805B      LDD	R5,Y+3
    0009B E04A      LDI	R20,0xA
    0009C E050      LDI	R21,0
    0009D E060      LDI	R22,0
    0009E E070      LDI	R23,0
    0009F 925A      ST	-Y,R5
    000A0 924A      ST	-Y,R4
    000A1 923A      ST	-Y,R3
    000A2 922A      ST	-Y,R2
    000A3 018A      MOVW	R16,R20
    000A4 019B      MOVW	R18,R22
    000A5 940E 04E7 CALL	empy32u|empy32s
    000A7 8308      ST	Y,R16
    000A8 8319      STD	Y+1,R17
    000A9 832A      STD	Y+2,R18
    000AA 833B      STD	Y+3,R19
    000AB 94A3      INC	R10
    000AC 2C2C      MOV	R2,R12
    000AD 2433      CLR	R3
    000AE FC27      SBRC	R2,7
    000AF 9430      COM	R3
    000B0 2C4A      MOV	R4,R10
    000B1 2455      CLR	R5
    000B2 1442      CP	R4,R2
    000B3 0453      CPC	R5,R3
    000B4 F40C      BGE	0x00B6
    000B5 CFBA      RJMP	0x0070
    000B6 9628      ADIW	R28,0x8
    000B7 940E 0566 CALL	pop_xgsetF03C
    000B9 9624      ADIW	R28,4
    000BA 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    000BB EA84      LDI	R24,0xA4
    000BC BF86      OUT	0x36,R24
(0128) 	I2CWaitAck();
    000BD B626      IN	R2,0x36
    000BE FE27      SBRS	R2,7
    000BF CFFD      RJMP	0x00BD
(0129) 	if( I2CChkAck()!=I2C_START ) 
    000C0 B181      IN	R24,0x01
    000C1 7F88      ANDI	R24,0xF8
    000C2 3088      CPI	R24,0x8
    000C3 F011      BEQ	0x00C6
(0130) 		return I2C_ERR;
    000C4 2700      CLR	R16
    000C5 C001      RJMP	0x00C7
(0131) 	return I2C_CRR;
    000C6 E001      LDI	R16,1
    000C7 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    000C8 EA84      LDI	R24,0xA4
    000C9 BF86      OUT	0x36,R24
(0144) 	I2CWaitAck();
    000CA B626      IN	R2,0x36
    000CB FE27      SBRS	R2,7
    000CC CFFD      RJMP	0x00CA
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    000CD B181      IN	R24,0x01
    000CE 7F88      ANDI	R24,0xF8
    000CF 3180      CPI	R24,0x10
    000D0 F011      BEQ	0x00D3
(0146) 		return I2C_ERR;
    000D1 2700      CLR	R16
    000D2 C001      RJMP	0x00D4
(0147) 	return I2C_CRR;
    000D3 E001      LDI	R16,1
    000D4 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    000D5 B903      OUT	0x03,R16
    000D6 E884      LDI	R24,0x84
    000D7 BF86      OUT	0x36,R24
(0160) 	I2CWaitAck();
    000D8 B626      IN	R2,0x36
    000D9 FE27      SBRS	R2,7
    000DA CFFD      RJMP	0x00D8
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    000DB B181      IN	R24,0x01
    000DC 7F88      ANDI	R24,0xF8
    000DD 3188      CPI	R24,0x18
    000DE F011      BEQ	0x00E1
(0162) 		return I2C_ERR;
    000DF 2700      CLR	R16
    000E0 C001      RJMP	0x00E2
(0163) 	return I2C_CRR;		
    000E1 E001      LDI	R16,1
    000E2 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    000E3 92AA      ST	-Y,R10
    000E4 92BA      ST	-Y,R11
    000E5 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    000E6 FEA0      SBRS	R10,0
    000E7 C00E      RJMP	0x00F6
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    000E8 2D0A      MOV	R16,R10
    000E9 9506      LSR	R16
    000EA 9506      LSR	R16
    000EB 9506      LSR	R16
    000EC 9506      LSR	R16
    000ED 9506      LSR	R16
    000EE 9506      LSR	R16
    000EF 9506      LSR	R16
    000F0 9506      LSR	R16
    000F1 DFE3      RCALL	_I2C_SendWrDAdr
    000F2 2300      TST	R16
    000F3 F411      BNE	0x00F6
(0177) 			return I2C_ERR;
    000F4 2700      CLR	R16
    000F5 C007      RJMP	0x00FD
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    000F6 2D0A      MOV	R16,R10
    000F7 DFDD      RCALL	_I2C_SendWrDAdr
    000F8 2300      TST	R16
    000F9 F411      BNE	0x00FC
(0179) 		return I2C_ERR;
    000FA 2700      CLR	R16
    000FB C001      RJMP	0x00FD
(0180) 	return I2C_CRR;
    000FC E001      LDI	R16,1
    000FD 90B9      LD	R11,Y+
    000FE 90A9      LD	R10,Y+
    000FF 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    00100 B903      OUT	0x03,R16
    00101 E884      LDI	R24,0x84
    00102 BF86      OUT	0x36,R24
(0193) 	I2CWaitAck();
    00103 B626      IN	R2,0x36
    00104 FE27      SBRS	R2,7
    00105 CFFD      RJMP	0x0103
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    00106 B181      IN	R24,0x01
    00107 7F88      ANDI	R24,0xF8
    00108 3480      CPI	R24,0x40
    00109 F011      BEQ	0x010C
(0195) 		return I2C_ERR;
    0010A 2700      CLR	R16
    0010B C001      RJMP	0x010D
(0196) 	return I2C_CRR;	
    0010C E001      LDI	R16,1
    0010D 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    0010E 92AA      ST	-Y,R10
    0010F 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    00110 FEA0      SBRS	R10,0
    00111 C00E      RJMP	0x0120
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    00112 2D0A      MOV	R16,R10
    00113 9506      LSR	R16
    00114 9506      LSR	R16
    00115 9506      LSR	R16
    00116 9506      LSR	R16
    00117 9506      LSR	R16
    00118 9506      LSR	R16
    00119 9506      LSR	R16
    0011A 9506      LSR	R16
    0011B DFB9      RCALL	_I2C_SendWrDAdr
    0011C 2300      TST	R16
    0011D F411      BNE	0x0120
(0210) 			return I2C_ERR;
    0011E 2700      CLR	R16
    0011F C007      RJMP	0x0127
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    00120 2D0A      MOV	R16,R10
    00121 DFB3      RCALL	_I2C_SendWrDAdr
    00122 2300      TST	R16
    00123 F411      BNE	0x0126
(0212) 		return I2C_ERR;
    00124 2700      CLR	R16
    00125 C001      RJMP	0x0127
(0213) 	return I2C_CRR;
    00126 E001      LDI	R16,1
    00127 90A9      LD	R10,Y+
    00128 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    00129 B903      OUT	0x03,R16
    0012A E884      LDI	R24,0x84
    0012B BF86      OUT	0x36,R24
(0226) 	I2CWaitAck();
    0012C B626      IN	R2,0x36
    0012D FE27      SBRS	R2,7
    0012E CFFD      RJMP	0x012C
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    0012F B181      IN	R24,0x01
    00130 7F88      ANDI	R24,0xF8
    00131 3288      CPI	R24,0x28
    00132 F011      BEQ	0x0135
(0228) 		return I2C_ERR;
    00133 2700      CLR	R16
    00134 C001      RJMP	0x0136
(0229) 	return I2C_CRR;	
    00135 E001      LDI	R16,1
    00136 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    00137 E884      LDI	R24,0x84
    00138 BF86      OUT	0x36,R24
(0242) 	I2CWaitAck();
    00139 B626      IN	R2,0x36
    0013A FE27      SBRS	R2,7
    0013B CFFD      RJMP	0x0139
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    0013C B181      IN	R24,0x01
    0013D 7F88      ANDI	R24,0xF8
    0013E 3588      CPI	R24,0x58
    0013F F011      BEQ	0x0142
(0244) 		return I2C_ERR;
    00140 2700      CLR	R16
    00141 C004      RJMP	0x0146
(0245) 	*pRdDat=TWDR;
    00142 B023      IN	R2,0x03
    00143 01F8      MOVW	R30,R16
    00144 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    00145 E001      LDI	R16,1
    00146 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    00147 EC84      LDI	R24,0xC4
    00148 BF86      OUT	0x36,R24
(0259) 	I2CWaitAck();
    00149 B626      IN	R2,0x36
    0014A FE27      SBRS	R2,7
    0014B CFFD      RJMP	0x0149
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    0014C B181      IN	R24,0x01
    0014D 7F88      ANDI	R24,0xF8
    0014E 3580      CPI	R24,0x50
    0014F F011      BEQ	0x0152
(0261) 		return I2C_ERR;
    00150 2700      CLR	R16
    00151 C004      RJMP	0x0156
(0262) 	*pRdDat=TWDR;
    00152 B023      IN	R2,0x03
    00153 01F8      MOVW	R30,R16
    00154 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    00155 E001      LDI	R16,1
    00156 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    00157 940E 053A CALL	push_xgset00FC
    00159 2EC2      MOV	R12,R18
    0015A 0178      MOVW	R14,R16
    0015B 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    0015C DF5E      RCALL	_I2C_Start
    0015D 2300      TST	R16
    0015E F411      BNE	0x0161
(0278) 		return I2C_ERR;
    0015F 2700      CLR	R16
    00160 C017      RJMP	0x0178
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    00161 0187      MOVW	R16,R14
    00162 DF80      RCALL	_I2C_SendWrDAdr_
    00163 2300      TST	R16
    00164 F411      BNE	0x0167
(0281) 		return I2C_ERR;
    00165 2700      CLR	R16
    00166 C011      RJMP	0x0178
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00167 2D0C      MOV	R16,R12
    00168 DFC0      RCALL	_I2C_SendDat
    00169 2EC0      MOV	R12,R16
    0016A 2300      TST	R16
    0016B F411      BNE	0x016E
(0284) 		return I2C_ERR;
    0016C 2700      CLR	R16
    0016D C00A      RJMP	0x0178
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    0016E 2D0A      MOV	R16,R10
    0016F DFB9      RCALL	_I2C_SendDat
    00170 2EA0      MOV	R10,R16
    00171 2300      TST	R16
    00172 F411      BNE	0x0175
(0287) 		return I2C_ERR;
    00173 2700      CLR	R16
    00174 C003      RJMP	0x0178
(0288) 
(0289) 	I2C_Stop();
    00175 E984      LDI	R24,0x94
    00176 BF86      OUT	0x36,R24
(0290) 
(0291) 	return I2C_CRR;
    00177 E001      LDI	R16,1
    00178 940C 051B JMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    0017A 940E 0538 CALL	push_xgset30FC
    0017C 2EE2      MOV	R14,R18
    0017D 01A8      MOVW	R20,R16
    0017E 84C8      LDD	R12,Y+8
    0017F 84AA      LDD	R10,Y+10
    00180 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    00181 DF39      RCALL	_I2C_Start
    00182 2300      TST	R16
    00183 F411      BNE	0x0186
(0324) 		return I2C_ERR;
    00184 2700      CLR	R16
    00185 C024      RJMP	0x01AA
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    00186 018A      MOVW	R16,R20
    00187 DF5B      RCALL	_I2C_SendWrDAdr_
    00188 2300      TST	R16
    00189 F411      BNE	0x018C
(0327) 		return I2C_ERR;
    0018A 2700      CLR	R16
    0018B C01E      RJMP	0x01AA
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    0018C 2D0E      MOV	R16,R14
    0018D DF9B      RCALL	_I2C_SendDat
    0018E 2EE0      MOV	R14,R16
    0018F 2300      TST	R16
    00190 F411      BNE	0x0193
(0330) 		return I2C_ERR;
    00191 2700      CLR	R16
    00192 C017      RJMP	0x01AA
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    00193 DF34      RCALL	_I2C_Restart
    00194 2EE0      MOV	R14,R16
    00195 2300      TST	R16
    00196 F411      BNE	0x0199
(0333) 		return I2C_ERR;
    00197 2700      CLR	R16
    00198 C011      RJMP	0x01AA
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    00199 2D0C      MOV	R16,R12
    0019A DF65      RCALL	_I2C_SendRdDAdr
    0019B 2EC0      MOV	R12,R16
    0019C 2300      TST	R16
    0019D F411      BNE	0x01A0
(0336) 		return I2C_ERR;
    0019E 2700      CLR	R16
    0019F C00A      RJMP	0x01AA
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    001A0 0185      MOVW	R16,R10
    001A1 DF95      RCALL	_I2C_RcvNAckDat
    001A2 2EA0      MOV	R10,R16
    001A3 2300      TST	R16
    001A4 F411      BNE	0x01A7
(0339) 		return I2C_ERR;
    001A5 2700      CLR	R16
    001A6 C003      RJMP	0x01AA
(0340) 
(0341) 	I2C_Stop();
    001A7 E984      LDI	R24,0x94
    001A8 BF86      OUT	0x36,R24
(0342) 
(0343) 	return I2C_CRR;
    001A9 E001      LDI	R16,1
    001AA 940C 0522 JMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    001AC 940E 0536 CALL	push_xgsetF0FC
    001AE 2EE2      MOV	R14,R18
    001AF 01B8      MOVW	R22,R16
    001B0 84CA      LDD	R12,Y+10
    001B1 84AC      LDD	R10,Y+12
    001B2 84BD      LDD	R11,Y+13
    001B3 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    001B4 DF06      RCALL	_I2C_Start
    001B5 2300      TST	R16
    001B6 F411      BNE	0x01B9
(0363) 		return I2C_ERR;
    001B7 2700      CLR	R16
    001B8 C038      RJMP	0x01F1
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001B9 018B      MOVW	R16,R22
    001BA DF28      RCALL	_I2C_SendWrDAdr_
    001BB 2300      TST	R16
    001BC F411      BNE	0x01BF
(0366) 		return I2C_ERR;
    001BD 2700      CLR	R16
    001BE C032      RJMP	0x01F1
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001BF 2D0E      MOV	R16,R14
    001C0 DF68      RCALL	_I2C_SendDat
    001C1 2EE0      MOV	R14,R16
    001C2 2300      TST	R16
    001C3 F411      BNE	0x01C6
(0369) 		return I2C_ERR;
    001C4 2700      CLR	R16
    001C5 C02B      RJMP	0x01F1
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    001C6 DF01      RCALL	_I2C_Restart
    001C7 2EE0      MOV	R14,R16
    001C8 2300      TST	R16
    001C9 F411      BNE	0x01CC
(0372) 		return I2C_ERR;
    001CA 2700      CLR	R16
    001CB C025      RJMP	0x01F1
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001CC 2D0C      MOV	R16,R12
    001CD DF32      RCALL	_I2C_SendRdDAdr
    001CE 2EC0      MOV	R12,R16
    001CF 2300      TST	R16
    001D0 F411      BNE	0x01D3
(0375) 		return I2C_ERR;
    001D1 2700      CLR	R16
    001D2 C01E      RJMP	0x01F1
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    001D3 24CC      CLR	R12
    001D4 C00B      RJMP	0x01E0
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    001D5 2D0C      MOV	R16,R12
    001D6 2711      CLR	R17
    001D7 0D0A      ADD	R16,R10
    001D8 1D1B      ADC	R17,R11
    001D9 DF6D      RCALL	_I2C_RcvAckDat
    001DA 2EE0      MOV	R14,R16
    001DB 2300      TST	R16
    001DC F411      BNE	0x01DF
(0379) 			return I2C_ERR;
    001DD 2700      CLR	R16
    001DE C012      RJMP	0x01F1
    001DF 94C3      INC	R12
    001E0 2F84      MOV	R24,R20
    001E1 5081      SUBI	R24,1
    001E2 16C8      CP	R12,R24
    001E3 F388      BCS	0x01D5
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    001E4 2D0C      MOV	R16,R12
    001E5 2711      CLR	R17
    001E6 0D0A      ADD	R16,R10
    001E7 1D1B      ADC	R17,R11
    001E8 DF4E      RCALL	_I2C_RcvNAckDat
    001E9 2EA0      MOV	R10,R16
    001EA 2300      TST	R16
    001EB F411      BNE	0x01EE
(0382) 			return I2C_ERR;
    001EC 2700      CLR	R16
    001ED C003      RJMP	0x01F1
(0383) 
(0384) 	I2C_Stop();
    001EE E984      LDI	R24,0x94
    001EF BF86      OUT	0x36,R24
(0385) 	
(0386) 	return I2C_CRR;
    001F0 E001      LDI	R16,1
    001F1 940C 052B JMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    001F3 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    001F4 C007      RJMP	0x01FC
(0108)         for(j=0;j<70;j++)	
    001F5 2744      CLR	R20
    001F6 C001      RJMP	0x01F8
    001F7 9543      INC	R20
    001F8 3446      CPI	R20,0x46
    001F9 F3E8      BCS	0x01F7
    001FA 5001      SUBI	R16,1
    001FB 4010      SBCI	R17,0
    001FC 2422      CLR	R2
    001FD 2433      CLR	R3
    001FE 1620      CP	R2,R16
    001FF 0631      CPC	R3,R17
    00200 F3A4      BLT	0x01F5
    00201 9149      LD	R20,Y+
    00202 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    00203 934A      ST	-Y,R20
    00204 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    00205 C013      RJMP	0x0219
(0123) 		for(i=0;i<52642;i++)
    00206 2744      CLR	R20
    00207 2755      CLR	R21
    00208 C002      RJMP	0x020B
    00209 5F4F      SUBI	R20,0xFF
    0020A 4F5F      SBCI	R21,0xFF
    0020B EA82      LDI	R24,0xA2
    0020C EC9D      LDI	R25,0xCD
    0020D E0A0      LDI	R26,0
    0020E E0B0      LDI	R27,0
    0020F 011A      MOVW	R2,R20
    00210 2444      CLR	R4
    00211 2455      CLR	R5
    00212 1628      CP	R2,R24
    00213 0639      CPC	R3,R25
    00214 064A      CPC	R4,R26
    00215 065B      CPC	R5,R27
    00216 F394      BLT	0x0209
    00217 5001      SUBI	R16,1
    00218 4010      SBCI	R17,0
    00219 2422      CLR	R2
    0021A 2433      CLR	R3
    0021B 1620      CP	R2,R16
    0021C 0631      CPC	R3,R17
    0021D F344      BLT	0x0206
    0021E 9159      LD	R21,Y+
    0021F 9149      LD	R20,Y+
    00220 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    00221 934A      ST	-Y,R20
    00222 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    00223 2744      CLR	R20
    00224 2755      CLR	R21
    00225 C002      RJMP	0x0228
    00226 5F4F      SUBI	R20,0xFF
    00227 4F5F      SBCI	R21,0xFF
    00228 1740      CP	R20,R16
    00229 0751      CPC	R21,R17
    0022A F3D8      BCS	0x0226
    0022B 9159      LD	R21,Y+
    0022C 9149      LD	R20,Y+
    0022D 9508      RET
FILE: D:\ICC_H\onewirefords18b20.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立onewire操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) #ifndef _onewire_H_
(0040) #define _onewire_H_
(0041) //-----复位-----
(0042) void reset_onewire(void) 
(0043) { 
(0044) 	set_onewire_dq_ddr();
_reset_onewire:
    0022E 9ABA      SBI	0x17,2
(0045)     clr_onewire_dq(); 
    0022F 98C2      CBI	0x18,2
(0046)     delayus(500);
    00230 EF04      LDI	R16,0xF4
    00231 E011      LDI	R17,1
    00232 DFEE      RCALL	_delayus
(0047)     set_onewire_dq(); 
    00233 9AC2      SBI	0x18,2
(0048)     delayus(60);
    00234 E30C      LDI	R16,0x3C
    00235 E010      LDI	R17,0
    00236 DFEA      RCALL	_delayus
(0049) 	clr_onewire_dq_ddr();
    00237 98BA      CBI	0x17,2
    00238 9508      RET
(0050) } 
(0051) //-----应答-----
(0052) void ack_onewire(void) 
(0053) { 	
(0054)     while(in_onewire_dq());
_ack_onewire:
    00239 99B2      SBIC	0x16,2
    0023A CFFE      RJMP	_ack_onewire
(0055)     while(!(in_onewire_dq())); 
    0023B 9BB2      SBIS	0x16,2
    0023C CFFE      RJMP	0x023B
(0056)     delayus(38);
    0023D E206      LDI	R16,0x26
    0023E E010      LDI	R17,0
    0023F DFE1      RCALL	_delayus
(0057) 	set_onewire_dq_ddr();
    00240 9ABA      SBI	0x17,2
    00241 9508      RET
_read_onewire:
  i                    --> R22
  data                 --> R20
    00242 934A      ST	-Y,R20
    00243 936A      ST	-Y,R22
(0058) } 
(0059) //-----读数据-----
(0060) unsigned char read_onewire(void) 
(0061) { 
(0062)     unsigned char data=0,i=0; 
    00244 2744      CLR	R20
(0063)     for(i=0;i<8;i++) 
    00245 2766      CLR	R22
    00246 C012      RJMP	0x0259
(0064)     { 
(0065) 		set_onewire_dq_ddr();
    00247 9ABA      SBI	0x17,2
(0066) 
(0067)         data=data>>1; 
    00248 9546      LSR	R20
(0068)         clr_onewire_dq(); 
    00249 98C2      CBI	0x18,2
(0069)         delayus(1);
    0024A E001      LDI	R16,1
    0024B E010      LDI	R17,0
    0024C DFD4      RCALL	_delayus
(0070)         set_onewire_dq(); 
    0024D 9AC2      SBI	0x18,2
(0071)         delayus(2);
    0024E E002      LDI	R16,2
    0024F E010      LDI	R17,0
    00250 DFD0      RCALL	_delayus
(0072) 
(0073) 		clr_onewire_dq_ddr();
    00251 98BA      CBI	0x17,2
(0074)         if(in_onewire_dq()) data|=0x80; 
    00252 9BB2      SBIS	0x16,2
    00253 C001      RJMP	0x0255
    00254 6840      ORI	R20,0x80
(0075)         delayus(118);
    00255 E706      LDI	R16,0x76
    00256 E010      LDI	R17,0
    00257 DFC9      RCALL	_delayus
    00258 9563      INC	R22
    00259 3068      CPI	R22,0x8
    0025A F360      BCS	0x0247
(0076) 	} 
(0077) 	return(data); 
    0025B 2F04      MOV	R16,R20
    0025C 9169      LD	R22,Y+
    0025D 9149      LD	R20,Y+
    0025E 9508      RET
_write_onewire:
  i                    --> R20
  data                 --> R10
    0025F 92AA      ST	-Y,R10
    00260 934A      ST	-Y,R20
    00261 2EA0      MOV	R10,R16
(0078) } 
(0079) //-----写数据-----
(0080) void write_onewire(unsigned char data) 
(0081) { 
(0082)     unsigned char i=0; 
(0083) 	set_onewire_dq_ddr();
    00262 9ABA      SBI	0x17,2
(0084)     for(i=0;i<8;i++) 
    00263 2744      CLR	R20
    00264 C015      RJMP	0x027A
(0085)     { 
(0086)         if(data&0x01)
    00265 FEA0      SBRS	R10,0
    00266 C009      RJMP	0x0270
(0087) 		{ 
(0088)             clr_onewire_dq(); 
    00267 98C2      CBI	0x18,2
(0089)             delayus(14);
    00268 E00E      LDI	R16,0xE
    00269 E010      LDI	R17,0
    0026A DFB6      RCALL	_delayus
(0090)             set_onewire_dq(); 
    0026B 9AC2      SBI	0x18,2
(0091)             delayus(108);
    0026C E60C      LDI	R16,0x6C
    0026D E010      LDI	R17,0
    0026E DFB2      RCALL	_delayus
(0092) 		}	 
    0026F C008      RJMP	0x0278
(0093)    	 	else 
(0094)    	 	{ 
(0095)        		 clr_onewire_dq(); 
    00270 98C2      CBI	0x18,2
(0096)         	delayus(108);
    00271 E60C      LDI	R16,0x6C
    00272 E010      LDI	R17,0
    00273 DFAD      RCALL	_delayus
(0097)         	set_onewire_dq(); 
    00274 9AC2      SBI	0x18,2
(0098)         	delayus(14);
    00275 E00E      LDI	R16,0xE
    00276 E010      LDI	R17,0
    00277 DFA9      RCALL	_delayus
(0099)     	} 
(0100)     	data=data>>1; 
    00278 94A6      LSR	R10
    00279 9543      INC	R20
    0027A 3048      CPI	R20,0x8
    0027B F348      BCS	0x0265
    0027C 9149      LD	R20,Y+
    0027D 90A9      LD	R10,Y+
    0027E 9508      RET
FILE: D:\ICC_H\DS18B20_DVK501.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立DS18B20_DVK501操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR 6.3A
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 
(0012) 圆版时间:   2009-07-01
(0013) 	
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #define set_onewire_dq_ddr() sbi(DDRx,ds18b20_dq)
(0041) #define set_onewire_dq() sbi(PORTx,ds18b20_dq)
(0042) #define clr_onewire_dq() cbi(PORTx,ds18b20_dq)
(0043) #define clr_onewire_dq_ddr() cbi(DDRx,ds18b20_dq)
(0044) #define in_onewire_dq() gbi(PINx,ds18b20_dq)
(0045) #include "D:\ICC_H\onewirefords18b20.H"
(0046) //-----DS18B20转换温度-----
(0047) void convert_ds18b20(void) 
(0048) { 
(0049)     reset_onewire(); 
_convert_ds18b20:
    0027F DFAE      RCALL	_reset_onewire
(0050)     ack_onewire(); 
    00280 DFB8      RCALL	_ack_onewire
(0051)     delay50us(200); 
    00281 EC08      LDI	R16,0xC8
    00282 E010      LDI	R17,0
    00283 DF6F      RCALL	_delay50us
(0052)     write_onewire(0xcc); 
    00284 EC0C      LDI	R16,0xCC
    00285 DFD9      RCALL	_write_onewire
(0053)     write_onewire(0x44); 
    00286 E404      LDI	R16,0x44
    00287 CFD7      RJMP	_write_onewire
_read_temperature:
  temp1                --> R22
  temp2                --> R20
    00288 934A      ST	-Y,R20
    00289 936A      ST	-Y,R22
(0054) } 
(0055) //------------DS18BB0读温度----------
(0056) unsigned char read_temperature(void) 
(0057) { 
(0058) 	unsigned char temp1,temp2;
(0059) 	convert_ds18b20();
    0028A DFF4      RCALL	_convert_ds18b20
(0060)     reset_onewire(); 
    0028B DFA2      RCALL	_reset_onewire
(0061)     ack_onewire(); 
    0028C DFAC      RCALL	_ack_onewire
(0062)     delay50us(200); 
    0028D EC08      LDI	R16,0xC8
    0028E E010      LDI	R17,0
    0028F DF63      RCALL	_delay50us
(0063)     write_onewire(0xcc); 
    00290 EC0C      LDI	R16,0xCC
    00291 DFCD      RCALL	_write_onewire
(0064)     write_onewire(0xbe); 	
    00292 EB0E      LDI	R16,0xBE
    00293 DFCB      RCALL	_write_onewire
(0065)     temp1=read_onewire(); 
    00294 DFAD      RCALL	_read_onewire
    00295 2F60      MOV	R22,R16
(0066)     temp2=read_onewire(); 
    00296 DFAB      RCALL	_read_onewire
    00297 2F40      MOV	R20,R16
(0067) 	temp2=temp2<<4;
    00298 2F84      MOV	R24,R20
    00299 708F      ANDI	R24,0xF
    0029A 9582      SWAP	R24
    0029B 2F48      MOV	R20,R24
(0068) 	temp1=temp1>>4;
    0029C 2F86      MOV	R24,R22
    0029D 9582      SWAP	R24
    0029E 708F      ANDI	R24,0xF
    0029F 2F68      MOV	R22,R24
(0069) 	temp2|=temp1;
    002A0 2B48      OR	R20,R24
(0070) 
(0071) 	return temp2;
    002A1 2F04      MOV	R16,R20
    002A2 9169      LD	R22,Y+
    002A3 9149      LD	R20,Y+
    002A4 9508      RET
FILE: D:\ICC_H\LCD12864_ST7920.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 	                                                        
(0004) 目    的:   建立LCD12864_ST7920的串模式操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 	                                                                
(0008) 应用软件:   ICCAVR                                               
(0009) 	                                                                
(0010) 版    本:   Version 1.0
(0011) 	                                                                
(0012) 圆版时间:   2005-09-06
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) 
(0026) 
(0027) ----------------------------------------------------------------------
(0028) 入口参数说明：
(0029) 	//#define OUT_LCD_CS	sbi(DDRD,0)
(0030) 	//#define SET_LCD_CS	sbi(PORTD,0)
(0031) 	//#define CLR_LCD_CS	cbi(PORTD,0)
(0032) 
(0033) ----------------------------------------------------------------------
(0034) 待定参数说明：
(0035) 	
(0036) 
(0037) ----------------------------------------------------------------------	
(0038) 对外变量说明：
(0039) 
(0040) ----------------------------------------------------------------------
(0041) 对外函数说明：
(0042) 
(0043) ----------------------------------------------------------------------
(0044) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0045) 
(0046) 
(0047) /*--------------------------------------------------------------------
(0048) 接口定义：
(0049) 
(0050) LCD12864_ST7920			ATmega16
(0051) 1.GND		--------	GND
(0052) 2.VCC		--------	VCC
(0053) 3.V0		--------	V0
(0054) 4.RS(CS)	--------	VCC
(0055) 5.R/W(SID)	--------	MOSI/PB5
(0056) 6.E(SCLK)	--------	SCK/PB7
(0057) 7.D0		--------	NC
(0058) 8.D1		--------	NC
(0059) 9.D2		--------	NC
(0060) 10.D3		--------	NC
(0061) 11.D4		--------	NC
(0062) 12.D5		--------	NC
(0063) 13.D6		--------	NC
(0064) 14.D7		--------	NC
(0065) 15.PSB		--------	GND
(0066) 16.NC		--------	NC
(0067) 17.RST		--------	NC
(0068) 18.NC		--------	NC
(0069) 19.LED+		--------	VCC
(0070) 20.LED-		--------	GND
(0071) 
(0072) 说明：
(0073) （1）使用ATmega16的硬件SPI操作LCD12864_ST7920
(0074) （2）PIN4/CS接VCC，其实也可接到特定的IO口，但外部程序需要指定
(0075) --------------------------------------------------------------------*/
(0076) 
(0077) #ifndef LCD12864_ST7920_H
(0078) #define LCD12864_ST7920_H
(0079) 
(0080) #include "D:\ICC_H\CmmIcc.h"
(0081) 
(0082) void SPI_init()
(0083) {
(0084) 	DDRB |= 0xB0;
_SPI_init:
    002A5 B387      IN	R24,0x17
    002A6 6B80      ORI	R24,0xB0
    002A7 BB87      OUT	0x17,R24
(0085) 	SPCR = 0x50;	//setup SPI
    002A8 E580      LDI	R24,0x50
    002A9 B98D      OUT	0x0D,R24
(0086) 	SPSR = 0x01;	//setup SPI
    002AA E081      LDI	R24,1
    002AB B98E      OUT	0x0E,R24
(0087) 	SEI();
    002AC 9478      BSET	7
    002AD 9508      RET
(0088) }
(0089) 
(0090) void lcd_wrByte(uint8 data)
(0091) {  
(0092) 	SPDR = data;        
_lcd_wrByte:
  data                 --> R16
    002AE B90F      OUT	0x0F,R16
(0093) 	while ((SPSR & 0x80) == 0);  
    002AF 9B77      SBIS	0x0E,7
    002B0 CFFE      RJMP	0x02AF
    002B1 9508      RET
_lcd_wrCmd:
  LC                   --> R10
  HC                   --> R12
    002B2 92AA      ST	-Y,R10
    002B3 92CA      ST	-Y,R12
    002B4 2EA2      MOV	R10,R18
    002B5 2EC0      MOV	R12,R16
(0094) }
(0095) 
(0096) void lcd_wrCmd(uint8 HC,uint8 LC)
(0097) {
(0098) 	lcd_wrByte(0xF8);
    002B6 EF08      LDI	R16,0xF8
    002B7 DFF6      RCALL	_lcd_wrByte
(0099) 	lcd_wrByte(HC);		//传输高四位
    002B8 2D0C      MOV	R16,R12
    002B9 DFF4      RCALL	_lcd_wrByte
(0100) 	lcd_wrByte(LC);		//传输低四位
    002BA 2D0A      MOV	R16,R10
    002BB DFF2      RCALL	_lcd_wrByte
    002BC 90C9      LD	R12,Y+
    002BD 90A9      LD	R10,Y+
    002BE 9508      RET
_lcd_wrDat:
  LD                   --> R10
  HD                   --> R12
    002BF 92AA      ST	-Y,R10
    002C0 92CA      ST	-Y,R12
    002C1 2EA2      MOV	R10,R18
    002C2 2EC0      MOV	R12,R16
(0101) }
(0102) 
(0103) void lcd_wrDat(uint8 HD,uint8 LD)
(0104) {
(0105) 	lcd_wrByte(0xFA);
    002C3 EF0A      LDI	R16,0xFA
    002C4 DFE9      RCALL	_lcd_wrByte
(0106) 	lcd_wrByte(HD);		//传输高四位
    002C5 2D0C      MOV	R16,R12
    002C6 DFE7      RCALL	_lcd_wrByte
(0107) 	lcd_wrByte(LD);		//传输低四位
    002C7 2D0A      MOV	R16,R10
    002C8 DFE5      RCALL	_lcd_wrByte
    002C9 90C9      LD	R12,Y+
    002CA 90A9      LD	R10,Y+
    002CB 9508      RET
_lcd_set_xy:
  adr                  --> R20
  y                    --> R22
  x                    --> R10
    002CC 940E 0541 CALL	push_xgsetF00C
    002CE 2F62      MOV	R22,R18
    002CF 2EA0      MOV	R10,R16
(0108) } 
(0109) 
(0110) /*
(0111) x表示在第几行显示，y表示在第几列显示
(0112) */
(0113) void lcd_set_xy(uint8 x,uint8 y) 
(0114) {
(0115) 	uint8 adr;
(0116) 
(0117) 	switch(x)
    002D0 24BB      CLR	R11
    002D1 01C5      MOVW	R24,R10
    002D2 3081      CPI	R24,1
    002D3 E0E0      LDI	R30,0
    002D4 079E      CPC	R25,R30
    002D5 F069      BEQ	0x02E3
    002D6 3082      CPI	R24,2
    002D7 E0E0      LDI	R30,0
    002D8 079E      CPC	R25,R30
    002D9 F061      BEQ	0x02E6
    002DA 3083      CPI	R24,3
    002DB E0E0      LDI	R30,0
    002DC 079E      CPC	R25,R30
    002DD F059      BEQ	0x02E9
    002DE 3084      CPI	R24,4
    002DF E0E0      LDI	R30,0
    002E0 079E      CPC	R25,R30
    002E1 F051      BEQ	0x02EC
    002E2 C00B      RJMP	0x02EE
(0118) 	{
(0119) 	case 1: adr = 0x7F + y;
    002E3 2F46      MOV	R20,R22
    002E4 5841      SUBI	R20,0x81
(0120) 		break;		//在第1行y列显示
    002E5 C008      RJMP	0x02EE
(0121) 	case 2: adr = 0x8F + y;
    002E6 2F46      MOV	R20,R22
    002E7 5741      SUBI	R20,0x71
(0122) 		break;		//在第2行y列显示
    002E8 C005      RJMP	0x02EE
(0123) 	case 3: adr = 0x87 + y;
    002E9 2F46      MOV	R20,R22
    002EA 5749      SUBI	R20,0x79
(0124) 		break;		//在第3行y列显示
    002EB C002      RJMP	0x02EE
(0125) 	case 4: adr = 0x97 + y;
    002EC 2F46      MOV	R20,R22
    002ED 5649      SUBI	R20,0x69
(0126) 		break;		//在第4行y列显示
(0127) 	default:	;
(0128) 	}
(0129) 	lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
    002EE 2F24      MOV	R18,R20
    002EF 702F      ANDI	R18,0xF
    002F0 702F      ANDI	R18,0xF
    002F1 9522      SWAP	R18
    002F2 2F04      MOV	R16,R20
    002F3 7F00      ANDI	R16,0xF0
    002F4 DFBD      RCALL	_lcd_wrCmd
    002F5 940C 0548 JMP	pop_xgsetF00C
_lcd_putc:
  ch                   --> R20
  y                    --> R12
  x                    --> R10
    002F7 940E 054F CALL	push_xgset303C
    002F9 2EC2      MOV	R12,R18
    002FA 2EA0      MOV	R10,R16
    002FB 814E      LDD	R20,Y+6
(0130) }
(0131) 
(0132) void lcd_putc(uint8 x,uint8 y,uint8 ch)
(0133) {
(0134) 	lcd_set_xy(x,y);
    002FC 2D2C      MOV	R18,R12
    002FD 2D0A      MOV	R16,R10
    002FE DFCD      RCALL	_lcd_set_xy
(0135) 	delay50us(20); 
    002FF E104      LDI	R16,0x14
    00300 E010      LDI	R17,0
    00301 DEF1      RCALL	_delay50us
(0136) 	lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
    00302 2F24      MOV	R18,R20
    00303 702F      ANDI	R18,0xF
    00304 702F      ANDI	R18,0xF
    00305 9522      SWAP	R18
    00306 2F04      MOV	R16,R20
    00307 7F00      ANDI	R16,0xF0
    00308 DFB6      RCALL	_lcd_wrDat
    00309 940C 0556 JMP	pop_xgset303C
_lcd_putd0:
  i                    --> R20
  length               --> R20
  dat                  --> Y,+7
  y                    --> R12
  x                    --> R10
    0030B 940E 054F CALL	push_xgset303C
    0030D 2EC2      MOV	R12,R18
    0030E 2EA0      MOV	R10,R16
    0030F 9721      SBIW	R28,1
    00310 854B      LDD	R20,Y+11
(0137) }
(0138) 
(0139) void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
(0140) {
(0141) 	sint8 i;
(0142) 
(0143) 	speaData(dat,length);
    00311 8348      ST	Y,R20
    00312 810F      LDD	R16,Y+7
    00313 8518      LDD	R17,Y+8
    00314 8529      LDD	R18,Y+9
    00315 853A      LDD	R19,Y+10
    00316 DD4B      RCALL	_speaData
(0144) 	lcd_set_xy(x,y);
    00317 2D2C      MOV	R18,R12
    00318 2D0A      MOV	R16,R10
    00319 DFB2      RCALL	_lcd_set_xy
(0145) 	delay50us(40);
    0031A E208      LDI	R16,0x28
    0031B E010      LDI	R17,0
    0031C DED6      RCALL	_delay50us
(0146) 	for(i=length-1;i>=0;i--)
    0031D 5041      SUBI	R20,1
    0031E C01E      RJMP	0x033D
(0147) 	{
(0148) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    0031F E889      LDI	R24,0x89
    00320 E090      LDI	R25,0
    00321 2FE4      MOV	R30,R20
    00322 27FF      CLR	R31
    00323 FDE7      SBRC	R30,7
    00324 95F0      COM	R31
    00325 0FE8      ADD	R30,R24
    00326 1FF9      ADC	R31,R25
    00327 8180      LD	R24,Z
    00328 2799      CLR	R25
    00329 96C0      ADIW	R24,0x30
    0032A 019C      MOVW	R18,R24
    0032B 702F      ANDI	R18,0xF
    0032C 7030      ANDI	R19,0
    0032D 0F22      LSL	R18
    0032E 1F33      ROL	R19
    0032F 0F22      LSL	R18
    00330 1F33      ROL	R19
    00331 0F22      LSL	R18
    00332 1F33      ROL	R19
    00333 0F22      LSL	R18
    00334 1F33      ROL	R19
    00335 018C      MOVW	R16,R24
    00336 7F00      ANDI	R16,0xF0
    00337 7010      ANDI	R17,0
    00338 DF86      RCALL	_lcd_wrDat
(0149) 		delay50us(40); 
    00339 E208      LDI	R16,0x28
    0033A E010      LDI	R17,0
    0033B DEB7      RCALL	_delay50us
    0033C 954A      DEC	R20
    0033D 3040      CPI	R20,0
    0033E F704      BGE	0x031F
    0033F 9621      ADIW	R28,1
    00340 940C 0556 JMP	pop_xgset303C
_lcd_putd:
  effectLen            --> R22
  i                    --> R20
  length               --> R10
  dat                  --> Y,+11
  y                    --> R14
  x                    --> R12
    00342 940E 0536 CALL	push_xgsetF0FC
    00344 2EE2      MOV	R14,R18
    00345 2EC0      MOV	R12,R16
    00346 9721      SBIW	R28,1
    00347 84AF      LDD	R10,Y+15
(0150) 	}
(0151) }
(0152) 
(0153) void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
(0154) {
(0155) 	sint8 i;
(0156) 	sint8 effectLen;
(0157) 
(0158) 	if(dat>999999)
    00348 E38F      LDI	R24,0x3F
    00349 E492      LDI	R25,0x42
    0034A E0AF      LDI	R26,0xF
    0034B E0B0      LDI	R27,0
    0034C 842B      LDD	R2,Y+11
    0034D 843C      LDD	R3,Y+12
    0034E 844D      LDD	R4,Y+13
    0034F 845E      LDD	R5,Y+14
    00350 1582      CP	R24,R2
    00351 0593      CPC	R25,R3
    00352 05A4      CPC	R26,R4
    00353 05B5      CPC	R27,R5
    00354 F410      BCC	0x0357
(0159) 		effectLen=7;
    00355 E067      LDI	R22,7
    00356 C04C      RJMP	0x03A3
(0160) 	else if(dat>99999)
    00357 E98F      LDI	R24,0x9F
    00358 E896      LDI	R25,0x86
    00359 E0A1      LDI	R26,1
    0035A E0B0      LDI	R27,0
    0035B 842B      LDD	R2,Y+11
    0035C 843C      LDD	R3,Y+12
    0035D 844D      LDD	R4,Y+13
    0035E 845E      LDD	R5,Y+14
    0035F 1582      CP	R24,R2
    00360 0593      CPC	R25,R3
    00361 05A4      CPC	R26,R4
    00362 05B5      CPC	R27,R5
    00363 F410      BCC	0x0366
(0161) 		effectLen=6;
    00364 E066      LDI	R22,6
    00365 C03D      RJMP	0x03A3
(0162) 	else if(dat>9999)
    00366 E08F      LDI	R24,0xF
    00367 E297      LDI	R25,0x27
    00368 E0A0      LDI	R26,0
    00369 E0B0      LDI	R27,0
    0036A 842B      LDD	R2,Y+11
    0036B 843C      LDD	R3,Y+12
    0036C 844D      LDD	R4,Y+13
    0036D 845E      LDD	R5,Y+14
    0036E 1582      CP	R24,R2
    0036F 0593      CPC	R25,R3
    00370 05A4      CPC	R26,R4
    00371 05B5      CPC	R27,R5
    00372 F410      BCC	0x0375
(0163) 		effectLen=5;
    00373 E065      LDI	R22,5
    00374 C02E      RJMP	0x03A3
(0164) 	else if(dat>999)
    00375 EE87      LDI	R24,0xE7
    00376 E093      LDI	R25,3
    00377 E0A0      LDI	R26,0
    00378 E0B0      LDI	R27,0
    00379 842B      LDD	R2,Y+11
    0037A 843C      LDD	R3,Y+12
    0037B 844D      LDD	R4,Y+13
    0037C 845E      LDD	R5,Y+14
    0037D 1582      CP	R24,R2
    0037E 0593      CPC	R25,R3
    0037F 05A4      CPC	R26,R4
    00380 05B5      CPC	R27,R5
    00381 F410      BCC	0x0384
(0165) 		effectLen=4;
    00382 E064      LDI	R22,4
    00383 C01F      RJMP	0x03A3
(0166) 	else if(dat>99)
    00384 E683      LDI	R24,0x63
    00385 E090      LDI	R25,0
    00386 E0A0      LDI	R26,0
    00387 E0B0      LDI	R27,0
    00388 842B      LDD	R2,Y+11
    00389 843C      LDD	R3,Y+12
    0038A 844D      LDD	R4,Y+13
    0038B 845E      LDD	R5,Y+14
    0038C 1582      CP	R24,R2
    0038D 0593      CPC	R25,R3
    0038E 05A4      CPC	R26,R4
    0038F 05B5      CPC	R27,R5
    00390 F410      BCC	0x0393
(0167) 		effectLen=3;
    00391 E063      LDI	R22,3
    00392 C010      RJMP	0x03A3
(0168) 	else if(dat>9)
    00393 E089      LDI	R24,0x9
    00394 E090      LDI	R25,0
    00395 E0A0      LDI	R26,0
    00396 E0B0      LDI	R27,0
    00397 842B      LDD	R2,Y+11
    00398 843C      LDD	R3,Y+12
    00399 844D      LDD	R4,Y+13
    0039A 845E      LDD	R5,Y+14
    0039B 1582      CP	R24,R2
    0039C 0593      CPC	R25,R3
    0039D 05A4      CPC	R26,R4
    0039E 05B5      CPC	R27,R5
    0039F F410      BCC	0x03A2
(0169) 		effectLen=2;
    003A0 E062      LDI	R22,2
    003A1 C001      RJMP	0x03A3
(0170) 	else
(0171) 		effectLen=1;
    003A2 E061      LDI	R22,1
(0172) 	speaData(dat,effectLen);
    003A3 8368      ST	Y,R22
    003A4 850B      LDD	R16,Y+11
    003A5 851C      LDD	R17,Y+12
    003A6 852D      LDD	R18,Y+13
    003A7 853E      LDD	R19,Y+14
    003A8 DCB9      RCALL	_speaData
(0173) 
(0174) 	lcd_set_xy(x,y);
    003A9 2D2E      MOV	R18,R14
    003AA 2D0C      MOV	R16,R12
    003AB DF20      RCALL	_lcd_set_xy
(0175) 	delay50us(40); 
    003AC E208      LDI	R16,0x28
    003AD E010      LDI	R17,0
    003AE DE44      RCALL	_delay50us
(0176) 	if(length>effectLen)
    003AF 2E26      MOV	R2,R22
    003B0 2433      CLR	R3
    003B1 FC27      SBRC	R2,7
    003B2 9430      COM	R3
    003B3 2C4A      MOV	R4,R10
    003B4 2455      CLR	R5
    003B5 1424      CP	R2,R4
    003B6 0435      CPC	R3,R5
    003B7 F46C      BGE	0x03C5
(0177) 	{
(0178) 		for(i=length-effectLen-1;i>=0;i--)
    003B8 2D44      MOV	R20,R4
    003B9 1B46      SUB	R20,R22
    003BA 5041      SUBI	R20,1
    003BB C007      RJMP	0x03C3
(0179) 		{
(0180) 			lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
    003BC 2722      CLR	R18
    003BD E200      LDI	R16,0x20
    003BE DF00      RCALL	_lcd_wrDat
(0181) 			delay50us(40); 
    003BF E208      LDI	R16,0x28
    003C0 E010      LDI	R17,0
    003C1 DE31      RCALL	_delay50us
    003C2 954A      DEC	R20
    003C3 3040      CPI	R20,0
    003C4 F7BC      BGE	0x03BC
(0182) 		}
(0183) 	}
(0184) 	for(i=effectLen-1;i>=0;i--)
    003C5 2F46      MOV	R20,R22
    003C6 5041      SUBI	R20,1
    003C7 C01E      RJMP	0x03E6
(0185) 	{
(0186) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    003C8 E889      LDI	R24,0x89
    003C9 E090      LDI	R25,0
    003CA 2FE4      MOV	R30,R20
    003CB 27FF      CLR	R31
    003CC FDE7      SBRC	R30,7
    003CD 95F0      COM	R31
    003CE 0FE8      ADD	R30,R24
    003CF 1FF9      ADC	R31,R25
    003D0 8180      LD	R24,Z
    003D1 2799      CLR	R25
    003D2 96C0      ADIW	R24,0x30
    003D3 019C      MOVW	R18,R24
    003D4 702F      ANDI	R18,0xF
    003D5 7030      ANDI	R19,0
    003D6 0F22      LSL	R18
    003D7 1F33      ROL	R19
    003D8 0F22      LSL	R18
    003D9 1F33      ROL	R19
    003DA 0F22      LSL	R18
    003DB 1F33      ROL	R19
    003DC 0F22      LSL	R18
    003DD 1F33      ROL	R19
    003DE 018C      MOVW	R16,R24
    003DF 7F00      ANDI	R16,0xF0
    003E0 7010      ANDI	R17,0
    003E1 DEDD      RCALL	_lcd_wrDat
(0187) 		delay50us(40);
    003E2 E208      LDI	R16,0x28
    003E3 E010      LDI	R17,0
    003E4 DE0E      RCALL	_delay50us
    003E5 954A      DEC	R20
    003E6 3040      CPI	R20,0
    003E7 F704      BGE	0x03C8
    003E8 9621      ADIW	R28,1
    003E9 940C 052B JMP	pop_xgsetF0FC
_lcd_puts:
  str                  --> R20
  y                    --> R12
  x                    --> R10
    003EB 940E 054F CALL	push_xgset303C
    003ED 2EC2      MOV	R12,R18
    003EE 2EA0      MOV	R10,R16
    003EF 814E      LDD	R20,Y+6
    003F0 815F      LDD	R21,Y+7
(0188) 	}
(0189) }
(0190) 
(0191) void lcd_puts(uint8 x,uint8 y,uint8 *str)
(0192) { 
(0193) 	lcd_set_xy(x,y);
    003F1 2D2C      MOV	R18,R12
    003F2 2D0A      MOV	R16,R10
    003F3 DED8      RCALL	_lcd_set_xy
(0194) 	delay50us(20);   
    003F4 E104      LDI	R16,0x14
    003F5 E010      LDI	R17,0
    003F6 DDFC      RCALL	_delay50us
    003F7 C00F      RJMP	0x0407
(0195) 	while(*str)
(0196) 	{
(0197) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    003F8 01FA      MOVW	R30,R20
    003F9 8020      LD	R2,Z
    003FA 2433      CLR	R3
    003FB 2D22      MOV	R18,R2
    003FC 702F      ANDI	R18,0xF
    003FD 702F      ANDI	R18,0xF
    003FE 9522      SWAP	R18
    003FF 2D02      MOV	R16,R2
    00400 7F00      ANDI	R16,0xF0
    00401 DEBD      RCALL	_lcd_wrDat
(0198) 		str++;
    00402 5F4F      SUBI	R20,0xFF
    00403 4F5F      SBCI	R21,0xFF
(0199) 		delay50us(20);
    00404 E104      LDI	R16,0x14
    00405 E010      LDI	R17,0
    00406 DDEC      RCALL	_delay50us
    00407 01FA      MOVW	R30,R20
    00408 8020      LD	R2,Z
    00409 2022      TST	R2
    0040A F769      BNE	0x03F8
    0040B 940C 0556 JMP	pop_xgset303C
_lcd_puts_:
  dlyMs                --> R10
  str                  --> R20
  y                    --> R14
  x                    --> R12
    0040D 940E 0538 CALL	push_xgset30FC
    0040F 2EE2      MOV	R14,R18
    00410 2EC0      MOV	R12,R16
    00411 8548      LDD	R20,Y+8
    00412 8559      LDD	R21,Y+9
    00413 84AA      LDD	R10,Y+10
(0200) 	} 
(0201) }
(0202) 
(0203) void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
(0204) { 
(0205) 	lcd_set_xy(x,y);
    00414 2D2E      MOV	R18,R14
    00415 2D0C      MOV	R16,R12
    00416 DEB5      RCALL	_lcd_set_xy
(0206) 	delay50us(20);   
    00417 E104      LDI	R16,0x14
    00418 E010      LDI	R17,0
    00419 DDD9      RCALL	_delay50us
    0041A C00F      RJMP	0x042A
(0207) 	while(*str)
(0208) 	{
(0209) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    0041B 01FA      MOVW	R30,R20
    0041C 8020      LD	R2,Z
    0041D 2433      CLR	R3
    0041E 2D22      MOV	R18,R2
    0041F 702F      ANDI	R18,0xF
    00420 702F      ANDI	R18,0xF
    00421 9522      SWAP	R18
    00422 2D02      MOV	R16,R2
    00423 7F00      ANDI	R16,0xF0
    00424 DE9A      RCALL	_lcd_wrDat
(0210) 		str++;
    00425 5F4F      SUBI	R20,0xFF
    00426 4F5F      SBCI	R21,0xFF
(0211) 		delay50ms(dlyMs);
    00427 2D0A      MOV	R16,R10
    00428 2711      CLR	R17
    00429 DDD9      RCALL	_delay50ms
    0042A 01FA      MOVW	R30,R20
    0042B 8020      LD	R2,Z
    0042C 2022      TST	R2
    0042D F769      BNE	0x041B
    0042E 940C 0522 JMP	pop_xgset30FC
(0212) 	} 
(0213) }
(0214) 
(0215) void lcd_clr()
(0216) {
(0217) 	lcd_wrCmd(0x00,0x10);
_lcd_clr:
    00430 E120      LDI	R18,0x10
    00431 2700      CLR	R16
    00432 DE7F      RCALL	_lcd_wrCmd
(0218) 	delay50us(200);
    00433 EC08      LDI	R16,0xC8
    00434 E010      LDI	R17,0
    00435 CDBD      RJMP	_delay50us
(0219) }
(0220) 
(0221) void lcd_init(void)
(0222) {
(0223) 	SPI_init();	
_lcd_init:
    00436 DE6E      RCALL	_SPI_init
(0224) 	//OUT_LCD_CS;		//若LCD_CS
(0225) 	//SET_LCD_CS;		
(0226) 	delay50ms(1);
    00437 E001      LDI	R16,1
    00438 E010      LDI	R17,0
    00439 DDC9      RCALL	_delay50ms
(0227) 	lcd_wrCmd(0x30,0x30);	//使用8位控制界面,使用基本指令集
    0043A E320      LDI	R18,0x30
    0043B E300      LDI	R16,0x30
    0043C DE75      RCALL	_lcd_wrCmd
(0228) 	//lcd_wrCmd(0x00,0xF0);	//整体显示ON
(0229) 	lcd_wrCmd(0x00,0xC0);	//整体显示ON
    0043D EC20      LDI	R18,0xC0
    0043E 2700      CLR	R16
    0043F DE72      RCALL	_lcd_wrCmd
(0230) 	lcd_wrCmd(0x00,0x10);	//清屏
    00440 E120      LDI	R18,0x10
    00441 2700      CLR	R16
    00442 DE6F      RCALL	_lcd_wrCmd
(0231) 	//lcd_wrCmd(0x10,0x00);	//光标
(0232) 	lcd_wrCmd(0x00,0x60);
    00443 E620      LDI	R18,0x60
    00444 2700      CLR	R16
    00445 DE6C      RCALL	_lcd_wrCmd
(0233) 	//lcd_wrCmd(0x00,0x70);	//显示右移
(0234) 	delay50ms(1);		//不可省去！！！
    00446 E001      LDI	R16,1
    00447 E010      LDI	R17,0
    00448 CDBA      RJMP	_delay50ms
_main:
  tmp                  --> R10
    00449 9725      SBIW	R28,5
FILE: E:\吴泽备份\DVK501光盘内容\STK16_~1.0\DS18B20_温度测量\DS18B20_LCD12864\DS18B20.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                            
(0004) 项目名称:   DS18B20（LCD12864版）示例程序
(0005) 		
(0006) 目标系统:   “DVK501” && “M16+ EX”
(0007) 
(0008) 应用软件:   ICCAVR 6.31A                                             
(0009) 		                                                                
(0010) 版    本:   V1.0 
(0011)                                                         
(0012) 圆版时间:   2009-7-1
(0013) 
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 		
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 通过LCD12864观察由DS18B20转换而来的温度
(0028) ----------------------------------------------------------------------
(0029) 硬件连接： 
(0030) 		 	  DVK501				ATmega16
(0031) 			DQ(onewire)	---------	  PB2
(0032) 			CS(LCD)	    ---------	  VCC
(0033) 			PSB			---------	  GND
(0034) 			SID			---------	  PB5
(0035) 			SCK			---------	  PB7
(0036) ----------------------------------------------------------------------
(0037) 注意事项：
(0038) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0039) （2）请详细阅读“使用必读”及相关资料。
(0040) ----------------------------------------------------------------------
(0041) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0042) #include <iom16v.h>
(0043) #include <macros.h>
(0044) #include "D:\ICC_H\CmmICC.H"
(0045) /*使用PB0口*/
(0046) #define DDRx DDRB
(0047) #define PORTx PORTB
(0048) #define PINx PINB
(0049) #define ds18b20_dq 2
(0050) #include "D:\ICC_H\DS18B20_DVK501.H"
(0051) #include "D:\ICC_H\LCD12864_ST7920.H"
(0052) //----端口初始化----
(0053) 
(0054) void main(void)
(0055) {	
(0056) 	uchar tmp=0;	
    0044A 24AA      CLR	R10
(0057) 	lcd_init();
    0044B DFEA      RCALL	_lcd_init
(0058) 	lcd_clr();
    0044C DFE3      RCALL	_lcd_clr
(0059) 	lcd_puts(1,1,"DS18B20-LCD12864");
    0044D E788      LDI	R24,0x78
    0044E E090      LDI	R25,0
    0044F 8399      STD	Y+1,R25
    00450 8388      ST	Y,R24
    00451 E021      LDI	R18,1
    00452 E001      LDI	R16,1
    00453 DF97      RCALL	_lcd_puts
(0060) 	lcd_puts(2,1,"液晶显示温度");
    00454 E68B      LDI	R24,0x6B
    00455 E090      LDI	R25,0
    00456 8399      STD	Y+1,R25
    00457 8388      ST	Y,R24
    00458 E021      LDI	R18,1
    00459 E002      LDI	R16,2
    0045A DF90      RCALL	_lcd_puts
(0061) 	lcd_puts(3,1,"温度:   ℃");
    0045B E680      LDI	R24,0x60
    0045C E090      LDI	R25,0
    0045D 8399      STD	Y+1,R25
    0045E 8388      ST	Y,R24
    0045F E021      LDI	R18,1
    00460 E003      LDI	R16,3
    00461 DF89      RCALL	_lcd_puts
    00462 C012      RJMP	0x0475
(0062) 	
(0063) 	while(1)
(0064) 	{
(0065) 		delay50ms(20);
    00463 E104      LDI	R16,0x14
    00464 E010      LDI	R17,0
    00465 DD9D      RCALL	_delay50ms
(0066) 		tmp=read_temperature();
    00466 DE21      RCALL	_read_temperature
    00467 2EA0      MOV	R10,R16
(0067) 		lcd_putd(3,4,tmp,1);	//把转换出来温度通过lcd显示
FILE: <library>
    00468 E081      LDI	R24,1
    00469 838C      STD	Y+4,R24
    0046A 2C2A      MOV	R2,R10
    0046B 2433      CLR	R3
    0046C 2444      CLR	R4
    0046D 2455      CLR	R5
    0046E 8228      ST	Y,R2
    0046F 8239      STD	Y+1,R3
    00470 824A      STD	Y+2,R4
    00471 825B      STD	Y+3,R5
    00472 E024      LDI	R18,4
    00473 E003      LDI	R16,3
    00474 DECD      RCALL	_lcd_putd
    00475 CFED      RJMP	0x0463
    00476 9625      ADIW	R28,5
    00477 9508      RET
push_arg4:
    00478 933A      ST	-Y,R19
    00479 932A      ST	-Y,R18
push_arg2:
    0047A 931A      ST	-Y,R17
    0047B 930A      ST	-Y,R16
    0047C 9508      RET
div32u:
    0047D 94E8      BCLR	6
    0047E C001      RJMP	0x0480
mod32u:
    0047F 9468      BSET	6
    00480 D030      RCALL	long_div_prolog
    00481 24CC      CLR	R12
    00482 C009      RJMP	0x048C
div32s:
    00483 94E8      BCLR	6
    00484 C001      RJMP	0x0486
mod32s:
    00485 9468      BSET	6
    00486 D02A      RCALL	long_div_prolog
    00487 FD37      SBRC	R19,7
    00488 940E 056F CALL	neg32
    0048A FDB7      SBRC	R27,7
    0048B D052      RCALL	neg_R24_R27
    0048C 2477      CLR	R7
    0048D 2488      CLR	R8
    0048E 2499      CLR	R9
    0048F 24AA      CLR	R10
    00490 24BB      CLR	R11
    00491 D042      RCALL	tst_R16_R19
    00492 F0C1      BEQ	0x04AB
    00493 D045      RCALL	tst_R24_R27
    00494 F0B1      BEQ	0x04AB
    00495 E2E8      LDI	R30,0x28
    00496 0F00      LSL	R16
    00497 1F11      ROL	R17
    00498 1F22      ROL	R18
    00499 1F33      ROL	R19
    0049A 1C77      ROL	R7
    0049B 1C88      ROL	R8
    0049C 1C99      ROL	R9
    0049D 1CAA      ROL	R10
    0049E 1CBB      ROL	R11
    0049F 1688      CP	R8,R24
    004A0 0699      CPC	R9,R25
    004A1 06AA      CPC	R10,R26
    004A2 06BB      CPC	R11,R27
    004A3 F028      BCS	0x04A9
    004A4 1A88      SUB	R8,R24
    004A5 0A99      SBC	R9,R25
    004A6 0AAA      SBC	R10,R26
    004A7 0ABB      SBC	R11,R27
    004A8 9503      INC	R16
    004A9 95EA      DEC	R30
    004AA F759      BNE	0x0496
    004AB F426      BRTC	0x04B0
    004AC 2D08      MOV	R16,R8
    004AD 2D19      MOV	R17,R9
    004AE 2D2A      MOV	R18,R10
    004AF 2D3B      MOV	R19,R11
    004B0 C013      RJMP	long_div_epilog
long_div_prolog:
    004B1 927A      ST	-Y,R7
    004B2 928A      ST	-Y,R8
    004B3 929A      ST	-Y,R9
    004B4 92AA      ST	-Y,R10
    004B5 92BA      ST	-Y,R11
    004B6 92CA      ST	-Y,R12
    004B7 93EA      ST	-Y,R30
    004B8 938A      ST	-Y,R24
    004B9 939A      ST	-Y,R25
    004BA 93AA      ST	-Y,R26
    004BB 93BA      ST	-Y,R27
    004BC 858B      LDD	R24,Y+11
    004BD 859C      LDD	R25,Y+12
    004BE 85AD      LDD	R26,Y+13
    004BF 85BE      LDD	R27,Y+14
    004C0 2EC3      MOV	R12,R19
    004C1 F00E      BRTS	0x04C3
    004C2 26CB      EOR	R12,R27
    004C3 9508      RET
long_div_epilog:
    004C4 FCC7      SBRC	R12,7
    004C5 940E 056F CALL	neg32
    004C7 91B9      LD	R27,Y+
    004C8 91A9      LD	R26,Y+
    004C9 9199      LD	R25,Y+
    004CA 9189      LD	R24,Y+
    004CB 91E9      LD	R30,Y+
    004CC 90C9      LD	R12,Y+
    004CD 90B9      LD	R11,Y+
    004CE 90A9      LD	R10,Y+
    004CF 9099      LD	R9,Y+
    004D0 9089      LD	R8,Y+
    004D1 9079      LD	R7,Y+
    004D2 9624      ADIW	R28,4
    004D3 9508      RET
tst_R16_R19:
    004D4 2FE0      MOV	R30,R16
    004D5 2BE1      OR	R30,R17
    004D6 2BE2      OR	R30,R18
    004D7 2BE3      OR	R30,R19
    004D8 9508      RET
tst_R24_R27:
    004D9 2FE8      MOV	R30,R24
    004DA 2BE9      OR	R30,R25
    004DB 2BEA      OR	R30,R26
    004DC 2BEB      OR	R30,R27
    004DD 9508      RET
neg_R24_R27:
    004DE 9580      COM	R24
    004DF 9590      COM	R25
    004E0 95A0      COM	R26
    004E1 95B0      COM	R27
    004E2 5F8F      SUBI	R24,0xFF
    004E3 4F9F      SBCI	R25,0xFF
    004E4 4FAF      SBCI	R26,0xFF
    004E5 4FBF      SBCI	R27,0xFF
    004E6 9508      RET
empy32u|empy32s:
    004E7 940E 0578 CALL	long_prolog
    004E9 927A      ST	-Y,R7
    004EA 940E 0591 CALL	tstzero1
    004EC F159      BEQ	0x0518
    004ED 2477      CLR	R7
    004EE 940E 0597 CALL	tstzero2
    004F0 F419      BNE	0x04F4
    004F1 018C      MOVW	R16,R24
    004F2 019D      MOVW	R18,R26
    004F3 C024      RJMP	0x0518
    004F4 920A      ST	-Y,R0
    004F5 921A      ST	-Y,R1
    004F6 9F08      MUL	R16,R24
    004F7 2CB0      MOV	R11,R0
    004F8 2CA1      MOV	R10,R1
    004F9 9F28      MUL	R18,R24
    004FA 2C90      MOV	R9,R0
    004FB 2C81      MOV	R8,R1
    004FC 9F18      MUL	R17,R24
    004FD 0CA0      ADD	R10,R0
    004FE 1C91      ADC	R9,R1
    004FF 1C87      ADC	R8,R7
    00500 9F09      MUL	R16,R25
    00501 0CA0      ADD	R10,R0
    00502 1C91      ADC	R9,R1
    00503 1C87      ADC	R8,R7
    00504 9F19      MUL	R17,R25
    00505 0C90      ADD	R9,R0
    00506 1C81      ADC	R8,R1
    00507 9F0A      MUL	R16,R26
    00508 0C90      ADD	R9,R0
    00509 1C81      ADC	R8,R1
    0050A 9F38      MUL	R19,R24
    0050B 0C80      ADD	R8,R0
    0050C 9F29      MUL	R18,R25
    0050D 0C80      ADD	R8,R0
    0050E 9F1A      MUL	R17,R26
    0050F 0C80      ADD	R8,R0
    00510 9F0B      MUL	R16,R27
    00511 0C80      ADD	R8,R0
    00512 9019      LD	R1,Y+
    00513 9009      LD	R0,Y+
    00514 2D0B      MOV	R16,R11
    00515 2D1A      MOV	R17,R10
    00516 2D29      MOV	R18,R9
    00517 2D38      MOV	R19,R8
    00518 9079      LD	R7,Y+
    00519 940C 0586 JMP	long_epilog
pop_xgset00FC:
    0051B 90A9      LD	R10,Y+
    0051C 90B9      LD	R11,Y+
    0051D 90C9      LD	R12,Y+
    0051E 90D9      LD	R13,Y+
    0051F 90E9      LD	R14,Y+
    00520 90F9      LD	R15,Y+
    00521 9508      RET
pop_xgset30FC:
    00522 90A9      LD	R10,Y+
    00523 90B9      LD	R11,Y+
    00524 90C9      LD	R12,Y+
    00525 90D9      LD	R13,Y+
    00526 90E9      LD	R14,Y+
    00527 90F9      LD	R15,Y+
    00528 9149      LD	R20,Y+
    00529 9159      LD	R21,Y+
    0052A 9508      RET
pop_xgsetF0FC:
    0052B 90A9      LD	R10,Y+
    0052C 90B9      LD	R11,Y+
    0052D 90C9      LD	R12,Y+
    0052E 90D9      LD	R13,Y+
    0052F 90E9      LD	R14,Y+
    00530 90F9      LD	R15,Y+
    00531 9149      LD	R20,Y+
    00532 9159      LD	R21,Y+
    00533 9169      LD	R22,Y+
    00534 9179      LD	R23,Y+
    00535 9508      RET
push_xgsetF0FC:
    00536 937A      ST	-Y,R23
    00537 936A      ST	-Y,R22
push_xgset30FC:
    00538 935A      ST	-Y,R21
    00539 934A      ST	-Y,R20
push_xgset00FC:
    0053A 92FA      ST	-Y,R15
    0053B 92EA      ST	-Y,R14
push_xgset003C:
    0053C 92DA      ST	-Y,R13
    0053D 92CA      ST	-Y,R12
    0053E 92BA      ST	-Y,R11
    0053F 92AA      ST	-Y,R10
    00540 9508      RET
push_xgsetF00C:
    00541 937A      ST	-Y,R23
    00542 936A      ST	-Y,R22
    00543 935A      ST	-Y,R21
    00544 934A      ST	-Y,R20
    00545 92BA      ST	-Y,R11
    00546 92AA      ST	-Y,R10
    00547 9508      RET
pop_xgsetF00C:
    00548 90A9      LD	R10,Y+
    00549 90B9      LD	R11,Y+
    0054A 9149      LD	R20,Y+
    0054B 9159      LD	R21,Y+
    0054C 9169      LD	R22,Y+
    0054D 9179      LD	R23,Y+
    0054E 9508      RET
push_xgset303C:
    0054F 935A      ST	-Y,R21
    00550 934A      ST	-Y,R20
    00551 92DA      ST	-Y,R13
    00552 92CA      ST	-Y,R12
    00553 92BA      ST	-Y,R11
    00554 92AA      ST	-Y,R10
    00555 9508      RET
pop_xgset303C:
    00556 90A9      LD	R10,Y+
    00557 90B9      LD	R11,Y+
    00558 90C9      LD	R12,Y+
    00559 90D9      LD	R13,Y+
    0055A 9149      LD	R20,Y+
    0055B 9159      LD	R21,Y+
    0055C 9508      RET
push_xgsetF03C:
    0055D 937A      ST	-Y,R23
    0055E 936A      ST	-Y,R22
    0055F 935A      ST	-Y,R21
    00560 934A      ST	-Y,R20
    00561 92DA      ST	-Y,R13
    00562 92CA      ST	-Y,R12
    00563 92BA      ST	-Y,R11
    00564 92AA      ST	-Y,R10
    00565 9508      RET
pop_xgsetF03C:
    00566 90A9      LD	R10,Y+
    00567 90B9      LD	R11,Y+
    00568 90C9      LD	R12,Y+
    00569 90D9      LD	R13,Y+
    0056A 9149      LD	R20,Y+
    0056B 9159      LD	R21,Y+
    0056C 9169      LD	R22,Y+
    0056D 9179      LD	R23,Y+
    0056E 9508      RET
neg32:
    0056F 9500      COM	R16
    00570 9510      COM	R17
    00571 9520      COM	R18
    00572 9530      COM	R19
    00573 5F0F      SUBI	R16,0xFF
    00574 4F1F      SBCI	R17,0xFF
    00575 4F2F      SBCI	R18,0xFF
    00576 4F3F      SBCI	R19,0xFF
    00577 9508      RET
long_prolog:
    00578 928A      ST	-Y,R8
    00579 929A      ST	-Y,R9
    0057A 92AA      ST	-Y,R10
    0057B 92BA      ST	-Y,R11
    0057C 93EA      ST	-Y,R30
    0057D 938A      ST	-Y,R24
    0057E 939A      ST	-Y,R25
    0057F 93AA      ST	-Y,R26
    00580 93BA      ST	-Y,R27
    00581 8589      LDD	R24,Y+9
    00582 859A      LDD	R25,Y+10
    00583 85AB      LDD	R26,Y+11
    00584 85BC      LDD	R27,Y+12
    00585 9508      RET
long_epilog:
    00586 91B9      LD	R27,Y+
    00587 91A9      LD	R26,Y+
    00588 9199      LD	R25,Y+
    00589 9189      LD	R24,Y+
    0058A 91E9      LD	R30,Y+
    0058B 90B9      LD	R11,Y+
    0058C 90A9      LD	R10,Y+
    0058D 9099      LD	R9,Y+
    0058E 9089      LD	R8,Y+
    0058F 9624      ADIW	R28,4
    00590 9508      RET
tstzero1:
    00591 27EE      CLR	R30
    00592 2BE0      OR	R30,R16
    00593 2BE1      OR	R30,R17
    00594 2BE2      OR	R30,R18
    00595 2BE3      OR	R30,R19
    00596 9508      RET
tstzero2:
    00597 27EE      CLR	R30
    00598 2BE8      OR	R30,R24
    00599 2BE9      OR	R30,R25
    0059A 2BEA      OR	R30,R26
    0059B 2BEB      OR	R30,R27
    0059C 9508      RET
