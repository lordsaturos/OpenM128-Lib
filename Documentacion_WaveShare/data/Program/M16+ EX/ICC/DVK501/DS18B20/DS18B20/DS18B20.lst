Interrupt Vectors
    00000 940C 002A JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0002A E5CF      LDI	R28,0x5F
    0002B E0D4      LDI	R29,4
    0002C BFCD      OUT	0x3D,R28
    0002D BFDE      OUT	0x3E,R29
    0002E 51C0      SUBI	R28,0x10
    0002F 40D0      SBCI	R29,0
    00030 EA0A      LDI	R16,0xAA
    00031 8308      ST	Y,R16
    00032 2400      CLR	R0
    00033 E6E0      LDI	R30,0x60
    00034 E0F0      LDI	R31,0
    00035 E010      LDI	R17,0
    00036 36E6      CPI	R30,0x66
    00037 07F1      CPC	R31,R17
    00038 F011      BEQ	0x003B
    00039 9201      ST	Z+,R0
    0003A CFFB      RJMP	0x0036
    0003B 8300      ST	Z,R16
    0003C E5E4      LDI	R30,0x54
    0003D E0F0      LDI	R31,0
    0003E E6A0      LDI	R26,0x60
    0003F E0B0      LDI	R27,0
    00040 E010      LDI	R17,0
    00041 E000      LDI	R16,0
    00042 BF0B      OUT	0x3B,R16
    00043 35E4      CPI	R30,0x54
    00044 07F1      CPC	R31,R17
    00045 F021      BEQ	0x004A
    00046 95C8      LPM
    00047 9631      ADIW	R30,1
    00048 920D      ST	X+,R0
    00049 CFF9      RJMP	0x0043
    0004A 940E 0290 CALL	_main
_exit:
    0004C CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0004D 940E 029A CALL	push_arg4
    0004F 940E 0363 CALL	push_xgsetF03C
    00051 9728      SBIW	R28,0x8
    00052 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00053 24AA      CLR	R10
    00054 E081      LDI	R24,1
    00055 8388      ST	Y,R24
    00056 E080      LDI	R24,0
    00057 8389      STD	Y+1,R24
    00058 838A      STD	Y+2,R24
    00059 838B      STD	Y+3,R24
    0005A C03C      RJMP	0x0097
(0120)     {
(0121)         y=dat/j;
    0005B 8028      LD	R2,Y
    0005C 8039      LDD	R3,Y+1
    0005D 804A      LDD	R4,Y+2
    0005E 805B      LDD	R5,Y+3
    0005F 8908      LDD	R16,Y+16
    00060 8919      LDD	R17,Y+17
    00061 892A      LDD	R18,Y+18
    00062 893B      LDD	R19,Y+19
    00063 925A      ST	-Y,R5
    00064 924A      ST	-Y,R4
    00065 923A      ST	-Y,R3
    00066 922A      ST	-Y,R2
    00067 940E 029F CALL	div32u
    00069 830C      STD	Y+4,R16
    0006A 831D      STD	Y+5,R17
    0006B 832E      STD	Y+6,R18
    0006C 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0006D E04A      LDI	R20,0xA
    0006E E050      LDI	R21,0
    0006F E060      LDI	R22,0
    00070 E070      LDI	R23,0
    00071 810C      LDD	R16,Y+4
    00072 811D      LDD	R17,Y+5
    00073 812E      LDD	R18,Y+6
    00074 813F      LDD	R19,Y+7
    00075 937A      ST	-Y,R23
    00076 936A      ST	-Y,R22
    00077 935A      ST	-Y,R21
    00078 934A      ST	-Y,R20
    00079 940E 02A1 CALL	mod32u
    0007B E680      LDI	R24,0x60
    0007C E090      LDI	R25,0
    0007D 2DEA      MOV	R30,R10
    0007E 27FF      CLR	R31
    0007F 0FE8      ADD	R30,R24
    00080 1FF9      ADC	R31,R25
    00081 8300      ST	Z,R16
(0123)         j*=10;
    00082 8028      LD	R2,Y
    00083 8039      LDD	R3,Y+1
    00084 804A      LDD	R4,Y+2
    00085 805B      LDD	R5,Y+3
    00086 E04A      LDI	R20,0xA
    00087 E050      LDI	R21,0
    00088 E060      LDI	R22,0
    00089 E070      LDI	R23,0
    0008A 925A      ST	-Y,R5
    0008B 924A      ST	-Y,R4
    0008C 923A      ST	-Y,R3
    0008D 922A      ST	-Y,R2
    0008E 018A      MOVW	R16,R20
    0008F 019B      MOVW	R18,R22
    00090 940E 0309 CALL	empy32u|empy32s
    00092 8308      ST	Y,R16
    00093 8319      STD	Y+1,R17
    00094 832A      STD	Y+2,R18
    00095 833B      STD	Y+3,R19
    00096 94A3      INC	R10
    00097 2C2C      MOV	R2,R12
    00098 2433      CLR	R3
    00099 FC27      SBRC	R2,7
    0009A 9430      COM	R3
    0009B 2C4A      MOV	R4,R10
    0009C 2455      CLR	R5
    0009D 1442      CP	R4,R2
    0009E 0453      CPC	R5,R3
    0009F F40C      BGE	0x00A1
    000A0 CFBA      RJMP	0x005B
    000A1 9628      ADIW	R28,0x8
    000A2 940E 036C CALL	pop_xgsetF03C
    000A4 9624      ADIW	R28,4
    000A5 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    000A6 EA84      LDI	R24,0xA4
    000A7 BF86      OUT	0x36,R24
(0128) 	I2CWaitAck();
    000A8 B626      IN	R2,0x36
    000A9 FE27      SBRS	R2,7
    000AA CFFD      RJMP	0x00A8
(0129) 	if( I2CChkAck()!=I2C_START ) 
    000AB B181      IN	R24,0x01
    000AC 7F88      ANDI	R24,0xF8
    000AD 3088      CPI	R24,0x8
    000AE F011      BEQ	0x00B1
(0130) 		return I2C_ERR;
    000AF 2700      CLR	R16
    000B0 C001      RJMP	0x00B2
(0131) 	return I2C_CRR;
    000B1 E001      LDI	R16,1
    000B2 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    000B3 EA84      LDI	R24,0xA4
    000B4 BF86      OUT	0x36,R24
(0144) 	I2CWaitAck();
    000B5 B626      IN	R2,0x36
    000B6 FE27      SBRS	R2,7
    000B7 CFFD      RJMP	0x00B5
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    000B8 B181      IN	R24,0x01
    000B9 7F88      ANDI	R24,0xF8
    000BA 3180      CPI	R24,0x10
    000BB F011      BEQ	0x00BE
(0146) 		return I2C_ERR;
    000BC 2700      CLR	R16
    000BD C001      RJMP	0x00BF
(0147) 	return I2C_CRR;
    000BE E001      LDI	R16,1
    000BF 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    000C0 B903      OUT	0x03,R16
    000C1 E884      LDI	R24,0x84
    000C2 BF86      OUT	0x36,R24
(0160) 	I2CWaitAck();
    000C3 B626      IN	R2,0x36
    000C4 FE27      SBRS	R2,7
    000C5 CFFD      RJMP	0x00C3
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    000C6 B181      IN	R24,0x01
    000C7 7F88      ANDI	R24,0xF8
    000C8 3188      CPI	R24,0x18
    000C9 F011      BEQ	0x00CC
(0162) 		return I2C_ERR;
    000CA 2700      CLR	R16
    000CB C001      RJMP	0x00CD
(0163) 	return I2C_CRR;		
    000CC E001      LDI	R16,1
    000CD 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    000CE 92AA      ST	-Y,R10
    000CF 92BA      ST	-Y,R11
    000D0 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    000D1 FEA0      SBRS	R10,0
    000D2 C00E      RJMP	0x00E1
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    000D3 2D0A      MOV	R16,R10
    000D4 9506      LSR	R16
    000D5 9506      LSR	R16
    000D6 9506      LSR	R16
    000D7 9506      LSR	R16
    000D8 9506      LSR	R16
    000D9 9506      LSR	R16
    000DA 9506      LSR	R16
    000DB 9506      LSR	R16
    000DC DFE3      RCALL	_I2C_SendWrDAdr
    000DD 2300      TST	R16
    000DE F411      BNE	0x00E1
(0177) 			return I2C_ERR;
    000DF 2700      CLR	R16
    000E0 C007      RJMP	0x00E8
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    000E1 2D0A      MOV	R16,R10
    000E2 DFDD      RCALL	_I2C_SendWrDAdr
    000E3 2300      TST	R16
    000E4 F411      BNE	0x00E7
(0179) 		return I2C_ERR;
    000E5 2700      CLR	R16
    000E6 C001      RJMP	0x00E8
(0180) 	return I2C_CRR;
    000E7 E001      LDI	R16,1
    000E8 90B9      LD	R11,Y+
    000E9 90A9      LD	R10,Y+
    000EA 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    000EB B903      OUT	0x03,R16
    000EC E884      LDI	R24,0x84
    000ED BF86      OUT	0x36,R24
(0193) 	I2CWaitAck();
    000EE B626      IN	R2,0x36
    000EF FE27      SBRS	R2,7
    000F0 CFFD      RJMP	0x00EE
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    000F1 B181      IN	R24,0x01
    000F2 7F88      ANDI	R24,0xF8
    000F3 3480      CPI	R24,0x40
    000F4 F011      BEQ	0x00F7
(0195) 		return I2C_ERR;
    000F5 2700      CLR	R16
    000F6 C001      RJMP	0x00F8
(0196) 	return I2C_CRR;	
    000F7 E001      LDI	R16,1
    000F8 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    000F9 92AA      ST	-Y,R10
    000FA 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    000FB FEA0      SBRS	R10,0
    000FC C00E      RJMP	0x010B
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    000FD 2D0A      MOV	R16,R10
    000FE 9506      LSR	R16
    000FF 9506      LSR	R16
    00100 9506      LSR	R16
    00101 9506      LSR	R16
    00102 9506      LSR	R16
    00103 9506      LSR	R16
    00104 9506      LSR	R16
    00105 9506      LSR	R16
    00106 DFB9      RCALL	_I2C_SendWrDAdr
    00107 2300      TST	R16
    00108 F411      BNE	0x010B
(0210) 			return I2C_ERR;
    00109 2700      CLR	R16
    0010A C007      RJMP	0x0112
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    0010B 2D0A      MOV	R16,R10
    0010C DFB3      RCALL	_I2C_SendWrDAdr
    0010D 2300      TST	R16
    0010E F411      BNE	0x0111
(0212) 		return I2C_ERR;
    0010F 2700      CLR	R16
    00110 C001      RJMP	0x0112
(0213) 	return I2C_CRR;
    00111 E001      LDI	R16,1
    00112 90A9      LD	R10,Y+
    00113 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    00114 B903      OUT	0x03,R16
    00115 E884      LDI	R24,0x84
    00116 BF86      OUT	0x36,R24
(0226) 	I2CWaitAck();
    00117 B626      IN	R2,0x36
    00118 FE27      SBRS	R2,7
    00119 CFFD      RJMP	0x0117
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    0011A B181      IN	R24,0x01
    0011B 7F88      ANDI	R24,0xF8
    0011C 3288      CPI	R24,0x28
    0011D F011      BEQ	0x0120
(0228) 		return I2C_ERR;
    0011E 2700      CLR	R16
    0011F C001      RJMP	0x0121
(0229) 	return I2C_CRR;	
    00120 E001      LDI	R16,1
    00121 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    00122 E884      LDI	R24,0x84
    00123 BF86      OUT	0x36,R24
(0242) 	I2CWaitAck();
    00124 B626      IN	R2,0x36
    00125 FE27      SBRS	R2,7
    00126 CFFD      RJMP	0x0124
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    00127 B181      IN	R24,0x01
    00128 7F88      ANDI	R24,0xF8
    00129 3588      CPI	R24,0x58
    0012A F011      BEQ	0x012D
(0244) 		return I2C_ERR;
    0012B 2700      CLR	R16
    0012C C004      RJMP	0x0131
(0245) 	*pRdDat=TWDR;
    0012D B023      IN	R2,0x03
    0012E 01F8      MOVW	R30,R16
    0012F 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    00130 E001      LDI	R16,1
    00131 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    00132 EC84      LDI	R24,0xC4
    00133 BF86      OUT	0x36,R24
(0259) 	I2CWaitAck();
    00134 B626      IN	R2,0x36
    00135 FE27      SBRS	R2,7
    00136 CFFD      RJMP	0x0134
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    00137 B181      IN	R24,0x01
    00138 7F88      ANDI	R24,0xF8
    00139 3580      CPI	R24,0x50
    0013A F011      BEQ	0x013D
(0261) 		return I2C_ERR;
    0013B 2700      CLR	R16
    0013C C004      RJMP	0x0141
(0262) 	*pRdDat=TWDR;
    0013D B023      IN	R2,0x03
    0013E 01F8      MOVW	R30,R16
    0013F 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    00140 E001      LDI	R16,1
    00141 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    00142 940E 035C CALL	push_xgset00FC
    00144 2EC2      MOV	R12,R18
    00145 0178      MOVW	R14,R16
    00146 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    00147 DF5E      RCALL	_I2C_Start
    00148 2300      TST	R16
    00149 F411      BNE	0x014C
(0278) 		return I2C_ERR;
    0014A 2700      CLR	R16
    0014B C017      RJMP	0x0163
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    0014C 0187      MOVW	R16,R14
    0014D DF80      RCALL	_I2C_SendWrDAdr_
    0014E 2300      TST	R16
    0014F F411      BNE	0x0152
(0281) 		return I2C_ERR;
    00150 2700      CLR	R16
    00151 C011      RJMP	0x0163
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00152 2D0C      MOV	R16,R12
    00153 DFC0      RCALL	_I2C_SendDat
    00154 2EC0      MOV	R12,R16
    00155 2300      TST	R16
    00156 F411      BNE	0x0159
(0284) 		return I2C_ERR;
    00157 2700      CLR	R16
    00158 C00A      RJMP	0x0163
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    00159 2D0A      MOV	R16,R10
    0015A DFB9      RCALL	_I2C_SendDat
    0015B 2EA0      MOV	R10,R16
    0015C 2300      TST	R16
    0015D F411      BNE	0x0160
(0287) 		return I2C_ERR;
    0015E 2700      CLR	R16
    0015F C003      RJMP	0x0163
(0288) 
(0289) 	I2C_Stop();
    00160 E984      LDI	R24,0x94
    00161 BF86      OUT	0x36,R24
(0290) 
(0291) 	return I2C_CRR;
    00162 E001      LDI	R16,1
    00163 940C 033D JMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    00165 940E 035A CALL	push_xgset30FC
    00167 2EE2      MOV	R14,R18
    00168 01A8      MOVW	R20,R16
    00169 84C8      LDD	R12,Y+8
    0016A 84AA      LDD	R10,Y+10
    0016B 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    0016C DF39      RCALL	_I2C_Start
    0016D 2300      TST	R16
    0016E F411      BNE	0x0171
(0324) 		return I2C_ERR;
    0016F 2700      CLR	R16
    00170 C024      RJMP	0x0195
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    00171 018A      MOVW	R16,R20
    00172 DF5B      RCALL	_I2C_SendWrDAdr_
    00173 2300      TST	R16
    00174 F411      BNE	0x0177
(0327) 		return I2C_ERR;
    00175 2700      CLR	R16
    00176 C01E      RJMP	0x0195
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00177 2D0E      MOV	R16,R14
    00178 DF9B      RCALL	_I2C_SendDat
    00179 2EE0      MOV	R14,R16
    0017A 2300      TST	R16
    0017B F411      BNE	0x017E
(0330) 		return I2C_ERR;
    0017C 2700      CLR	R16
    0017D C017      RJMP	0x0195
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    0017E DF34      RCALL	_I2C_Restart
    0017F 2EE0      MOV	R14,R16
    00180 2300      TST	R16
    00181 F411      BNE	0x0184
(0333) 		return I2C_ERR;
    00182 2700      CLR	R16
    00183 C011      RJMP	0x0195
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    00184 2D0C      MOV	R16,R12
    00185 DF65      RCALL	_I2C_SendRdDAdr
    00186 2EC0      MOV	R12,R16
    00187 2300      TST	R16
    00188 F411      BNE	0x018B
(0336) 		return I2C_ERR;
    00189 2700      CLR	R16
    0018A C00A      RJMP	0x0195
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    0018B 0185      MOVW	R16,R10
    0018C DF95      RCALL	_I2C_RcvNAckDat
    0018D 2EA0      MOV	R10,R16
    0018E 2300      TST	R16
    0018F F411      BNE	0x0192
(0339) 		return I2C_ERR;
    00190 2700      CLR	R16
    00191 C003      RJMP	0x0195
(0340) 
(0341) 	I2C_Stop();
    00192 E984      LDI	R24,0x94
    00193 BF86      OUT	0x36,R24
(0342) 
(0343) 	return I2C_CRR;
    00194 E001      LDI	R16,1
    00195 940C 0344 JMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    00197 940E 0358 CALL	push_xgsetF0FC
    00199 2EE2      MOV	R14,R18
    0019A 01B8      MOVW	R22,R16
    0019B 84CA      LDD	R12,Y+10
    0019C 84AC      LDD	R10,Y+12
    0019D 84BD      LDD	R11,Y+13
    0019E 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    0019F DF06      RCALL	_I2C_Start
    001A0 2300      TST	R16
    001A1 F411      BNE	0x01A4
(0363) 		return I2C_ERR;
    001A2 2700      CLR	R16
    001A3 C038      RJMP	0x01DC
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001A4 018B      MOVW	R16,R22
    001A5 DF28      RCALL	_I2C_SendWrDAdr_
    001A6 2300      TST	R16
    001A7 F411      BNE	0x01AA
(0366) 		return I2C_ERR;
    001A8 2700      CLR	R16
    001A9 C032      RJMP	0x01DC
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001AA 2D0E      MOV	R16,R14
    001AB DF68      RCALL	_I2C_SendDat
    001AC 2EE0      MOV	R14,R16
    001AD 2300      TST	R16
    001AE F411      BNE	0x01B1
(0369) 		return I2C_ERR;
    001AF 2700      CLR	R16
    001B0 C02B      RJMP	0x01DC
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    001B1 DF01      RCALL	_I2C_Restart
    001B2 2EE0      MOV	R14,R16
    001B3 2300      TST	R16
    001B4 F411      BNE	0x01B7
(0372) 		return I2C_ERR;
    001B5 2700      CLR	R16
    001B6 C025      RJMP	0x01DC
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001B7 2D0C      MOV	R16,R12
    001B8 DF32      RCALL	_I2C_SendRdDAdr
    001B9 2EC0      MOV	R12,R16
    001BA 2300      TST	R16
    001BB F411      BNE	0x01BE
(0375) 		return I2C_ERR;
    001BC 2700      CLR	R16
    001BD C01E      RJMP	0x01DC
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    001BE 24CC      CLR	R12
    001BF C00B      RJMP	0x01CB
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    001C0 2D0C      MOV	R16,R12
    001C1 2711      CLR	R17
    001C2 0D0A      ADD	R16,R10
    001C3 1D1B      ADC	R17,R11
    001C4 DF6D      RCALL	_I2C_RcvAckDat
    001C5 2EE0      MOV	R14,R16
    001C6 2300      TST	R16
    001C7 F411      BNE	0x01CA
(0379) 			return I2C_ERR;
    001C8 2700      CLR	R16
    001C9 C012      RJMP	0x01DC
    001CA 94C3      INC	R12
    001CB 2F84      MOV	R24,R20
    001CC 5081      SUBI	R24,1
    001CD 16C8      CP	R12,R24
    001CE F388      BCS	0x01C0
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    001CF 2D0C      MOV	R16,R12
    001D0 2711      CLR	R17
    001D1 0D0A      ADD	R16,R10
    001D2 1D1B      ADC	R17,R11
    001D3 DF4E      RCALL	_I2C_RcvNAckDat
    001D4 2EA0      MOV	R10,R16
    001D5 2300      TST	R16
    001D6 F411      BNE	0x01D9
(0382) 			return I2C_ERR;
    001D7 2700      CLR	R16
    001D8 C003      RJMP	0x01DC
(0383) 
(0384) 	I2C_Stop();
    001D9 E984      LDI	R24,0x94
    001DA BF86      OUT	0x36,R24
(0385) 	
(0386) 	return I2C_CRR;
    001DB E001      LDI	R16,1
    001DC 940C 034D JMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    001DE 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    001DF C007      RJMP	0x01E7
(0108)         for(j=0;j<70;j++)	
    001E0 2744      CLR	R20
    001E1 C001      RJMP	0x01E3
    001E2 9543      INC	R20
    001E3 3446      CPI	R20,0x46
    001E4 F3E8      BCS	0x01E2
    001E5 5001      SUBI	R16,1
    001E6 4010      SBCI	R17,0
    001E7 2422      CLR	R2
    001E8 2433      CLR	R3
    001E9 1620      CP	R2,R16
    001EA 0631      CPC	R3,R17
    001EB F3A4      BLT	0x01E0
    001EC 9149      LD	R20,Y+
    001ED 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    001EE 934A      ST	-Y,R20
    001EF 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    001F0 C013      RJMP	0x0204
(0123) 		for(i=0;i<52642;i++)
    001F1 2744      CLR	R20
    001F2 2755      CLR	R21
    001F3 C002      RJMP	0x01F6
    001F4 5F4F      SUBI	R20,0xFF
    001F5 4F5F      SBCI	R21,0xFF
    001F6 EA82      LDI	R24,0xA2
    001F7 EC9D      LDI	R25,0xCD
    001F8 E0A0      LDI	R26,0
    001F9 E0B0      LDI	R27,0
    001FA 011A      MOVW	R2,R20
    001FB 2444      CLR	R4
    001FC 2455      CLR	R5
    001FD 1628      CP	R2,R24
    001FE 0639      CPC	R3,R25
    001FF 064A      CPC	R4,R26
    00200 065B      CPC	R5,R27
    00201 F394      BLT	0x01F4
    00202 5001      SUBI	R16,1
    00203 4010      SBCI	R17,0
    00204 2422      CLR	R2
    00205 2433      CLR	R3
    00206 1620      CP	R2,R16
    00207 0631      CPC	R3,R17
    00208 F344      BLT	0x01F1
    00209 9159      LD	R21,Y+
    0020A 9149      LD	R20,Y+
    0020B 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    0020C 934A      ST	-Y,R20
    0020D 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    0020E 2744      CLR	R20
    0020F 2755      CLR	R21
    00210 C002      RJMP	0x0213
    00211 5F4F      SUBI	R20,0xFF
    00212 4F5F      SBCI	R21,0xFF
    00213 1740      CP	R20,R16
    00214 0751      CPC	R21,R17
    00215 F3D8      BCS	0x0211
    00216 9159      LD	R21,Y+
    00217 9149      LD	R20,Y+
    00218 9508      RET
FILE: D:\ICC_H\onewirefords18b20.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立onewire操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) #ifndef _onewire_H_
(0040) #define _onewire_H_
(0041) //-----复位-----
(0042) void reset_onewire(void) 
(0043) { 
(0044) 	set_onewire_dq_ddr();
_reset_onewire:
    00219 9ABA      SBI	0x17,2
(0045)     clr_onewire_dq(); 
    0021A 98C2      CBI	0x18,2
(0046)     delayus(500);
    0021B EF04      LDI	R16,0xF4
    0021C E011      LDI	R17,1
    0021D DFEE      RCALL	_delayus
(0047)     set_onewire_dq(); 
    0021E 9AC2      SBI	0x18,2
(0048)     delayus(60);
    0021F E30C      LDI	R16,0x3C
    00220 E010      LDI	R17,0
    00221 DFEA      RCALL	_delayus
(0049) 	clr_onewire_dq_ddr();
    00222 98BA      CBI	0x17,2
    00223 9508      RET
(0050) } 
(0051) //-----应答-----
(0052) void ack_onewire(void) 
(0053) { 	
(0054)     while(in_onewire_dq());
_ack_onewire:
    00224 99B2      SBIC	0x16,2
    00225 CFFE      RJMP	_ack_onewire
(0055)     while(!(in_onewire_dq())); 
    00226 9BB2      SBIS	0x16,2
    00227 CFFE      RJMP	0x0226
(0056)     delayus(38);
    00228 E206      LDI	R16,0x26
    00229 E010      LDI	R17,0
    0022A DFE1      RCALL	_delayus
(0057) 	set_onewire_dq_ddr();
    0022B 9ABA      SBI	0x17,2
    0022C 9508      RET
_read_onewire:
  i                    --> R22
  data                 --> R20
    0022D 934A      ST	-Y,R20
    0022E 936A      ST	-Y,R22
(0058) } 
(0059) //-----读数据-----
(0060) unsigned char read_onewire(void) 
(0061) { 
(0062)     unsigned char data=0,i=0; 
    0022F 2744      CLR	R20
(0063)     for(i=0;i<8;i++) 
    00230 2766      CLR	R22
    00231 C012      RJMP	0x0244
(0064)     { 
(0065) 		set_onewire_dq_ddr();
    00232 9ABA      SBI	0x17,2
(0066) 
(0067)         data=data>>1; 
    00233 9546      LSR	R20
(0068)         clr_onewire_dq(); 
    00234 98C2      CBI	0x18,2
(0069)         delayus(1);
    00235 E001      LDI	R16,1
    00236 E010      LDI	R17,0
    00237 DFD4      RCALL	_delayus
(0070)         set_onewire_dq(); 
    00238 9AC2      SBI	0x18,2
(0071)         delayus(2);
    00239 E002      LDI	R16,2
    0023A E010      LDI	R17,0
    0023B DFD0      RCALL	_delayus
(0072) 
(0073) 		clr_onewire_dq_ddr();
    0023C 98BA      CBI	0x17,2
(0074)         if(in_onewire_dq()) data|=0x80; 
    0023D 9BB2      SBIS	0x16,2
    0023E C001      RJMP	0x0240
    0023F 6840      ORI	R20,0x80
(0075)         delayus(118);
    00240 E706      LDI	R16,0x76
    00241 E010      LDI	R17,0
    00242 DFC9      RCALL	_delayus
    00243 9563      INC	R22
    00244 3068      CPI	R22,0x8
    00245 F360      BCS	0x0232
(0076) 	} 
(0077) 	return(data); 
    00246 2F04      MOV	R16,R20
    00247 9169      LD	R22,Y+
    00248 9149      LD	R20,Y+
    00249 9508      RET
_write_onewire:
  i                    --> R20
  data                 --> R10
    0024A 92AA      ST	-Y,R10
    0024B 934A      ST	-Y,R20
    0024C 2EA0      MOV	R10,R16
(0078) } 
(0079) //-----写数据-----
(0080) void write_onewire(unsigned char data) 
(0081) { 
(0082)     unsigned char i=0; 
(0083) 	set_onewire_dq_ddr();
    0024D 9ABA      SBI	0x17,2
(0084)     for(i=0;i<8;i++) 
    0024E 2744      CLR	R20
    0024F C015      RJMP	0x0265
(0085)     { 
(0086)         if(data&0x01)
    00250 FEA0      SBRS	R10,0
    00251 C009      RJMP	0x025B
(0087) 		{ 
(0088)             clr_onewire_dq(); 
    00252 98C2      CBI	0x18,2
(0089)             delayus(14);
    00253 E00E      LDI	R16,0xE
    00254 E010      LDI	R17,0
    00255 DFB6      RCALL	_delayus
(0090)             set_onewire_dq(); 
    00256 9AC2      SBI	0x18,2
(0091)             delayus(108);
    00257 E60C      LDI	R16,0x6C
    00258 E010      LDI	R17,0
    00259 DFB2      RCALL	_delayus
(0092) 		}	 
    0025A C008      RJMP	0x0263
(0093)    	 	else 
(0094)    	 	{ 
(0095)        		 clr_onewire_dq(); 
    0025B 98C2      CBI	0x18,2
(0096)         	delayus(108);
    0025C E60C      LDI	R16,0x6C
    0025D E010      LDI	R17,0
    0025E DFAD      RCALL	_delayus
(0097)         	set_onewire_dq(); 
    0025F 9AC2      SBI	0x18,2
(0098)         	delayus(14);
    00260 E00E      LDI	R16,0xE
    00261 E010      LDI	R17,0
    00262 DFA9      RCALL	_delayus
(0099)     	} 
(0100)     	data=data>>1; 
    00263 94A6      LSR	R10
    00264 9543      INC	R20
    00265 3048      CPI	R20,0x8
    00266 F348      BCS	0x0250
    00267 9149      LD	R20,Y+
    00268 90A9      LD	R10,Y+
    00269 9508      RET
FILE: D:\ICC_H\DS18B20_DVK501.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立DS18B20_DVK501操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR 6.3A
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 
(0012) 圆版时间:   2009-07-01
(0013) 	
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #define set_onewire_dq_ddr() sbi(DDRx,ds18b20_dq)
(0041) #define set_onewire_dq() sbi(PORTx,ds18b20_dq)
(0042) #define clr_onewire_dq() cbi(PORTx,ds18b20_dq)
(0043) #define clr_onewire_dq_ddr() cbi(DDRx,ds18b20_dq)
(0044) #define in_onewire_dq() gbi(PINx,ds18b20_dq)
(0045) #include "D:\ICC_H\onewirefords18b20.H"
(0046) //-----DS18B20转换温度-----
(0047) void convert_ds18b20(void) 
(0048) { 
(0049)     reset_onewire(); 
_convert_ds18b20:
    0026A DFAE      RCALL	_reset_onewire
(0050)     ack_onewire(); 
    0026B DFB8      RCALL	_ack_onewire
(0051)     delay50us(200); 
    0026C EC08      LDI	R16,0xC8
    0026D E010      LDI	R17,0
    0026E DF6F      RCALL	_delay50us
(0052)     write_onewire(0xcc); 
    0026F EC0C      LDI	R16,0xCC
    00270 DFD9      RCALL	_write_onewire
(0053)     write_onewire(0x44); 
    00271 E404      LDI	R16,0x44
    00272 CFD7      RJMP	_write_onewire
_read_temperature:
  temp1                --> R22
  temp2                --> R20
    00273 934A      ST	-Y,R20
    00274 936A      ST	-Y,R22
(0054) } 
(0055) //------------DS18BB0读温度----------
(0056) unsigned char read_temperature(void) 
(0057) { 
(0058) 	unsigned char temp1,temp2;
(0059) 	convert_ds18b20();
    00275 DFF4      RCALL	_convert_ds18b20
(0060)     reset_onewire(); 
    00276 DFA2      RCALL	_reset_onewire
(0061)     ack_onewire(); 
    00277 DFAC      RCALL	_ack_onewire
(0062)     delay50us(200); 
    00278 EC08      LDI	R16,0xC8
    00279 E010      LDI	R17,0
    0027A DF63      RCALL	_delay50us
(0063)     write_onewire(0xcc); 
    0027B EC0C      LDI	R16,0xCC
    0027C DFCD      RCALL	_write_onewire
(0064)     write_onewire(0xbe); 	
    0027D EB0E      LDI	R16,0xBE
    0027E DFCB      RCALL	_write_onewire
(0065)     temp1=read_onewire(); 
    0027F DFAD      RCALL	_read_onewire
    00280 2F60      MOV	R22,R16
(0066)     temp2=read_onewire(); 
    00281 DFAB      RCALL	_read_onewire
    00282 2F40      MOV	R20,R16
(0067) 	temp2=temp2<<4;
    00283 2F84      MOV	R24,R20
    00284 708F      ANDI	R24,0xF
    00285 9582      SWAP	R24
    00286 2F48      MOV	R20,R24
(0068) 	temp1=temp1>>4;
    00287 2F86      MOV	R24,R22
    00288 9582      SWAP	R24
    00289 708F      ANDI	R24,0xF
    0028A 2F68      MOV	R22,R24
(0069) 	temp2|=temp1;
    0028B 2B48      OR	R20,R24
(0070) 
(0071) 	return temp2;
    0028C 2F04      MOV	R16,R20
    0028D 9169      LD	R22,Y+
    0028E 9149      LD	R20,Y+
    0028F 9508      RET
FILE: E:\吴泽备份\DVK501光盘内容\STK16_~1.0\DS18B20_温度测量\DS18B20\DS18B20.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                            
(0004) 项目名称:   DS18B20示例程序
(0005) 		
(0006) 目标系统:   “DVK501” && “M16+ EX”
(0007) 
(0008) 应用软件:   ICCAVR 6.31A                                             
(0009) 		                                                                
(0010) 版    本:   V1.0 
(0011)                                                         
(0012) 圆版时间:   2009-7-1
(0013) 
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 		
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 使用开发板的LED指示灯查看DS18B20转换而来的温度
(0028) ----------------------------------------------------------------------
(0029) 硬件连接： 
(0030) 		 	  DVK501				 ATmega16
(0031) 				DQ	    ---------	  PB2
(0032) 				PA7:0	---------	  LED7:0
(0033) ----------------------------------------------------------------------
(0034) 注意事项：
(0035) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0036) （2）请详细阅读“使用必读”及相关资料。
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) #include <iom16v.h>
(0040) #include <macros.h>
(0041) #include "D:\ICC_H\CmmICC.H"
(0042) /*DQ使用PB0口*/
(0043) #define DDRx DDRB
(0044) #define PORTx PORTB 
(0045) #define PINx PINB
(0046) #define ds18b20_dq 2
(0047) #include "D:\ICC_H\DS18B20_DVK501.H"
(0048) //----端口初始化----
(0049) 
(0050) void main(void)
(0051) {	
(0052) 	DDRA=0xFF;
_main:
    00290 EF8F      LDI	R24,0xFF
    00291 BB8A      OUT	0x1A,R24
    00292 C005      RJMP	0x0298
(0053) 	while(1)
(0054) 	{
(0055) 		delay50ms(20);
    00293 E104      LDI	R16,0x14
    00294 E010      LDI	R17,0
    00295 DF58      RCALL	_delay50ms
(0056) 		PORTA=read_temperature();	//把转换出来温度通过PD口显示
FILE: <library>
    00296 DFDC      RCALL	_read_temperature
    00297 BB0B      OUT	0x1B,R16
    00298 CFFA      RJMP	0x0293
    00299 9508      RET
push_arg4:
    0029A 933A      ST	-Y,R19
    0029B 932A      ST	-Y,R18
push_arg2:
    0029C 931A      ST	-Y,R17
    0029D 930A      ST	-Y,R16
    0029E 9508      RET
div32u:
    0029F 94E8      BCLR	6
    002A0 C001      RJMP	0x02A2
mod32u:
    002A1 9468      BSET	6
    002A2 D030      RCALL	long_div_prolog
    002A3 24CC      CLR	R12
    002A4 C009      RJMP	0x02AE
div32s:
    002A5 94E8      BCLR	6
    002A6 C001      RJMP	0x02A8
mod32s:
    002A7 9468      BSET	6
    002A8 D02A      RCALL	long_div_prolog
    002A9 FD37      SBRC	R19,7
    002AA 940E 0375 CALL	neg32
    002AC FDB7      SBRC	R27,7
    002AD D052      RCALL	neg_R24_R27
    002AE 2477      CLR	R7
    002AF 2488      CLR	R8
    002B0 2499      CLR	R9
    002B1 24AA      CLR	R10
    002B2 24BB      CLR	R11
    002B3 D042      RCALL	tst_R16_R19
    002B4 F0C1      BEQ	0x02CD
    002B5 D045      RCALL	tst_R24_R27
    002B6 F0B1      BEQ	0x02CD
    002B7 E2E8      LDI	R30,0x28
    002B8 0F00      LSL	R16
    002B9 1F11      ROL	R17
    002BA 1F22      ROL	R18
    002BB 1F33      ROL	R19
    002BC 1C77      ROL	R7
    002BD 1C88      ROL	R8
    002BE 1C99      ROL	R9
    002BF 1CAA      ROL	R10
    002C0 1CBB      ROL	R11
    002C1 1688      CP	R8,R24
    002C2 0699      CPC	R9,R25
    002C3 06AA      CPC	R10,R26
    002C4 06BB      CPC	R11,R27
    002C5 F028      BCS	0x02CB
    002C6 1A88      SUB	R8,R24
    002C7 0A99      SBC	R9,R25
    002C8 0AAA      SBC	R10,R26
    002C9 0ABB      SBC	R11,R27
    002CA 9503      INC	R16
    002CB 95EA      DEC	R30
    002CC F759      BNE	0x02B8
    002CD F426      BRTC	0x02D2
    002CE 2D08      MOV	R16,R8
    002CF 2D19      MOV	R17,R9
    002D0 2D2A      MOV	R18,R10
    002D1 2D3B      MOV	R19,R11
    002D2 C013      RJMP	long_div_epilog
long_div_prolog:
    002D3 927A      ST	-Y,R7
    002D4 928A      ST	-Y,R8
    002D5 929A      ST	-Y,R9
    002D6 92AA      ST	-Y,R10
    002D7 92BA      ST	-Y,R11
    002D8 92CA      ST	-Y,R12
    002D9 93EA      ST	-Y,R30
    002DA 938A      ST	-Y,R24
    002DB 939A      ST	-Y,R25
    002DC 93AA      ST	-Y,R26
    002DD 93BA      ST	-Y,R27
    002DE 858B      LDD	R24,Y+11
    002DF 859C      LDD	R25,Y+12
    002E0 85AD      LDD	R26,Y+13
    002E1 85BE      LDD	R27,Y+14
    002E2 2EC3      MOV	R12,R19
    002E3 F00E      BRTS	0x02E5
    002E4 26CB      EOR	R12,R27
    002E5 9508      RET
long_div_epilog:
    002E6 FCC7      SBRC	R12,7
    002E7 940E 0375 CALL	neg32
    002E9 91B9      LD	R27,Y+
    002EA 91A9      LD	R26,Y+
    002EB 9199      LD	R25,Y+
    002EC 9189      LD	R24,Y+
    002ED 91E9      LD	R30,Y+
    002EE 90C9      LD	R12,Y+
    002EF 90B9      LD	R11,Y+
    002F0 90A9      LD	R10,Y+
    002F1 9099      LD	R9,Y+
    002F2 9089      LD	R8,Y+
    002F3 9079      LD	R7,Y+
    002F4 9624      ADIW	R28,4
    002F5 9508      RET
tst_R16_R19:
    002F6 2FE0      MOV	R30,R16
    002F7 2BE1      OR	R30,R17
    002F8 2BE2      OR	R30,R18
    002F9 2BE3      OR	R30,R19
    002FA 9508      RET
tst_R24_R27:
    002FB 2FE8      MOV	R30,R24
    002FC 2BE9      OR	R30,R25
    002FD 2BEA      OR	R30,R26
    002FE 2BEB      OR	R30,R27
    002FF 9508      RET
neg_R24_R27:
    00300 9580      COM	R24
    00301 9590      COM	R25
    00302 95A0      COM	R26
    00303 95B0      COM	R27
    00304 5F8F      SUBI	R24,0xFF
    00305 4F9F      SBCI	R25,0xFF
    00306 4FAF      SBCI	R26,0xFF
    00307 4FBF      SBCI	R27,0xFF
    00308 9508      RET
empy32u|empy32s:
    00309 940E 037E CALL	long_prolog
    0030B 927A      ST	-Y,R7
    0030C 940E 0397 CALL	tstzero1
    0030E F159      BEQ	0x033A
    0030F 2477      CLR	R7
    00310 940E 039D CALL	tstzero2
    00312 F419      BNE	0x0316
    00313 018C      MOVW	R16,R24
    00314 019D      MOVW	R18,R26
    00315 C024      RJMP	0x033A
    00316 920A      ST	-Y,R0
    00317 921A      ST	-Y,R1
    00318 9F08      MUL	R16,R24
    00319 2CB0      MOV	R11,R0
    0031A 2CA1      MOV	R10,R1
    0031B 9F28      MUL	R18,R24
    0031C 2C90      MOV	R9,R0
    0031D 2C81      MOV	R8,R1
    0031E 9F18      MUL	R17,R24
    0031F 0CA0      ADD	R10,R0
    00320 1C91      ADC	R9,R1
    00321 1C87      ADC	R8,R7
    00322 9F09      MUL	R16,R25
    00323 0CA0      ADD	R10,R0
    00324 1C91      ADC	R9,R1
    00325 1C87      ADC	R8,R7
    00326 9F19      MUL	R17,R25
    00327 0C90      ADD	R9,R0
    00328 1C81      ADC	R8,R1
    00329 9F0A      MUL	R16,R26
    0032A 0C90      ADD	R9,R0
    0032B 1C81      ADC	R8,R1
    0032C 9F38      MUL	R19,R24
    0032D 0C80      ADD	R8,R0
    0032E 9F29      MUL	R18,R25
    0032F 0C80      ADD	R8,R0
    00330 9F1A      MUL	R17,R26
    00331 0C80      ADD	R8,R0
    00332 9F0B      MUL	R16,R27
    00333 0C80      ADD	R8,R0
    00334 9019      LD	R1,Y+
    00335 9009      LD	R0,Y+
    00336 2D0B      MOV	R16,R11
    00337 2D1A      MOV	R17,R10
    00338 2D29      MOV	R18,R9
    00339 2D38      MOV	R19,R8
    0033A 9079      LD	R7,Y+
    0033B 940C 038C JMP	long_epilog
pop_xgset00FC:
    0033D 90A9      LD	R10,Y+
    0033E 90B9      LD	R11,Y+
    0033F 90C9      LD	R12,Y+
    00340 90D9      LD	R13,Y+
    00341 90E9      LD	R14,Y+
    00342 90F9      LD	R15,Y+
    00343 9508      RET
pop_xgset30FC:
    00344 90A9      LD	R10,Y+
    00345 90B9      LD	R11,Y+
    00346 90C9      LD	R12,Y+
    00347 90D9      LD	R13,Y+
    00348 90E9      LD	R14,Y+
    00349 90F9      LD	R15,Y+
    0034A 9149      LD	R20,Y+
    0034B 9159      LD	R21,Y+
    0034C 9508      RET
pop_xgsetF0FC:
    0034D 90A9      LD	R10,Y+
    0034E 90B9      LD	R11,Y+
    0034F 90C9      LD	R12,Y+
    00350 90D9      LD	R13,Y+
    00351 90E9      LD	R14,Y+
    00352 90F9      LD	R15,Y+
    00353 9149      LD	R20,Y+
    00354 9159      LD	R21,Y+
    00355 9169      LD	R22,Y+
    00356 9179      LD	R23,Y+
    00357 9508      RET
push_xgsetF0FC:
    00358 937A      ST	-Y,R23
    00359 936A      ST	-Y,R22
push_xgset30FC:
    0035A 935A      ST	-Y,R21
    0035B 934A      ST	-Y,R20
push_xgset00FC:
    0035C 92FA      ST	-Y,R15
    0035D 92EA      ST	-Y,R14
push_xgset003C:
    0035E 92DA      ST	-Y,R13
    0035F 92CA      ST	-Y,R12
    00360 92BA      ST	-Y,R11
    00361 92AA      ST	-Y,R10
    00362 9508      RET
push_xgsetF03C:
    00363 937A      ST	-Y,R23
    00364 936A      ST	-Y,R22
    00365 935A      ST	-Y,R21
    00366 934A      ST	-Y,R20
    00367 92DA      ST	-Y,R13
    00368 92CA      ST	-Y,R12
    00369 92BA      ST	-Y,R11
    0036A 92AA      ST	-Y,R10
    0036B 9508      RET
pop_xgsetF03C:
    0036C 90A9      LD	R10,Y+
    0036D 90B9      LD	R11,Y+
    0036E 90C9      LD	R12,Y+
    0036F 90D9      LD	R13,Y+
    00370 9149      LD	R20,Y+
    00371 9159      LD	R21,Y+
    00372 9169      LD	R22,Y+
    00373 9179      LD	R23,Y+
    00374 9508      RET
neg32:
    00375 9500      COM	R16
    00376 9510      COM	R17
    00377 9520      COM	R18
    00378 9530      COM	R19
    00379 5F0F      SUBI	R16,0xFF
    0037A 4F1F      SBCI	R17,0xFF
    0037B 4F2F      SBCI	R18,0xFF
    0037C 4F3F      SBCI	R19,0xFF
    0037D 9508      RET
long_prolog:
    0037E 928A      ST	-Y,R8
    0037F 929A      ST	-Y,R9
    00380 92AA      ST	-Y,R10
    00381 92BA      ST	-Y,R11
    00382 93EA      ST	-Y,R30
    00383 938A      ST	-Y,R24
    00384 939A      ST	-Y,R25
    00385 93AA      ST	-Y,R26
    00386 93BA      ST	-Y,R27
    00387 8589      LDD	R24,Y+9
    00388 859A      LDD	R25,Y+10
    00389 85AB      LDD	R26,Y+11
    0038A 85BC      LDD	R27,Y+12
    0038B 9508      RET
long_epilog:
    0038C 91B9      LD	R27,Y+
    0038D 91A9      LD	R26,Y+
    0038E 9199      LD	R25,Y+
    0038F 9189      LD	R24,Y+
    00390 91E9      LD	R30,Y+
    00391 90B9      LD	R11,Y+
    00392 90A9      LD	R10,Y+
    00393 9099      LD	R9,Y+
    00394 9089      LD	R8,Y+
    00395 9624      ADIW	R28,4
    00396 9508      RET
tstzero1:
    00397 27EE      CLR	R30
    00398 2BE0      OR	R30,R16
    00399 2BE1      OR	R30,R17
    0039A 2BE2      OR	R30,R18
    0039B 2BE3      OR	R30,R19
    0039C 9508      RET
tstzero2:
    0039D 27EE      CLR	R30
    0039E 2BE8      OR	R30,R24
    0039F 2BE9      OR	R30,R25
    003A0 2BEA      OR	R30,R26
    003A1 2BEB      OR	R30,R27
    003A2 9508      RET
