Interrupt Vectors
    00000 940C 003A JMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    0003A E5CF      LDI	R28,0x5F
    0003B E0D4      LDI	R29,4
    0003C BFCD      OUT	0x3D,R28
    0003D BFDE      OUT	0x3E,R29
    0003E 51C0      SUBI	R28,0x10
    0003F 40D0      SBCI	R29,0
    00040 EA0A      LDI	R16,0xAA
    00041 8308      ST	Y,R16
    00042 2400      CLR	R0
    00043 E7EF      LDI	R30,0x7F
    00044 E0F0      LDI	R31,0
    00045 E010      LDI	R17,0
    00046 38E5      CPI	R30,0x85
    00047 07F1      CPC	R31,R17
    00048 F011      BEQ	0x004B
    00049 9201      ST	Z+,R0
    0004A CFFB      RJMP	0x0046
    0004B 8300      ST	Z,R16
    0004C E5E4      LDI	R30,0x54
    0004D E0F0      LDI	R31,0
    0004E E6A0      LDI	R26,0x60
    0004F E0B0      LDI	R27,0
    00050 E010      LDI	R17,0
    00051 E000      LDI	R16,0
    00052 BF0B      OUT	0x3B,R16
    00053 37E3      CPI	R30,0x73
    00054 07F1      CPC	R31,R17
    00055 F021      BEQ	0x005A
    00056 95C8      LPM
    00057 9631      ADIW	R30,1
    00058 920D      ST	X+,R0
    00059 CFF9      RJMP	0x0053
    0005A 940E 03EB CALL	_main
_exit:
    0005C CFFF      RJMP	_exit
_speaData:
  y                    --> Y,+4
  j                    --> Y,+0
  i                    --> R10
  len                  --> R12
  dat                  --> Y,+16
    0005D 940E 044E CALL	push_arg4
    0005F 940E 0543 CALL	push_xgsetF03C
    00061 9728      SBIW	R28,0x8
    00062 88CC      LDD	R12,Y+20
FILE: D:\ICC_H\Software.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                       
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Software_H
(0041) #define Software_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) 
(0046) /* 兼容一般程序员的常用写法 */
(0047) typedef unsigned char	uchar;
(0048) typedef unsigned int	uint;
(0049) typedef unsigned long	ulong;
(0050) typedef signed char		schar;
(0051) typedef signed int		sint;
(0052) typedef signed long		slong;
(0053) 
(0054) /* 为方便移植，建议使用下面写法 */
(0055) typedef unsigned char	bool;
(0056) typedef unsigned char	uint8;
(0057) typedef unsigned int	uint16;
(0058) typedef unsigned long   uint32;
(0059) typedef signed  char	sint8;
(0060) typedef signed	int		sint16;
(0061) typedef signed	long	sint32;
(0062) typedef signed  char	int8;
(0063) typedef signed  int		int16;
(0064) typedef signed  long	int32;
(0065) 
(0066) /* 下面写法一般不推荐 */
(0067) //typedef unsigned char ubyte;
(0068) //typedef unsigned int	uword;
(0069) //typedef unsigned long udword;
(0070) //typedef signed   char	sbyte;
(0071) //typedef signed   int	sword;
(0072) //typedef signed   long	sdword;
(0073) 
(0074) /* 一般程序定义的默认值 */
(0075) //#define NULL			0
(0076) //#define EOF			-1
(0077) //#define TRUE   		1
(0078) //#define FALSE  		0
(0079) //#define YES   		1
(0080) //#define NO  			0
(0081) //#define ON			1
(0082) //#define OFF			0
(0083) //#define ENABLE   		1
(0084) //#define DISABLE		0
(0085) //#define CRR			1
(0086) //#define ERR			0
(0087) //#define RIGHT			1
(0088) //#define WRONG			0
(0089) //#define SUCCESS		1
(0090) //#define FAILURE		0
(0091) //#define PI			3.1415926	//3.1415926535897932
(0092) 
(0093) /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
(0094) //#define _CALLOC(a)		( (a *)calloc(n,sizeof(a)) )
(0095) //#define _MALLOC(a)		( (a *)malloc(sizeof(a)) )
(0096) //#define _MIN(a,b)			( (a) < (b) ? (a) : (b) )
(0097) //#define _MAX(a,b)			( (a) > (b) ? (a) : (b) )
(0098) //#define _EXCHANGE(a,b)	{ int t; t=a; a=b; b=t; }
(0099) //#define _TOLOWER(c)		( (c)+32 )
(0100) //#define _TOUPPER(c)		( (c)-32 )
(0101) 
(0102) //#ifndef BIT
(0103) //#define BIT(x)	( 1<<(x) )
(0104) //#endif
(0105) 
(0106) /*--------------------------------------------------------------------
(0107) 函数全称：数据拆字
(0108) 函数功能：
(0109) 注意事项：D<=999999,C<=6
(0110) 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
(0111) 输    入：
(0112) 返    回：无
(0113) --------------------------------------------------------------------*/
(0114) uint8 dataElem[6];
(0115) void speaData(uint32 dat,sint8 len)
(0116) {
(0117)     uint8 i;
(0118)     uint32 j,y;
(0119)     for(i=0,j=1;i<len;i++)
    00063 24AA      CLR	R10
    00064 E081      LDI	R24,1
    00065 8388      ST	Y,R24
    00066 E080      LDI	R24,0
    00067 8389      STD	Y+1,R24
    00068 838A      STD	Y+2,R24
    00069 838B      STD	Y+3,R24
    0006A C03C      RJMP	0x00A7
(0120)     {
(0121)         y=dat/j;
    0006B 8028      LD	R2,Y
    0006C 8039      LDD	R3,Y+1
    0006D 804A      LDD	R4,Y+2
    0006E 805B      LDD	R5,Y+3
    0006F 8908      LDD	R16,Y+16
    00070 8919      LDD	R17,Y+17
    00071 892A      LDD	R18,Y+18
    00072 893B      LDD	R19,Y+19
    00073 925A      ST	-Y,R5
    00074 924A      ST	-Y,R4
    00075 923A      ST	-Y,R3
    00076 922A      ST	-Y,R2
    00077 940E 0453 CALL	div32u
    00079 830C      STD	Y+4,R16
    0007A 831D      STD	Y+5,R17
    0007B 832E      STD	Y+6,R18
    0007C 833F      STD	Y+7,R19
(0122)         dataElem[i]=y%10;
    0007D E04A      LDI	R20,0xA
    0007E E050      LDI	R21,0
    0007F E060      LDI	R22,0
    00080 E070      LDI	R23,0
    00081 810C      LDD	R16,Y+4
    00082 811D      LDD	R17,Y+5
    00083 812E      LDD	R18,Y+6
    00084 813F      LDD	R19,Y+7
    00085 937A      ST	-Y,R23
    00086 936A      ST	-Y,R22
    00087 935A      ST	-Y,R21
    00088 934A      ST	-Y,R20
    00089 940E 0455 CALL	mod32u
    0008B E78F      LDI	R24,0x7F
    0008C E090      LDI	R25,0
    0008D 2DEA      MOV	R30,R10
    0008E 27FF      CLR	R31
    0008F 0FE8      ADD	R30,R24
    00090 1FF9      ADC	R31,R25
    00091 8300      ST	Z,R16
(0123)         j*=10;
    00092 8028      LD	R2,Y
    00093 8039      LDD	R3,Y+1
    00094 804A      LDD	R4,Y+2
    00095 805B      LDD	R5,Y+3
    00096 E04A      LDI	R20,0xA
    00097 E050      LDI	R21,0
    00098 E060      LDI	R22,0
    00099 E070      LDI	R23,0
    0009A 925A      ST	-Y,R5
    0009B 924A      ST	-Y,R4
    0009C 923A      ST	-Y,R3
    0009D 922A      ST	-Y,R2
    0009E 018A      MOVW	R16,R20
    0009F 019B      MOVW	R18,R22
    000A0 940E 04CD CALL	empy32u|empy32s
    000A2 8308      ST	Y,R16
    000A3 8319      STD	Y+1,R17
    000A4 832A      STD	Y+2,R18
    000A5 833B      STD	Y+3,R19
    000A6 94A3      INC	R10
    000A7 2C2C      MOV	R2,R12
    000A8 2433      CLR	R3
    000A9 FC27      SBRC	R2,7
    000AA 9430      COM	R3
    000AB 2C4A      MOV	R4,R10
    000AC 2455      CLR	R5
    000AD 1442      CP	R4,R2
    000AE 0453      CPC	R5,R3
    000AF F40C      BGE	0x00B1
    000B0 CFBA      RJMP	0x006B
    000B1 9628      ADIW	R28,0x8
    000B2 940E 054C CALL	pop_xgsetF03C
    000B4 9624      ADIW	R28,4
    000B5 9508      RET
FILE: D:\ICC_H\I2C.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立I2C操作库
(0005) 	
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033) 
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036) 
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef I2C_H
(0041) #define I2C_H
(0042) 
(0043) /* TWSR values (not bits) */
(0044) /* Master */
(0045) #define I2C_START			0x08
(0046) #define I2C_RESTART			0x10
(0047) 
(0048) /* Master Transmitter */
(0049) #define I2C_MT_SLA_ACK		0x18
(0050) #define I2C_MT_SLA_NACK		0x20
(0051) #define I2C_MT_DATA_ACK		0x28
(0052) #define I2C_MT_DATA_NACK	0x30
(0053) #define I2C_MT_ARB_LOST		0x38
(0054) 
(0055) /* Master Receiver */
(0056) #define I2C_MR_ARB_LOST		0x38
(0057) #define I2C_MR_SLA_ACK		0x40
(0058) #define I2C_MR_SLA_NACK		0x48
(0059) #define I2C_MR_DATA_ACK		0x50
(0060) #define I2C_MR_DATA_NACK	0x58
(0061) 
(0062) /* Slave Transmitter */
(0063) #define I2C_ST_SLA_ACK			0xA8
(0064) #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
(0065) #define I2C_ST_DATA_ACK			0xB8
(0066) #define I2C_ST_DATA_NACK		0xC0
(0067) #define I2C_ST_LAST_DATA		0xC8
(0068) 
(0069) /* Slave Receiver */
(0070) #define I2C_SR_SLA_ACK				0x60
(0071) #define I2C_SR_ARB_LOST_SLA_ACK		0x68
(0072) #define I2C_SR_GCALL_ACK			0x70
(0073) #define I2C_SR_ARB_LOST_GCALL_ACK	0x78
(0074) #define I2C_SR_DATA_ACK				0x80
(0075) #define I2C_SR_DATA_NACK			0x88
(0076) #define I2C_SR_GCALL_DATA_ACK		0x90
(0077) #define I2C_SR_GCALL_DATA_NACK		0x98
(0078) #define I2C_SR_STOP					0xA0
(0079) 
(0080) /* Misc */
(0081) #define I2C_NO_INFO			0xF8
(0082) #define I2C_BUS_ERROR		0x00
(0083) 
(0084) /*
(0085)  * The lower 3 bits of TWSR are reserved on the ATmega163.
(0086)  * The 2 LSB carry the prescaler bits on the newer ATmegas.
(0087)  */
(0088) #define I2C_STATUS_MASK	(_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
(0089) #define I2C_STATUS		(TWSR & I2C_STATUS_MASK)
(0090) 
(0091) /*
(0092)  * R/~W bit in SLA+R/W address field.
(0093)  */
(0094) #define I2C_READ		1
(0095) #define I2C_WRITE		0
(0096) 
(0097) #define I2CStart()    	(TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
(0098) #define I2CStop()     	(TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
(0099) #define I2CWaitAck()	{while(!(TWCR&(1<<TWINT)));}
(0100) #define I2CChkAck() 	(TWSR&0xf8)					//check ack
(0101) #define I2CSendAck()	(TWCR|=(1<<TWEA))
(0102) #define I2CSendNoAck()	(TWCR&=~(1<<TWEA))
(0103) #define I2CSendByte(x)	{TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
(0104) #define I2CRcvNckByte()	(TWCR=(1<<TWINT)|(1<<TWEN))
(0105) #define I2CRcvAckByte()	(TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
(0106) 
(0107) /* For Program */
(0108) #define I2C_Stop()		I2CStop()
(0109) #define I2C_SendAck()	I2CSendAck()
(0110) #define I2C_SendNoAck() I2CSendNoAck()
(0111) #define I2C_WaitAck()	I2CWaitAck()
(0112) 
(0113) /* I2C Config */
(0114) #define I2C_ERR			0
(0115) #define I2C_CRR			1
(0116) 
(0117) /*--------------------------------------------------------------------
(0118) 函数名称：I2C Start
(0119) 函数功能：
(0120) 注意事项：
(0121) 提示说明：
(0122) 输    入：
(0123) 返    回：
(0124) --------------------------------------------------------------------*/
(0125) bool I2C_Start()					
(0126) {
(0127) 	I2CStart();						
_I2C_Start:
    000B6 EA84      LDI	R24,0xA4
    000B7 BF86      OUT	0x36,R24
(0128) 	I2CWaitAck();
    000B8 B626      IN	R2,0x36
    000B9 FE27      SBRS	R2,7
    000BA CFFD      RJMP	0x00B8
(0129) 	if( I2CChkAck()!=I2C_START ) 
    000BB B181      IN	R24,0x01
    000BC 7F88      ANDI	R24,0xF8
    000BD 3088      CPI	R24,0x8
    000BE F011      BEQ	0x00C1
(0130) 		return I2C_ERR;
    000BF 2700      CLR	R16
    000C0 C001      RJMP	0x00C2
(0131) 	return I2C_CRR;
    000C1 E001      LDI	R16,1
    000C2 9508      RET
(0132) }
(0133) /*--------------------------------------------------------------------
(0134) 函数名称：I2C ReStart
(0135) 函数功能：
(0136) 注意事项：
(0137) 提示说明：
(0138) 输    入：
(0139) 返    回：
(0140) --------------------------------------------------------------------*/
(0141) bool I2C_Restart()					
(0142) {
(0143) 	I2CStart();						
_I2C_Restart:
    000C3 EA84      LDI	R24,0xA4
    000C4 BF86      OUT	0x36,R24
(0144) 	I2CWaitAck();
    000C5 B626      IN	R2,0x36
    000C6 FE27      SBRS	R2,7
    000C7 CFFD      RJMP	0x00C5
(0145) 	if( I2CChkAck()!=I2C_RESTART ) 
    000C8 B181      IN	R24,0x01
    000C9 7F88      ANDI	R24,0xF8
    000CA 3180      CPI	R24,0x10
    000CB F011      BEQ	0x00CE
(0146) 		return I2C_ERR;
    000CC 2700      CLR	R16
    000CD C001      RJMP	0x00CF
(0147) 	return I2C_CRR;
    000CE E001      LDI	R16,1
    000CF 9508      RET
(0148) }
(0149) /*--------------------------------------------------------------------
(0150) 函数名称：发送 7位 器件写地址: XXXX XXX0
(0151) 函数功能：
(0152) 注意事项：
(0153) 提示说明：
(0154) 输    入：
(0155) 返    回：
(0156) --------------------------------------------------------------------*/
(0157) bool I2C_SendWrDAdr(uint8 wrDAdr)	
(0158) {
(0159) 	I2CSendByte(wrDAdr);			//设置 器件写地址
_I2C_SendWrDAdr:
  wrDAdr               --> R16
    000D0 B903      OUT	0x03,R16
    000D1 E884      LDI	R24,0x84
    000D2 BF86      OUT	0x36,R24
(0160) 	I2CWaitAck();
    000D3 B626      IN	R2,0x36
    000D4 FE27      SBRS	R2,7
    000D5 CFFD      RJMP	0x00D3
(0161) 	if( I2CChkAck()!=I2C_MT_SLA_ACK )  
    000D6 B181      IN	R24,0x01
    000D7 7F88      ANDI	R24,0xF8
    000D8 3188      CPI	R24,0x18
    000D9 F011      BEQ	0x00DC
(0162) 		return I2C_ERR;
    000DA 2700      CLR	R16
    000DB C001      RJMP	0x00DD
(0163) 	return I2C_CRR;		
    000DC E001      LDI	R16,1
    000DD 9508      RET
_I2C_SendWrDAdr_:
  wrDAdr               --> R10
    000DE 92AA      ST	-Y,R10
    000DF 92BA      ST	-Y,R11
    000E0 0158      MOVW	R10,R16
(0164) }
(0165) /*--------------------------------------------------------------------
(0166) 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
(0167) 函数功能：
(0168) 注意事项：
(0169) 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
(0170) 输    入：
(0171) 返    回：
(0172) --------------------------------------------------------------------*/
(0173) bool I2C_SendWrDAdr_(uint16 wrDAdr)	
(0174) {
(0175) 	if( wrDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    000E1 FEA0      SBRS	R10,0
    000E2 C00E      RJMP	0x00F1
(0176) 		if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
    000E3 2D0A      MOV	R16,R10
    000E4 9506      LSR	R16
    000E5 9506      LSR	R16
    000E6 9506      LSR	R16
    000E7 9506      LSR	R16
    000E8 9506      LSR	R16
    000E9 9506      LSR	R16
    000EA 9506      LSR	R16
    000EB 9506      LSR	R16
    000EC DFE3      RCALL	_I2C_SendWrDAdr
    000ED 2300      TST	R16
    000EE F411      BNE	0x00F1
(0177) 			return I2C_ERR;
    000EF 2700      CLR	R16
    000F0 C007      RJMP	0x00F8
(0178) 	if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
    000F1 2D0A      MOV	R16,R10
    000F2 DFDD      RCALL	_I2C_SendWrDAdr
    000F3 2300      TST	R16
    000F4 F411      BNE	0x00F7
(0179) 		return I2C_ERR;
    000F5 2700      CLR	R16
    000F6 C001      RJMP	0x00F8
(0180) 	return I2C_CRR;
    000F7 E001      LDI	R16,1
    000F8 90B9      LD	R11,Y+
    000F9 90A9      LD	R10,Y+
    000FA 9508      RET
(0181) }
(0182) /*--------------------------------------------------------------------
(0183) 函数名称：发送 7位 器件读地址: XXXX XXX1
(0184) 函数功能：
(0185) 注意事项：
(0186) 提示说明：
(0187) 输    入：
(0188) 返    回：
(0189) --------------------------------------------------------------------*/
(0190) bool I2C_SendRdDAdr(uint8 rdDAdr)	
(0191) {
(0192) 	I2CSendByte(rdDAdr);			//设置 器件读地址
_I2C_SendRdDAdr:
  rdDAdr               --> R16
    000FB B903      OUT	0x03,R16
    000FC E884      LDI	R24,0x84
    000FD BF86      OUT	0x36,R24
(0193) 	I2CWaitAck();
    000FE B626      IN	R2,0x36
    000FF FE27      SBRS	R2,7
    00100 CFFD      RJMP	0x00FE
(0194) 	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
    00101 B181      IN	R24,0x01
    00102 7F88      ANDI	R24,0xF8
    00103 3480      CPI	R24,0x40
    00104 F011      BEQ	0x0107
(0195) 		return I2C_ERR;
    00105 2700      CLR	R16
    00106 C001      RJMP	0x0108
(0196) 	return I2C_CRR;	
    00107 E001      LDI	R16,1
    00108 9508      RET
_I2C_SendRdDAdr_:
  rdDAdr               --> R10
    00109 92AA      ST	-Y,R10
    0010A 2EA0      MOV	R10,R16
(0197) }
(0198) /*--------------------------------------------------------------------
(0199) 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
(0200) 函数功能：
(0201) 注意事项：
(0202) 提示说明：
(0203) 输    入：
(0204) 返    回：
(0205) --------------------------------------------------------------------*/
(0206) bool I2C_SendRdDAdr_(uint8 rdDAdr)	
(0207) {
(0208) 	if( rdDAdr&0xF000 == 0xF000 )	//判断是否为 10位 器件地址
    0010B FEA0      SBRS	R10,0
    0010C C00E      RJMP	0x011B
(0209) 		if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
    0010D 2D0A      MOV	R16,R10
    0010E 9506      LSR	R16
    0010F 9506      LSR	R16
    00110 9506      LSR	R16
    00111 9506      LSR	R16
    00112 9506      LSR	R16
    00113 9506      LSR	R16
    00114 9506      LSR	R16
    00115 9506      LSR	R16
    00116 DFB9      RCALL	_I2C_SendWrDAdr
    00117 2300      TST	R16
    00118 F411      BNE	0x011B
(0210) 			return I2C_ERR;
    00119 2700      CLR	R16
    0011A C007      RJMP	0x0122
(0211) 	if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
    0011B 2D0A      MOV	R16,R10
    0011C DFB3      RCALL	_I2C_SendWrDAdr
    0011D 2300      TST	R16
    0011E F411      BNE	0x0121
(0212) 		return I2C_ERR;
    0011F 2700      CLR	R16
    00120 C001      RJMP	0x0122
(0213) 	return I2C_CRR;
    00121 E001      LDI	R16,1
    00122 90A9      LD	R10,Y+
    00123 9508      RET
(0214) }
(0215) /*--------------------------------------------------------------------
(0216) 函数名称：I2C发送数据
(0217) 函数功能：
(0218) 注意事项：
(0219) 提示说明：
(0220) 输    入：
(0221) 返    回：
(0222) --------------------------------------------------------------------*/
(0223) bool I2C_SendDat(uint8 configDat)	
(0224) {
(0225) 	I2CSendByte(configDat);			
_I2C_SendDat:
  configDat            --> R16
    00124 B903      OUT	0x03,R16
    00125 E884      LDI	R24,0x84
    00126 BF86      OUT	0x36,R24
(0226) 	I2CWaitAck();
    00127 B626      IN	R2,0x36
    00128 FE27      SBRS	R2,7
    00129 CFFD      RJMP	0x0127
(0227) 	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
    0012A B181      IN	R24,0x01
    0012B 7F88      ANDI	R24,0xF8
    0012C 3288      CPI	R24,0x28
    0012D F011      BEQ	0x0130
(0228) 		return I2C_ERR;
    0012E 2700      CLR	R16
    0012F C001      RJMP	0x0131
(0229) 	return I2C_CRR;	
    00130 E001      LDI	R16,1
    00131 9508      RET
(0230) }
(0231) /*--------------------------------------------------------------------
(0232) 函数名称：I2C接收数据且不产生应答
(0233) 函数功能：
(0234) 注意事项：
(0235) 提示说明：
(0236) 输    入：
(0237) 返    回：
(0238) --------------------------------------------------------------------*/
(0239) bool I2C_RcvNAckDat(uint8 *pRdDat)	
(0240) {
(0241) 	I2CRcvNckByte();
_I2C_RcvNAckDat:
  pRdDat               --> R16
    00132 E884      LDI	R24,0x84
    00133 BF86      OUT	0x36,R24
(0242) 	I2CWaitAck();
    00134 B626      IN	R2,0x36
    00135 FE27      SBRS	R2,7
    00136 CFFD      RJMP	0x0134
(0243) 	if( I2CChkAck()!=I2C_MR_DATA_NACK )
    00137 B181      IN	R24,0x01
    00138 7F88      ANDI	R24,0xF8
    00139 3588      CPI	R24,0x58
    0013A F011      BEQ	0x013D
(0244) 		return I2C_ERR;
    0013B 2700      CLR	R16
    0013C C004      RJMP	0x0141
(0245) 	*pRdDat=TWDR;
    0013D B023      IN	R2,0x03
    0013E 01F8      MOVW	R30,R16
    0013F 8220      ST	Z,R2
(0246) 	return I2C_CRR;
    00140 E001      LDI	R16,1
    00141 9508      RET
(0247) }
(0248) /*--------------------------------------------------------------------
(0249) 函数名称：I2C接收数据且产生应答
(0250) 函数功能：
(0251) 注意事项：
(0252) 提示说明：
(0253) 输    入：
(0254) 返    回：
(0255) --------------------------------------------------------------------*/
(0256) bool I2C_RcvAckDat(uint8 *pRdDat)	
(0257) {
(0258) 	I2CRcvAckByte();					
_I2C_RcvAckDat:
  pRdDat               --> R16
    00142 EC84      LDI	R24,0xC4
    00143 BF86      OUT	0x36,R24
(0259) 	I2CWaitAck();
    00144 B626      IN	R2,0x36
    00145 FE27      SBRS	R2,7
    00146 CFFD      RJMP	0x0144
(0260) 	if( I2CChkAck()!=I2C_MR_DATA_ACK )
    00147 B181      IN	R24,0x01
    00148 7F88      ANDI	R24,0xF8
    00149 3580      CPI	R24,0x50
    0014A F011      BEQ	0x014D
(0261) 		return I2C_ERR;
    0014B 2700      CLR	R16
    0014C C004      RJMP	0x0151
(0262) 	*pRdDat=TWDR;
    0014D B023      IN	R2,0x03
    0014E 01F8      MOVW	R30,R16
    0014F 8220      ST	Z,R2
(0263) 	return I2C_CRR;
    00150 E001      LDI	R16,1
    00151 9508      RET
_I2C_Write:
  dat                  --> R10
  wordAdr              --> R12
  wrDAdr               --> R14
    00152 940E 0520 CALL	push_xgset00FC
    00154 2EC2      MOV	R12,R18
    00155 0178      MOVW	R14,R16
    00156 80AE      LDD	R10,Y+6
(0264) }
(0265) /*--------------------------------------------------------------------
(0266) 函数名称：I2C写器件，写一个数据
(0267) 函数功能：
(0268) 注意事项：
(0269) 提示说明：
(0270) 输    入：wrDAdr: write device-address 写器件地址
(0271) 		 wordAdr: word address 字地址
(0272) 		 dat: data 数据
(0273) 返    回：
(0274) --------------------------------------------------------------------*/
(0275) bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
(0276) {
(0277) 	if( I2C_Start()==I2C_ERR )
    00157 DF5E      RCALL	_I2C_Start
    00158 2300      TST	R16
    00159 F411      BNE	0x015C
(0278) 		return I2C_ERR;
    0015A 2700      CLR	R16
    0015B C017      RJMP	0x0173
(0279) 
(0280) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    0015C 0187      MOVW	R16,R14
    0015D DF80      RCALL	_I2C_SendWrDAdr_
    0015E 2300      TST	R16
    0015F F411      BNE	0x0162
(0281) 		return I2C_ERR;
    00160 2700      CLR	R16
    00161 C011      RJMP	0x0173
(0282) 
(0283) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00162 2D0C      MOV	R16,R12
    00163 DFC0      RCALL	_I2C_SendDat
    00164 2EC0      MOV	R12,R16
    00165 2300      TST	R16
    00166 F411      BNE	0x0169
(0284) 		return I2C_ERR;
    00167 2700      CLR	R16
    00168 C00A      RJMP	0x0173
(0285) 
(0286) 	if( I2C_SendDat(dat)==I2C_ERR )
    00169 2D0A      MOV	R16,R10
    0016A DFB9      RCALL	_I2C_SendDat
    0016B 2EA0      MOV	R10,R16
    0016C 2300      TST	R16
    0016D F411      BNE	0x0170
(0287) 		return I2C_ERR;
    0016E 2700      CLR	R16
    0016F C003      RJMP	0x0173
(0288) 
(0289) 	I2C_Stop();
    00170 E984      LDI	R24,0x94
    00171 BF86      OUT	0x36,R24
(0290) 
(0291) 	return I2C_CRR;
    00172 E001      LDI	R16,1
    00173 940C 0501 JMP	pop_xgset00FC
_I2C_Read:
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R20
    00175 940E 051E CALL	push_xgset30FC
    00177 2EE2      MOV	R14,R18
    00178 01A8      MOVW	R20,R16
    00179 84C8      LDD	R12,Y+8
    0017A 84AA      LDD	R10,Y+10
    0017B 84BB      LDD	R11,Y+11
(0292) }
(0293) /*--------------------------------------------------------------------
(0294) 函数名称：I2C写器件，写N个数据
(0295) 函数功能：
(0296) 注意事项：
(0297) 提示说明：
(0298) 输    入：wrDAdr: write device-address 写器件地址
(0299) 		 wordAdr: word address 字地址
(0300) 		 *pWrDat: p->write data 写入数据指针
(0301) 		 num: number 写入数据个数
(0302) 返    回：
(0303) --------------------------------------------------------------------*/
(0304) //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
(0305) //				  uint8 *pWrDat,uint8 num)
(0306) //{
(0307) //
(0308) //} 
(0309) /*--------------------------------------------------------------------
(0310) 函数名称：I2C读器件，读一个数据
(0311) 函数功能：
(0312) 注意事项：
(0313) 提示说明：
(0314) 输    入：wrDAdr: write device-address 写器件地址
(0315) 		 wordAdr: word address 字地址
(0316) 		 rdDAdr: read device-address 读器件地址
(0317) 		 *pRdDat: p->read data 读取数据指针
(0318) 返    回：
(0319) --------------------------------------------------------------------*/
(0320) bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
(0321) 			  uint8 rdDAdr,uint8 *pRdDat)
(0322) {
(0323) 	if( I2C_Start()==I2C_ERR )
    0017C DF39      RCALL	_I2C_Start
    0017D 2300      TST	R16
    0017E F411      BNE	0x0181
(0324) 		return I2C_ERR;
    0017F 2700      CLR	R16
    00180 C024      RJMP	0x01A5
(0325) 
(0326) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    00181 018A      MOVW	R16,R20
    00182 DF5B      RCALL	_I2C_SendWrDAdr_
    00183 2300      TST	R16
    00184 F411      BNE	0x0187
(0327) 		return I2C_ERR;
    00185 2700      CLR	R16
    00186 C01E      RJMP	0x01A5
(0328) 
(0329) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    00187 2D0E      MOV	R16,R14
    00188 DF9B      RCALL	_I2C_SendDat
    00189 2EE0      MOV	R14,R16
    0018A 2300      TST	R16
    0018B F411      BNE	0x018E
(0330) 		return I2C_ERR;
    0018C 2700      CLR	R16
    0018D C017      RJMP	0x01A5
(0331) 
(0332) 	if( I2C_Restart()==I2C_ERR )
    0018E DF34      RCALL	_I2C_Restart
    0018F 2EE0      MOV	R14,R16
    00190 2300      TST	R16
    00191 F411      BNE	0x0194
(0333) 		return I2C_ERR;
    00192 2700      CLR	R16
    00193 C011      RJMP	0x01A5
(0334) 
(0335) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    00194 2D0C      MOV	R16,R12
    00195 DF65      RCALL	_I2C_SendRdDAdr
    00196 2EC0      MOV	R12,R16
    00197 2300      TST	R16
    00198 F411      BNE	0x019B
(0336) 		return I2C_ERR;
    00199 2700      CLR	R16
    0019A C00A      RJMP	0x01A5
(0337) 
(0338) 	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
    0019B 0185      MOVW	R16,R10
    0019C DF95      RCALL	_I2C_RcvNAckDat
    0019D 2EA0      MOV	R10,R16
    0019E 2300      TST	R16
    0019F F411      BNE	0x01A2
(0339) 		return I2C_ERR;
    001A0 2700      CLR	R16
    001A1 C003      RJMP	0x01A5
(0340) 
(0341) 	I2C_Stop();
    001A2 E984      LDI	R24,0x94
    001A3 BF86      OUT	0x36,R24
(0342) 
(0343) 	return I2C_CRR;
    001A4 E001      LDI	R16,1
    001A5 940C 0508 JMP	pop_xgset30FC
_I2C_Read_:
  i                    --> R12
  num                  --> R20
  pRdDat               --> R10
  rdDAdr               --> R12
  wordAdr              --> R14
  wrDAdr               --> R22
    001A7 940E 051C CALL	push_xgsetF0FC
    001A9 2EE2      MOV	R14,R18
    001AA 01B8      MOVW	R22,R16
    001AB 84CA      LDD	R12,Y+10
    001AC 84AC      LDD	R10,Y+12
    001AD 84BD      LDD	R11,Y+13
    001AE 854E      LDD	R20,Y+14
(0344) }
(0345) /*--------------------------------------------------------------------
(0346) 函数名称：I2C读器件，读N个数据
(0347) 函数功能：
(0348) 注意事项：
(0349) 提示说明：
(0350) 输    入：wrDAdr: write device-address 写器件地址
(0351) 		 wordAdr: word address 字地址
(0352) 		 rdDAdr: read device-address 读器件地址
(0353) 		 *pRdDat: p->read data 读取数据指针
(0354) 		 num: number 读取数据个数
(0355) 返    回：
(0356) --------------------------------------------------------------------*/
(0357) bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
(0358) 			   uint8 rdDAdr,uint8 *pRdDat,uint8 num)
(0359) {
(0360)  	uint8 i;
(0361) 	
(0362) 	if( I2C_Start()==I2C_ERR )
    001AF DF06      RCALL	_I2C_Start
    001B0 2300      TST	R16
    001B1 F411      BNE	0x01B4
(0363) 		return I2C_ERR;
    001B2 2700      CLR	R16
    001B3 C038      RJMP	0x01EC
(0364) 
(0365) 	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
    001B4 018B      MOVW	R16,R22
    001B5 DF28      RCALL	_I2C_SendWrDAdr_
    001B6 2300      TST	R16
    001B7 F411      BNE	0x01BA
(0366) 		return I2C_ERR;
    001B8 2700      CLR	R16
    001B9 C032      RJMP	0x01EC
(0367) 
(0368) 	if( I2C_SendDat(wordAdr)==I2C_ERR )
    001BA 2D0E      MOV	R16,R14
    001BB DF68      RCALL	_I2C_SendDat
    001BC 2EE0      MOV	R14,R16
    001BD 2300      TST	R16
    001BE F411      BNE	0x01C1
(0369) 		return I2C_ERR;
    001BF 2700      CLR	R16
    001C0 C02B      RJMP	0x01EC
(0370) 
(0371) 	if( I2C_Restart()==I2C_ERR )
    001C1 DF01      RCALL	_I2C_Restart
    001C2 2EE0      MOV	R14,R16
    001C3 2300      TST	R16
    001C4 F411      BNE	0x01C7
(0372) 		return I2C_ERR;
    001C5 2700      CLR	R16
    001C6 C025      RJMP	0x01EC
(0373) 
(0374) 	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
    001C7 2D0C      MOV	R16,R12
    001C8 DF32      RCALL	_I2C_SendRdDAdr
    001C9 2EC0      MOV	R12,R16
    001CA 2300      TST	R16
    001CB F411      BNE	0x01CE
(0375) 		return I2C_ERR;
    001CC 2700      CLR	R16
    001CD C01E      RJMP	0x01EC
(0376) 
(0377) 	for(i=0;i<num-1;i++)
    001CE 24CC      CLR	R12
    001CF C00B      RJMP	0x01DB
(0378) 		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
    001D0 2D0C      MOV	R16,R12
    001D1 2711      CLR	R17
    001D2 0D0A      ADD	R16,R10
    001D3 1D1B      ADC	R17,R11
    001D4 DF6D      RCALL	_I2C_RcvAckDat
    001D5 2EE0      MOV	R14,R16
    001D6 2300      TST	R16
    001D7 F411      BNE	0x01DA
(0379) 			return I2C_ERR;
    001D8 2700      CLR	R16
    001D9 C012      RJMP	0x01EC
    001DA 94C3      INC	R12
    001DB 2F84      MOV	R24,R20
    001DC 5081      SUBI	R24,1
    001DD 16C8      CP	R12,R24
    001DE F388      BCS	0x01D0
(0380) 	
(0381) 	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
    001DF 2D0C      MOV	R16,R12
    001E0 2711      CLR	R17
    001E1 0D0A      ADD	R16,R10
    001E2 1D1B      ADC	R17,R11
    001E3 DF4E      RCALL	_I2C_RcvNAckDat
    001E4 2EA0      MOV	R10,R16
    001E5 2300      TST	R16
    001E6 F411      BNE	0x01E9
(0382) 			return I2C_ERR;
    001E7 2700      CLR	R16
    001E8 C003      RJMP	0x01EC
(0383) 
(0384) 	I2C_Stop();
    001E9 E984      LDI	R24,0x94
    001EA BF86      OUT	0x36,R24
(0385) 	
(0386) 	return I2C_CRR;
    001EB E001      LDI	R16,1
    001EC 940C 0511 JMP	pop_xgsetF0FC
_delay50us:
  j                    --> R20
  t                    --> R16
    001EE 934A      ST	-Y,R20
FILE: D:\ICC_H\Hardware.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                        
(0004) 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
(0005) 					
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                          
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 
(0028) ----------------------------------------------------------------------
(0029) 待定参数说明：
(0030) 
(0031) ----------------------------------------------------------------------	
(0032) 对外变量说明：
(0033)     
(0034) ----------------------------------------------------------------------
(0035) 对外函数说明：
(0036)    
(0037) ----------------------------------------------------------------------
(0038) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0039) 
(0040) #ifndef Hardware_H
(0041) #define Hardware_H
(0042) 
(0043) #include <math.h>
(0044) #include <string.h>
(0045) #include <stdio.h>
(0046) #include <macros.h>
(0047) #include <eeprom.h>
(0048) //#include <wdt.h>
(0049) 
(0050) /* TWI configs */
(0051) //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
(0052) #if NO_INCLUDE_I2C_H
(0053) ;
(0054) #else
(0055) #include "D:\ICC_H\I2C.H"	//i2c即AVR的"twi"
(0056) #endif
(0057) 
(0058) /* hard configs */
(0059) #ifndef flash
(0060) 	#define flash	const
(0061) #endif
(0062) 
(0063) #ifndef code
(0064) 	#define code	const
(0065) #endif
(0066) 
(0067) #ifndef NOP
(0068) 	#define NOP()	asm("nop")
(0069) #endif
(0070) 
(0071) /* io configs */
(0072) #define sbi(io,bit)		(  io |=  (1<<bit) )	//example: sbi(PORTA,0);sbi(DDRA,0);
(0073) #define cbi(io,bit)		(  io &= ~(1<<bit) )	//example: cbi(PORTA,0);cbi(DDRA,0);
(0074) #define gbi(pin ,bit)	( pin &   (1<<bit) )	//example: gbi(PINA,0);
(0075) 
(0076) /* interrupt configs */
(0077) #define DIS_INT  asm("sei")
(0078) #define EN_INT   asm("cli")
(0079) 
(0080) /* wdt configs */
(0081) #define WDT()    asm("wdr")
(0082) 
(0083) /* bit operation */
(0084) //#ifndef BIT
(0085) //#define BIT(x)	( 1<<(x) )
(0086) //#endif
(0087) 
(0088) /* USART configs for 4 Mhz crystal */
(0089) //#define BAUD9600			25
(0090) //#define BAUD19000			12
(0091) //#define UART_TRAN_ON()	UCR |=  0x08
(0092) //#define UART_TRAN_OFF()	UCR &= ~0x08
(0093) //#define UART_RCV_ON()		UCR |=  0x10
(0094) //#define UART_RCV_OFF()	UCR &= ~0x10
(0095) 
(0096) /*--------------------------------------------------------------------
(0097) 函数全称：50us 延时
(0098) 函数功能：当然是 50us延时 啦
(0099) 注意事项：基于7.3728M晶振，稍微有点误差
(0100) 提示说明：调用delay50us（20），得到1ms延时
(0101) 输    入：	
(0102) 返    回：无 
(0103) --------------------------------------------------------------------*/
(0104) void delay50us(sint16 t)
(0105) {
(0106)     uint8 j;		
(0107)     for(;t>0;t--)			
    001EF C007      RJMP	0x01F7
(0108)         for(j=0;j<70;j++)	
    001F0 2744      CLR	R20
    001F1 C001      RJMP	0x01F3
    001F2 9543      INC	R20
    001F3 3446      CPI	R20,0x46
    001F4 F3E8      BCS	0x01F2
    001F5 5001      SUBI	R16,1
    001F6 4010      SBCI	R17,0
    001F7 2422      CLR	R2
    001F8 2433      CLR	R3
    001F9 1620      CP	R2,R16
    001FA 0631      CPC	R3,R17
    001FB F3A4      BLT	0x01F0
    001FC 9149      LD	R20,Y+
    001FD 9508      RET
_delay50ms:
  i                    --> R20
  t                    --> R16
    001FE 934A      ST	-Y,R20
    001FF 935A      ST	-Y,R21
(0109)             ;
(0110) }
(0111) /*--------------------------------------------------------------------
(0112) 函数全称：50ms 延时
(0113) 函数功能：当然是 50ms延时 啦
(0114) 注意事项：基于7.3728M晶振，稍微有点误差
(0115) 提示说明：调用delay50ms（20），得到1s延时 
(0116) 输    入：
(0117) 返    回：无
(0118) --------------------------------------------------------------------*/
(0119) void delay50ms(sint16 t)
(0120) {
(0121) 	uint16 i; 
(0122) 	for(;t>0;t--)
    00200 C013      RJMP	0x0214
(0123) 		for(i=0;i<52642;i++)
    00201 2744      CLR	R20
    00202 2755      CLR	R21
    00203 C002      RJMP	0x0206
    00204 5F4F      SUBI	R20,0xFF
    00205 4F5F      SBCI	R21,0xFF
    00206 EA82      LDI	R24,0xA2
    00207 EC9D      LDI	R25,0xCD
    00208 E0A0      LDI	R26,0
    00209 E0B0      LDI	R27,0
    0020A 011A      MOVW	R2,R20
    0020B 2444      CLR	R4
    0020C 2455      CLR	R5
    0020D 1628      CP	R2,R24
    0020E 0639      CPC	R3,R25
    0020F 064A      CPC	R4,R26
    00210 065B      CPC	R5,R27
    00211 F394      BLT	0x0204
    00212 5001      SUBI	R16,1
    00213 4010      SBCI	R17,0
    00214 2422      CLR	R2
    00215 2433      CLR	R3
    00216 1620      CP	R2,R16
    00217 0631      CPC	R3,R17
    00218 F344      BLT	0x0201
    00219 9159      LD	R21,Y+
    0021A 9149      LD	R20,Y+
    0021B 9508      RET
_delayus:
  i                    --> R20
  t                    --> R16
    0021C 934A      ST	-Y,R20
    0021D 935A      ST	-Y,R21
(0124) 			; 
(0125) }
(0126) 
(0127) 
(0128) void delayus(uint16 t)
(0129) {
(0130) 	uint16 i;
(0131) 	for(i=0;i<t;i++)
    0021E 2744      CLR	R20
    0021F 2755      CLR	R21
    00220 C002      RJMP	0x0223
    00221 5F4F      SUBI	R20,0xFF
    00222 4F5F      SBCI	R21,0xFF
    00223 1740      CP	R20,R16
    00224 0751      CPC	R21,R17
    00225 F3D8      BCS	0x0221
    00226 9159      LD	R21,Y+
    00227 9149      LD	R20,Y+
    00228 9508      RET
FILE: D:\ICC_H\LCD12864_ST7920.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 	                                                        
(0004) 目    的:   建立LCD12864_ST7920的串模式操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 	                                                                
(0008) 应用软件:   ICCAVR                                               
(0009) 	                                                                
(0010) 版    本:   Version 1.0
(0011) 	                                                                
(0012) 圆版时间:   2005-09-06
(0013) 
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) 
(0026) 
(0027) ----------------------------------------------------------------------
(0028) 入口参数说明：
(0029) 	//#define OUT_LCD_CS	sbi(DDRD,0)
(0030) 	//#define SET_LCD_CS	sbi(PORTD,0)
(0031) 	//#define CLR_LCD_CS	cbi(PORTD,0)
(0032) 
(0033) ----------------------------------------------------------------------
(0034) 待定参数说明：
(0035) 	
(0036) 
(0037) ----------------------------------------------------------------------	
(0038) 对外变量说明：
(0039) 
(0040) ----------------------------------------------------------------------
(0041) 对外函数说明：
(0042) 
(0043) ----------------------------------------------------------------------
(0044) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0045) 
(0046) 
(0047) /*--------------------------------------------------------------------
(0048) 接口定义：
(0049) 
(0050) LCD12864_ST7920			ATmega16
(0051) 1.GND		--------	GND
(0052) 2.VCC		--------	VCC
(0053) 3.V0		--------	V0
(0054) 4.RS(CS)	--------	VCC
(0055) 5.R/W(SID)	--------	MOSI/PB5
(0056) 6.E(SCLK)	--------	SCK/PB7
(0057) 7.D0		--------	NC
(0058) 8.D1		--------	NC
(0059) 9.D2		--------	NC
(0060) 10.D3		--------	NC
(0061) 11.D4		--------	NC
(0062) 12.D5		--------	NC
(0063) 13.D6		--------	NC
(0064) 14.D7		--------	NC
(0065) 15.PSB		--------	GND
(0066) 16.NC		--------	NC
(0067) 17.RST		--------	NC
(0068) 18.NC		--------	NC
(0069) 19.LED+		--------	VCC
(0070) 20.LED-		--------	GND
(0071) 
(0072) 说明：
(0073) （1）使用ATmega16的硬件SPI操作LCD12864_ST7920
(0074) （2）PIN4/CS接VCC，其实也可接到特定的IO口，但外部程序需要指定
(0075) --------------------------------------------------------------------*/
(0076) 
(0077) #ifndef LCD12864_ST7920_H
(0078) #define LCD12864_ST7920_H
(0079) 
(0080) #include "D:\ICC_H\CmmIcc.h"
(0081) 
(0082) void SPI_init()
(0083) {
(0084) 	DDRB |= 0xB0;
_SPI_init:
    00229 B387      IN	R24,0x17
    0022A 6B80      ORI	R24,0xB0
    0022B BB87      OUT	0x17,R24
(0085) 	SPCR = 0x50;	//setup SPI
    0022C E580      LDI	R24,0x50
    0022D B98D      OUT	0x0D,R24
(0086) 	SPSR = 0x01;	//setup SPI
    0022E E081      LDI	R24,1
    0022F B98E      OUT	0x0E,R24
(0087) 	SEI();
    00230 9478      BSET	7
    00231 9508      RET
(0088) }
(0089) 
(0090) void lcd_wrByte(uint8 data)
(0091) {  
(0092) 	SPDR = data;        
_lcd_wrByte:
  data                 --> R16
    00232 B90F      OUT	0x0F,R16
(0093) 	while ((SPSR & 0x80) == 0);  
    00233 9B77      SBIS	0x0E,7
    00234 CFFE      RJMP	0x0233
    00235 9508      RET
_lcd_wrCmd:
  LC                   --> R10
  HC                   --> R12
    00236 92AA      ST	-Y,R10
    00237 92CA      ST	-Y,R12
    00238 2EA2      MOV	R10,R18
    00239 2EC0      MOV	R12,R16
(0094) }
(0095) 
(0096) void lcd_wrCmd(uint8 HC,uint8 LC)
(0097) {
(0098) 	lcd_wrByte(0xF8);
    0023A EF08      LDI	R16,0xF8
    0023B DFF6      RCALL	_lcd_wrByte
(0099) 	lcd_wrByte(HC);		//传输高四位
    0023C 2D0C      MOV	R16,R12
    0023D DFF4      RCALL	_lcd_wrByte
(0100) 	lcd_wrByte(LC);		//传输低四位
    0023E 2D0A      MOV	R16,R10
    0023F DFF2      RCALL	_lcd_wrByte
    00240 90C9      LD	R12,Y+
    00241 90A9      LD	R10,Y+
    00242 9508      RET
_lcd_wrDat:
  LD                   --> R10
  HD                   --> R12
    00243 92AA      ST	-Y,R10
    00244 92CA      ST	-Y,R12
    00245 2EA2      MOV	R10,R18
    00246 2EC0      MOV	R12,R16
(0101) }
(0102) 
(0103) void lcd_wrDat(uint8 HD,uint8 LD)
(0104) {
(0105) 	lcd_wrByte(0xFA);
    00247 EF0A      LDI	R16,0xFA
    00248 DFE9      RCALL	_lcd_wrByte
(0106) 	lcd_wrByte(HD);		//传输高四位
    00249 2D0C      MOV	R16,R12
    0024A DFE7      RCALL	_lcd_wrByte
(0107) 	lcd_wrByte(LD);		//传输低四位
    0024B 2D0A      MOV	R16,R10
    0024C DFE5      RCALL	_lcd_wrByte
    0024D 90C9      LD	R12,Y+
    0024E 90A9      LD	R10,Y+
    0024F 9508      RET
_lcd_set_xy:
  adr                  --> R20
  y                    --> R22
  x                    --> R10
    00250 940E 0527 CALL	push_xgsetF00C
    00252 2F62      MOV	R22,R18
    00253 2EA0      MOV	R10,R16
(0108) } 
(0109) 
(0110) /*
(0111) x表示在第几行显示，y表示在第几列显示
(0112) */
(0113) void lcd_set_xy(uint8 x,uint8 y) 
(0114) {
(0115) 	uint8 adr;
(0116) 
(0117) 	switch(x)
    00254 24BB      CLR	R11
    00255 01C5      MOVW	R24,R10
    00256 3081      CPI	R24,1
    00257 E0E0      LDI	R30,0
    00258 079E      CPC	R25,R30
    00259 F069      BEQ	0x0267
    0025A 3082      CPI	R24,2
    0025B E0E0      LDI	R30,0
    0025C 079E      CPC	R25,R30
    0025D F061      BEQ	0x026A
    0025E 3083      CPI	R24,3
    0025F E0E0      LDI	R30,0
    00260 079E      CPC	R25,R30
    00261 F059      BEQ	0x026D
    00262 3084      CPI	R24,4
    00263 E0E0      LDI	R30,0
    00264 079E      CPC	R25,R30
    00265 F051      BEQ	0x0270
    00266 C00B      RJMP	0x0272
(0118) 	{
(0119) 	case 1: adr = 0x7F + y;
    00267 2F46      MOV	R20,R22
    00268 5841      SUBI	R20,0x81
(0120) 		break;		//在第1行y列显示
    00269 C008      RJMP	0x0272
(0121) 	case 2: adr = 0x8F + y;
    0026A 2F46      MOV	R20,R22
    0026B 5741      SUBI	R20,0x71
(0122) 		break;		//在第2行y列显示
    0026C C005      RJMP	0x0272
(0123) 	case 3: adr = 0x87 + y;
    0026D 2F46      MOV	R20,R22
    0026E 5749      SUBI	R20,0x79
(0124) 		break;		//在第3行y列显示
    0026F C002      RJMP	0x0272
(0125) 	case 4: adr = 0x97 + y;
    00270 2F46      MOV	R20,R22
    00271 5649      SUBI	R20,0x69
(0126) 		break;		//在第4行y列显示
(0127) 	default:	;
(0128) 	}
(0129) 	lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
    00272 2F24      MOV	R18,R20
    00273 702F      ANDI	R18,0xF
    00274 702F      ANDI	R18,0xF
    00275 9522      SWAP	R18
    00276 2F04      MOV	R16,R20
    00277 7F00      ANDI	R16,0xF0
    00278 DFBD      RCALL	_lcd_wrCmd
    00279 940C 052E JMP	pop_xgsetF00C
_lcd_putc:
  ch                   --> R20
  y                    --> R12
  x                    --> R10
    0027B 940E 0535 CALL	push_xgset303C
    0027D 2EC2      MOV	R12,R18
    0027E 2EA0      MOV	R10,R16
    0027F 814E      LDD	R20,Y+6
(0130) }
(0131) 
(0132) void lcd_putc(uint8 x,uint8 y,uint8 ch)
(0133) {
(0134) 	lcd_set_xy(x,y);
    00280 2D2C      MOV	R18,R12
    00281 2D0A      MOV	R16,R10
    00282 DFCD      RCALL	_lcd_set_xy
(0135) 	delay50us(20); 
    00283 E104      LDI	R16,0x14
    00284 E010      LDI	R17,0
    00285 DF68      RCALL	_delay50us
(0136) 	lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
    00286 2F24      MOV	R18,R20
    00287 702F      ANDI	R18,0xF
    00288 702F      ANDI	R18,0xF
    00289 9522      SWAP	R18
    0028A 2F04      MOV	R16,R20
    0028B 7F00      ANDI	R16,0xF0
    0028C DFB6      RCALL	_lcd_wrDat
    0028D 940C 053C JMP	pop_xgset303C
_lcd_putd0:
  i                    --> R20
  length               --> R20
  dat                  --> Y,+7
  y                    --> R12
  x                    --> R10
    0028F 940E 0535 CALL	push_xgset303C
    00291 2EC2      MOV	R12,R18
    00292 2EA0      MOV	R10,R16
    00293 9721      SBIW	R28,1
    00294 854B      LDD	R20,Y+11
(0137) }
(0138) 
(0139) void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
(0140) {
(0141) 	sint8 i;
(0142) 
(0143) 	speaData(dat,length);
    00295 8348      ST	Y,R20
    00296 810F      LDD	R16,Y+7
    00297 8518      LDD	R17,Y+8
    00298 8529      LDD	R18,Y+9
    00299 853A      LDD	R19,Y+10
    0029A DDC2      RCALL	_speaData
(0144) 	lcd_set_xy(x,y);
    0029B 2D2C      MOV	R18,R12
    0029C 2D0A      MOV	R16,R10
    0029D DFB2      RCALL	_lcd_set_xy
(0145) 	delay50us(40);
    0029E E208      LDI	R16,0x28
    0029F E010      LDI	R17,0
    002A0 DF4D      RCALL	_delay50us
(0146) 	for(i=length-1;i>=0;i--)
    002A1 5041      SUBI	R20,1
    002A2 C01E      RJMP	0x02C1
(0147) 	{
(0148) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    002A3 E78F      LDI	R24,0x7F
    002A4 E090      LDI	R25,0
    002A5 2FE4      MOV	R30,R20
    002A6 27FF      CLR	R31
    002A7 FDE7      SBRC	R30,7
    002A8 95F0      COM	R31
    002A9 0FE8      ADD	R30,R24
    002AA 1FF9      ADC	R31,R25
    002AB 8180      LD	R24,Z
    002AC 2799      CLR	R25
    002AD 96C0      ADIW	R24,0x30
    002AE 019C      MOVW	R18,R24
    002AF 702F      ANDI	R18,0xF
    002B0 7030      ANDI	R19,0
    002B1 0F22      LSL	R18
    002B2 1F33      ROL	R19
    002B3 0F22      LSL	R18
    002B4 1F33      ROL	R19
    002B5 0F22      LSL	R18
    002B6 1F33      ROL	R19
    002B7 0F22      LSL	R18
    002B8 1F33      ROL	R19
    002B9 018C      MOVW	R16,R24
    002BA 7F00      ANDI	R16,0xF0
    002BB 7010      ANDI	R17,0
    002BC DF86      RCALL	_lcd_wrDat
(0149) 		delay50us(40); 
    002BD E208      LDI	R16,0x28
    002BE E010      LDI	R17,0
    002BF DF2E      RCALL	_delay50us
    002C0 954A      DEC	R20
    002C1 3040      CPI	R20,0
    002C2 F704      BGE	0x02A3
    002C3 9621      ADIW	R28,1
    002C4 940C 053C JMP	pop_xgset303C
_lcd_putd:
  effectLen            --> R22
  i                    --> R20
  length               --> R10
  dat                  --> Y,+11
  y                    --> R14
  x                    --> R12
    002C6 940E 051C CALL	push_xgsetF0FC
    002C8 2EE2      MOV	R14,R18
    002C9 2EC0      MOV	R12,R16
    002CA 9721      SBIW	R28,1
    002CB 84AF      LDD	R10,Y+15
(0150) 	}
(0151) }
(0152) 
(0153) void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
(0154) {
(0155) 	sint8 i;
(0156) 	sint8 effectLen;
(0157) 
(0158) 	if(dat>999999)
    002CC E38F      LDI	R24,0x3F
    002CD E492      LDI	R25,0x42
    002CE E0AF      LDI	R26,0xF
    002CF E0B0      LDI	R27,0
    002D0 842B      LDD	R2,Y+11
    002D1 843C      LDD	R3,Y+12
    002D2 844D      LDD	R4,Y+13
    002D3 845E      LDD	R5,Y+14
    002D4 1582      CP	R24,R2
    002D5 0593      CPC	R25,R3
    002D6 05A4      CPC	R26,R4
    002D7 05B5      CPC	R27,R5
    002D8 F410      BCC	0x02DB
(0159) 		effectLen=7;
    002D9 E067      LDI	R22,7
    002DA C04C      RJMP	0x0327
(0160) 	else if(dat>99999)
    002DB E98F      LDI	R24,0x9F
    002DC E896      LDI	R25,0x86
    002DD E0A1      LDI	R26,1
    002DE E0B0      LDI	R27,0
    002DF 842B      LDD	R2,Y+11
    002E0 843C      LDD	R3,Y+12
    002E1 844D      LDD	R4,Y+13
    002E2 845E      LDD	R5,Y+14
    002E3 1582      CP	R24,R2
    002E4 0593      CPC	R25,R3
    002E5 05A4      CPC	R26,R4
    002E6 05B5      CPC	R27,R5
    002E7 F410      BCC	0x02EA
(0161) 		effectLen=6;
    002E8 E066      LDI	R22,6
    002E9 C03D      RJMP	0x0327
(0162) 	else if(dat>9999)
    002EA E08F      LDI	R24,0xF
    002EB E297      LDI	R25,0x27
    002EC E0A0      LDI	R26,0
    002ED E0B0      LDI	R27,0
    002EE 842B      LDD	R2,Y+11
    002EF 843C      LDD	R3,Y+12
    002F0 844D      LDD	R4,Y+13
    002F1 845E      LDD	R5,Y+14
    002F2 1582      CP	R24,R2
    002F3 0593      CPC	R25,R3
    002F4 05A4      CPC	R26,R4
    002F5 05B5      CPC	R27,R5
    002F6 F410      BCC	0x02F9
(0163) 		effectLen=5;
    002F7 E065      LDI	R22,5
    002F8 C02E      RJMP	0x0327
(0164) 	else if(dat>999)
    002F9 EE87      LDI	R24,0xE7
    002FA E093      LDI	R25,3
    002FB E0A0      LDI	R26,0
    002FC E0B0      LDI	R27,0
    002FD 842B      LDD	R2,Y+11
    002FE 843C      LDD	R3,Y+12
    002FF 844D      LDD	R4,Y+13
    00300 845E      LDD	R5,Y+14
    00301 1582      CP	R24,R2
    00302 0593      CPC	R25,R3
    00303 05A4      CPC	R26,R4
    00304 05B5      CPC	R27,R5
    00305 F410      BCC	0x0308
(0165) 		effectLen=4;
    00306 E064      LDI	R22,4
    00307 C01F      RJMP	0x0327
(0166) 	else if(dat>99)
    00308 E683      LDI	R24,0x63
    00309 E090      LDI	R25,0
    0030A E0A0      LDI	R26,0
    0030B E0B0      LDI	R27,0
    0030C 842B      LDD	R2,Y+11
    0030D 843C      LDD	R3,Y+12
    0030E 844D      LDD	R4,Y+13
    0030F 845E      LDD	R5,Y+14
    00310 1582      CP	R24,R2
    00311 0593      CPC	R25,R3
    00312 05A4      CPC	R26,R4
    00313 05B5      CPC	R27,R5
    00314 F410      BCC	0x0317
(0167) 		effectLen=3;
    00315 E063      LDI	R22,3
    00316 C010      RJMP	0x0327
(0168) 	else if(dat>9)
    00317 E089      LDI	R24,0x9
    00318 E090      LDI	R25,0
    00319 E0A0      LDI	R26,0
    0031A E0B0      LDI	R27,0
    0031B 842B      LDD	R2,Y+11
    0031C 843C      LDD	R3,Y+12
    0031D 844D      LDD	R4,Y+13
    0031E 845E      LDD	R5,Y+14
    0031F 1582      CP	R24,R2
    00320 0593      CPC	R25,R3
    00321 05A4      CPC	R26,R4
    00322 05B5      CPC	R27,R5
    00323 F410      BCC	0x0326
(0169) 		effectLen=2;
    00324 E062      LDI	R22,2
    00325 C001      RJMP	0x0327
(0170) 	else
(0171) 		effectLen=1;
    00326 E061      LDI	R22,1
(0172) 	speaData(dat,effectLen);
    00327 8368      ST	Y,R22
    00328 850B      LDD	R16,Y+11
    00329 851C      LDD	R17,Y+12
    0032A 852D      LDD	R18,Y+13
    0032B 853E      LDD	R19,Y+14
    0032C DD30      RCALL	_speaData
(0173) 
(0174) 	lcd_set_xy(x,y);
    0032D 2D2E      MOV	R18,R14
    0032E 2D0C      MOV	R16,R12
    0032F DF20      RCALL	_lcd_set_xy
(0175) 	delay50us(40); 
    00330 E208      LDI	R16,0x28
    00331 E010      LDI	R17,0
    00332 DEBB      RCALL	_delay50us
(0176) 	if(length>effectLen)
    00333 2E26      MOV	R2,R22
    00334 2433      CLR	R3
    00335 FC27      SBRC	R2,7
    00336 9430      COM	R3
    00337 2C4A      MOV	R4,R10
    00338 2455      CLR	R5
    00339 1424      CP	R2,R4
    0033A 0435      CPC	R3,R5
    0033B F46C      BGE	0x0349
(0177) 	{
(0178) 		for(i=length-effectLen-1;i>=0;i--)
    0033C 2D44      MOV	R20,R4
    0033D 1B46      SUB	R20,R22
    0033E 5041      SUBI	R20,1
    0033F C007      RJMP	0x0347
(0179) 		{
(0180) 			lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
    00340 2722      CLR	R18
    00341 E200      LDI	R16,0x20
    00342 DF00      RCALL	_lcd_wrDat
(0181) 			delay50us(40); 
    00343 E208      LDI	R16,0x28
    00344 E010      LDI	R17,0
    00345 DEA8      RCALL	_delay50us
    00346 954A      DEC	R20
    00347 3040      CPI	R20,0
    00348 F7BC      BGE	0x0340
(0182) 		}
(0183) 	}
(0184) 	for(i=effectLen-1;i>=0;i--)
    00349 2F46      MOV	R20,R22
    0034A 5041      SUBI	R20,1
    0034B C01E      RJMP	0x036A
(0185) 	{
(0186) 		lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
    0034C E78F      LDI	R24,0x7F
    0034D E090      LDI	R25,0
    0034E 2FE4      MOV	R30,R20
    0034F 27FF      CLR	R31
    00350 FDE7      SBRC	R30,7
    00351 95F0      COM	R31
    00352 0FE8      ADD	R30,R24
    00353 1FF9      ADC	R31,R25
    00354 8180      LD	R24,Z
    00355 2799      CLR	R25
    00356 96C0      ADIW	R24,0x30
    00357 019C      MOVW	R18,R24
    00358 702F      ANDI	R18,0xF
    00359 7030      ANDI	R19,0
    0035A 0F22      LSL	R18
    0035B 1F33      ROL	R19
    0035C 0F22      LSL	R18
    0035D 1F33      ROL	R19
    0035E 0F22      LSL	R18
    0035F 1F33      ROL	R19
    00360 0F22      LSL	R18
    00361 1F33      ROL	R19
    00362 018C      MOVW	R16,R24
    00363 7F00      ANDI	R16,0xF0
    00364 7010      ANDI	R17,0
    00365 DEDD      RCALL	_lcd_wrDat
(0187) 		delay50us(40);
    00366 E208      LDI	R16,0x28
    00367 E010      LDI	R17,0
    00368 DE85      RCALL	_delay50us
    00369 954A      DEC	R20
    0036A 3040      CPI	R20,0
    0036B F704      BGE	0x034C
    0036C 9621      ADIW	R28,1
    0036D 940C 0511 JMP	pop_xgsetF0FC
_lcd_puts:
  str                  --> R20
  y                    --> R12
  x                    --> R10
    0036F 940E 0535 CALL	push_xgset303C
    00371 2EC2      MOV	R12,R18
    00372 2EA0      MOV	R10,R16
    00373 814E      LDD	R20,Y+6
    00374 815F      LDD	R21,Y+7
(0188) 	}
(0189) }
(0190) 
(0191) void lcd_puts(uint8 x,uint8 y,uint8 *str)
(0192) { 
(0193) 	lcd_set_xy(x,y);
    00375 2D2C      MOV	R18,R12
    00376 2D0A      MOV	R16,R10
    00377 DED8      RCALL	_lcd_set_xy
(0194) 	delay50us(20);   
    00378 E104      LDI	R16,0x14
    00379 E010      LDI	R17,0
    0037A DE73      RCALL	_delay50us
    0037B C00F      RJMP	0x038B
(0195) 	while(*str)
(0196) 	{
(0197) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    0037C 01FA      MOVW	R30,R20
    0037D 8020      LD	R2,Z
    0037E 2433      CLR	R3
    0037F 2D22      MOV	R18,R2
    00380 702F      ANDI	R18,0xF
    00381 702F      ANDI	R18,0xF
    00382 9522      SWAP	R18
    00383 2D02      MOV	R16,R2
    00384 7F00      ANDI	R16,0xF0
    00385 DEBD      RCALL	_lcd_wrDat
(0198) 		str++;
    00386 5F4F      SUBI	R20,0xFF
    00387 4F5F      SBCI	R21,0xFF
(0199) 		delay50us(20);
    00388 E104      LDI	R16,0x14
    00389 E010      LDI	R17,0
    0038A DE63      RCALL	_delay50us
    0038B 01FA      MOVW	R30,R20
    0038C 8020      LD	R2,Z
    0038D 2022      TST	R2
    0038E F769      BNE	0x037C
    0038F 940C 053C JMP	pop_xgset303C
_lcd_puts_:
  dlyMs                --> R10
  str                  --> R20
  y                    --> R14
  x                    --> R12
    00391 940E 051E CALL	push_xgset30FC
    00393 2EE2      MOV	R14,R18
    00394 2EC0      MOV	R12,R16
    00395 8548      LDD	R20,Y+8
    00396 8559      LDD	R21,Y+9
    00397 84AA      LDD	R10,Y+10
(0200) 	} 
(0201) }
(0202) 
(0203) void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
(0204) { 
(0205) 	lcd_set_xy(x,y);
    00398 2D2E      MOV	R18,R14
    00399 2D0C      MOV	R16,R12
    0039A DEB5      RCALL	_lcd_set_xy
(0206) 	delay50us(20);   
    0039B E104      LDI	R16,0x14
    0039C E010      LDI	R17,0
    0039D DE50      RCALL	_delay50us
    0039E C00F      RJMP	0x03AE
(0207) 	while(*str)
(0208) 	{
(0209) 		lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
    0039F 01FA      MOVW	R30,R20
    003A0 8020      LD	R2,Z
    003A1 2433      CLR	R3
    003A2 2D22      MOV	R18,R2
    003A3 702F      ANDI	R18,0xF
    003A4 702F      ANDI	R18,0xF
    003A5 9522      SWAP	R18
    003A6 2D02      MOV	R16,R2
    003A7 7F00      ANDI	R16,0xF0
    003A8 DE9A      RCALL	_lcd_wrDat
(0210) 		str++;
    003A9 5F4F      SUBI	R20,0xFF
    003AA 4F5F      SBCI	R21,0xFF
(0211) 		delay50ms(dlyMs);
    003AB 2D0A      MOV	R16,R10
    003AC 2711      CLR	R17
    003AD DE50      RCALL	_delay50ms
    003AE 01FA      MOVW	R30,R20
    003AF 8020      LD	R2,Z
    003B0 2022      TST	R2
    003B1 F769      BNE	0x039F
    003B2 940C 0508 JMP	pop_xgset30FC
(0212) 	} 
(0213) }
(0214) 
(0215) void lcd_clr()
(0216) {
(0217) 	lcd_wrCmd(0x00,0x10);
_lcd_clr:
    003B4 E120      LDI	R18,0x10
    003B5 2700      CLR	R16
    003B6 DE7F      RCALL	_lcd_wrCmd
(0218) 	delay50us(200);
    003B7 EC08      LDI	R16,0xC8
    003B8 E010      LDI	R17,0
    003B9 CE34      RJMP	_delay50us
(0219) }
(0220) 
(0221) void lcd_init(void)
(0222) {
(0223) 	SPI_init();	
_lcd_init:
    003BA DE6E      RCALL	_SPI_init
(0224) 	//OUT_LCD_CS;		//若LCD_CS
(0225) 	//SET_LCD_CS;		
(0226) 	delay50ms(1);
    003BB E001      LDI	R16,1
    003BC E010      LDI	R17,0
    003BD DE40      RCALL	_delay50ms
(0227) 	lcd_wrCmd(0x30,0x30);	//使用8位控制界面,使用基本指令集
    003BE E320      LDI	R18,0x30
    003BF E300      LDI	R16,0x30
    003C0 DE75      RCALL	_lcd_wrCmd
(0228) 	//lcd_wrCmd(0x00,0xF0);	//整体显示ON
(0229) 	lcd_wrCmd(0x00,0xC0);	//整体显示ON
    003C1 EC20      LDI	R18,0xC0
    003C2 2700      CLR	R16
    003C3 DE72      RCALL	_lcd_wrCmd
(0230) 	lcd_wrCmd(0x00,0x10);	//清屏
    003C4 E120      LDI	R18,0x10
    003C5 2700      CLR	R16
    003C6 DE6F      RCALL	_lcd_wrCmd
(0231) 	//lcd_wrCmd(0x10,0x00);	//光标
(0232) 	lcd_wrCmd(0x00,0x60);
    003C7 E620      LDI	R18,0x60
    003C8 2700      CLR	R16
    003C9 DE6C      RCALL	_lcd_wrCmd
(0233) 	//lcd_wrCmd(0x00,0x70);	//显示右移
(0234) 	delay50ms(1);		//不可省去！！！
    003CA E001      LDI	R16,1
    003CB E010      LDI	R17,0
    003CC CE31      RJMP	_delay50ms
_PCF8591_getAD:
  pRdDat               --> R14
  chan                 --> R10
  mode                 --> R12
    003CD 940E 0520 CALL	push_xgset00FC
    003CF 2EA2      MOV	R10,R18
    003D0 2EC0      MOV	R12,R16
    003D1 9724      SBIW	R28,4
    003D2 84EA      LDD	R14,Y+10
    003D3 84FB      LDD	R15,Y+11
FILE: D:\ICC_H\PCF8591.H
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net	
(0003) 
(0004) 目    的:   建立方便的PCF8591操作库
(0005) 
(0006) 目标系统:   基于AVR单片机
(0007) 		                                                                
(0008) 应用软件:   ICCAVR
(0009) 		                                                                
(0010) 版    本:   Version 1.0                                                
(0011) 		                                                                
(0012) 圆版时间:   2005-06-25
(0013) 	
(0014) 开发人员:   SEE
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 	
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 入口参数说明：
(0027) 	sbit I2C_SCL=P3^1;
(0028) 	sbit I2C_SDA=P3^0;
(0029) 	#define WR_DADR	0x90	//器件地址：A2 A1 A0 = 0 0 0
(0030) 	#define RD_DADR	0x91	//器件地址：A2 A1 A0 = 0 0 0
(0031) 
(0032) ----------------------------------------------------------------------
(0033) 待定参数说明：
(0034) 
(0035) ----------------------------------------------------------------------	
(0036) 对外变量说明：
(0037) 
(0038) ----------------------------------------------------------------------
(0039) 对外函数说明：
(0040) 
(0041) ----------------------------------------------------------------------
(0042) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0043) 
(0044) #ifndef PCF8591_H
(0045) #define PCF8591_H
(0046) 
(0047) #include "D:\ICC_H\CmmICC.H"
(0048) //sbit I2C_SCL=P3^1;
(0049) //sbit I2C_SDA=P3^0;
(0050) #include "D:\ICC_H\I2C.H"
(0051) 
(0052) //器件地址：A0 A1 A2 = 0 0 0
(0053) #ifndef WR_DADR 
(0054) 	#define WR_DADR		0x90	//write device-address 
(0055) #endif
(0056) #ifndef RD_DADR 
(0057) 	#define RD_DADR		0x91	//read device-address
(0058) #endif
(0059) 
(0060) #define MODE0 	0x00	//Channel0 = AIN0;
(0061) 						//Channel1 = AIN1;
(0062) 						//Channel2 = AIN2;
(0063) 						//Channel3 = AIN3;
(0064) #define MODE1 	0x10	//Channel0 = AIN3-AIN0;
(0065) 						//Channel1 = AIN3-AIN1
(0066) 						//Channel2 = AIN3-AIN2;
(0067) #define MODE2 	0x20	//Channel0 = AIN0;
(0068) 						//Channel1 = AIN1;
(0069) 						//Channel2 = AIN3-AIN2;
(0070) #define MODE3 	0x30	//Channel0 = AIN1-AIN0;
(0071) 						//Channel1 = AIN3-AIN2;
(0072) 
(0073) #define CHNL0 	0		//Using Channel0
(0074) #define CHNL1 	1		//Using Channel1
(0075) #define CHNL2 	2		//Using Channel2
(0076) #define CHNL3 	3		//Using Channel3
(0077) 
(0078) #define DAouputEn	0x40	//0x50 or 0x60 or 0x70 is also ok!
(0079) 
(0080) /*--------------------------------------------------------------------
(0081) 函数全称：
(0082) 函数功能：
(0083) 注意事项：
(0084) 提示说明：
(0085) 输    入：	
(0086) 返    回：00H~FFH
(0087) --------------------------------------------------------------------*/
(0088) void PCF8591_getAD(uint8 mode,uint8 chan,uint8 *pRdDat)
(0089) {
(0090) 	I2C_Read(WR_DADR,mode|chan,RD_DADR,pRdDat);
    003D4 82FB      STD	Y+3,R15
    003D5 82EA      STD	Y+2,R14
    003D6 E981      LDI	R24,0x91
    003D7 8388      ST	Y,R24
    003D8 2D2C      MOV	R18,R12
    003D9 292A      OR	R18,R10
    003DA E900      LDI	R16,0x90
    003DB E010      LDI	R17,0
    003DC DD98      RCALL	_I2C_Read
    003DD 9624      ADIW	R28,4
    003DE 940C 0501 JMP	pop_xgset00FC
_PCF8591_setDA:
  val                  --> R10
    003E0 92AA      ST	-Y,R10
    003E1 2EA0      MOV	R10,R16
    003E2 9721      SBIW	R28,1
(0091) }
(0092) /*--------------------------------------------------------------------
(0093) 函数全称：
(0094) 函数功能：
(0095) 注意事项：
(0096) 提示说明：
(0097) 输    入：00H~FFH	
(0098) 返    回：
(0099) --------------------------------------------------------------------*/
(0100) void PCF8591_setDA(uint8 val)
(0101) {
(0102) 	I2C_Write(WR_DADR,DAouputEn,val);
    003E3 82A8      ST	Y,R10
    003E4 E420      LDI	R18,0x40
    003E5 E900      LDI	R16,0x90
    003E6 E010      LDI	R17,0
    003E7 DD6A      RCALL	_I2C_Write
    003E8 9621      ADIW	R28,1
    003E9 90A9      LD	R10,Y+
    003EA 9508      RET
_main:
  ad_tmp1              --> R10
  ad_tmp0              --> R12
  ad_tmp2              --> Y,+5
    003EB 9726      SBIW	R28,6
FILE: E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PCF859~1\PCF8591_LCD12864\PCF8591.C
(0001) /*********************************************************************
(0002) 	微 雪 电 子   WaveShare   http://www.waveShare.net            	
(0003) 		                                                            
(0004) 项目名称:   PCF8591示例程序
(0005) 		
(0006) 目标系统:   “DVK501” && “M16+ EX”
(0007) 
(0008) 应用软件:   ICCAVR 6.31A                                             
(0009) 		                                                                
(0010) 版    本:   V1.0 
(0011)                                                         
(0012) 圆版时间:   2009-7-1
(0013) 
(0014) 开发人员:   zz
(0015) 
(0016) 说    明:   若用于商业用途，请保留此段文字或注明代码来源
(0017) 		
(0018) 	深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
(0019) *********************************************************************/
(0020) 
(0021) /*01010101010101010101010101010101010101010101010101010101010101010101
(0022) ----------------------------------------------------------------------
(0023) 版本更新记录：
(0024) 
(0025) ----------------------------------------------------------------------
(0026) 实验内容：
(0027) 初始化、读取AD 使用LCD12864观察AD的值
(0028) ----------------------------------------------------------------------
(0029) 硬件连接：将PCF8591的A0、A1、A2使用短路帽短接至“－  ”。
(0030) 		  将PCF8591的IN0接可调电阻的AD1
(0031) 			LCD12864_ST7920			ATmega16
(0032) 				RS(CS)	--------	VCC
(0033) 				R/W(SID)--------	MOSI/PB5
(0034) 				E(SCLK)	--------	SCK/PB7
(0035) 				PSB		--------	GND
(0036) 				
(0037) 		 	  DVK501				 STK16+
(0038) 				VCC		---------	  VCC
(0039) 				GND		---------	  GND
(0040) 				SCK	 	---------	  PC0(SCL)
(0041) 				SDA		---------	  PC1(SDA)
(0042) ----------------------------------------------------------------------
(0043) 注意事项： 
(0044) （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
(0045) （2）请详细阅读“使用必读”及相关资料。
(0046) ----------------------------------------------------------------------
(0047) 10101010101010101010101010101010101010101010101010101010101010101010*/
(0048) 
(0049) #include <iom16v.h>
(0050) #include "D:\ICC_H\LCD12864_ST7920.H"
(0051) 
(0052) #define WR_DADR		0x90	//write device-address
(0053) #define RD_DADR		0x91	//read device-address
(0054) #include "D:\ICC_H\PCF8591.H"
(0055) 
(0056) void main(void)
(0057) {
(0058)     unsigned char ad_tmp2;
(0059) 	unsigned int ad_tmp0,ad_tmp1;
(0060) 	//DDRF=0xFF;
(0061) 	TWBR = 0X12;
    003EC E182      LDI	R24,0x12
    003ED B980      OUT	0x00,R24
(0062) 	lcd_init();
    003EE DFCB      RCALL	_lcd_init
(0063) 	lcd_clr();
    003EF DFC4      RCALL	_lcd_clr
(0064) 	lcd_puts(1,1,"AD测试程序");
    003F0 E784      LDI	R24,0x74
    003F1 E090      LDI	R25,0
    003F2 8399      STD	Y+1,R25
    003F3 8388      ST	Y,R24
    003F4 E021      LDI	R18,1
    003F5 E001      LDI	R16,1
    003F6 DF78      RCALL	_lcd_puts
(0065) 	lcd_puts(2,1,"PCF8591");
    003F7 E68C      LDI	R24,0x6C
    003F8 E090      LDI	R25,0
    003F9 8399      STD	Y+1,R25
    003FA 8388      ST	Y,R24
    003FB E021      LDI	R18,1
    003FC E002      LDI	R16,2
    003FD DF71      RCALL	_lcd_puts
(0066) 	lcd_puts(3,1,"当前电压为:");	
    003FE E680      LDI	R24,0x60
    003FF E090      LDI	R25,0
    00400 8399      STD	Y+1,R25
    00401 8388      ST	Y,R24
    00402 E021      LDI	R18,1
    00403 E003      LDI	R16,3
    00404 DF6A      RCALL	_lcd_puts
    00405 C045      RJMP	0x044B
(0067)  	 while(1)
(0068) 	 {
(0069) 			PCF8591_getAD(MODE0,CHNL0,&ad_tmp2);
    00406 01CE      MOVW	R24,R28
    00407 9605      ADIW	R24,5
    00408 8399      STD	Y+1,R25
    00409 8388      ST	Y,R24
    0040A 2722      CLR	R18
    0040B 2700      CLR	R16
    0040C DFC0      RCALL	_PCF8591_getAD
(0070) 			ad_tmp0=(unsigned int)ad_tmp2;
    0040D 80CD      LDD	R12,Y+5
    0040E 24DD      CLR	R13
(0071) 			if(ad_tmp0!=ad_tmp1)
    0040F 14CA      CP	R12,R10
    00410 04DB      CPC	R13,R11
    00411 F1A1      BEQ	0x0446
(0072) 			{
(0073) 			 	ad_tmp2=(unsigned char)((ad_tmp0*5)>>8);
    00412 E005      LDI	R16,5
    00413 E010      LDI	R17,0
    00414 0196      MOVW	R18,R12
    00415 940E 04BD CALL	empy16s
    00417 0118      MOVW	R2,R16
    00418 2C23      MOV	R2,R3
    00419 2433      CLR	R3
    0041A 822D      STD	Y+5,R2
(0074) 			 	lcd_putd(4,4,ad_tmp2,0);
    0041B 2422      CLR	R2
    0041C 822C      STD	Y+4,R2
    0041D 802D      LDD	R2,Y+5
    0041E 2433      CLR	R3
    0041F 2444      CLR	R4
    00420 2455      CLR	R5
    00421 8228      ST	Y,R2
    00422 8239      STD	Y+1,R3
    00423 824A      STD	Y+2,R4
    00424 825B      STD	Y+3,R5
    00425 E024      LDI	R18,4
    00426 E004      LDI	R16,4
    00427 DE9E      RCALL	_lcd_putd
(0075) 				lcd_putc(4,5,'.');
    00428 E28E      LDI	R24,0x2E
    00429 8388      ST	Y,R24
    0042A E025      LDI	R18,5
    0042B E004      LDI	R16,4
    0042C DE4E      RCALL	_lcd_putc
(0076) 				ad_tmp2=(unsigned char)(ad_tmp0*5);
    0042D E005      LDI	R16,5
    0042E E010      LDI	R17,0
    0042F 0196      MOVW	R18,R12
    00430 940E 04BD CALL	empy16s
    00432 830D      STD	Y+5,R16
(0077) 				lcd_putd(4,6,ad_tmp2,0);
    00433 2422      CLR	R2
    00434 822C      STD	Y+4,R2
    00435 2E20      MOV	R2,R16
    00436 2433      CLR	R3
    00437 2444      CLR	R4
    00438 2455      CLR	R5
    00439 8228      ST	Y,R2
    0043A 8239      STD	Y+1,R3
    0043B 824A      STD	Y+2,R4
    0043C 825B      STD	Y+3,R5
    0043D E026      LDI	R18,6
    0043E E004      LDI	R16,4
    0043F DE86      RCALL	_lcd_putd
(0078) 				lcd_putc(4,7,'V');
    00440 E586      LDI	R24,0x56
    00441 8388      ST	Y,R24
    00442 E027      LDI	R18,7
    00443 E004      LDI	R16,4
    00444 DE36      RCALL	_lcd_putc
(0079) 				ad_tmp1 = ad_tmp0;
    00445 0156      MOVW	R10,R12
(0080) 			}
(0081) 			ad_tmp0=(unsigned int)ad_tmp2;
    00446 80CD      LDD	R12,Y+5
    00447 24DD      CLR	R13
(0082) 			delay50ms(1);
FILE: <library>
    00448 E001      LDI	R16,1
    00449 E010      LDI	R17,0
    0044A DDB3      RCALL	_delay50ms
    0044B CFBA      RJMP	0x0406
    0044C 9626      ADIW	R28,6
    0044D 9508      RET
push_arg4:
    0044E 933A      ST	-Y,R19
    0044F 932A      ST	-Y,R18
push_arg2:
    00450 931A      ST	-Y,R17
    00451 930A      ST	-Y,R16
    00452 9508      RET
div32u:
    00453 94E8      BCLR	6
    00454 C001      RJMP	0x0456
mod32u:
    00455 9468      BSET	6
    00456 D030      RCALL	long_div_prolog
    00457 24CC      CLR	R12
    00458 C009      RJMP	0x0462
div32s:
    00459 94E8      BCLR	6
    0045A C001      RJMP	0x045C
mod32s:
    0045B 9468      BSET	6
    0045C D02A      RCALL	long_div_prolog
    0045D FD37      SBRC	R19,7
    0045E 940E 0555 CALL	neg32
    00460 FDB7      SBRC	R27,7
    00461 D052      RCALL	neg_R24_R27
    00462 2477      CLR	R7
    00463 2488      CLR	R8
    00464 2499      CLR	R9
    00465 24AA      CLR	R10
    00466 24BB      CLR	R11
    00467 D042      RCALL	tst_R16_R19
    00468 F0C1      BEQ	0x0481
    00469 D045      RCALL	tst_R24_R27
    0046A F0B1      BEQ	0x0481
    0046B E2E8      LDI	R30,0x28
    0046C 0F00      LSL	R16
    0046D 1F11      ROL	R17
    0046E 1F22      ROL	R18
    0046F 1F33      ROL	R19
    00470 1C77      ROL	R7
    00471 1C88      ROL	R8
    00472 1C99      ROL	R9
    00473 1CAA      ROL	R10
    00474 1CBB      ROL	R11
    00475 1688      CP	R8,R24
    00476 0699      CPC	R9,R25
    00477 06AA      CPC	R10,R26
    00478 06BB      CPC	R11,R27
    00479 F028      BCS	0x047F
    0047A 1A88      SUB	R8,R24
    0047B 0A99      SBC	R9,R25
    0047C 0AAA      SBC	R10,R26
    0047D 0ABB      SBC	R11,R27
    0047E 9503      INC	R16
    0047F 95EA      DEC	R30
    00480 F759      BNE	0x046C
    00481 F426      BRTC	0x0486
    00482 2D08      MOV	R16,R8
    00483 2D19      MOV	R17,R9
    00484 2D2A      MOV	R18,R10
    00485 2D3B      MOV	R19,R11
    00486 C013      RJMP	long_div_epilog
long_div_prolog:
    00487 927A      ST	-Y,R7
    00488 928A      ST	-Y,R8
    00489 929A      ST	-Y,R9
    0048A 92AA      ST	-Y,R10
    0048B 92BA      ST	-Y,R11
    0048C 92CA      ST	-Y,R12
    0048D 93EA      ST	-Y,R30
    0048E 938A      ST	-Y,R24
    0048F 939A      ST	-Y,R25
    00490 93AA      ST	-Y,R26
    00491 93BA      ST	-Y,R27
    00492 858B      LDD	R24,Y+11
    00493 859C      LDD	R25,Y+12
    00494 85AD      LDD	R26,Y+13
    00495 85BE      LDD	R27,Y+14
    00496 2EC3      MOV	R12,R19
    00497 F00E      BRTS	0x0499
    00498 26CB      EOR	R12,R27
    00499 9508      RET
long_div_epilog:
    0049A FCC7      SBRC	R12,7
    0049B 940E 0555 CALL	neg32
    0049D 91B9      LD	R27,Y+
    0049E 91A9      LD	R26,Y+
    0049F 9199      LD	R25,Y+
    004A0 9189      LD	R24,Y+
    004A1 91E9      LD	R30,Y+
    004A2 90C9      LD	R12,Y+
    004A3 90B9      LD	R11,Y+
    004A4 90A9      LD	R10,Y+
    004A5 9099      LD	R9,Y+
    004A6 9089      LD	R8,Y+
    004A7 9079      LD	R7,Y+
    004A8 9624      ADIW	R28,4
    004A9 9508      RET
tst_R16_R19:
    004AA 2FE0      MOV	R30,R16
    004AB 2BE1      OR	R30,R17
    004AC 2BE2      OR	R30,R18
    004AD 2BE3      OR	R30,R19
    004AE 9508      RET
tst_R24_R27:
    004AF 2FE8      MOV	R30,R24
    004B0 2BE9      OR	R30,R25
    004B1 2BEA      OR	R30,R26
    004B2 2BEB      OR	R30,R27
    004B3 9508      RET
neg_R24_R27:
    004B4 9580      COM	R24
    004B5 9590      COM	R25
    004B6 95A0      COM	R26
    004B7 95B0      COM	R27
    004B8 5F8F      SUBI	R24,0xFF
    004B9 4F9F      SBCI	R25,0xFF
    004BA 4FAF      SBCI	R26,0xFF
    004BB 4FBF      SBCI	R27,0xFF
    004BC 9508      RET
empy16s:
    004BD 920A      ST	-Y,R0
    004BE 921A      ST	-Y,R1
    004BF 938A      ST	-Y,R24
    004C0 939A      ST	-Y,R25
    004C1 9F02      MUL	R16,R18
    004C2 01C0      MOVW	R24,R0
    004C3 9F12      MUL	R17,R18
    004C4 0D90      ADD	R25,R0
    004C5 9F03      MUL	R16,R19
    004C6 0D90      ADD	R25,R0
    004C7 018C      MOVW	R16,R24
    004C8 9199      LD	R25,Y+
    004C9 9189      LD	R24,Y+
    004CA 9019      LD	R1,Y+
    004CB 9009      LD	R0,Y+
    004CC 9508      RET
empy32u|empy32s:
    004CD 940E 055E CALL	long_prolog
    004CF 927A      ST	-Y,R7
    004D0 940E 0577 CALL	tstzero1
    004D2 F159      BEQ	0x04FE
    004D3 2477      CLR	R7
    004D4 940E 057D CALL	tstzero2
    004D6 F419      BNE	0x04DA
    004D7 018C      MOVW	R16,R24
    004D8 019D      MOVW	R18,R26
    004D9 C024      RJMP	0x04FE
    004DA 920A      ST	-Y,R0
    004DB 921A      ST	-Y,R1
    004DC 9F08      MUL	R16,R24
    004DD 2CB0      MOV	R11,R0
    004DE 2CA1      MOV	R10,R1
    004DF 9F28      MUL	R18,R24
    004E0 2C90      MOV	R9,R0
    004E1 2C81      MOV	R8,R1
    004E2 9F18      MUL	R17,R24
    004E3 0CA0      ADD	R10,R0
    004E4 1C91      ADC	R9,R1
    004E5 1C87      ADC	R8,R7
    004E6 9F09      MUL	R16,R25
    004E7 0CA0      ADD	R10,R0
    004E8 1C91      ADC	R9,R1
    004E9 1C87      ADC	R8,R7
    004EA 9F19      MUL	R17,R25
    004EB 0C90      ADD	R9,R0
    004EC 1C81      ADC	R8,R1
    004ED 9F0A      MUL	R16,R26
    004EE 0C90      ADD	R9,R0
    004EF 1C81      ADC	R8,R1
    004F0 9F38      MUL	R19,R24
    004F1 0C80      ADD	R8,R0
    004F2 9F29      MUL	R18,R25
    004F3 0C80      ADD	R8,R0
    004F4 9F1A      MUL	R17,R26
    004F5 0C80      ADD	R8,R0
    004F6 9F0B      MUL	R16,R27
    004F7 0C80      ADD	R8,R0
    004F8 9019      LD	R1,Y+
    004F9 9009      LD	R0,Y+
    004FA 2D0B      MOV	R16,R11
    004FB 2D1A      MOV	R17,R10
    004FC 2D29      MOV	R18,R9
    004FD 2D38      MOV	R19,R8
    004FE 9079      LD	R7,Y+
    004FF 940C 056C JMP	long_epilog
pop_xgset00FC:
    00501 90A9      LD	R10,Y+
    00502 90B9      LD	R11,Y+
    00503 90C9      LD	R12,Y+
    00504 90D9      LD	R13,Y+
    00505 90E9      LD	R14,Y+
    00506 90F9      LD	R15,Y+
    00507 9508      RET
pop_xgset30FC:
    00508 90A9      LD	R10,Y+
    00509 90B9      LD	R11,Y+
    0050A 90C9      LD	R12,Y+
    0050B 90D9      LD	R13,Y+
    0050C 90E9      LD	R14,Y+
    0050D 90F9      LD	R15,Y+
    0050E 9149      LD	R20,Y+
    0050F 9159      LD	R21,Y+
    00510 9508      RET
pop_xgsetF0FC:
    00511 90A9      LD	R10,Y+
    00512 90B9      LD	R11,Y+
    00513 90C9      LD	R12,Y+
    00514 90D9      LD	R13,Y+
    00515 90E9      LD	R14,Y+
    00516 90F9      LD	R15,Y+
    00517 9149      LD	R20,Y+
    00518 9159      LD	R21,Y+
    00519 9169      LD	R22,Y+
    0051A 9179      LD	R23,Y+
    0051B 9508      RET
push_xgsetF0FC:
    0051C 937A      ST	-Y,R23
    0051D 936A      ST	-Y,R22
push_xgset30FC:
    0051E 935A      ST	-Y,R21
    0051F 934A      ST	-Y,R20
push_xgset00FC:
    00520 92FA      ST	-Y,R15
    00521 92EA      ST	-Y,R14
push_xgset003C:
    00522 92DA      ST	-Y,R13
    00523 92CA      ST	-Y,R12
    00524 92BA      ST	-Y,R11
    00525 92AA      ST	-Y,R10
    00526 9508      RET
push_xgsetF00C:
    00527 937A      ST	-Y,R23
    00528 936A      ST	-Y,R22
    00529 935A      ST	-Y,R21
    0052A 934A      ST	-Y,R20
    0052B 92BA      ST	-Y,R11
    0052C 92AA      ST	-Y,R10
    0052D 9508      RET
pop_xgsetF00C:
    0052E 90A9      LD	R10,Y+
    0052F 90B9      LD	R11,Y+
    00530 9149      LD	R20,Y+
    00531 9159      LD	R21,Y+
    00532 9169      LD	R22,Y+
    00533 9179      LD	R23,Y+
    00534 9508      RET
push_xgset303C:
    00535 935A      ST	-Y,R21
    00536 934A      ST	-Y,R20
    00537 92DA      ST	-Y,R13
    00538 92CA      ST	-Y,R12
    00539 92BA      ST	-Y,R11
    0053A 92AA      ST	-Y,R10
    0053B 9508      RET
pop_xgset303C:
    0053C 90A9      LD	R10,Y+
    0053D 90B9      LD	R11,Y+
    0053E 90C9      LD	R12,Y+
    0053F 90D9      LD	R13,Y+
    00540 9149      LD	R20,Y+
    00541 9159      LD	R21,Y+
    00542 9508      RET
push_xgsetF03C:
    00543 937A      ST	-Y,R23
    00544 936A      ST	-Y,R22
    00545 935A      ST	-Y,R21
    00546 934A      ST	-Y,R20
    00547 92DA      ST	-Y,R13
    00548 92CA      ST	-Y,R12
    00549 92BA      ST	-Y,R11
    0054A 92AA      ST	-Y,R10
    0054B 9508      RET
pop_xgsetF03C:
    0054C 90A9      LD	R10,Y+
    0054D 90B9      LD	R11,Y+
    0054E 90C9      LD	R12,Y+
    0054F 90D9      LD	R13,Y+
    00550 9149      LD	R20,Y+
    00551 9159      LD	R21,Y+
    00552 9169      LD	R22,Y+
    00553 9179      LD	R23,Y+
    00554 9508      RET
neg32:
    00555 9500      COM	R16
    00556 9510      COM	R17
    00557 9520      COM	R18
    00558 9530      COM	R19
    00559 5F0F      SUBI	R16,0xFF
    0055A 4F1F      SBCI	R17,0xFF
    0055B 4F2F      SBCI	R18,0xFF
    0055C 4F3F      SBCI	R19,0xFF
    0055D 9508      RET
long_prolog:
    0055E 928A      ST	-Y,R8
    0055F 929A      ST	-Y,R9
    00560 92AA      ST	-Y,R10
    00561 92BA      ST	-Y,R11
    00562 93EA      ST	-Y,R30
    00563 938A      ST	-Y,R24
    00564 939A      ST	-Y,R25
    00565 93AA      ST	-Y,R26
    00566 93BA      ST	-Y,R27
    00567 8589      LDD	R24,Y+9
    00568 859A      LDD	R25,Y+10
    00569 85AB      LDD	R26,Y+11
    0056A 85BC      LDD	R27,Y+12
    0056B 9508      RET
long_epilog:
    0056C 91B9      LD	R27,Y+
    0056D 91A9      LD	R26,Y+
    0056E 9199      LD	R25,Y+
    0056F 9189      LD	R24,Y+
    00570 91E9      LD	R30,Y+
    00571 90B9      LD	R11,Y+
    00572 90A9      LD	R10,Y+
    00573 9099      LD	R9,Y+
    00574 9089      LD	R8,Y+
    00575 9624      ADIW	R28,4
    00576 9508      RET
tstzero1:
    00577 27EE      CLR	R30
    00578 2BE0      OR	R30,R16
    00579 2BE1      OR	R30,R17
    0057A 2BE2      OR	R30,R18
    0057B 2BE3      OR	R30,R19
    0057C 9508      RET
tstzero2:
    0057D 27EE      CLR	R30
    0057E 2BE8      OR	R30,R24
    0057F 2BE9      OR	R30,R25
    00580 2BEA      OR	R30,R26
    00581 2BEB      OR	R30,R27
    00582 9508      RET
