                        .module PCF8591.C
                        .area text(rom, con, rel)
 0000                   .dbfile ..\..\..\STK16_~1.0\PCF859~1\PCF8591_LCD12864\PCF8591.C
 0000                   .dbfile D:\ICC_H\Software.H
 0000                   .dbfunc e speaData _speaData fV
 0000           ;              y -> y+4
 0000           ;              j -> y+0
 0000           ;              i -> R10
 0000           ;            len -> R12
 0000           ;            dat -> y+16
                        .even
 0000           _speaData::
 0000 0E940000          xcall push_arg4
 0004 0E940000          xcall push_xgsetF03C
 0008 2897              sbiw R28,8
 000A CC88              ldd R12,y+20
 000C                   .dbline -1
 000C                   .dbline 116
 000C           ; /*********************************************************************
 000C           ;       微 雪 电 子   WaveShare   http://www.waveShare.net              
 000C           ;                                                                       
 000C           ; 目    的:   建立AVR的软件提取库，增加各类补丁，方便系统程序移植
 000C           ;       
 000C           ; 目标系统:   基于AVR单片机
 000C           ;                                                                               
 000C           ; 应用软件:   ICCAVR
 000C           ;                                                                               
 000C           ; 版    本:   Version 1.0                                                       
 000C           ;                                                                               
 000C           ; 圆版时间:   2005-06-25
 000C           ;       
 000C           ; 开发人员:   SEE
 000C           ; 
 000C           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 000C           ;       
 000C           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
 000C           ; *********************************************************************/
 000C           ; 
 000C           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 000C           ; ----------------------------------------------------------------------
 000C           ; 版本更新记录：
 000C           ; 
 000C           ; ----------------------------------------------------------------------
 000C           ; 入口参数说明：
 000C           ; 
 000C           ; ----------------------------------------------------------------------
 000C           ; 待定参数说明：
 000C           ; 
 000C           ; ----------------------------------------------------------------------        
 000C           ; 对外变量说明：
 000C           ;     
 000C           ; ----------------------------------------------------------------------
 000C           ; 对外函数说明：
 000C           ;    
 000C           ; ----------------------------------------------------------------------
 000C           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 000C           ; 
 000C           ; #ifndef Software_H
 000C           ; #define Software_H
 000C           ; 
 000C           ; #include <math.h>
 000C           ; #include <string.h>
 000C           ; 
 000C           ; /* 兼容一般程序员的常用写法 */
 000C           ; typedef unsigned char uchar;
 000C           ; typedef unsigned int  uint;
 000C           ; typedef unsigned long ulong;
 000C           ; typedef signed char           schar;
 000C           ; typedef signed int            sint;
 000C           ; typedef signed long           slong;
 000C           ; 
 000C           ; /* 为方便移植，建议使用下面写法 */
 000C           ; typedef unsigned char bool;
 000C           ; typedef unsigned char uint8;
 000C           ; typedef unsigned int  uint16;
 000C           ; typedef unsigned long   uint32;
 000C           ; typedef signed  char  sint8;
 000C           ; typedef signed        int             sint16;
 000C           ; typedef signed        long    sint32;
 000C           ; typedef signed  char  int8;
 000C           ; typedef signed  int           int16;
 000C           ; typedef signed  long  int32;
 000C           ; 
 000C           ; /* 下面写法一般不推荐 */
 000C           ; //typedef unsigned char ubyte;
 000C           ; //typedef unsigned int        uword;
 000C           ; //typedef unsigned long udword;
 000C           ; //typedef signed   char       sbyte;
 000C           ; //typedef signed   int        sword;
 000C           ; //typedef signed   long       sdword;
 000C           ; 
 000C           ; /* 一般程序定义的默认值 */
 000C           ; //#define NULL                        0
 000C           ; //#define EOF                 -1
 000C           ; //#define TRUE                1
 000C           ; //#define FALSE               0
 000C           ; //#define YES                 1
 000C           ; //#define NO                          0
 000C           ; //#define ON                  1
 000C           ; //#define OFF                 0
 000C           ; //#define ENABLE              1
 000C           ; //#define DISABLE             0
 000C           ; //#define CRR                 1
 000C           ; //#define ERR                 0
 000C           ; //#define RIGHT                       1
 000C           ; //#define WRONG                       0
 000C           ; //#define SUCCESS             1
 000C           ; //#define FAILURE             0
 000C           ; //#define PI                  3.1415926       //3.1415926535897932
 000C           ; 
 000C           ; /* 如果你手头上的RAM实在很紧，不如尝试下面的define～ */
 000C           ; //#define _CALLOC(a)          ( (a *)calloc(n,sizeof(a)) )
 000C           ; //#define _MALLOC(a)          ( (a *)malloc(sizeof(a)) )
 000C           ; //#define _MIN(a,b)                   ( (a) < (b) ? (a) : (b) )
 000C           ; //#define _MAX(a,b)                   ( (a) > (b) ? (a) : (b) )
 000C           ; //#define _EXCHANGE(a,b)      { int t; t=a; a=b; b=t; }
 000C           ; //#define _TOLOWER(c)         ( (c)+32 )
 000C           ; //#define _TOUPPER(c)         ( (c)-32 )
 000C           ; 
 000C           ; //#ifndef BIT
 000C           ; //#define BIT(x)      ( 1<<(x) )
 000C           ; //#endif
 000C           ; 
 000C           ; /*--------------------------------------------------------------------
 000C           ; 函数全称：数据拆字
 000C           ; 函数功能：
 000C           ; 注意事项：D<=999999,C<=6
 000C           ; 提示说明：调用speaData(12,2)，得到dataElem[0]=2，dataElem[1]=1
 000C           ; 输    入：
 000C           ; 返    回：无
 000C           ; --------------------------------------------------------------------*/
 000C           ; uint8 dataElem[6];
 000C           ; void speaData(uint32 dat,sint8 len)
 000C           ; {
 000C                   .dbline 119
 000C           ;     uint8 i;
 000C           ;     uint32 j,y;
 000C           ;     for(i=0,j=1;i<len;i++)
 000C AA24              clr R10
 000E 81E0              ldi R24,1
 0010 8883              std y+0,R24
 0012 80E0              ldi R24,0
 0014 8983              std y+1,R24
 0016 8A83              std y+2,R24
 0018 8B83              std y+3,R24
 001A 3CC0              xjmp L5
 001C           L2:
 001C                   .dbline 120
 001C           ;     {
 001C                   .dbline 121
 001C           ;         y=dat/j;
 001C 2880              ldd R2,y+0
 001E 3980              ldd R3,y+1
 0020 4A80              ldd R4,y+2
 0022 5B80              ldd R5,y+3
 0024 0889              ldd R16,y+16
 0026 1989              ldd R17,y+17
 0028 2A89              ldd R18,y+18
 002A 3B89              ldd R19,y+19
 002C 5A92              st -y,R5
 002E 4A92              st -y,R4
 0030 3A92              st -y,R3
 0032 2A92              st -y,R2
 0034 0E940000          xcall div32u
 0038 0C83              std y+4,R16
 003A 1D83              std y+5,R17
 003C 2E83              std y+6,R18
 003E 3F83              std y+7,R19
 0040                   .dbline 122
 0040           ;         dataElem[i]=y%10;
 0040 4AE0              ldi R20,10
 0042 50E0              ldi R21,0
 0044 60E0              ldi R22,0
 0046 70E0              ldi R23,0
 0048 0C81              ldd R16,y+4
 004A 1D81              ldd R17,y+5
 004C 2E81              ldd R18,y+6
 004E 3F81              ldd R19,y+7
 0050 7A93              st -y,R23
 0052 6A93              st -y,R22
 0054 5A93              st -y,R21
 0056 4A93              st -y,R20
 0058 0E940000          xcall mod32u
 005C 80E0              ldi R24,<_dataElem
 005E 90E0              ldi R25,>_dataElem
 0060 EA2D              mov R30,R10
 0062 FF27              clr R31
 0064 E80F              add R30,R24
 0066 F91F              adc R31,R25
 0068 0083              std z+0,R16
 006A                   .dbline 123
 006A           ;         j*=10;
 006A 2880              ldd R2,y+0
 006C 3980              ldd R3,y+1
 006E 4A80              ldd R4,y+2
 0070 5B80              ldd R5,y+3
 0072 4AE0              ldi R20,10
 0074 50E0              ldi R21,0
 0076 60E0              ldi R22,0
 0078 70E0              ldi R23,0
 007A 5A92              st -y,R5
 007C 4A92              st -y,R4
 007E 3A92              st -y,R3
 0080 2A92              st -y,R2
 0082 8A01              movw R16,R20
 0084 9B01              movw R18,R22
 0086 0E940000          xcall empy32u
 008A 0883              std y+0,R16
 008C 1983              std y+1,R17
 008E 2A83              std y+2,R18
 0090 3B83              std y+3,R19
 0092                   .dbline 124
 0092           ;     }
 0092           L3:
 0092                   .dbline 119
 0092 A394              inc R10
 0094           L5:
 0094                   .dbline 119
 0094 2C2C              mov R2,R12
 0096 3324              clr R3
 0098 27FC              sbrc R2,7
 009A 3094              com R3
 009C 4A2C              mov R4,R10
 009E 5524              clr R5
 00A0 4214              cp R4,R2
 00A2 5304              cpc R5,R3
 00A4 0CF4              brge X1
 00A6 BACF              xjmp L2
 00A8           X1:
 00A8           X0:
 00A8                   .dbline -2
 00A8           L1:
 00A8                   .dbline 0 ; func end
 00A8 2896              adiw R28,8
 00AA 0E940000          xcall pop_xgsetF03C
 00AE 2496              adiw R28,4
 00B0 0895              ret
 00B2                   .dbsym l y 4 l
 00B2                   .dbsym l j 0 l
 00B2                   .dbsym r i 10 c
 00B2                   .dbsym r len 12 C
 00B2                   .dbsym l dat 16 l
 00B2                   .dbend
 00B2                   .dbfile D:\ICC_H\I2C.H
 00B2                   .dbfunc e I2C_Start _I2C_Start fc
                        .even
 00B2           _I2C_Start::
 00B2                   .dbline -1
 00B2                   .dbline 126
 00B2           ; /*********************************************************************
 00B2           ;       微 雪 电 子   WaveShare   http://www.waveShare.net              
 00B2           ;                                                                       
 00B2           ; 目    的:   建立I2C操作库
 00B2           ;       
 00B2           ; 目标系统:   基于AVR单片机
 00B2           ;                                                                               
 00B2           ; 应用软件:   ICCAVR
 00B2           ;                                                                               
 00B2           ; 版    本:   Version 1.0                                                          
 00B2           ;                                                                               
 00B2           ; 圆版时间:   2005-06-25
 00B2           ;       
 00B2           ; 开发人员:   SEE
 00B2           ; 
 00B2           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 00B2           ;       
 00B2           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
 00B2           ; *********************************************************************/
 00B2           ; 
 00B2           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 00B2           ; ----------------------------------------------------------------------
 00B2           ; 版本更新记录：
 00B2           ; 
 00B2           ; ----------------------------------------------------------------------
 00B2           ; 入口参数说明：
 00B2           ; 
 00B2           ; ----------------------------------------------------------------------
 00B2           ; 待定参数说明：
 00B2           ; 
 00B2           ; ----------------------------------------------------------------------        
 00B2           ; 对外变量说明：
 00B2           ; 
 00B2           ; ----------------------------------------------------------------------
 00B2           ; 对外函数说明：
 00B2           ; 
 00B2           ; ----------------------------------------------------------------------
 00B2           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 00B2           ; 
 00B2           ; #ifndef I2C_H
 00B2           ; #define I2C_H
 00B2           ; 
 00B2           ; /* TWSR values (not bits) */
 00B2           ; /* Master */
 00B2           ; #define I2C_START                     0x08
 00B2           ; #define I2C_RESTART                   0x10
 00B2           ; 
 00B2           ; /* Master Transmitter */
 00B2           ; #define I2C_MT_SLA_ACK                0x18
 00B2           ; #define I2C_MT_SLA_NACK               0x20
 00B2           ; #define I2C_MT_DATA_ACK               0x28
 00B2           ; #define I2C_MT_DATA_NACK      0x30
 00B2           ; #define I2C_MT_ARB_LOST               0x38
 00B2           ; 
 00B2           ; /* Master Receiver */
 00B2           ; #define I2C_MR_ARB_LOST               0x38
 00B2           ; #define I2C_MR_SLA_ACK                0x40
 00B2           ; #define I2C_MR_SLA_NACK               0x48
 00B2           ; #define I2C_MR_DATA_ACK               0x50
 00B2           ; #define I2C_MR_DATA_NACK      0x58
 00B2           ; 
 00B2           ; /* Slave Transmitter */
 00B2           ; #define I2C_ST_SLA_ACK                        0xA8
 00B2           ; #define I2C_ST_ARB_LOST_SLA_ACK 0xB0
 00B2           ; #define I2C_ST_DATA_ACK                       0xB8
 00B2           ; #define I2C_ST_DATA_NACK              0xC0
 00B2           ; #define I2C_ST_LAST_DATA              0xC8
 00B2           ; 
 00B2           ; /* Slave Receiver */
 00B2           ; #define I2C_SR_SLA_ACK                                0x60
 00B2           ; #define I2C_SR_ARB_LOST_SLA_ACK               0x68
 00B2           ; #define I2C_SR_GCALL_ACK                      0x70
 00B2           ; #define I2C_SR_ARB_LOST_GCALL_ACK     0x78
 00B2           ; #define I2C_SR_DATA_ACK                               0x80
 00B2           ; #define I2C_SR_DATA_NACK                      0x88
 00B2           ; #define I2C_SR_GCALL_DATA_ACK         0x90
 00B2           ; #define I2C_SR_GCALL_DATA_NACK                0x98
 00B2           ; #define I2C_SR_STOP                                   0xA0
 00B2           ; 
 00B2           ; /* Misc */
 00B2           ; #define I2C_NO_INFO                   0xF8
 00B2           ; #define I2C_BUS_ERROR         0x00
 00B2           ; 
 00B2           ; /*
 00B2           ;  * The lower 3 bits of TWSR are reserved on the ATmega163.
 00B2           ;  * The 2 LSB carry the prescaler bits on the newer ATmegas.
 00B2           ;  */
 00B2           ; #define I2C_STATUS_MASK       (_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)|_BV(TWS3))
 00B2           ; #define I2C_STATUS            (TWSR & I2C_STATUS_MASK)
 00B2           ; 
 00B2           ; /*
 00B2           ;  * R/~W bit in SLA+R/W address field.
 00B2           ;  */
 00B2           ; #define I2C_READ              1
 00B2           ; #define I2C_WRITE             0
 00B2           ; 
 00B2           ; #define I2CStart()            (TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN))
 00B2           ; #define I2CStop()             (TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN))
 00B2           ; #define I2CWaitAck()  {while(!(TWCR&(1<<TWINT)));}
 00B2           ; #define I2CChkAck()   (TWSR&0xf8)                                     //check ack
 00B2           ; #define I2CSendAck()  (TWCR|=(1<<TWEA))
 00B2           ; #define I2CSendNoAck()        (TWCR&=~(1<<TWEA))
 00B2           ; #define I2CSendByte(x)        {TWDR=(x);TWCR=(1<<TWINT)|(1<<TWEN);} 
 00B2           ; #define I2CRcvNckByte()       (TWCR=(1<<TWINT)|(1<<TWEN))
 00B2           ; #define I2CRcvAckByte()       (TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA))
 00B2           ; 
 00B2           ; /* For Program */
 00B2           ; #define I2C_Stop()            I2CStop()
 00B2           ; #define I2C_SendAck() I2CSendAck()
 00B2           ; #define I2C_SendNoAck() I2CSendNoAck()
 00B2           ; #define I2C_WaitAck() I2CWaitAck()
 00B2           ; 
 00B2           ; /* I2C Config */
 00B2           ; #define I2C_ERR                       0
 00B2           ; #define I2C_CRR                       1
 00B2           ; 
 00B2           ; /*--------------------------------------------------------------------
 00B2           ; 函数名称：I2C Start
 00B2           ; 函数功能：
 00B2           ; 注意事项：
 00B2           ; 提示说明：
 00B2           ; 输    入：
 00B2           ; 返    回：
 00B2           ; --------------------------------------------------------------------*/
 00B2           ; bool I2C_Start()                                      
 00B2           ; {
 00B2                   .dbline 127
 00B2           ;       I2CStart();                                             
 00B2 84EA              ldi R24,164
 00B4 86BF              out 0x36,R24
 00B6                   .dbline 128
 00B6           ;       I2CWaitAck();
 00B6           L7:
 00B6                   .dbline 128
 00B6           L8:
 00B6                   .dbline 128
 00B6 26B6              in R2,0x36
 00B8 27FE              sbrs R2,7
 00BA FDCF              rjmp L7
 00BC           X2:
 00BC                   .dbline 128
 00BC                   .dbline 128
 00BC                   .dbline 129
 00BC           ;       if( I2CChkAck()!=I2C_START ) 
 00BC 81B1              in R24,0x1
 00BE 887F              andi R24,248
 00C0 8830              cpi R24,8
 00C2 11F0              breq L10
 00C4           X3:
 00C4                   .dbline 130
 00C4           ;               return I2C_ERR;
 00C4 0027              clr R16
 00C6 01C0              xjmp L6
 00C8           L10:
 00C8                   .dbline 131
 00C8           ;       return I2C_CRR;
 00C8 01E0              ldi R16,1
 00CA                   .dbline -2
 00CA           L6:
 00CA                   .dbline 0 ; func end
 00CA 0895              ret
 00CC                   .dbend
 00CC                   .dbfunc e I2C_Restart _I2C_Restart fc
                        .even
 00CC           _I2C_Restart::
 00CC                   .dbline -1
 00CC                   .dbline 142
 00CC           ; }
 00CC           ; /*--------------------------------------------------------------------
 00CC           ; 函数名称：I2C ReStart
 00CC           ; 函数功能：
 00CC           ; 注意事项：
 00CC           ; 提示说明：
 00CC           ; 输    入：
 00CC           ; 返    回：
 00CC           ; --------------------------------------------------------------------*/
 00CC           ; bool I2C_Restart()                                    
 00CC           ; {
 00CC                   .dbline 143
 00CC           ;       I2CStart();                                             
 00CC 84EA              ldi R24,164
 00CE 86BF              out 0x36,R24
 00D0                   .dbline 144
 00D0           ;       I2CWaitAck();
 00D0           L13:
 00D0                   .dbline 144
 00D0           L14:
 00D0                   .dbline 144
 00D0 26B6              in R2,0x36
 00D2 27FE              sbrs R2,7
 00D4 FDCF              rjmp L13
 00D6           X4:
 00D6                   .dbline 144
 00D6                   .dbline 144
 00D6                   .dbline 145
 00D6           ;       if( I2CChkAck()!=I2C_RESTART ) 
 00D6 81B1              in R24,0x1
 00D8 887F              andi R24,248
 00DA 8031              cpi R24,16
 00DC 11F0              breq L16
 00DE           X5:
 00DE                   .dbline 146
 00DE           ;               return I2C_ERR;
 00DE 0027              clr R16
 00E0 01C0              xjmp L12
 00E2           L16:
 00E2                   .dbline 147
 00E2           ;       return I2C_CRR;
 00E2 01E0              ldi R16,1
 00E4                   .dbline -2
 00E4           L12:
 00E4                   .dbline 0 ; func end
 00E4 0895              ret
 00E6                   .dbend
 00E6                   .dbfunc e I2C_SendWrDAdr _I2C_SendWrDAdr fc
 00E6           ;         wrDAdr -> R16
                        .even
 00E6           _I2C_SendWrDAdr::
 00E6                   .dbline -1
 00E6                   .dbline 158
 00E6           ; }
 00E6           ; /*--------------------------------------------------------------------
 00E6           ; 函数名称：发送 7位 器件写地址: XXXX XXX0
 00E6           ; 函数功能：
 00E6           ; 注意事项：
 00E6           ; 提示说明：
 00E6           ; 输    入：
 00E6           ; 返    回：
 00E6           ; --------------------------------------------------------------------*/
 00E6           ; bool I2C_SendWrDAdr(uint8 wrDAdr)     
 00E6           ; {
 00E6                   .dbline 159
 00E6           ;       I2CSendByte(wrDAdr);                    //设置 器件写地址
 00E6                   .dbline 159
 00E6 03B9              out 0x3,R16
 00E8                   .dbline 159
 00E8 84E8              ldi R24,132
 00EA 86BF              out 0x36,R24
 00EC                   .dbline 159
 00EC                   .dbline 159
 00EC                   .dbline 160
 00EC           ;       I2CWaitAck();
 00EC           L19:
 00EC                   .dbline 160
 00EC           L20:
 00EC                   .dbline 160
 00EC 26B6              in R2,0x36
 00EE 27FE              sbrs R2,7
 00F0 FDCF              rjmp L19
 00F2           X6:
 00F2                   .dbline 160
 00F2                   .dbline 160
 00F2                   .dbline 161
 00F2           ;       if( I2CChkAck()!=I2C_MT_SLA_ACK )  
 00F2 81B1              in R24,0x1
 00F4 887F              andi R24,248
 00F6 8831              cpi R24,24
 00F8 11F0              breq L22
 00FA           X7:
 00FA                   .dbline 162
 00FA           ;               return I2C_ERR;
 00FA 0027              clr R16
 00FC 01C0              xjmp L18
 00FE           L22:
 00FE                   .dbline 163
 00FE           ;       return I2C_CRR;         
 00FE 01E0              ldi R16,1
 0100                   .dbline -2
 0100           L18:
 0100                   .dbline 0 ; func end
 0100 0895              ret
 0102                   .dbsym r wrDAdr 16 c
 0102                   .dbend
 0102                   .dbfunc e I2C_SendWrDAdr_ _I2C_SendWrDAdr_ fc
 0102           ;         wrDAdr -> R10,R11
                        .even
 0102           _I2C_SendWrDAdr_::
 0102 AA92              st -y,R10
 0104 BA92              st -y,R11
 0106 5801              movw R10,R16
 0108                   .dbline -1
 0108                   .dbline 174
 0108           ; }
 0108           ; /*--------------------------------------------------------------------
 0108           ; 函数名称：发送 10位 器件写地址: 1111 0XX0, XXXX XXXX
 0108           ; 函数功能：
 0108           ; 注意事项：
 0108           ; 提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
 0108           ; 输    入：
 0108           ; 返    回：
 0108           ; --------------------------------------------------------------------*/
 0108           ; bool I2C_SendWrDAdr_(uint16 wrDAdr)   
 0108           ; {
 0108                   .dbline 175
 0108           ;       if( wrDAdr&0xF000 == 0xF000 )   //判断是否为 10位 器件地址
 0108 A0FE              sbrs R10,0
 010A 0EC0              rjmp L25
 010C           X8:
 010C                   .dbline 176
 010C           ;               if( I2C_SendWrDAdr( (uint8)wrDAdr>>8 )==I2C_ERR )       //设置 （高位）器件写地址
 010C 0A2D              mov R16,R10
 010E 0695              lsr R16
 0110 0695              lsr R16
 0112 0695              lsr R16
 0114 0695              lsr R16
 0116 0695              lsr R16
 0118 0695              lsr R16
 011A 0695              lsr R16
 011C 0695              lsr R16
 011E E3DF              xcall _I2C_SendWrDAdr
 0120 0023              tst R16
 0122 11F4              brne L27
 0124           X9:
 0124                   .dbline 177
 0124           ;                       return I2C_ERR;
 0124 0027              clr R16
 0126 07C0              xjmp L24
 0128           L27:
 0128           L25:
 0128                   .dbline 178
 0128           ;       if( I2C_SendWrDAdr( (uint8)wrDAdr )==I2C_ERR )  //设置 （低位）器件写地址
 0128 0A2D              mov R16,R10
 012A DDDF              xcall _I2C_SendWrDAdr
 012C 0023              tst R16
 012E 11F4              brne L29
 0130           X10:
 0130                   .dbline 179
 0130           ;               return I2C_ERR;
 0130 0027              clr R16
 0132 01C0              xjmp L24
 0134           L29:
 0134                   .dbline 180
 0134           ;       return I2C_CRR;
 0134 01E0              ldi R16,1
 0136                   .dbline -2
 0136           L24:
 0136                   .dbline 0 ; func end
 0136 B990              ld R11,y+
 0138 A990              ld R10,y+
 013A 0895              ret
 013C                   .dbsym r wrDAdr 10 i
 013C                   .dbend
 013C                   .dbfunc e I2C_SendRdDAdr _I2C_SendRdDAdr fc
 013C           ;         rdDAdr -> R16
                        .even
 013C           _I2C_SendRdDAdr::
 013C                   .dbline -1
 013C                   .dbline 191
 013C           ; }
 013C           ; /*--------------------------------------------------------------------
 013C           ; 函数名称：发送 7位 器件读地址: XXXX XXX1
 013C           ; 函数功能：
 013C           ; 注意事项：
 013C           ; 提示说明：
 013C           ; 输    入：
 013C           ; 返    回：
 013C           ; --------------------------------------------------------------------*/
 013C           ; bool I2C_SendRdDAdr(uint8 rdDAdr)     
 013C           ; {
 013C                   .dbline 192
 013C           ;       I2CSendByte(rdDAdr);                    //设置 器件读地址
 013C                   .dbline 192
 013C 03B9              out 0x3,R16
 013E                   .dbline 192
 013E 84E8              ldi R24,132
 0140 86BF              out 0x36,R24
 0142                   .dbline 192
 0142                   .dbline 192
 0142                   .dbline 193
 0142           ;       I2CWaitAck();
 0142           L32:
 0142                   .dbline 193
 0142           L33:
 0142                   .dbline 193
 0142 26B6              in R2,0x36
 0144 27FE              sbrs R2,7
 0146 FDCF              rjmp L32
 0148           X11:
 0148                   .dbline 193
 0148                   .dbline 193
 0148                   .dbline 194
 0148           ;       if( I2CChkAck()!=I2C_MR_SLA_ACK )  
 0148 81B1              in R24,0x1
 014A 887F              andi R24,248
 014C 8034              cpi R24,64
 014E 11F0              breq L35
 0150           X12:
 0150                   .dbline 195
 0150           ;               return I2C_ERR;
 0150 0027              clr R16
 0152 01C0              xjmp L31
 0154           L35:
 0154                   .dbline 196
 0154           ;       return I2C_CRR; 
 0154 01E0              ldi R16,1
 0156                   .dbline -2
 0156           L31:
 0156                   .dbline 0 ; func end
 0156 0895              ret
 0158                   .dbsym r rdDAdr 16 c
 0158                   .dbend
 0158                   .dbfunc e I2C_SendRdDAdr_ _I2C_SendRdDAdr_ fc
 0158           ;         rdDAdr -> R10
                        .even
 0158           _I2C_SendRdDAdr_::
 0158 AA92              st -y,R10
 015A A02E              mov R10,R16
 015C                   .dbline -1
 015C                   .dbline 207
 015C           ; }
 015C           ; /*--------------------------------------------------------------------
 015C           ; 函数名称：发送 10位 器件读地址: 1111 0XX0, XXXX XXXX
 015C           ; 函数功能：
 015C           ; 注意事项：
 015C           ; 提示说明：
 015C           ; 输    入：
 015C           ; 返    回：
 015C           ; --------------------------------------------------------------------*/
 015C           ; bool I2C_SendRdDAdr_(uint8 rdDAdr)    
 015C           ; {
 015C                   .dbline 208
 015C           ;       if( rdDAdr&0xF000 == 0xF000 )   //判断是否为 10位 器件地址
 015C A0FE              sbrs R10,0
 015E 0EC0              rjmp L38
 0160           X13:
 0160                   .dbline 209
 0160           ;               if( I2C_SendWrDAdr( (uint8)rdDAdr>>8 )==I2C_ERR )       //设置 （高位）器件读地址
 0160 0A2D              mov R16,R10
 0162 0695              lsr R16
 0164 0695              lsr R16
 0166 0695              lsr R16
 0168 0695              lsr R16
 016A 0695              lsr R16
 016C 0695              lsr R16
 016E 0695              lsr R16
 0170 0695              lsr R16
 0172 B9DF              xcall _I2C_SendWrDAdr
 0174 0023              tst R16
 0176 11F4              brne L40
 0178           X14:
 0178                   .dbline 210
 0178           ;                       return I2C_ERR;
 0178 0027              clr R16
 017A 07C0              xjmp L37
 017C           L40:
 017C           L38:
 017C                   .dbline 211
 017C           ;       if( I2C_SendWrDAdr( (uint8)rdDAdr )==I2C_ERR )  //设置 （低位）器件读地址
 017C 0A2D              mov R16,R10
 017E B3DF              xcall _I2C_SendWrDAdr
 0180 0023              tst R16
 0182 11F4              brne L42
 0184           X15:
 0184                   .dbline 212
 0184           ;               return I2C_ERR;
 0184 0027              clr R16
 0186 01C0              xjmp L37
 0188           L42:
 0188                   .dbline 213
 0188           ;       return I2C_CRR;
 0188 01E0              ldi R16,1
 018A                   .dbline -2
 018A           L37:
 018A                   .dbline 0 ; func end
 018A A990              ld R10,y+
 018C 0895              ret
 018E                   .dbsym r rdDAdr 10 c
 018E                   .dbend
 018E                   .dbfunc e I2C_SendDat _I2C_SendDat fc
 018E           ;      configDat -> R16
                        .even
 018E           _I2C_SendDat::
 018E                   .dbline -1
 018E                   .dbline 224
 018E           ; }
 018E           ; /*--------------------------------------------------------------------
 018E           ; 函数名称：I2C发送数据
 018E           ; 函数功能：
 018E           ; 注意事项：
 018E           ; 提示说明：
 018E           ; 输    入：
 018E           ; 返    回：
 018E           ; --------------------------------------------------------------------*/
 018E           ; bool I2C_SendDat(uint8 configDat)     
 018E           ; {
 018E                   .dbline 225
 018E           ;       I2CSendByte(configDat);                 
 018E                   .dbline 225
 018E 03B9              out 0x3,R16
 0190                   .dbline 225
 0190 84E8              ldi R24,132
 0192 86BF              out 0x36,R24
 0194                   .dbline 225
 0194                   .dbline 225
 0194                   .dbline 226
 0194           ;       I2CWaitAck();
 0194           L45:
 0194                   .dbline 226
 0194           L46:
 0194                   .dbline 226
 0194 26B6              in R2,0x36
 0196 27FE              sbrs R2,7
 0198 FDCF              rjmp L45
 019A           X16:
 019A                   .dbline 226
 019A                   .dbline 226
 019A                   .dbline 227
 019A           ;       if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 019A 81B1              in R24,0x1
 019C 887F              andi R24,248
 019E 8832              cpi R24,40
 01A0 11F0              breq L48
 01A2           X17:
 01A2                   .dbline 228
 01A2           ;               return I2C_ERR;
 01A2 0027              clr R16
 01A4 01C0              xjmp L44
 01A6           L48:
 01A6                   .dbline 229
 01A6           ;       return I2C_CRR; 
 01A6 01E0              ldi R16,1
 01A8                   .dbline -2
 01A8           L44:
 01A8                   .dbline 0 ; func end
 01A8 0895              ret
 01AA                   .dbsym r configDat 16 c
 01AA                   .dbend
 01AA                   .dbfunc e I2C_RcvNAckDat _I2C_RcvNAckDat fc
 01AA           ;         pRdDat -> R16,R17
                        .even
 01AA           _I2C_RcvNAckDat::
 01AA                   .dbline -1
 01AA                   .dbline 240
 01AA           ; }
 01AA           ; /*--------------------------------------------------------------------
 01AA           ; 函数名称：I2C接收数据且不产生应答
 01AA           ; 函数功能：
 01AA           ; 注意事项：
 01AA           ; 提示说明：
 01AA           ; 输    入：
 01AA           ; 返    回：
 01AA           ; --------------------------------------------------------------------*/
 01AA           ; bool I2C_RcvNAckDat(uint8 *pRdDat)    
 01AA           ; {
 01AA                   .dbline 241
 01AA           ;       I2CRcvNckByte();
 01AA 84E8              ldi R24,132
 01AC 86BF              out 0x36,R24
 01AE                   .dbline 242
 01AE           ;       I2CWaitAck();
 01AE           L51:
 01AE                   .dbline 242
 01AE           L52:
 01AE                   .dbline 242
 01AE 26B6              in R2,0x36
 01B0 27FE              sbrs R2,7
 01B2 FDCF              rjmp L51
 01B4           X18:
 01B4                   .dbline 242
 01B4                   .dbline 242
 01B4                   .dbline 243
 01B4           ;       if( I2CChkAck()!=I2C_MR_DATA_NACK )
 01B4 81B1              in R24,0x1
 01B6 887F              andi R24,248
 01B8 8835              cpi R24,88
 01BA 11F0              breq L54
 01BC           X19:
 01BC                   .dbline 244
 01BC           ;               return I2C_ERR;
 01BC 0027              clr R16
 01BE 04C0              xjmp L50
 01C0           L54:
 01C0                   .dbline 245
 01C0           ;       *pRdDat=TWDR;
 01C0 23B0              in R2,0x3
 01C2 F801              movw R30,R16
 01C4 2082              std z+0,R2
 01C6                   .dbline 246
 01C6           ;       return I2C_CRR;
 01C6 01E0              ldi R16,1
 01C8                   .dbline -2
 01C8           L50:
 01C8                   .dbline 0 ; func end
 01C8 0895              ret
 01CA                   .dbsym r pRdDat 16 pc
 01CA                   .dbend
 01CA                   .dbfunc e I2C_RcvAckDat _I2C_RcvAckDat fc
 01CA           ;         pRdDat -> R16,R17
                        .even
 01CA           _I2C_RcvAckDat::
 01CA                   .dbline -1
 01CA                   .dbline 257
 01CA           ; }
 01CA           ; /*--------------------------------------------------------------------
 01CA           ; 函数名称：I2C接收数据且产生应答
 01CA           ; 函数功能：
 01CA           ; 注意事项：
 01CA           ; 提示说明：
 01CA           ; 输    入：
 01CA           ; 返    回：
 01CA           ; --------------------------------------------------------------------*/
 01CA           ; bool I2C_RcvAckDat(uint8 *pRdDat)     
 01CA           ; {
 01CA                   .dbline 258
 01CA           ;       I2CRcvAckByte();                                        
 01CA 84EC              ldi R24,196
 01CC 86BF              out 0x36,R24
 01CE                   .dbline 259
 01CE           ;       I2CWaitAck();
 01CE           L57:
 01CE                   .dbline 259
 01CE           L58:
 01CE                   .dbline 259
 01CE 26B6              in R2,0x36
 01D0 27FE              sbrs R2,7
 01D2 FDCF              rjmp L57
 01D4           X20:
 01D4                   .dbline 259
 01D4                   .dbline 259
 01D4                   .dbline 260
 01D4           ;       if( I2CChkAck()!=I2C_MR_DATA_ACK )
 01D4 81B1              in R24,0x1
 01D6 887F              andi R24,248
 01D8 8035              cpi R24,80
 01DA 11F0              breq L60
 01DC           X21:
 01DC                   .dbline 261
 01DC           ;               return I2C_ERR;
 01DC 0027              clr R16
 01DE 04C0              xjmp L56
 01E0           L60:
 01E0                   .dbline 262
 01E0           ;       *pRdDat=TWDR;
 01E0 23B0              in R2,0x3
 01E2 F801              movw R30,R16
 01E4 2082              std z+0,R2
 01E6                   .dbline 263
 01E6           ;       return I2C_CRR;
 01E6 01E0              ldi R16,1
 01E8                   .dbline -2
 01E8           L56:
 01E8                   .dbline 0 ; func end
 01E8 0895              ret
 01EA                   .dbsym r pRdDat 16 pc
 01EA                   .dbend
 01EA                   .dbfunc e I2C_Write _I2C_Write fc
 01EA           ;            dat -> R10
 01EA           ;        wordAdr -> R12
 01EA           ;         wrDAdr -> R14,R15
                        .even
 01EA           _I2C_Write::
 01EA 0E940000          xcall push_xgset00FC
 01EE C22E              mov R12,R18
 01F0 7801              movw R14,R16
 01F2 AE80              ldd R10,y+6
 01F4                   .dbline -1
 01F4                   .dbline 276
 01F4           ; }
 01F4           ; /*--------------------------------------------------------------------
 01F4           ; 函数名称：I2C写器件，写一个数据
 01F4           ; 函数功能：
 01F4           ; 注意事项：
 01F4           ; 提示说明：
 01F4           ; 输    入：wrDAdr: write device-address 写器件地址
 01F4           ;                wordAdr: word address 字地址
 01F4           ;                dat: data 数据
 01F4           ; 返    回：
 01F4           ; --------------------------------------------------------------------*/
 01F4           ; bool I2C_Write(uint16 wrDAdr,uint8 wordAdr,uint8 dat)
 01F4           ; {
 01F4                   .dbline 277
 01F4           ;       if( I2C_Start()==I2C_ERR )
 01F4 5EDF              xcall _I2C_Start
 01F6 0023              tst R16
 01F8 11F4              brne L63
 01FA           X22:
 01FA                   .dbline 278
 01FA           ;               return I2C_ERR;
 01FA 0027              clr R16
 01FC 17C0              xjmp L62
 01FE           L63:
 01FE                   .dbline 280
 01FE           ; 
 01FE           ;       if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 01FE 8701              movw R16,R14
 0200 80DF              xcall _I2C_SendWrDAdr_
 0202 0023              tst R16
 0204 11F4              brne L65
 0206           X23:
 0206                   .dbline 281
 0206           ;               return I2C_ERR;
 0206 0027              clr R16
 0208 11C0              xjmp L62
 020A           L65:
 020A                   .dbline 283
 020A           ; 
 020A           ;       if( I2C_SendDat(wordAdr)==I2C_ERR )
 020A 0C2D              mov R16,R12
 020C C0DF              xcall _I2C_SendDat
 020E C02E              mov R12,R16
 0210 0023              tst R16
 0212 11F4              brne L67
 0214           X24:
 0214                   .dbline 284
 0214           ;               return I2C_ERR;
 0214 0027              clr R16
 0216 0AC0              xjmp L62
 0218           L67:
 0218                   .dbline 286
 0218           ; 
 0218           ;       if( I2C_SendDat(dat)==I2C_ERR )
 0218 0A2D              mov R16,R10
 021A B9DF              xcall _I2C_SendDat
 021C A02E              mov R10,R16
 021E 0023              tst R16
 0220 11F4              brne L69
 0222           X25:
 0222                   .dbline 287
 0222           ;               return I2C_ERR;
 0222 0027              clr R16
 0224 03C0              xjmp L62
 0226           L69:
 0226                   .dbline 289
 0226           ; 
 0226           ;       I2C_Stop();
 0226 84E9              ldi R24,148
 0228 86BF              out 0x36,R24
 022A                   .dbline 291
 022A           ; 
 022A           ;       return I2C_CRR;
 022A 01E0              ldi R16,1
 022C                   .dbline -2
 022C           L62:
 022C                   .dbline 0 ; func end
 022C 0C940000          xjmp pop_xgset00FC
 0230                   .dbsym r dat 10 c
 0230                   .dbsym r wordAdr 12 c
 0230                   .dbsym r wrDAdr 14 i
 0230                   .dbend
 0230                   .dbfunc e I2C_Read _I2C_Read fc
 0230           ;         pRdDat -> R10,R11
 0230           ;         rdDAdr -> R12
 0230           ;        wordAdr -> R14
 0230           ;         wrDAdr -> R20,R21
                        .even
 0230           _I2C_Read::
 0230 0E940000          xcall push_xgset30FC
 0234 E22E              mov R14,R18
 0236 A801              movw R20,R16
 0238 C884              ldd R12,y+8
 023A AA84              ldd R10,y+10
 023C BB84              ldd R11,y+11
 023E                   .dbline -1
 023E                   .dbline 322
 023E           ; }
 023E           ; /*--------------------------------------------------------------------
 023E           ; 函数名称：I2C写器件，写N个数据
 023E           ; 函数功能：
 023E           ; 注意事项：
 023E           ; 提示说明：
 023E           ; 输    入：wrDAdr: write device-address 写器件地址
 023E           ;                wordAdr: word address 字地址
 023E           ;                *pWrDat: p->write data 写入数据指针
 023E           ;                num: number 写入数据个数
 023E           ; 返    回：
 023E           ; --------------------------------------------------------------------*/
 023E           ; //bool I2C_Write_(uint16 wrDAdr,uint8 wordAdr,
 023E           ; //                              uint8 *pWrDat,uint8 num)
 023E           ; //{
 023E           ; //
 023E           ; //} 
 023E           ; /*--------------------------------------------------------------------
 023E           ; 函数名称：I2C读器件，读一个数据
 023E           ; 函数功能：
 023E           ; 注意事项：
 023E           ; 提示说明：
 023E           ; 输    入：wrDAdr: write device-address 写器件地址
 023E           ;                wordAdr: word address 字地址
 023E           ;                rdDAdr: read device-address 读器件地址
 023E           ;                *pRdDat: p->read data 读取数据指针
 023E           ; 返    回：
 023E           ; --------------------------------------------------------------------*/
 023E           ; bool I2C_Read(uint16 wrDAdr,uint8 wordAdr,
 023E           ;                         uint8 rdDAdr,uint8 *pRdDat)
 023E           ; {
 023E                   .dbline 323
 023E           ;       if( I2C_Start()==I2C_ERR )
 023E 39DF              xcall _I2C_Start
 0240 0023              tst R16
 0242 11F4              brne L72
 0244           X26:
 0244                   .dbline 324
 0244           ;               return I2C_ERR;
 0244 0027              clr R16
 0246 24C0              xjmp L71
 0248           L72:
 0248                   .dbline 326
 0248           ; 
 0248           ;       if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 0248 8A01              movw R16,R20
 024A 5BDF              xcall _I2C_SendWrDAdr_
 024C 0023              tst R16
 024E 11F4              brne L74
 0250           X27:
 0250                   .dbline 327
 0250           ;               return I2C_ERR;
 0250 0027              clr R16
 0252 1EC0              xjmp L71
 0254           L74:
 0254                   .dbline 329
 0254           ; 
 0254           ;       if( I2C_SendDat(wordAdr)==I2C_ERR )
 0254 0E2D              mov R16,R14
 0256 9BDF              xcall _I2C_SendDat
 0258 E02E              mov R14,R16
 025A 0023              tst R16
 025C 11F4              brne L76
 025E           X28:
 025E                   .dbline 330
 025E           ;               return I2C_ERR;
 025E 0027              clr R16
 0260 17C0              xjmp L71
 0262           L76:
 0262                   .dbline 332
 0262           ; 
 0262           ;       if( I2C_Restart()==I2C_ERR )
 0262 34DF              xcall _I2C_Restart
 0264 E02E              mov R14,R16
 0266 0023              tst R16
 0268 11F4              brne L78
 026A           X29:
 026A                   .dbline 333
 026A           ;               return I2C_ERR;
 026A 0027              clr R16
 026C 11C0              xjmp L71
 026E           L78:
 026E                   .dbline 335
 026E           ; 
 026E           ;       if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
 026E 0C2D              mov R16,R12
 0270 65DF              xcall _I2C_SendRdDAdr
 0272 C02E              mov R12,R16
 0274 0023              tst R16
 0276 11F4              brne L80
 0278           X30:
 0278                   .dbline 336
 0278           ;               return I2C_ERR;
 0278 0027              clr R16
 027A 0AC0              xjmp L71
 027C           L80:
 027C                   .dbline 338
 027C           ; 
 027C           ;       if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
 027C 8501              movw R16,R10
 027E 95DF              xcall _I2C_RcvNAckDat
 0280 A02E              mov R10,R16
 0282 0023              tst R16
 0284 11F4              brne L82
 0286           X31:
 0286                   .dbline 339
 0286           ;               return I2C_ERR;
 0286 0027              clr R16
 0288 03C0              xjmp L71
 028A           L82:
 028A                   .dbline 341
 028A           ; 
 028A           ;       I2C_Stop();
 028A 84E9              ldi R24,148
 028C 86BF              out 0x36,R24
 028E                   .dbline 343
 028E           ; 
 028E           ;       return I2C_CRR;
 028E 01E0              ldi R16,1
 0290                   .dbline -2
 0290           L71:
 0290                   .dbline 0 ; func end
 0290 0C940000          xjmp pop_xgset30FC
 0294                   .dbsym r pRdDat 10 pc
 0294                   .dbsym r rdDAdr 12 c
 0294                   .dbsym r wordAdr 14 c
 0294                   .dbsym r wrDAdr 20 i
 0294                   .dbend
 0294                   .dbfunc e I2C_Read_ _I2C_Read_ fc
 0294           ;              i -> R12
 0294           ;            num -> R20
 0294           ;         pRdDat -> R10,R11
 0294           ;         rdDAdr -> R12
 0294           ;        wordAdr -> R14
 0294           ;         wrDAdr -> R22,R23
                        .even
 0294           _I2C_Read_::
 0294 0E940000          xcall push_xgsetF0FC
 0298 E22E              mov R14,R18
 029A B801              movw R22,R16
 029C CA84              ldd R12,y+10
 029E AC84              ldd R10,y+12
 02A0 BD84              ldd R11,y+13
 02A2 4E85              ldd R20,y+14
 02A4                   .dbline -1
 02A4                   .dbline 359
 02A4           ; }
 02A4           ; /*--------------------------------------------------------------------
 02A4           ; 函数名称：I2C读器件，读N个数据
 02A4           ; 函数功能：
 02A4           ; 注意事项：
 02A4           ; 提示说明：
 02A4           ; 输    入：wrDAdr: write device-address 写器件地址
 02A4           ;                wordAdr: word address 字地址
 02A4           ;                rdDAdr: read device-address 读器件地址
 02A4           ;                *pRdDat: p->read data 读取数据指针
 02A4           ;                num: number 读取数据个数
 02A4           ; 返    回：
 02A4           ; --------------------------------------------------------------------*/
 02A4           ; bool I2C_Read_(uint16 wrDAdr,uint8 wordAdr,
 02A4           ;                          uint8 rdDAdr,uint8 *pRdDat,uint8 num)
 02A4           ; {
 02A4                   .dbline 362
 02A4           ;       uint8 i;
 02A4           ;       
 02A4           ;       if( I2C_Start()==I2C_ERR )
 02A4 06DF              xcall _I2C_Start
 02A6 0023              tst R16
 02A8 11F4              brne L85
 02AA           X32:
 02AA                   .dbline 363
 02AA           ;               return I2C_ERR;
 02AA 0027              clr R16
 02AC 38C0              xjmp L84
 02AE           L85:
 02AE                   .dbline 365
 02AE           ; 
 02AE           ;       if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 02AE 8B01              movw R16,R22
 02B0 28DF              xcall _I2C_SendWrDAdr_
 02B2 0023              tst R16
 02B4 11F4              brne L87
 02B6           X33:
 02B6                   .dbline 366
 02B6           ;               return I2C_ERR;
 02B6 0027              clr R16
 02B8 32C0              xjmp L84
 02BA           L87:
 02BA                   .dbline 368
 02BA           ; 
 02BA           ;       if( I2C_SendDat(wordAdr)==I2C_ERR )
 02BA 0E2D              mov R16,R14
 02BC 68DF              xcall _I2C_SendDat
 02BE E02E              mov R14,R16
 02C0 0023              tst R16
 02C2 11F4              brne L89
 02C4           X34:
 02C4                   .dbline 369
 02C4           ;               return I2C_ERR;
 02C4 0027              clr R16
 02C6 2BC0              xjmp L84
 02C8           L89:
 02C8                   .dbline 371
 02C8           ; 
 02C8           ;       if( I2C_Restart()==I2C_ERR )
 02C8 01DF              xcall _I2C_Restart
 02CA E02E              mov R14,R16
 02CC 0023              tst R16
 02CE 11F4              brne L91
 02D0           X35:
 02D0                   .dbline 372
 02D0           ;               return I2C_ERR;
 02D0 0027              clr R16
 02D2 25C0              xjmp L84
 02D4           L91:
 02D4                   .dbline 374
 02D4           ; 
 02D4           ;       if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
 02D4 0C2D              mov R16,R12
 02D6 32DF              xcall _I2C_SendRdDAdr
 02D8 C02E              mov R12,R16
 02DA 0023              tst R16
 02DC 11F4              brne L93
 02DE           X36:
 02DE                   .dbline 375
 02DE           ;               return I2C_ERR;
 02DE 0027              clr R16
 02E0 1EC0              xjmp L84
 02E2           L93:
 02E2                   .dbline 377
 02E2           ; 
 02E2           ;       for(i=0;i<num-1;i++)
 02E2 CC24              clr R12
 02E4 0BC0              xjmp L98
 02E6           L95:
 02E6                   .dbline 378
 02E6           ;               if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
 02E6 0C2D              mov R16,R12
 02E8 1127              clr R17
 02EA 0A0D              add R16,R10
 02EC 1B1D              adc R17,R11
 02EE 6DDF              xcall _I2C_RcvAckDat
 02F0 E02E              mov R14,R16
 02F2 0023              tst R16
 02F4 11F4              brne L99
 02F6           X37:
 02F6                   .dbline 379
 02F6           ;                       return I2C_ERR;
 02F6 0027              clr R16
 02F8 12C0              xjmp L84
 02FA           L99:
 02FA           L96:
 02FA                   .dbline 377
 02FA C394              inc R12
 02FC           L98:
 02FC                   .dbline 377
 02FC 842F              mov R24,R20
 02FE 8150              subi R24,1
 0300 C816              cp R12,R24
 0302 88F3              brlo L95
 0304           X38:
 0304                   .dbline 381
 0304           ;       
 0304           ;       if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
 0304 0C2D              mov R16,R12
 0306 1127              clr R17
 0308 0A0D              add R16,R10
 030A 1B1D              adc R17,R11
 030C 4EDF              xcall _I2C_RcvNAckDat
 030E A02E              mov R10,R16
 0310 0023              tst R16
 0312 11F4              brne L101
 0314           X39:
 0314                   .dbline 382
 0314           ;                       return I2C_ERR;
 0314 0027              clr R16
 0316 03C0              xjmp L84
 0318           L101:
 0318                   .dbline 384
 0318           ; 
 0318           ;       I2C_Stop();
 0318 84E9              ldi R24,148
 031A 86BF              out 0x36,R24
 031C                   .dbline 386
 031C           ;       
 031C           ;       return I2C_CRR;
 031C 01E0              ldi R16,1
 031E                   .dbline -2
 031E           L84:
 031E                   .dbline 0 ; func end
 031E 0C940000          xjmp pop_xgsetF0FC
 0322                   .dbsym r i 12 c
 0322                   .dbsym r num 20 c
 0322                   .dbsym r pRdDat 10 pc
 0322                   .dbsym r rdDAdr 12 c
 0322                   .dbsym r wordAdr 14 c
 0322                   .dbsym r wrDAdr 22 i
 0322                   .dbend
 0322                   .dbfile D:\ICC_H\Hardware.H
 0322                   .dbfunc e delay50us _delay50us fV
 0322           ;              j -> R20
 0322           ;              t -> R16,R17
                        .even
 0322           _delay50us::
 0322 4A93              st -y,R20
 0324                   .dbline -1
 0324                   .dbline 105
 0324           ; /*********************************************************************
 0324           ;       微 雪 电 子   WaveShare   http://www.waveShare.net              
 0324           ;                                                                       
 0324           ; 目    的:   建立AVR的硬件提取库，增加各类补丁，方便移植
 0324           ;                                       
 0324           ; 目标系统:   基于AVR单片机
 0324           ;                                                                               
 0324           ; 应用软件:   ICCAVR
 0324           ;                                                                               
 0324           ; 版    本:   Version 1.0                                                          
 0324           ;                                                                               
 0324           ; 圆版时间:   2005-06-25
 0324           ;       
 0324           ; 开发人员:   SEE
 0324           ; 
 0324           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 0324           ;       
 0324           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
 0324           ; *********************************************************************/
 0324           ; 
 0324           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 0324           ; ----------------------------------------------------------------------
 0324           ; 版本更新记录：
 0324           ; 
 0324           ; ----------------------------------------------------------------------
 0324           ; 入口参数说明：
 0324           ; 
 0324           ; ----------------------------------------------------------------------
 0324           ; 待定参数说明：
 0324           ; 
 0324           ; ----------------------------------------------------------------------        
 0324           ; 对外变量说明：
 0324           ;     
 0324           ; ----------------------------------------------------------------------
 0324           ; 对外函数说明：
 0324           ;    
 0324           ; ----------------------------------------------------------------------
 0324           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 0324           ; 
 0324           ; #ifndef Hardware_H
 0324           ; #define Hardware_H
 0324           ; 
 0324           ; #include <math.h>
 0324           ; #include <string.h>
 0324           ; #include <stdio.h>
 0324           ; #include <macros.h>
 0324           ; #include <eeprom.h>
 0324           ; //#include <wdt.h>
 0324           ; 
 0324           ; /* TWI configs */
 0324           ; //如使用ATMEGA162(没有TWI接口)之类的MCU，在加载Hardware.H前，务必加“#define NO_INCLUDE_I2C_H 1”语句
 0324           ; #if NO_INCLUDE_I2C_H
 0324           ; ;
 0324           ; #else
 0324           ; #include "D:\ICC_H\I2C.H"     //i2c即AVR的"twi"
 0324           ; #endif
 0324           ; 
 0324           ; /* hard configs */
 0324           ; #ifndef flash
 0324           ;       #define flash   const
 0324           ; #endif
 0324           ; 
 0324           ; #ifndef code
 0324           ;       #define code    const
 0324           ; #endif
 0324           ; 
 0324           ; #ifndef NOP
 0324           ;       #define NOP()   asm("nop")
 0324           ; #endif
 0324           ; 
 0324           ; /* io configs */
 0324           ; #define sbi(io,bit)           (  io |=  (1<<bit) )    //example: sbi(PORTA,0);sbi(DDRA,0);
 0324           ; #define cbi(io,bit)           (  io &= ~(1<<bit) )    //example: cbi(PORTA,0);cbi(DDRA,0);
 0324           ; #define gbi(pin ,bit) ( pin &   (1<<bit) )    //example: gbi(PINA,0);
 0324           ; 
 0324           ; /* interrupt configs */
 0324           ; #define DIS_INT  asm("sei")
 0324           ; #define EN_INT   asm("cli")
 0324           ; 
 0324           ; /* wdt configs */
 0324           ; #define WDT()    asm("wdr")
 0324           ; 
 0324           ; /* bit operation */
 0324           ; //#ifndef BIT
 0324           ; //#define BIT(x)      ( 1<<(x) )
 0324           ; //#endif
 0324           ; 
 0324           ; /* USART configs for 4 Mhz crystal */
 0324           ; //#define BAUD9600                    25
 0324           ; //#define BAUD19000                   12
 0324           ; //#define UART_TRAN_ON()      UCR |=  0x08
 0324           ; //#define UART_TRAN_OFF()     UCR &= ~0x08
 0324           ; //#define UART_RCV_ON()               UCR |=  0x10
 0324           ; //#define UART_RCV_OFF()      UCR &= ~0x10
 0324           ; 
 0324           ; /*--------------------------------------------------------------------
 0324           ; 函数全称：50us 延时
 0324           ; 函数功能：当然是 50us延时 啦
 0324           ; 注意事项：基于7.3728M晶振，稍微有点误差
 0324           ; 提示说明：调用delay50us（20），得到1ms延时
 0324           ; 输    入：    
 0324           ; 返    回：无 
 0324           ; --------------------------------------------------------------------*/
 0324           ; void delay50us(sint16 t)
 0324           ; {
 0324                   .dbline 107
 0324           ;     uint8 j;          
 0324           ;     for(;t>0;t--)                     
 0324 07C0              xjmp L107
 0326           L104:
 0326                   .dbline 108
 0326           ;         for(j=0;j<70;j++)     
 0326 4427              clr R20
 0328 01C0              xjmp L111
 032A           L108:
 032A                   .dbline 109
 032A           ;             ;
 032A           L109:
 032A                   .dbline 108
 032A 4395              inc R20
 032C           L111:
 032C                   .dbline 108
 032C 4634              cpi R20,70
 032E E8F3              brlo L108
 0330           X40:
 0330           L105:
 0330                   .dbline 107
 0330 0150              subi R16,1
 0332 1040              sbci R17,0
 0334           L107:
 0334                   .dbline 107
 0334 2224              clr R2
 0336 3324              clr R3
 0338 2016              cp R2,R16
 033A 3106              cpc R3,R17
 033C A4F3              brlt L104
 033E           X41:
 033E                   .dbline -2
 033E           L103:
 033E                   .dbline 0 ; func end
 033E 4991              ld R20,y+
 0340 0895              ret
 0342                   .dbsym r j 20 c
 0342                   .dbsym r t 16 I
 0342                   .dbend
 0342                   .dbfunc e delay50ms _delay50ms fV
 0342           ;              i -> R20,R21
 0342           ;              t -> R16,R17
                        .even
 0342           _delay50ms::
 0342 4A93              st -y,R20
 0344 5A93              st -y,R21
 0346                   .dbline -1
 0346                   .dbline 120
 0346           ; }
 0346           ; /*--------------------------------------------------------------------
 0346           ; 函数全称：50ms 延时
 0346           ; 函数功能：当然是 50ms延时 啦
 0346           ; 注意事项：基于7.3728M晶振，稍微有点误差
 0346           ; 提示说明：调用delay50ms（20），得到1s延时 
 0346           ; 输    入：
 0346           ; 返    回：无
 0346           ; --------------------------------------------------------------------*/
 0346           ; void delay50ms(sint16 t)
 0346           ; {
 0346                   .dbline 122
 0346           ;       uint16 i; 
 0346           ;       for(;t>0;t--)
 0346 13C0              xjmp L116
 0348           L113:
 0348                   .dbline 123
 0348           ;               for(i=0;i<52642;i++)
 0348 4427              clr R20
 034A 5527              clr R21
 034C 02C0              xjmp L120
 034E           L117:
 034E                   .dbline 124
 034E           ;                       ; 
 034E           L118:
 034E                   .dbline 123
 034E 4F5F              subi R20,255  ; offset = 1
 0350 5F4F              sbci R21,255
 0352           L120:
 0352                   .dbline 123
 0352 82EA              ldi R24,162
 0354 9DEC              ldi R25,205
 0356 A0E0              ldi R26,0
 0358 B0E0              ldi R27,0
 035A 1A01              movw R2,R20
 035C 4424              clr R4
 035E 5524              clr R5
 0360 2816              cp R2,R24
 0362 3906              cpc R3,R25
 0364 4A06              cpc R4,R26
 0366 5B06              cpc R5,R27
 0368 94F3              brlt L117
 036A           X42:
 036A           L114:
 036A                   .dbline 122
 036A 0150              subi R16,1
 036C 1040              sbci R17,0
 036E           L116:
 036E                   .dbline 122
 036E 2224              clr R2
 0370 3324              clr R3
 0372 2016              cp R2,R16
 0374 3106              cpc R3,R17
 0376 44F3              brlt L113
 0378           X43:
 0378                   .dbline -2
 0378           L112:
 0378                   .dbline 0 ; func end
 0378 5991              ld R21,y+
 037A 4991              ld R20,y+
 037C 0895              ret
 037E                   .dbsym r i 20 i
 037E                   .dbsym r t 16 I
 037E                   .dbend
 037E                   .dbfunc e delayus _delayus fV
 037E           ;              i -> R20,R21
 037E           ;              t -> R16,R17
                        .even
 037E           _delayus::
 037E 4A93              st -y,R20
 0380 5A93              st -y,R21
 0382                   .dbline -1
 0382                   .dbline 129
 0382           ; }
 0382           ; 
 0382           ; 
 0382           ; void delayus(uint16 t)
 0382           ; {
 0382                   .dbline 131
 0382           ;       uint16 i;
 0382           ;       for(i=0;i<t;i++)
 0382 4427              clr R20
 0384 5527              clr R21
 0386 02C0              xjmp L125
 0388           L122:
 0388                   .dbline 132
 0388           ;               {
 0388                   .dbline 135
 0388           ;                       //asm("NOP\n");
 0388           ;                       //asm("NOP\n");
 0388           ;               }
 0388           L123:
 0388                   .dbline 131
 0388 4F5F              subi R20,255  ; offset = 1
 038A 5F4F              sbci R21,255
 038C           L125:
 038C                   .dbline 131
 038C 4017              cp R20,R16
 038E 5107              cpc R21,R17
 0390 D8F3              brlo L122
 0392           X44:
 0392                   .dbline -2
 0392           L121:
 0392                   .dbline 0 ; func end
 0392 5991              ld R21,y+
 0394 4991              ld R20,y+
 0396 0895              ret
 0398                   .dbsym r i 20 i
 0398                   .dbsym r t 16 i
 0398                   .dbend
 0398                   .dbfile D:\ICC_H\LCD12864_ST7920.H
 0398                   .dbfunc e SPI_init _SPI_init fV
                        .even
 0398           _SPI_init::
 0398                   .dbline -1
 0398                   .dbline 83
 0398           ; /*********************************************************************
 0398           ;       微 雪 电 子   WaveShare   http://www.waveShare.net              
 0398           ;                                                               
 0398           ; 目    的:   建立LCD12864_ST7920的串模式操作库
 0398           ; 
 0398           ; 目标系统:   基于AVR单片机
 0398           ;                                                                       
 0398           ; 应用软件:   ICCAVR                                               
 0398           ;                                                                       
 0398           ; 版    本:   Version 1.0
 0398           ;                                                                       
 0398           ; 圆版时间:   2005-09-06
 0398           ; 
 0398           ; 开发人员:   SEE
 0398           ; 
 0398           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 0398           ; 
 0398           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权 
 0398           ; *********************************************************************/
 0398           ; 
 0398           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 0398           ; ----------------------------------------------------------------------
 0398           ; 版本更新记录：
 0398           ; 
 0398           ; 
 0398           ; 
 0398           ; ----------------------------------------------------------------------
 0398           ; 入口参数说明：
 0398           ;       //#define OUT_LCD_CS    sbi(DDRD,0)
 0398           ;       //#define SET_LCD_CS    sbi(PORTD,0)
 0398           ;       //#define CLR_LCD_CS    cbi(PORTD,0)
 0398           ; 
 0398           ; ----------------------------------------------------------------------
 0398           ; 待定参数说明：
 0398           ;       
 0398           ; 
 0398           ; ----------------------------------------------------------------------        
 0398           ; 对外变量说明：
 0398           ; 
 0398           ; ----------------------------------------------------------------------
 0398           ; 对外函数说明：
 0398           ; 
 0398           ; ----------------------------------------------------------------------
 0398           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 0398           ; 
 0398           ; 
 0398           ; /*--------------------------------------------------------------------
 0398           ; 接口定义：
 0398           ; 
 0398           ; LCD12864_ST7920                       ATmega16
 0398           ; 1.GND         --------        GND
 0398           ; 2.VCC         --------        VCC
 0398           ; 3.V0          --------        V0
 0398           ; 4.RS(CS)      --------        VCC
 0398           ; 5.R/W(SID)    --------        MOSI/PB5
 0398           ; 6.E(SCLK)     --------        SCK/PB7
 0398           ; 7.D0          --------        NC
 0398           ; 8.D1          --------        NC
 0398           ; 9.D2          --------        NC
 0398           ; 10.D3         --------        NC
 0398           ; 11.D4         --------        NC
 0398           ; 12.D5         --------        NC
 0398           ; 13.D6         --------        NC
 0398           ; 14.D7         --------        NC
 0398           ; 15.PSB                --------        GND
 0398           ; 16.NC         --------        NC
 0398           ; 17.RST                --------        NC
 0398           ; 18.NC         --------        NC
 0398           ; 19.LED+               --------        VCC
 0398           ; 20.LED-               --------        GND
 0398           ; 
 0398           ; 说明：
 0398           ; （1）使用ATmega16的硬件SPI操作LCD12864_ST7920
 0398           ; （2）PIN4/CS接VCC，其实也可接到特定的IO口，但外部程序需要指定
 0398           ; --------------------------------------------------------------------*/
 0398           ; 
 0398           ; #ifndef LCD12864_ST7920_H
 0398           ; #define LCD12864_ST7920_H
 0398           ; 
 0398           ; #include "D:\ICC_H\CmmIcc.h"
 0398           ; 
 0398           ; void SPI_init()
 0398           ; {
 0398                   .dbline 84
 0398           ;       DDRB |= 0xB0;
 0398 87B3              in R24,0x17
 039A 806B              ori R24,176
 039C 87BB              out 0x17,R24
 039E                   .dbline 85
 039E           ;       SPCR = 0x50;    //setup SPI
 039E 80E5              ldi R24,80
 03A0 8DB9              out 0xd,R24
 03A2                   .dbline 86
 03A2           ;       SPSR = 0x01;    //setup SPI
 03A2 81E0              ldi R24,1
 03A4 8EB9              out 0xe,R24
 03A6                   .dbline 87
 03A6           ;       SEI();
 03A6 7894              sei
 03A8                   .dbline -2
 03A8           L126:
 03A8                   .dbline 0 ; func end
 03A8 0895              ret
 03AA                   .dbend
 03AA                   .dbfunc e lcd_wrByte _lcd_wrByte fV
 03AA           ;           data -> R16
                        .even
 03AA           _lcd_wrByte::
 03AA                   .dbline -1
 03AA                   .dbline 91
 03AA           ; }
 03AA           ; 
 03AA           ; void lcd_wrByte(uint8 data)
 03AA           ; {  
 03AA                   .dbline 92
 03AA           ;       SPDR = data;        
 03AA 0FB9              out 0xf,R16
 03AC           L128:
 03AC                   .dbline 93
 03AC           ;       while ((SPSR & 0x80) == 0);  
 03AC           L129:
 03AC                   .dbline 93
 03AC 779B              sbis 0xe,7
 03AE FECF              rjmp L128
 03B0           X45:
 03B0                   .dbline -2
 03B0           L127:
 03B0                   .dbline 0 ; func end
 03B0 0895              ret
 03B2                   .dbsym r data 16 c
 03B2                   .dbend
 03B2                   .dbfunc e lcd_wrCmd _lcd_wrCmd fV
 03B2           ;             LC -> R10
 03B2           ;             HC -> R12
                        .even
 03B2           _lcd_wrCmd::
 03B2 AA92              st -y,R10
 03B4 CA92              st -y,R12
 03B6 A22E              mov R10,R18
 03B8 C02E              mov R12,R16
 03BA                   .dbline -1
 03BA                   .dbline 97
 03BA           ; }
 03BA           ; 
 03BA           ; void lcd_wrCmd(uint8 HC,uint8 LC)
 03BA           ; {
 03BA                   .dbline 98
 03BA           ;       lcd_wrByte(0xF8);
 03BA 08EF              ldi R16,248
 03BC F6DF              xcall _lcd_wrByte
 03BE                   .dbline 99
 03BE           ;       lcd_wrByte(HC);         //传输高四位
 03BE 0C2D              mov R16,R12
 03C0 F4DF              xcall _lcd_wrByte
 03C2                   .dbline 100
 03C2           ;       lcd_wrByte(LC);         //传输低四位
 03C2 0A2D              mov R16,R10
 03C4 F2DF              xcall _lcd_wrByte
 03C6                   .dbline -2
 03C6           L131:
 03C6                   .dbline 0 ; func end
 03C6 C990              ld R12,y+
 03C8 A990              ld R10,y+
 03CA 0895              ret
 03CC                   .dbsym r LC 10 c
 03CC                   .dbsym r HC 12 c
 03CC                   .dbend
 03CC                   .dbfunc e lcd_wrDat _lcd_wrDat fV
 03CC           ;             LD -> R10
 03CC           ;             HD -> R12
                        .even
 03CC           _lcd_wrDat::
 03CC AA92              st -y,R10
 03CE CA92              st -y,R12
 03D0 A22E              mov R10,R18
 03D2 C02E              mov R12,R16
 03D4                   .dbline -1
 03D4                   .dbline 104
 03D4           ; }
 03D4           ; 
 03D4           ; void lcd_wrDat(uint8 HD,uint8 LD)
 03D4           ; {
 03D4                   .dbline 105
 03D4           ;       lcd_wrByte(0xFA);
 03D4 0AEF              ldi R16,250
 03D6 E9DF              xcall _lcd_wrByte
 03D8                   .dbline 106
 03D8           ;       lcd_wrByte(HD);         //传输高四位
 03D8 0C2D              mov R16,R12
 03DA E7DF              xcall _lcd_wrByte
 03DC                   .dbline 107
 03DC           ;       lcd_wrByte(LD);         //传输低四位
 03DC 0A2D              mov R16,R10
 03DE E5DF              xcall _lcd_wrByte
 03E0                   .dbline -2
 03E0           L132:
 03E0                   .dbline 0 ; func end
 03E0 C990              ld R12,y+
 03E2 A990              ld R10,y+
 03E4 0895              ret
 03E6                   .dbsym r LD 10 c
 03E6                   .dbsym r HD 12 c
 03E6                   .dbend
 03E6                   .dbfunc e lcd_set_xy _lcd_set_xy fV
 03E6           ;            adr -> R20
 03E6           ;              y -> R22
 03E6           ;              x -> R10
                        .even
 03E6           _lcd_set_xy::
 03E6 0E940000          xcall push_xgsetF00C
 03EA 622F              mov R22,R18
 03EC A02E              mov R10,R16
 03EE                   .dbline -1
 03EE                   .dbline 114
 03EE           ; } 
 03EE           ; 
 03EE           ; /*
 03EE           ; x表示在第几行显示，y表示在第几列显示
 03EE           ; */
 03EE           ; void lcd_set_xy(uint8 x,uint8 y) 
 03EE           ; {
 03EE                   .dbline 117
 03EE           ;       uint8 adr;
 03EE           ; 
 03EE           ;       switch(x)
 03EE BB24              clr R11
 03F0 C501              movw R24,R10
 03F2 8130              cpi R24,1
 03F4 E0E0              ldi R30,0
 03F6 9E07              cpc R25,R30
 03F8 69F0              breq L137
 03FA           X46:
 03FA 8230              cpi R24,2
 03FC E0E0              ldi R30,0
 03FE 9E07              cpc R25,R30
 0400 61F0              breq L138
 0402           X47:
 0402 8330              cpi R24,3
 0404 E0E0              ldi R30,0
 0406 9E07              cpc R25,R30
 0408 59F0              breq L139
 040A           X48:
 040A 8430              cpi R24,4
 040C E0E0              ldi R30,0
 040E 9E07              cpc R25,R30
 0410 51F0              breq L140
 0412           X49:
 0412 0BC0              xjmp L134
 0414           L137:
 0414                   .dbline 119
 0414           ;       {
 0414           ;       case 1: adr = 0x7F + y;
 0414 462F              mov R20,R22
 0416 4158              subi R20,129    ; addi 127
 0418                   .dbline 120
 0418           ;               break;          //在第1行y列显示
 0418 08C0              xjmp L135
 041A           L138:
 041A                   .dbline 121
 041A           ;       case 2: adr = 0x8F + y;
 041A 462F              mov R20,R22
 041C 4157              subi R20,113    ; addi 143
 041E                   .dbline 122
 041E           ;               break;          //在第2行y列显示
 041E 05C0              xjmp L135
 0420           L139:
 0420                   .dbline 123
 0420           ;       case 3: adr = 0x87 + y;
 0420 462F              mov R20,R22
 0422 4957              subi R20,121    ; addi 135
 0424                   .dbline 124
 0424           ;               break;          //在第3行y列显示
 0424 02C0              xjmp L135
 0426           L140:
 0426                   .dbline 125
 0426           ;       case 4: adr = 0x97 + y;
 0426 462F              mov R20,R22
 0428 4956              subi R20,105    ; addi 151
 042A                   .dbline 126
 042A           ;               break;          //在第4行y列显示
 042A           L134:
 042A                   .dbline 127
 042A           ;       default:        ;
 042A                   .dbline 128
 042A           ;       }
 042A           L135:
 042A                   .dbline 129
 042A           ;       lcd_wrCmd(adr&0xF0,(adr&0x0F)<<4);
 042A 242F              mov R18,R20
 042C 2F70              andi R18,15
 042E 2F70              andi R18,#0x0F
 0430 2295              swap R18
 0432 042F              mov R16,R20
 0434 007F              andi R16,240
 0436 BDDF              xcall _lcd_wrCmd
 0438                   .dbline -2
 0438           L133:
 0438                   .dbline 0 ; func end
 0438 0C940000          xjmp pop_xgsetF00C
 043C                   .dbsym r adr 20 c
 043C                   .dbsym r y 22 c
 043C                   .dbsym r x 10 c
 043C                   .dbend
 043C                   .dbfunc e lcd_putc _lcd_putc fV
 043C           ;             ch -> R20
 043C           ;              y -> R12
 043C           ;              x -> R10
                        .even
 043C           _lcd_putc::
 043C 0E940000          xcall push_xgset303C
 0440 C22E              mov R12,R18
 0442 A02E              mov R10,R16
 0444 4E81              ldd R20,y+6
 0446                   .dbline -1
 0446                   .dbline 133
 0446           ; }
 0446           ; 
 0446           ; void lcd_putc(uint8 x,uint8 y,uint8 ch)
 0446           ; {
 0446                   .dbline 134
 0446           ;       lcd_set_xy(x,y);
 0446 2C2D              mov R18,R12
 0448 0A2D              mov R16,R10
 044A CDDF              xcall _lcd_set_xy
 044C                   .dbline 135
 044C           ;       delay50us(20); 
 044C 04E1              ldi R16,20
 044E 10E0              ldi R17,0
 0450 68DF              xcall _delay50us
 0452                   .dbline 136
 0452           ;       lcd_wrDat(ch&0xF0,(ch&0x0F)<<4);
 0452 242F              mov R18,R20
 0454 2F70              andi R18,15
 0456 2F70              andi R18,#0x0F
 0458 2295              swap R18
 045A 042F              mov R16,R20
 045C 007F              andi R16,240
 045E B6DF              xcall _lcd_wrDat
 0460                   .dbline -2
 0460           L141:
 0460                   .dbline 0 ; func end
 0460 0C940000          xjmp pop_xgset303C
 0464                   .dbsym r ch 20 c
 0464                   .dbsym r y 12 c
 0464                   .dbsym r x 10 c
 0464                   .dbend
 0464                   .dbfunc e lcd_putd0 _lcd_putd0 fV
 0464           ;              i -> R20
 0464           ;         length -> R20
 0464           ;            dat -> y+7
 0464           ;              y -> R12
 0464           ;              x -> R10
                        .even
 0464           _lcd_putd0::
 0464 0E940000          xcall push_xgset303C
 0468 C22E              mov R12,R18
 046A A02E              mov R10,R16
 046C 2197              sbiw R28,1
 046E 4B85              ldd R20,y+11
 0470                   .dbline -1
 0470                   .dbline 140
 0470           ; }
 0470           ; 
 0470           ; void lcd_putd0(uint8 x,uint8 y,uint32 dat,uint8 length)
 0470           ; {
 0470                   .dbline 143
 0470           ;       sint8 i;
 0470           ; 
 0470           ;       speaData(dat,length);
 0470 4883              std y+0,R20
 0472 0F81              ldd R16,y+7
 0474 1885              ldd R17,y+8
 0476 2985              ldd R18,y+9
 0478 3A85              ldd R19,y+10
 047A C2DD              xcall _speaData
 047C                   .dbline 144
 047C           ;       lcd_set_xy(x,y);
 047C 2C2D              mov R18,R12
 047E 0A2D              mov R16,R10
 0480 B2DF              xcall _lcd_set_xy
 0482                   .dbline 145
 0482           ;       delay50us(40);
 0482 08E2              ldi R16,40
 0484 10E0              ldi R17,0
 0486 4DDF              xcall _delay50us
 0488                   .dbline 146
 0488           ;       for(i=length-1;i>=0;i--)
 0488 4150              subi R20,1
 048A 1EC0              xjmp L146
 048C           L143:
 048C                   .dbline 147
 048C           ;       {
 048C                   .dbline 148
 048C           ;               lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
 048C 80E0              ldi R24,<_dataElem
 048E 90E0              ldi R25,>_dataElem
 0490 E42F              mov R30,R20
 0492 FF27              clr R31
 0494 E7FD              sbrc R30,7
 0496 F095              com R31
 0498 E80F              add R30,R24
 049A F91F              adc R31,R25
 049C 8081              ldd R24,z+0
 049E 9927              clr R25
 04A0 C096              adiw R24,48
 04A2 9C01              movw R18,R24
 04A4 2F70              andi R18,15
 04A6 3070              andi R19,0
 04A8 220F              lsl R18
 04AA 331F              rol R19
 04AC 220F              lsl R18
 04AE 331F              rol R19
 04B0 220F              lsl R18
 04B2 331F              rol R19
 04B4 220F              lsl R18
 04B6 331F              rol R19
 04B8 8C01              movw R16,R24
 04BA 007F              andi R16,240
 04BC 1070              andi R17,0
 04BE 86DF              xcall _lcd_wrDat
 04C0                   .dbline 149
 04C0           ;               delay50us(40); 
 04C0 08E2              ldi R16,40
 04C2 10E0              ldi R17,0
 04C4 2EDF              xcall _delay50us
 04C6                   .dbline 150
 04C6           ;       }
 04C6           L144:
 04C6                   .dbline 146
 04C6 4A95              dec R20
 04C8           L146:
 04C8                   .dbline 146
 04C8 4030              cpi R20,0
 04CA 04F7              brge L143
 04CC           X50:
 04CC                   .dbline -2
 04CC           L142:
 04CC                   .dbline 0 ; func end
 04CC 2196              adiw R28,1
 04CE 0C940000          xjmp pop_xgset303C
 04D2                   .dbsym r i 20 C
 04D2                   .dbsym r length 20 c
 04D2                   .dbsym l dat 7 l
 04D2                   .dbsym r y 12 c
 04D2                   .dbsym r x 10 c
 04D2                   .dbend
 04D2                   .dbfunc e lcd_putd _lcd_putd fV
 04D2           ;      effectLen -> R22
 04D2           ;              i -> R20
 04D2           ;         length -> R10
 04D2           ;            dat -> y+11
 04D2           ;              y -> R14
 04D2           ;              x -> R12
                        .even
 04D2           _lcd_putd::
 04D2 0E940000          xcall push_xgsetF0FC
 04D6 E22E              mov R14,R18
 04D8 C02E              mov R12,R16
 04DA 2197              sbiw R28,1
 04DC AF84              ldd R10,y+15
 04DE                   .dbline -1
 04DE                   .dbline 154
 04DE           ; }
 04DE           ; 
 04DE           ; void lcd_putd(uint8 x,uint8 y,uint32 dat,uint8 length)
 04DE           ; {
 04DE                   .dbline 158
 04DE           ;       sint8 i;
 04DE           ;       sint8 effectLen;
 04DE           ; 
 04DE           ;       if(dat>999999)
 04DE 8FE3              ldi R24,63
 04E0 92E4              ldi R25,66
 04E2 AFE0              ldi R26,15
 04E4 B0E0              ldi R27,0
 04E6 2B84              ldd R2,y+11
 04E8 3C84              ldd R3,y+12
 04EA 4D84              ldd R4,y+13
 04EC 5E84              ldd R5,y+14
 04EE 8215              cp R24,R2
 04F0 9305              cpc R25,R3
 04F2 A405              cpc R26,R4
 04F4 B505              cpc R27,R5
 04F6 10F4              brsh L148
 04F8           X51:
 04F8                   .dbline 159
 04F8           ;               effectLen=7;
 04F8 67E0              ldi R22,7
 04FA 4CC0              xjmp L149
 04FC           L148:
 04FC                   .dbline 160
 04FC           ;       else if(dat>99999)
 04FC 8FE9              ldi R24,159
 04FE 96E8              ldi R25,134
 0500 A1E0              ldi R26,1
 0502 B0E0              ldi R27,0
 0504 2B84              ldd R2,y+11
 0506 3C84              ldd R3,y+12
 0508 4D84              ldd R4,y+13
 050A 5E84              ldd R5,y+14
 050C 8215              cp R24,R2
 050E 9305              cpc R25,R3
 0510 A405              cpc R26,R4
 0512 B505              cpc R27,R5
 0514 10F4              brsh L150
 0516           X52:
 0516                   .dbline 161
 0516           ;               effectLen=6;
 0516 66E0              ldi R22,6
 0518 3DC0              xjmp L151
 051A           L150:
 051A                   .dbline 162
 051A           ;       else if(dat>9999)
 051A 8FE0              ldi R24,15
 051C 97E2              ldi R25,39
 051E A0E0              ldi R26,0
 0520 B0E0              ldi R27,0
 0522 2B84              ldd R2,y+11
 0524 3C84              ldd R3,y+12
 0526 4D84              ldd R4,y+13
 0528 5E84              ldd R5,y+14
 052A 8215              cp R24,R2
 052C 9305              cpc R25,R3
 052E A405              cpc R26,R4
 0530 B505              cpc R27,R5
 0532 10F4              brsh L152
 0534           X53:
 0534                   .dbline 163
 0534           ;               effectLen=5;
 0534 65E0              ldi R22,5
 0536 2EC0              xjmp L153
 0538           L152:
 0538                   .dbline 164
 0538           ;       else if(dat>999)
 0538 87EE              ldi R24,231
 053A 93E0              ldi R25,3
 053C A0E0              ldi R26,0
 053E B0E0              ldi R27,0
 0540 2B84              ldd R2,y+11
 0542 3C84              ldd R3,y+12
 0544 4D84              ldd R4,y+13
 0546 5E84              ldd R5,y+14
 0548 8215              cp R24,R2
 054A 9305              cpc R25,R3
 054C A405              cpc R26,R4
 054E B505              cpc R27,R5
 0550 10F4              brsh L154
 0552           X54:
 0552                   .dbline 165
 0552           ;               effectLen=4;
 0552 64E0              ldi R22,4
 0554 1FC0              xjmp L155
 0556           L154:
 0556                   .dbline 166
 0556           ;       else if(dat>99)
 0556 83E6              ldi R24,99
 0558 90E0              ldi R25,0
 055A A0E0              ldi R26,0
 055C B0E0              ldi R27,0
 055E 2B84              ldd R2,y+11
 0560 3C84              ldd R3,y+12
 0562 4D84              ldd R4,y+13
 0564 5E84              ldd R5,y+14
 0566 8215              cp R24,R2
 0568 9305              cpc R25,R3
 056A A405              cpc R26,R4
 056C B505              cpc R27,R5
 056E 10F4              brsh L156
 0570           X55:
 0570                   .dbline 167
 0570           ;               effectLen=3;
 0570 63E0              ldi R22,3
 0572 10C0              xjmp L157
 0574           L156:
 0574                   .dbline 168
 0574           ;       else if(dat>9)
 0574 89E0              ldi R24,9
 0576 90E0              ldi R25,0
 0578 A0E0              ldi R26,0
 057A B0E0              ldi R27,0
 057C 2B84              ldd R2,y+11
 057E 3C84              ldd R3,y+12
 0580 4D84              ldd R4,y+13
 0582 5E84              ldd R5,y+14
 0584 8215              cp R24,R2
 0586 9305              cpc R25,R3
 0588 A405              cpc R26,R4
 058A B505              cpc R27,R5
 058C 10F4              brsh L158
 058E           X56:
 058E                   .dbline 169
 058E           ;               effectLen=2;
 058E 62E0              ldi R22,2
 0590 01C0              xjmp L159
 0592           L158:
 0592                   .dbline 171
 0592           ;       else
 0592           ;               effectLen=1;
 0592 61E0              ldi R22,1
 0594           L159:
 0594           L157:
 0594           L155:
 0594           L153:
 0594           L151:
 0594           L149:
 0594                   .dbline 172
 0594           ;       speaData(dat,effectLen);
 0594 6883              std y+0,R22
 0596 0B85              ldd R16,y+11
 0598 1C85              ldd R17,y+12
 059A 2D85              ldd R18,y+13
 059C 3E85              ldd R19,y+14
 059E 30DD              xcall _speaData
 05A0                   .dbline 174
 05A0           ; 
 05A0           ;       lcd_set_xy(x,y);
 05A0 2E2D              mov R18,R14
 05A2 0C2D              mov R16,R12
 05A4 20DF              xcall _lcd_set_xy
 05A6                   .dbline 175
 05A6           ;       delay50us(40); 
 05A6 08E2              ldi R16,40
 05A8 10E0              ldi R17,0
 05AA BBDE              xcall _delay50us
 05AC                   .dbline 176
 05AC           ;       if(length>effectLen)
 05AC 262E              mov R2,R22
 05AE 3324              clr R3
 05B0 27FC              sbrc R2,7
 05B2 3094              com R3
 05B4 4A2C              mov R4,R10
 05B6 5524              clr R5
 05B8 2414              cp R2,R4
 05BA 3504              cpc R3,R5
 05BC 6CF4              brge L160
 05BE           X57:
 05BE                   .dbline 177
 05BE           ;       {
 05BE                   .dbline 178
 05BE           ;               for(i=length-effectLen-1;i>=0;i--)
 05BE 442D              mov R20,R4
 05C0 461B              sub R20,R22
 05C2 4150              subi R20,1
 05C4 07C0              xjmp L165
 05C6           L162:
 05C6                   .dbline 179
 05C6           ;               {
 05C6                   .dbline 180
 05C6           ;                       lcd_wrDat(' '&0xF0,(' '&0x0F)<<4);
 05C6 2227              clr R18
 05C8 00E2              ldi R16,32
 05CA 00DF              xcall _lcd_wrDat
 05CC                   .dbline 181
 05CC           ;                       delay50us(40); 
 05CC 08E2              ldi R16,40
 05CE 10E0              ldi R17,0
 05D0 A8DE              xcall _delay50us
 05D2                   .dbline 182
 05D2           ;               }
 05D2           L163:
 05D2                   .dbline 178
 05D2 4A95              dec R20
 05D4           L165:
 05D4                   .dbline 178
 05D4 4030              cpi R20,0
 05D6 BCF7              brge L162
 05D8           X58:
 05D8                   .dbline 183
 05D8           ;       }
 05D8           L160:
 05D8                   .dbline 184
 05D8           ;       for(i=effectLen-1;i>=0;i--)
 05D8 462F              mov R20,R22
 05DA 4150              subi R20,1
 05DC 1EC0              xjmp L169
 05DE           L166:
 05DE                   .dbline 185
 05DE           ;       {
 05DE                   .dbline 186
 05DE           ;               lcd_wrDat( (dataElem[i]+0x30)&0xF0 ,( (dataElem[i]+0x30)&0x0F )<<4 );
 05DE 80E0              ldi R24,<_dataElem
 05E0 90E0              ldi R25,>_dataElem
 05E2 E42F              mov R30,R20
 05E4 FF27              clr R31
 05E6 E7FD              sbrc R30,7
 05E8 F095              com R31
 05EA E80F              add R30,R24
 05EC F91F              adc R31,R25
 05EE 8081              ldd R24,z+0
 05F0 9927              clr R25
 05F2 C096              adiw R24,48
 05F4 9C01              movw R18,R24
 05F6 2F70              andi R18,15
 05F8 3070              andi R19,0
 05FA 220F              lsl R18
 05FC 331F              rol R19
 05FE 220F              lsl R18
 0600 331F              rol R19
 0602 220F              lsl R18
 0604 331F              rol R19
 0606 220F              lsl R18
 0608 331F              rol R19
 060A 8C01              movw R16,R24
 060C 007F              andi R16,240
 060E 1070              andi R17,0
 0610 DDDE              xcall _lcd_wrDat
 0612                   .dbline 187
 0612           ;               delay50us(40);
 0612 08E2              ldi R16,40
 0614 10E0              ldi R17,0
 0616 85DE              xcall _delay50us
 0618                   .dbline 188
 0618           ;       }
 0618           L167:
 0618                   .dbline 184
 0618 4A95              dec R20
 061A           L169:
 061A                   .dbline 184
 061A 4030              cpi R20,0
 061C 04F7              brge L166
 061E           X59:
 061E                   .dbline -2
 061E           L147:
 061E                   .dbline 0 ; func end
 061E 2196              adiw R28,1
 0620 0C940000          xjmp pop_xgsetF0FC
 0624                   .dbsym r effectLen 22 C
 0624                   .dbsym r i 20 C
 0624                   .dbsym r length 10 c
 0624                   .dbsym l dat 11 l
 0624                   .dbsym r y 14 c
 0624                   .dbsym r x 12 c
 0624                   .dbend
 0624                   .dbfunc e lcd_puts _lcd_puts fV
 0624           ;            str -> R20,R21
 0624           ;              y -> R12
 0624           ;              x -> R10
                        .even
 0624           _lcd_puts::
 0624 0E940000          xcall push_xgset303C
 0628 C22E              mov R12,R18
 062A A02E              mov R10,R16
 062C 4E81              ldd R20,y+6
 062E 5F81              ldd R21,y+7
 0630                   .dbline -1
 0630                   .dbline 192
 0630           ; }
 0630           ; 
 0630           ; void lcd_puts(uint8 x,uint8 y,uint8 *str)
 0630           ; { 
 0630                   .dbline 193
 0630           ;       lcd_set_xy(x,y);
 0630 2C2D              mov R18,R12
 0632 0A2D              mov R16,R10
 0634 D8DE              xcall _lcd_set_xy
 0636                   .dbline 194
 0636           ;       delay50us(20);   
 0636 04E1              ldi R16,20
 0638 10E0              ldi R17,0
 063A 73DE              xcall _delay50us
 063C 0FC0              xjmp L172
 063E           L171:
 063E                   .dbline 196
 063E           ;       while(*str)
 063E           ;       {
 063E                   .dbline 197
 063E           ;               lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
 063E FA01              movw R30,R20
 0640 2080              ldd R2,z+0
 0642 3324              clr R3
 0644 222D              mov R18,R2
 0646 2F70              andi R18,15
 0648 2F70              andi R18,#0x0F
 064A 2295              swap R18
 064C 022D              mov R16,R2
 064E 007F              andi R16,240
 0650 BDDE              xcall _lcd_wrDat
 0652                   .dbline 198
 0652           ;               str++;
 0652 4F5F              subi R20,255  ; offset = 1
 0654 5F4F              sbci R21,255
 0656                   .dbline 199
 0656           ;               delay50us(20);
 0656 04E1              ldi R16,20
 0658 10E0              ldi R17,0
 065A 63DE              xcall _delay50us
 065C                   .dbline 200
 065C           ;       } 
 065C           L172:
 065C                   .dbline 195
 065C FA01              movw R30,R20
 065E 2080              ldd R2,z+0
 0660 2220              tst R2
 0662 69F7              brne L171
 0664           X60:
 0664                   .dbline -2
 0664           L170:
 0664                   .dbline 0 ; func end
 0664 0C940000          xjmp pop_xgset303C
 0668                   .dbsym r str 20 pc
 0668                   .dbsym r y 12 c
 0668                   .dbsym r x 10 c
 0668                   .dbend
 0668                   .dbfunc e lcd_puts_ _lcd_puts_ fV
 0668           ;          dlyMs -> R10
 0668           ;            str -> R20,R21
 0668           ;              y -> R14
 0668           ;              x -> R12
                        .even
 0668           _lcd_puts_::
 0668 0E940000          xcall push_xgset30FC
 066C E22E              mov R14,R18
 066E C02E              mov R12,R16
 0670 4885              ldd R20,y+8
 0672 5985              ldd R21,y+9
 0674 AA84              ldd R10,y+10
 0676                   .dbline -1
 0676                   .dbline 204
 0676           ; }
 0676           ; 
 0676           ; void lcd_puts_(uint8 x,uint8 y,uint8 *str,uint8 dlyMs)
 0676           ; { 
 0676                   .dbline 205
 0676           ;       lcd_set_xy(x,y);
 0676 2E2D              mov R18,R14
 0678 0C2D              mov R16,R12
 067A B5DE              xcall _lcd_set_xy
 067C                   .dbline 206
 067C           ;       delay50us(20);   
 067C 04E1              ldi R16,20
 067E 10E0              ldi R17,0
 0680 50DE              xcall _delay50us
 0682 0FC0              xjmp L176
 0684           L175:
 0684                   .dbline 208
 0684           ;       while(*str)
 0684           ;       {
 0684                   .dbline 209
 0684           ;               lcd_wrDat((*(str))&0xF0,((*(str))&0x0F)<<4);
 0684 FA01              movw R30,R20
 0686 2080              ldd R2,z+0
 0688 3324              clr R3
 068A 222D              mov R18,R2
 068C 2F70              andi R18,15
 068E 2F70              andi R18,#0x0F
 0690 2295              swap R18
 0692 022D              mov R16,R2
 0694 007F              andi R16,240
 0696 9ADE              xcall _lcd_wrDat
 0698                   .dbline 210
 0698           ;               str++;
 0698 4F5F              subi R20,255  ; offset = 1
 069A 5F4F              sbci R21,255
 069C                   .dbline 211
 069C           ;               delay50ms(dlyMs);
 069C 0A2D              mov R16,R10
 069E 1127              clr R17
 06A0 50DE              xcall _delay50ms
 06A2                   .dbline 212
 06A2           ;       } 
 06A2           L176:
 06A2                   .dbline 207
 06A2 FA01              movw R30,R20
 06A4 2080              ldd R2,z+0
 06A6 2220              tst R2
 06A8 69F7              brne L175
 06AA           X61:
 06AA                   .dbline -2
 06AA           L174:
 06AA                   .dbline 0 ; func end
 06AA 0C940000          xjmp pop_xgset30FC
 06AE                   .dbsym r dlyMs 10 c
 06AE                   .dbsym r str 20 pc
 06AE                   .dbsym r y 14 c
 06AE                   .dbsym r x 12 c
 06AE                   .dbend
 06AE                   .dbfunc e lcd_clr _lcd_clr fV
                        .even
 06AE           _lcd_clr::
 06AE                   .dbline -1
 06AE                   .dbline 216
 06AE           ; }
 06AE           ; 
 06AE           ; void lcd_clr()
 06AE           ; {
 06AE                   .dbline 217
 06AE           ;       lcd_wrCmd(0x00,0x10);
 06AE 20E1              ldi R18,16
 06B0 0027              clr R16
 06B2 7FDE              xcall _lcd_wrCmd
 06B4                   .dbline 218
 06B4           ;       delay50us(200);
 06B4 08EC              ldi R16,200
 06B6 10E0              ldi R17,0
 06B8                   .dbline -2
 06B8           L178:
 06B8                   .dbline 0 ; func end
 06B8 34CE              xjmp _delay50us
 06BA                   .dbend
 06BA                   .dbfunc e lcd_init _lcd_init fV
                        .even
 06BA           _lcd_init::
 06BA                   .dbline -1
 06BA                   .dbline 222
 06BA           ; }
 06BA           ; 
 06BA           ; void lcd_init(void)
 06BA           ; {
 06BA                   .dbline 223
 06BA           ;       SPI_init();     
 06BA 6EDE              xcall _SPI_init
 06BC                   .dbline 226
 06BC           ;       //OUT_LCD_CS;           //若LCD_CS
 06BC           ;       //SET_LCD_CS;           
 06BC           ;       delay50ms(1);
 06BC 01E0              ldi R16,1
 06BE 10E0              ldi R17,0
 06C0 40DE              xcall _delay50ms
 06C2                   .dbline 227
 06C2           ;       lcd_wrCmd(0x30,0x30);   //使用8位控制界面,使用基本指令集
 06C2 20E3              ldi R18,48
 06C4 00E3              ldi R16,48
 06C6 75DE              xcall _lcd_wrCmd
 06C8                   .dbline 229
 06C8           ;       //lcd_wrCmd(0x00,0xF0); //整体显示ON
 06C8           ;       lcd_wrCmd(0x00,0xC0);   //整体显示ON
 06C8 20EC              ldi R18,192
 06CA 0027              clr R16
 06CC 72DE              xcall _lcd_wrCmd
 06CE                   .dbline 230
 06CE           ;       lcd_wrCmd(0x00,0x10);   //清屏
 06CE 20E1              ldi R18,16
 06D0 0027              clr R16
 06D2 6FDE              xcall _lcd_wrCmd
 06D4                   .dbline 232
 06D4           ;       //lcd_wrCmd(0x10,0x00); //光标
 06D4           ;       lcd_wrCmd(0x00,0x60);
 06D4 20E6              ldi R18,96
 06D6 0027              clr R16
 06D8 6CDE              xcall _lcd_wrCmd
 06DA                   .dbline 234
 06DA           ;       //lcd_wrCmd(0x00,0x70); //显示右移
 06DA           ;       delay50ms(1);           //不可省去！！！
 06DA 01E0              ldi R16,1
 06DC 10E0              ldi R17,0
 06DE                   .dbline -2
 06DE           L179:
 06DE                   .dbline 0 ; func end
 06DE 31CE              xjmp _delay50ms
 06E0                   .dbend
 06E0                   .dbfile D:\ICC_H\PCF8591.H
 06E0                   .dbfunc e PCF8591_getAD _PCF8591_getAD fV
 06E0           ;         pRdDat -> R14,R15
 06E0           ;           chan -> R10
 06E0           ;           mode -> R12
                        .even
 06E0           _PCF8591_getAD::
 06E0 0E940000          xcall push_xgset00FC
 06E4 A22E              mov R10,R18
 06E6 C02E              mov R12,R16
 06E8 2497              sbiw R28,4
 06EA EA84              ldd R14,y+10
 06EC FB84              ldd R15,y+11
 06EE                   .dbline -1
 06EE                   .dbline 89
 06EE           ; /*********************************************************************
 06EE           ;       微 雪 电 子   WaveShare   http://www.waveShare.net      
 06EE           ; 
 06EE           ; 目    的:   建立方便的PCF8591操作库
 06EE           ; 
 06EE           ; 目标系统:   基于AVR单片机
 06EE           ;                                                                               
 06EE           ; 应用软件:   ICCAVR
 06EE           ;                                                                               
 06EE           ; 版    本:   Version 1.0                                                
 06EE           ;                                                                               
 06EE           ; 圆版时间:   2005-06-25
 06EE           ;       
 06EE           ; 开发人员:   SEE
 06EE           ; 
 06EE           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 06EE           ;       
 06EE           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
 06EE           ; *********************************************************************/
 06EE           ; 
 06EE           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 06EE           ; ----------------------------------------------------------------------
 06EE           ; 版本更新记录：
 06EE           ; 
 06EE           ; ----------------------------------------------------------------------
 06EE           ; 入口参数说明：
 06EE           ;       sbit I2C_SCL=P3^1;
 06EE           ;       sbit I2C_SDA=P3^0;
 06EE           ;       #define WR_DADR 0x90    //器件地址：A2 A1 A0 = 0 0 0
 06EE           ;       #define RD_DADR 0x91    //器件地址：A2 A1 A0 = 0 0 0
 06EE           ; 
 06EE           ; ----------------------------------------------------------------------
 06EE           ; 待定参数说明：
 06EE           ; 
 06EE           ; ----------------------------------------------------------------------        
 06EE           ; 对外变量说明：
 06EE           ; 
 06EE           ; ----------------------------------------------------------------------
 06EE           ; 对外函数说明：
 06EE           ; 
 06EE           ; ----------------------------------------------------------------------
 06EE           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 06EE           ; 
 06EE           ; #ifndef PCF8591_H
 06EE           ; #define PCF8591_H
 06EE           ; 
 06EE           ; #include "D:\ICC_H\CmmICC.H"
 06EE           ; //sbit I2C_SCL=P3^1;
 06EE           ; //sbit I2C_SDA=P3^0;
 06EE           ; #include "D:\ICC_H\I2C.H"
 06EE           ; 
 06EE           ; //器件地址：A0 A1 A2 = 0 0 0
 06EE           ; #ifndef WR_DADR 
 06EE           ;       #define WR_DADR         0x90    //write device-address 
 06EE           ; #endif
 06EE           ; #ifndef RD_DADR 
 06EE           ;       #define RD_DADR         0x91    //read device-address
 06EE           ; #endif
 06EE           ; 
 06EE           ; #define MODE0         0x00    //Channel0 = AIN0;
 06EE           ;                                               //Channel1 = AIN1;
 06EE           ;                                               //Channel2 = AIN2;
 06EE           ;                                               //Channel3 = AIN3;
 06EE           ; #define MODE1         0x10    //Channel0 = AIN3-AIN0;
 06EE           ;                                               //Channel1 = AIN3-AIN1
 06EE           ;                                               //Channel2 = AIN3-AIN2;
 06EE           ; #define MODE2         0x20    //Channel0 = AIN0;
 06EE           ;                                               //Channel1 = AIN1;
 06EE           ;                                               //Channel2 = AIN3-AIN2;
 06EE           ; #define MODE3         0x30    //Channel0 = AIN1-AIN0;
 06EE           ;                                               //Channel1 = AIN3-AIN2;
 06EE           ; 
 06EE           ; #define CHNL0         0               //Using Channel0
 06EE           ; #define CHNL1         1               //Using Channel1
 06EE           ; #define CHNL2         2               //Using Channel2
 06EE           ; #define CHNL3         3               //Using Channel3
 06EE           ; 
 06EE           ; #define DAouputEn     0x40    //0x50 or 0x60 or 0x70 is also ok!
 06EE           ; 
 06EE           ; /*--------------------------------------------------------------------
 06EE           ; 函数全称：
 06EE           ; 函数功能：
 06EE           ; 注意事项：
 06EE           ; 提示说明：
 06EE           ; 输    入：    
 06EE           ; 返    回：00H~FFH
 06EE           ; --------------------------------------------------------------------*/
 06EE           ; void PCF8591_getAD(uint8 mode,uint8 chan,uint8 *pRdDat)
 06EE           ; {
 06EE                   .dbline 90
 06EE           ;       I2C_Read(WR_DADR,mode|chan,RD_DADR,pRdDat);
 06EE FB82              std y+3,R15
 06F0 EA82              std y+2,R14
 06F2 81E9              ldi R24,145
 06F4 8883              std y+0,R24
 06F6 2C2D              mov R18,R12
 06F8 2A29              or R18,R10
 06FA 00E9              ldi R16,144
 06FC 10E0              ldi R17,0
 06FE 98DD              xcall _I2C_Read
 0700                   .dbline -2
 0700           L180:
 0700                   .dbline 0 ; func end
 0700 2496              adiw R28,4
 0702 0C940000          xjmp pop_xgset00FC
 0706                   .dbsym r pRdDat 14 pc
 0706                   .dbsym r chan 10 c
 0706                   .dbsym r mode 12 c
 0706                   .dbend
 0706                   .dbfunc e PCF8591_setDA _PCF8591_setDA fV
 0706           ;            val -> R10
                        .even
 0706           _PCF8591_setDA::
 0706 AA92              st -y,R10
 0708 A02E              mov R10,R16
 070A 2197              sbiw R28,1
 070C                   .dbline -1
 070C                   .dbline 101
 070C           ; }
 070C           ; /*--------------------------------------------------------------------
 070C           ; 函数全称：
 070C           ; 函数功能：
 070C           ; 注意事项：
 070C           ; 提示说明：
 070C           ; 输    入：00H~FFH     
 070C           ; 返    回：
 070C           ; --------------------------------------------------------------------*/
 070C           ; void PCF8591_setDA(uint8 val)
 070C           ; {
 070C                   .dbline 102
 070C           ;       I2C_Write(WR_DADR,DAouputEn,val);
 070C A882              std y+0,R10
 070E 20E4              ldi R18,64
 0710 00E9              ldi R16,144
 0712 10E0              ldi R17,0
 0714 6ADD              xcall _I2C_Write
 0716                   .dbline -2
 0716           L181:
 0716                   .dbline 0 ; func end
 0716 2196              adiw R28,1
 0718 A990              ld R10,y+
 071A 0895              ret
 071C                   .dbsym r val 10 c
 071C                   .dbend
 071C                   .dbfile E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PCF859~1\PCF8591_LCD12864\PCF8591.C
 071C                   .dbfunc e main _main fV
 071C           ;        ad_tmp1 -> R10,R11
 071C           ;        ad_tmp0 -> R12,R13
 071C           ;        ad_tmp2 -> y+5
                        .even
 071C           _main::
 071C 2697              sbiw R28,6
 071E                   .dbline -1
 071E                   .dbline 57
 071E           ; /*********************************************************************
 071E           ;       微 雪 电 子   WaveShare   http://www.waveShare.net              
 071E           ;                                                                           
 071E           ; 项目名称:   PCF8591示例程序
 071E           ;               
 071E           ; 目标系统:   “DVK501” && “M16+ EX”
 071E           ; 
 071E           ; 应用软件:   ICCAVR 6.31A                                             
 071E           ;                                                                               
 071E           ; 版    本:   V1.0 
 071E           ;                                                         
 071E           ; 圆版时间:   2009-7-1
 071E           ; 
 071E           ; 开发人员:   zz
 071E           ; 
 071E           ; 说    明:   若用于商业用途，请保留此段文字或注明代码来源
 071E           ;               
 071E           ;       深 圳 市 微 雪 电 子 有 限 公 司 保 留 所 有 的 版 权     
 071E           ; *********************************************************************/
 071E           ; 
 071E           ; /*01010101010101010101010101010101010101010101010101010101010101010101
 071E           ; ----------------------------------------------------------------------
 071E           ; 版本更新记录：
 071E           ; 
 071E           ; ----------------------------------------------------------------------
 071E           ; 实验内容：
 071E           ; 初始化、读取AD 使用LCD12864观察AD的值
 071E           ; ----------------------------------------------------------------------
 071E           ; 硬件连接：将PCF8591的A0、A1、A2使用短路帽短接至“－  ”。
 071E           ;                 将PCF8591的IN0接可调电阻的AD1
 071E           ;                       LCD12864_ST7920                 ATmega16
 071E           ;                               RS(CS)  --------        VCC
 071E           ;                               R/W(SID)--------        MOSI/PB5
 071E           ;                               E(SCLK) --------        SCK/PB7
 071E           ;                               PSB             --------        GND
 071E           ;                               
 071E           ;                         DVK501                                 STK16+
 071E           ;                               VCC             ---------         VCC
 071E           ;                               GND             ---------         GND
 071E           ;                               SCK             ---------         PC0(SCL)
 071E           ;                               SDA             ---------         PC1(SDA)
 071E           ; ----------------------------------------------------------------------
 071E           ; 注意事项： 
 071E           ; （1）若有加载库函数，请将光盘根目录下的“库函数”下的“ICC_H”文件夹拷到D盘
 071E           ; （2）请详细阅读“使用必读”及相关资料。
 071E           ; ----------------------------------------------------------------------
 071E           ; 10101010101010101010101010101010101010101010101010101010101010101010*/
 071E           ; 
 071E           ; #include <iom16v.h>
 071E           ; #include "D:\ICC_H\LCD12864_ST7920.H"
 071E           ; 
 071E           ; #define WR_DADR               0x90    //write device-address
 071E           ; #define RD_DADR               0x91    //read device-address
 071E           ; #include "D:\ICC_H\PCF8591.H"
 071E           ; 
 071E           ; void main(void)
 071E           ; {
 071E                   .dbline 61
 071E           ;     unsigned char ad_tmp2;
 071E           ;       unsigned int ad_tmp0,ad_tmp1;
 071E           ;       //DDRF=0xFF;
 071E           ;       TWBR = 0X12;
 071E 82E1              ldi R24,18
 0720 80B9              out 0x0,R24
 0722                   .dbline 62
 0722           ;       lcd_init();
 0722 CBDF              xcall _lcd_init
 0724                   .dbline 63
 0724           ;       lcd_clr();
 0724 C4DF              xcall _lcd_clr
 0726                   .dbline 64
 0726           ;       lcd_puts(1,1,"AD测试程序");
 0726 80E0              ldi R24,<L183
 0728 90E0              ldi R25,>L183
 072A 9983              std y+1,R25
 072C 8883              std y+0,R24
 072E 21E0              ldi R18,1
 0730 01E0              ldi R16,1
 0732 78DF              xcall _lcd_puts
 0734                   .dbline 65
 0734           ;       lcd_puts(2,1,"PCF8591");
 0734 80E0              ldi R24,<L184
 0736 90E0              ldi R25,>L184
 0738 9983              std y+1,R25
 073A 8883              std y+0,R24
 073C 21E0              ldi R18,1
 073E 02E0              ldi R16,2
 0740 71DF              xcall _lcd_puts
 0742                   .dbline 66
 0742           ;       lcd_puts(3,1,"当前电压为:");    
 0742 80E0              ldi R24,<L185
 0744 90E0              ldi R25,>L185
 0746 9983              std y+1,R25
 0748 8883              std y+0,R24
 074A 21E0              ldi R18,1
 074C 03E0              ldi R16,3
 074E 6ADF              xcall _lcd_puts
 0750 45C0              xjmp L187
 0752           L186:
 0752                   .dbline 68
 0752           ;        while(1)
 0752           ;        {
 0752                   .dbline 69
 0752           ;                       PCF8591_getAD(MODE0,CHNL0,&ad_tmp2);
 0752 CE01              movw R24,R28
 0754 0596              adiw R24,5
 0756 9983              std y+1,R25
 0758 8883              std y+0,R24
 075A 2227              clr R18
 075C 0027              clr R16
 075E C0DF              xcall _PCF8591_getAD
 0760                   .dbline 70
 0760           ;                       ad_tmp0=(unsigned int)ad_tmp2;
 0760 CD80              ldd R12,y+5
 0762 DD24              clr R13
 0764                   .dbline 71
 0764           ;                       if(ad_tmp0!=ad_tmp1)
 0764 CA14              cp R12,R10
 0766 DB04              cpc R13,R11
 0768 A1F1              breq L189
 076A           X62:
 076A                   .dbline 72
 076A           ;                       {
 076A                   .dbline 73
 076A           ;                               ad_tmp2=(unsigned char)((ad_tmp0*5)>>8);
 076A 05E0              ldi R16,5
 076C 10E0              ldi R17,0
 076E 9601              movw R18,R12
 0770 0E940000          xcall empy16s
 0774 1801              movw R2,R16
 0776 232C              mov R2,R3
 0778 3324              clr R3
 077A 2D82              std y+5,R2
 077C                   .dbline 74
 077C           ;                               lcd_putd(4,4,ad_tmp2,0);
 077C 2224              clr R2
 077E 2C82              std y+4,R2
 0780 2D80              ldd R2,y+5
 0782 3324              clr R3
 0784 4424              clr R4
 0786 5524              clr R5
 0788 2882              std y+0,R2
 078A 3982              std y+1,R3
 078C 4A82              std y+2,R4
 078E 5B82              std y+3,R5
 0790 24E0              ldi R18,4
 0792 04E0              ldi R16,4
 0794 9EDE              xcall _lcd_putd
 0796                   .dbline 75
 0796           ;                               lcd_putc(4,5,'.');
 0796 8EE2              ldi R24,46
 0798 8883              std y+0,R24
 079A 25E0              ldi R18,5
 079C 04E0              ldi R16,4
 079E 4EDE              xcall _lcd_putc
 07A0                   .dbline 76
 07A0           ;                               ad_tmp2=(unsigned char)(ad_tmp0*5);
 07A0 05E0              ldi R16,5
 07A2 10E0              ldi R17,0
 07A4 9601              movw R18,R12
 07A6 0E940000          xcall empy16s
 07AA 0D83              std y+5,R16
 07AC                   .dbline 77
 07AC           ;                               lcd_putd(4,6,ad_tmp2,0);
 07AC 2224              clr R2
 07AE 2C82              std y+4,R2
 07B0 202E              mov R2,R16
 07B2 3324              clr R3
 07B4 4424              clr R4
 07B6 5524              clr R5
 07B8 2882              std y+0,R2
 07BA 3982              std y+1,R3
 07BC 4A82              std y+2,R4
 07BE 5B82              std y+3,R5
 07C0 26E0              ldi R18,6
 07C2 04E0              ldi R16,4
 07C4 86DE              xcall _lcd_putd
 07C6                   .dbline 78
 07C6           ;                               lcd_putc(4,7,'V');
 07C6 86E5              ldi R24,86
 07C8 8883              std y+0,R24
 07CA 27E0              ldi R18,7
 07CC 04E0              ldi R16,4
 07CE 36DE              xcall _lcd_putc
 07D0                   .dbline 79
 07D0           ;                               ad_tmp1 = ad_tmp0;
 07D0 5601              movw R10,R12
 07D2                   .dbline 80
 07D2           ;                       }
 07D2           L189:
 07D2                   .dbline 81
 07D2           ;                       ad_tmp0=(unsigned int)ad_tmp2;
 07D2 CD80              ldd R12,y+5
 07D4 DD24              clr R13
 07D6                   .dbline 82
 07D6           ;                       delay50ms(1);
 07D6 01E0              ldi R16,1
 07D8 10E0              ldi R17,0
 07DA B3DD              xcall _delay50ms
 07DC                   .dbline 83
 07DC           ;               }
 07DC           L187:
 07DC                   .dbline 67
 07DC BACF              xjmp L186
 07DE           X63:
 07DE                   .dbline -2
 07DE           L182:
 07DE                   .dbline 0 ; func end
 07DE 2696              adiw R28,6
 07E0 0895              ret
 07E2                   .dbsym r ad_tmp1 10 i
 07E2                   .dbsym r ad_tmp0 12 i
 07E2                   .dbsym l ad_tmp2 5 c
 07E2                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile E:\吴泽备份\DVK501光盘内容\STK16_~1.0\PCF859~1\PCF8591_LCD12864\PCF8591.C
 0000           _dataElem::
 0000                   .blkb 6
 0006                   .dbfile D:\ICC_H\Software.H
 0006                   .dbsym e dataElem _dataElem A[6:6]c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\ICC_H\Software.H
 0000           L185:
 0000                   .blkb 12
                        .area idata
 0000 B5B1C7B0B5E7D1B9CEAA3A00  .byte 181,177,199,176,181,231,209,185,206,170,58,0
                        .area data(ram, con, rel)
 000C                   .dbfile D:\ICC_H\Software.H
 000C           L184:
 000C                   .blkb 8
                        .area idata
 000C 5043463835393100  .byte 'P,'C,'F,56,53,57,49,0
                        .area data(ram, con, rel)
 0014                   .dbfile D:\ICC_H\Software.H
 0014           L183:
 0014                   .blkb 11
                        .area idata
 0014 4144B2E2CAD4B3CCD0F200    .byte 'A,'D,178,226,202,212,179,204,208,242,0
                        .area data(ram, con, rel)
 001F                   .dbfile D:\ICC_H\Software.H
 001F           ; }
