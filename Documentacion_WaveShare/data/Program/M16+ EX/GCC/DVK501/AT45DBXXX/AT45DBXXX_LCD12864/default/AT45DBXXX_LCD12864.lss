
AT45DBXXX_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000682  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800098  00800098  0000074e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f5  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073e  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000218  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007fa  00000000  00000000  000011b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000219  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003cb  00000000  00000000  00001cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3d       	cpi	r26, 0xD8	; 216
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3e 02 	call	0x47c	; 0x47c <main>
  8a:	0c 94 3f 03 	jmp	0x67e	; 0x67e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <spiInitAt45db>:
#elif defined(_DVK501_M16_EX_)
#define CLR_SS_AT45DB() cbi(PORTB,4)
#define SET_SS_AT45DB() sbi(PORTB,4)
void spiInitAt45db(void)
{
	DDRB|=0xF0;
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	87 bb       	out	0x17, r24	; 23
	SPCR=0x50;
  98:	80 e5       	ldi	r24, 0x50	; 80
  9a:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x01;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	8e b9       	out	0x0e, r24	; 14
}
  a0:	08 95       	ret

000000a2 <spi_transmit_byte>:
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  a2:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  a4:	77 9b       	sbis	0x0e, 7	; 14
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <spi_transmit_byte+0x2>
}
  a8:	08 95       	ret

000000aa <write_buffer>:
//============================================================
void write_buffer(uint16_t BufferOffset,uint8_t data)
{			
  aa:	28 2f       	mov	r18, r24
	CLR_SS_AT45DB();		
  ac:	c4 98       	cbi	0x18, 4	; 24
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  ae:	84 e8       	ldi	r24, 0x84	; 132
  b0:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  b2:	77 9b       	sbis	0x0e, 7	; 14
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <write_buffer+0x8>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  ba:	77 9b       	sbis	0x0e, 7	; 14
  bc:	fe cf       	rjmp	.-4      	; 0xba <write_buffer+0x10>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  be:	9f b9       	out	0x0f, r25	; 15
    while(!(SPSR&0x80));
  c0:	77 9b       	sbis	0x0e, 7	; 14
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <write_buffer+0x16>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  c4:	2f b9       	out	0x0f, r18	; 15
    while(!(SPSR&0x80));
  c6:	77 9b       	sbis	0x0e, 7	; 14
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <write_buffer+0x1c>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  ca:	6f b9       	out	0x0f, r22	; 15
    while(!(SPSR&0x80));
  cc:	77 9b       	sbis	0x0e, 7	; 14
  ce:	fe cf       	rjmp	.-4      	; 0xcc <write_buffer+0x22>
	spi_transmit_byte(0x84);//84			  						
	spi_transmit_byte(0xff);						
	spi_transmit_byte((uint8_t)(BufferOffset>>8));	
	spi_transmit_byte((uint8_t)BufferOffset);		
	spi_transmit_byte(data);		
	SET_SS_AT45DB();	
  d0:	c4 9a       	sbi	0x18, 4	; 24
}
  d2:	08 95       	ret

000000d4 <read_buffer>:
//================================================================
uint8_t read_buffer(uint16_t BufferOffset)
{		
  d4:	28 2f       	mov	r18, r24
    uint8_t temp;
	CLR_SS_AT45DB();
  d6:	c4 98       	cbi	0x18, 4	; 24
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  d8:	81 ed       	ldi	r24, 0xD1	; 209
  da:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  dc:	77 9b       	sbis	0x0e, 7	; 14
  de:	fe cf       	rjmp	.-4      	; 0xdc <read_buffer+0x8>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  e4:	77 9b       	sbis	0x0e, 7	; 14
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <read_buffer+0x10>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  e8:	9f b9       	out	0x0f, r25	; 15
    while(!(SPSR&0x80));
  ea:	77 9b       	sbis	0x0e, 7	; 14
  ec:	fe cf       	rjmp	.-4      	; 0xea <read_buffer+0x16>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  ee:	2f b9       	out	0x0f, r18	; 15
    while(!(SPSR&0x80));
  f0:	77 9b       	sbis	0x0e, 7	; 14
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <read_buffer+0x1c>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
  f8:	77 9b       	sbis	0x0e, 7	; 14
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <read_buffer+0x24>
#include <avr/io.h>

//==================================
void spi_transmit_byte(uint8_t Data)
{	
	SPDR=Data;								
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR&0x80));
 100:	77 9b       	sbis	0x0e, 7	; 14
 102:	fe cf       	rjmp	.-4      	; 0x100 <read_buffer+0x2c>
	spi_transmit_byte(0xff);
	spi_transmit_byte((uint8_t)(BufferOffset>>8));
	spi_transmit_byte((uint8_t)BufferOffset);
	spi_transmit_byte(0xff);
	spi_transmit_byte(0xff);
	temp=SPDR;	  
 104:	8f b1       	in	r24, 0x0f	; 15
	SET_SS_AT45DB();
 106:	c4 9a       	sbi	0x18, 4	; 24
    return temp;								
}
 108:	08 95       	ret

0000010a <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 10a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 10c:	77 9b       	sbis	0x0e, 7	; 14
 10e:	fe cf       	rjmp	.-4      	; 0x10c <spiSendChar+0x2>
}
 110:	08 95       	ret

00000112 <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 112:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 114:	88 ef       	ldi	r24, 0xF8	; 248
 116:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 118:	77 9b       	sbis	0x0e, 7	; 14
 11a:	fe cf       	rjmp	.-4      	; 0x118 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 11c:	89 2f       	mov	r24, r25
 11e:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 120:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 122:	77 9b       	sbis	0x0e, 7	; 14
 124:	fe cf       	rjmp	.-4      	; 0x122 <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 126:	92 95       	swap	r25
 128:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 12a:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 12c:	77 9b       	sbis	0x0e, 7	; 14
 12e:	fe cf       	rjmp	.-4      	; 0x12c <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 130:	88 eb       	ldi	r24, 0xB8	; 184
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 136:	08 95       	ret

00000138 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 138:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 13a:	8a ef       	ldi	r24, 0xFA	; 250
 13c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 13e:	77 9b       	sbis	0x0e, 7	; 14
 140:	fe cf       	rjmp	.-4      	; 0x13e <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 142:	89 2f       	mov	r24, r25
 144:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 146:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 148:	77 9b       	sbis	0x0e, 7	; 14
 14a:	fe cf       	rjmp	.-4      	; 0x148 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 14c:	92 95       	swap	r25
 14e:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 150:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 152:	77 9b       	sbis	0x0e, 7	; 14
 154:	fe cf       	rjmp	.-4      	; 0x152 <sendDataST7920+0x1a>
 156:	88 eb       	ldi	r24, 0xB8	; 184
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 15c:	08 95       	ret

0000015e <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 15e:	cf 92       	push	r12
 160:	df 92       	push	r13
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	6c 01       	movw	r12, r24
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 89 00 	call	0x112	; 0x112 <sendCodeST7920>
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 17a:	f6 01       	movw	r30, r12
 17c:	ec 0f       	add	r30, r28
 17e:	fd 1f       	adc	r31, r29
 180:	80 81       	ld	r24, Z
 182:	0e 94 9c 00 	call	0x138	; 0x138 <sendDataST7920>
 186:	21 96       	adiw	r28, 0x01	; 1
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 188:	c0 31       	cpi	r28, 0x10	; 16
 18a:	d1 05       	cpc	r29, r1
 18c:	b1 f7       	brne	.-20     	; 0x17a <refreshLCD+0x1c>
 18e:	76 01       	movw	r14, r12
 190:	e6 01       	movw	r28, r12
 192:	00 e2       	ldi	r16, 0x20	; 32
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 194:	88 a1       	ldd	r24, Y+32	; 0x20
 196:	0e 94 9c 00 	call	0x138	; 0x138 <sendDataST7920>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 19a:	0f 5f       	subi	r16, 0xFF	; 255
 19c:	21 96       	adiw	r28, 0x01	; 1
 19e:	00 33       	cpi	r16, 0x30	; 48
 1a0:	c9 f7       	brne	.-14     	; 0x194 <refreshLCD+0x36>
 1a2:	10 e1       	ldi	r17, 0x10	; 16
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1a4:	f7 01       	movw	r30, r14
 1a6:	80 89       	ldd	r24, Z+16	; 0x10
 1a8:	0e 94 9c 00 	call	0x138	; 0x138 <sendDataST7920>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 1ac:	1f 5f       	subi	r17, 0xFF	; 255
 1ae:	08 94       	sec
 1b0:	e1 1c       	adc	r14, r1
 1b2:	f1 1c       	adc	r15, r1
 1b4:	10 32       	cpi	r17, 0x20	; 32
 1b6:	b1 f7       	brne	.-20     	; 0x1a4 <refreshLCD+0x46>
 1b8:	e6 01       	movw	r28, r12
 1ba:	e0 96       	adiw	r28, 0x30	; 48
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1bc:	89 91       	ld	r24, Y+
 1be:	0e 94 9c 00 	call	0x138	; 0x138 <sendDataST7920>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 1c2:	0f 5f       	subi	r16, 0xFF	; 255
 1c4:	00 34       	cpi	r16, 0x40	; 64
 1c6:	d1 f7       	brne	.-12     	; 0x1bc <refreshLCD+0x5e>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	df 90       	pop	r13
 1d6:	cf 90       	pop	r12
 1d8:	08 95       	ret

000001da <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 1da:	1f 93       	push	r17
 1dc:	fc 01       	movw	r30, r24
 1de:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 1e0:	10 e3       	ldi	r17, 0x30	; 48
 1e2:	43 c0       	rjmp	.+134    	; 0x26a <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 1e4:	43 30       	cpi	r20, 0x03	; 3
 1e6:	21 f1       	breq	.+72     	; 0x230 <decToAscii+0x56>
 1e8:	44 30       	cpi	r20, 0x04	; 4
 1ea:	28 f4       	brcc	.+10     	; 0x1f6 <decToAscii+0x1c>
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	b1 f1       	breq	.+108    	; 0x25c <decToAscii+0x82>
 1f0:	42 30       	cpi	r20, 0x02	; 2
 1f2:	c1 f5       	brne	.+112    	; 0x264 <decToAscii+0x8a>
 1f4:	28 c0       	rjmp	.+80     	; 0x246 <decToAscii+0x6c>
 1f6:	44 30       	cpi	r20, 0x04	; 4
 1f8:	69 f0       	breq	.+26     	; 0x214 <decToAscii+0x3a>
 1fa:	45 30       	cpi	r20, 0x05	; 5
 1fc:	99 f5       	brne	.+102    	; 0x264 <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 1fe:	c9 01       	movw	r24, r18
 200:	60 e1       	ldi	r22, 0x10	; 16
 202:	77 e2       	ldi	r23, 0x27	; 39
 204:	0e 94 24 03 	call	0x648	; 0x648 <__udivmodhi4>
 208:	60 5d       	subi	r22, 0xD0	; 208
 20a:	60 83       	st	Z, r22
				dec%=10000;
 20c:	c9 01       	movw	r24, r18
 20e:	60 e1       	ldi	r22, 0x10	; 16
 210:	77 e2       	ldi	r23, 0x27	; 39
 212:	0a c0       	rjmp	.+20     	; 0x228 <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 214:	c9 01       	movw	r24, r18
 216:	68 ee       	ldi	r22, 0xE8	; 232
 218:	73 e0       	ldi	r23, 0x03	; 3
 21a:	0e 94 24 03 	call	0x648	; 0x648 <__udivmodhi4>
 21e:	60 5d       	subi	r22, 0xD0	; 208
 220:	60 83       	st	Z, r22
				dec%=1000;
 222:	c9 01       	movw	r24, r18
 224:	68 ee       	ldi	r22, 0xE8	; 232
 226:	73 e0       	ldi	r23, 0x03	; 3
 228:	0e 94 24 03 	call	0x648	; 0x648 <__udivmodhi4>
 22c:	9c 01       	movw	r18, r24
 22e:	1b c0       	rjmp	.+54     	; 0x266 <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 230:	c9 01       	movw	r24, r18
 232:	64 e6       	ldi	r22, 0x64	; 100
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 24 03 	call	0x648	; 0x648 <__udivmodhi4>
 23a:	60 5d       	subi	r22, 0xD0	; 208
 23c:	60 83       	st	Z, r22
				dec%=100;
 23e:	c9 01       	movw	r24, r18
 240:	64 e6       	ldi	r22, 0x64	; 100
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	f1 cf       	rjmp	.-30     	; 0x228 <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 246:	c9 01       	movw	r24, r18
 248:	6a e0       	ldi	r22, 0x0A	; 10
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	0e 94 24 03 	call	0x648	; 0x648 <__udivmodhi4>
 250:	60 5d       	subi	r22, 0xD0	; 208
 252:	60 83       	st	Z, r22
				dec%=10;
 254:	c9 01       	movw	r24, r18
 256:	6a e0       	ldi	r22, 0x0A	; 10
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	e6 cf       	rjmp	.-52     	; 0x228 <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 25c:	20 5d       	subi	r18, 0xD0	; 208
 25e:	20 83       	st	Z, r18
 260:	20 53       	subi	r18, 0x30	; 48
 262:	01 c0       	rjmp	.+2      	; 0x266 <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 264:	10 83       	st	Z, r17
		}
		width--;
 266:	41 50       	subi	r20, 0x01	; 1
		str++;
 268:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 26a:	44 23       	and	r20, r20
 26c:	09 f0       	breq	.+2      	; 0x270 <decToAscii+0x96>
 26e:	ba cf       	rjmp	.-140    	; 0x1e4 <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 270:	1f 91       	pop	r17
 272:	08 95       	ret

00000274 <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 274:	cf 92       	push	r12
 276:	df 92       	push	r13
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 286:	eb 01       	movw	r28, r22
 288:	cd 2f       	mov	r28, r29
 28a:	dd 27       	eor	r29, r29
 28c:	c2 95       	swap	r28
 28e:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 290:	27 e3       	ldi	r18, 0x37	; 55
 292:	d2 2e       	mov	r13, r18
 294:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 296:	90 e3       	ldi	r25, 0x30	; 48
 298:	e9 2e       	mov	r14, r25
 29a:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 29c:	a7 2f       	mov	r26, r23
 29e:	bb 27       	eor	r27, r27
 2a0:	af 70       	andi	r26, 0x0F	; 15
 2a2:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 2a4:	17 e3       	ldi	r17, 0x37	; 55
 2a6:	f1 2e       	mov	r15, r17
 2a8:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 2aa:	0a 2f       	mov	r16, r26
 2ac:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 2ae:	9b 01       	movw	r18, r22
 2b0:	54 e0       	ldi	r21, 0x04	; 4
 2b2:	36 95       	lsr	r19
 2b4:	27 95       	ror	r18
 2b6:	5a 95       	dec	r21
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <hexToAscii+0x3e>
 2ba:	2f 70       	andi	r18, 0x0F	; 15
 2bc:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 2be:	82 2f       	mov	r24, r18
 2c0:	12 2f       	mov	r17, r18
 2c2:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 2c4:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 2c6:	90 e3       	ldi	r25, 0x30	; 48
 2c8:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 2ca:	6f 70       	andi	r22, 0x0F	; 15
 2cc:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 2ce:	56 2f       	mov	r21, r22
 2d0:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2d2:	96 2f       	mov	r25, r22
 2d4:	99 5c       	subi	r25, 0xC9	; 201
 2d6:	2a c0       	rjmp	.+84     	; 0x32c <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 2d8:	42 30       	cpi	r20, 0x02	; 2
 2da:	b9 f0       	breq	.+46     	; 0x30a <hexToAscii+0x96>
 2dc:	43 30       	cpi	r20, 0x03	; 3
 2de:	18 f4       	brcc	.+6      	; 0x2e6 <hexToAscii+0x72>
 2e0:	41 30       	cpi	r20, 0x01	; 1
 2e2:	09 f5       	brne	.+66     	; 0x326 <hexToAscii+0xb2>
 2e4:	19 c0       	rjmp	.+50     	; 0x318 <hexToAscii+0xa4>
 2e6:	43 30       	cpi	r20, 0x03	; 3
 2e8:	49 f0       	breq	.+18     	; 0x2fc <hexToAscii+0x88>
 2ea:	44 30       	cpi	r20, 0x04	; 4
 2ec:	e1 f4       	brne	.+56     	; 0x326 <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 2ee:	ca 30       	cpi	r28, 0x0A	; 10
 2f0:	d1 05       	cpc	r29, r1
 2f2:	10 f0       	brcs	.+4      	; 0x2f8 <hexToAscii+0x84>
 2f4:	d0 82       	st	Z, r13
 2f6:	18 c0       	rjmp	.+48     	; 0x328 <hexToAscii+0xb4>
				else *str = tmp+'0';
 2f8:	e0 82       	st	Z, r14
 2fa:	16 c0       	rjmp	.+44     	; 0x328 <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2fc:	aa 30       	cpi	r26, 0x0A	; 10
 2fe:	b1 05       	cpc	r27, r1
 300:	10 f0       	brcs	.+4      	; 0x306 <hexToAscii+0x92>
 302:	f0 82       	st	Z, r15
 304:	11 c0       	rjmp	.+34     	; 0x328 <hexToAscii+0xb4>
				else *str = tmp+'0';
 306:	00 83       	st	Z, r16
 308:	0f c0       	rjmp	.+30     	; 0x328 <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 30a:	2a 30       	cpi	r18, 0x0A	; 10
 30c:	31 05       	cpc	r19, r1
 30e:	10 f0       	brcs	.+4      	; 0x314 <hexToAscii+0xa0>
 310:	10 83       	st	Z, r17
 312:	0a c0       	rjmp	.+20     	; 0x328 <hexToAscii+0xb4>
				else *str = tmp+'0';
 314:	80 83       	st	Z, r24
 316:	08 c0       	rjmp	.+16     	; 0x328 <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 318:	6a 30       	cpi	r22, 0x0A	; 10
 31a:	71 05       	cpc	r23, r1
 31c:	10 f0       	brcs	.+4      	; 0x322 <hexToAscii+0xae>
 31e:	90 83       	st	Z, r25
 320:	03 c0       	rjmp	.+6      	; 0x328 <hexToAscii+0xb4>
				else *str = tmp+'0';
 322:	50 83       	st	Z, r21
 324:	01 c0       	rjmp	.+2      	; 0x328 <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 326:	c0 82       	st	Z, r12
		}
		width--;
 328:	41 50       	subi	r20, 0x01	; 1
		str++;
 32a:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 32c:	44 23       	and	r20, r20
 32e:	a1 f6       	brne	.-88     	; 0x2d8 <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	df 90       	pop	r13
 33e:	cf 90       	pop	r12
 340:	08 95       	ret

00000342 <st7920LcdInit>:

/*Hardware Environment：DVK501 && M16+ EX*/
#elif defined(_DVK501_M16_EX_)
void st7920LcdInit(void)
{
DDRB|=0xE0;
 342:	87 b3       	in	r24, 0x17	; 23
 344:	80 6e       	ori	r24, 0xE0	; 224
 346:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 348:	80 e5       	ldi	r24, 0x50	; 80
 34a:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	8e b9       	out	0x0e, r24	; 14
sendCodeST7920(0x0C);//整体显示
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	0e 94 89 00 	call	0x112	; 0x112 <sendCodeST7920>
sendCodeST7920(0x01);//清屏
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 89 00 	call	0x112	; 0x112 <sendCodeST7920>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 35c:	86 e6       	ldi	r24, 0x66	; 102
 35e:	9e e0       	ldi	r25, 0x0E	; 14
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <st7920LcdInit+0x1e>
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 364:	88 e9       	ldi	r24, 0x98	; 152
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	60 e2       	ldi	r22, 0x20	; 32
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	40 e4       	ldi	r20, 0x40	; 64
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	0e 94 38 03 	call	0x670	; 0x670 <memset>
}
 374:	08 95       	ret

00000376 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 376:	af 92       	push	r10
 378:	bf 92       	push	r11
 37a:	cf 92       	push	r12
 37c:	df 92       	push	r13
 37e:	ef 92       	push	r14
 380:	ff 92       	push	r15
 382:	0f 93       	push	r16
 384:	df 93       	push	r29
 386:	cf 93       	push	r28
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	0d 85       	ldd	r16, Y+13	; 0x0d
 38e:	ae 84       	ldd	r10, Y+14	; 0x0e
 390:	bf 84       	ldd	r11, Y+15	; 0x0f
 392:	e8 88       	ldd	r14, Y+16	; 0x10
 394:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 396:	02 95       	swap	r16
 398:	00 7f       	andi	r16, 0xF0	; 240
 39a:	8c 85       	ldd	r24, Y+12	; 0x0c
 39c:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 39e:	de 01       	movw	r26, r28
 3a0:	52 96       	adiw	r26, 0x12	; 18
 3a2:	5d c0       	rjmp	.+186    	; 0x45e <showLine+0xe8>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 3a4:	01 34       	cpi	r16, 0x41	; 65
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <showLine+0x34>
 3a8:	5f c0       	rjmp	.+190    	; 0x468 <__stack+0x9>

		if(*str == '\\')
 3aa:	8c 35       	cpi	r24, 0x5C	; 92
 3ac:	51 f4       	brne	.+20     	; 0x3c2 <showLine+0x4c>
		{
			str++;
 3ae:	08 94       	sec
 3b0:	e1 1c       	adc	r14, r1
 3b2:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 3b4:	95 01       	movw	r18, r10
 3b6:	20 0f       	add	r18, r16
 3b8:	31 1d       	adc	r19, r1
 3ba:	f7 01       	movw	r30, r14
 3bc:	80 81       	ld	r24, Z
 3be:	f9 01       	movw	r30, r18
 3c0:	49 c0       	rjmp	.+146    	; 0x454 <showLine+0xde>
		}
		else if(*str == '%')
 3c2:	85 32       	cpi	r24, 0x25	; 37
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <showLine+0x52>
 3c6:	43 c0       	rjmp	.+134    	; 0x44e <showLine+0xd8>
		{
			str++;
 3c8:	08 94       	sec
 3ca:	e1 1c       	adc	r14, r1
 3cc:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 3ce:	f7 01       	movw	r30, r14
 3d0:	80 81       	ld	r24, Z
 3d2:	84 36       	cpi	r24, 0x64	; 100
 3d4:	11 f0       	breq	.+4      	; 0x3da <showLine+0x64>
 3d6:	84 34       	cpi	r24, 0x44	; 68
 3d8:	99 f4       	brne	.+38     	; 0x400 <showLine+0x8a>
			{
				str++;
 3da:	08 94       	sec
 3dc:	e1 1c       	adc	r14, r1
 3de:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3e0:	52 e0       	ldi	r21, 0x02	; 2
 3e2:	c5 2e       	mov	r12, r21
 3e4:	d1 2c       	mov	r13, r1
 3e6:	ca 0e       	add	r12, r26
 3e8:	db 1e       	adc	r13, r27
 3ea:	6d 91       	ld	r22, X+
 3ec:	7c 91       	ld	r23, X
 3ee:	f7 01       	movw	r30, r14
 3f0:	40 81       	ld	r20, Z
 3f2:	40 53       	subi	r20, 0x30	; 48
 3f4:	c5 01       	movw	r24, r10
 3f6:	80 0f       	add	r24, r16
 3f8:	91 1d       	adc	r25, r1
 3fa:	0e 94 ed 00 	call	0x1da	; 0x1da <decToAscii>
 3fe:	21 c0       	rjmp	.+66     	; 0x442 <showLine+0xcc>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 400:	83 36       	cpi	r24, 0x63	; 99
 402:	11 f0       	breq	.+4      	; 0x408 <showLine+0x92>
 404:	83 34       	cpi	r24, 0x43	; 67
 406:	39 f4       	brne	.+14     	; 0x416 <showLine+0xa0>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 408:	f5 01       	movw	r30, r10
 40a:	e0 0f       	add	r30, r16
 40c:	f1 1d       	adc	r31, r1
 40e:	8c 91       	ld	r24, X
 410:	80 83       	st	Z, r24
 412:	12 96       	adiw	r26, 0x02	; 2
 414:	20 c0       	rjmp	.+64     	; 0x456 <showLine+0xe0>
			}
			else if(*str=='x'||*str=='X')
 416:	88 37       	cpi	r24, 0x78	; 120
 418:	11 f0       	breq	.+4      	; 0x41e <showLine+0xa8>
 41a:	88 35       	cpi	r24, 0x58	; 88
 41c:	e1 f4       	brne	.+56     	; 0x456 <showLine+0xe0>
			{
				str++;
 41e:	08 94       	sec
 420:	e1 1c       	adc	r14, r1
 422:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 424:	42 e0       	ldi	r20, 0x02	; 2
 426:	c4 2e       	mov	r12, r20
 428:	d1 2c       	mov	r13, r1
 42a:	ca 0e       	add	r12, r26
 42c:	db 1e       	adc	r13, r27
 42e:	6d 91       	ld	r22, X+
 430:	7c 91       	ld	r23, X
 432:	f7 01       	movw	r30, r14
 434:	40 81       	ld	r20, Z
 436:	40 53       	subi	r20, 0x30	; 48
 438:	c5 01       	movw	r24, r10
 43a:	80 0f       	add	r24, r16
 43c:	91 1d       	adc	r25, r1
 43e:	0e 94 3a 01 	call	0x274	; 0x274 <hexToAscii>
				coordinate+=(*str-'0'-1);
 442:	01 53       	subi	r16, 0x31	; 49
 444:	f7 01       	movw	r30, r14
 446:	80 81       	ld	r24, Z
 448:	08 0f       	add	r16, r24
 44a:	d6 01       	movw	r26, r12
 44c:	04 c0       	rjmp	.+8      	; 0x456 <showLine+0xe0>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 44e:	f5 01       	movw	r30, r10
 450:	e0 0f       	add	r30, r16
 452:	f1 1d       	adc	r31, r1
 454:	80 83       	st	Z, r24
		}
		str++;
 456:	08 94       	sec
 458:	e1 1c       	adc	r14, r1
 45a:	f1 1c       	adc	r15, r1
		coordinate++;
 45c:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 45e:	f7 01       	movw	r30, r14
 460:	80 81       	ld	r24, Z
 462:	88 23       	and	r24, r24
 464:	09 f0       	breq	.+2      	; 0x468 <__stack+0x9>
 466:	9e cf       	rjmp	.-196    	; 0x3a4 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 468:	cf 91       	pop	r28
 46a:	df 91       	pop	r29
 46c:	0f 91       	pop	r16
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	df 90       	pop	r13
 474:	cf 90       	pop	r12
 476:	bf 90       	pop	r11
 478:	af 90       	pop	r10
 47a:	08 95       	ret

0000047c <main>:
#include <util/delay.h>
#include <ws_at45dbxxx_port.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 47c:	5f 92       	push	r5
 47e:	6f 92       	push	r6
 480:	7f 92       	push	r7
 482:	8f 92       	push	r8
 484:	9f 92       	push	r9
 486:	af 92       	push	r10
 488:	bf 92       	push	r11
 48a:	cf 92       	push	r12
 48c:	df 92       	push	r13
 48e:	ef 92       	push	r14
 490:	ff 92       	push	r15
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	df 93       	push	r29
 498:	cf 93       	push	r28
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	cf 5f       	subi	r28, 0xFF	; 255
 4a0:	d0 40       	sbci	r29, 0x00	; 0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
	uint8_t num;
	uint8_t tmp[255];
	DDRA=0xFF;
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	8a bb       	out	0x1a, r24	; 26
#elif defined(_DVK501_M16_EX_)
#define CLR_SS_AT45DB() cbi(PORTB,4)
#define SET_SS_AT45DB() sbi(PORTB,4)
void spiInitAt45db(void)
{
	DDRB|=0xF0;
 4b0:	87 b3       	in	r24, 0x17	; 23
 4b2:	80 6f       	ori	r24, 0xF0	; 240
 4b4:	87 bb       	out	0x17, r24	; 23
	SPCR=0x50;
 4b6:	80 e5       	ldi	r24, 0x50	; 80
 4b8:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x01;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	8e b9       	out	0x0e, r24	; 14
 4be:	00 e0       	ldi	r16, 0x00	; 0
 4c0:	10 e0       	ldi	r17, 0x00	; 0
 4c2:	83 e3       	ldi	r24, 0x33	; 51
 4c4:	e8 2e       	mov	r14, r24
 4c6:	87 e0       	ldi	r24, 0x07	; 7
 4c8:	f8 2e       	mov	r15, r24
	spiInitAt45db();
	for(num=0;num<255;num++) /*写入flash*/
	{
		write_buffer((uint16_t)num,num);
 4ca:	c8 01       	movw	r24, r16
 4cc:	60 2f       	mov	r22, r16
 4ce:	0e 94 55 00 	call	0xaa	; 0xaa <write_buffer>
 4d2:	c7 01       	movw	r24, r14
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <main+0x58>
 4d8:	0f 5f       	subi	r16, 0xFF	; 255
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uint8_t num;
	uint8_t tmp[255];
	DDRA=0xFF;
	spiInitAt45db();
	for(num=0;num<255;num++) /*写入flash*/
 4dc:	0f 3f       	cpi	r16, 0xFF	; 255
 4de:	11 05       	cpc	r17, r1
 4e0:	a1 f7       	brne	.-24     	; 0x4ca <main+0x4e>
 4e2:	00 e0       	ldi	r16, 0x00	; 0
 4e4:	10 e0       	ldi	r17, 0x00	; 0
		write_buffer((uint16_t)num,num);
		_delay_ms(1);
	}
	for(num=0;num<255;num++) /*读出flash*/
	{
		tmp[num]=read_buffer(num);
 4e6:	5e 01       	movw	r10, r28
 4e8:	08 94       	sec
 4ea:	a1 1c       	adc	r10, r1
 4ec:	b1 1c       	adc	r11, r1
 4ee:	b3 e3       	ldi	r27, 0x33	; 51
 4f0:	eb 2e       	mov	r14, r27
 4f2:	b7 e0       	ldi	r27, 0x07	; 7
 4f4:	fb 2e       	mov	r15, r27
 4f6:	c8 01       	movw	r24, r16
 4f8:	0e 94 6a 00 	call	0xd4	; 0xd4 <read_buffer>
 4fc:	f5 01       	movw	r30, r10
 4fe:	e0 0f       	add	r30, r16
 500:	f1 1f       	adc	r31, r17
 502:	80 83       	st	Z, r24
 504:	c7 01       	movw	r24, r14
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <main+0x8a>
 50a:	0f 5f       	subi	r16, 0xFF	; 255
 50c:	1f 4f       	sbci	r17, 0xFF	; 255
	for(num=0;num<255;num++) /*写入flash*/
	{
		write_buffer((uint16_t)num,num);
		_delay_ms(1);
	}
	for(num=0;num<255;num++) /*读出flash*/
 50e:	0f 3f       	cpi	r16, 0xFF	; 255
 510:	11 05       	cpc	r17, r1
 512:	89 f7       	brne	.-30     	; 0x4f6 <main+0x7a>
	{
		tmp[num]=read_buffer(num);
		_delay_ms(1);
	}
	st7920LcdInit(); /*LCD初始化*/
 514:	0e 94 a1 01 	call	0x342	; 0x342 <st7920LcdInit>
	showLine(0,0,lcd_buffer,"AT45DBXX Example");
 518:	00 d0       	rcall	.+0      	; 0x51a <main+0x9e>
 51a:	00 d0       	rcall	.+0      	; 0x51c <main+0xa0>
 51c:	00 d0       	rcall	.+0      	; 0x51e <main+0xa2>
 51e:	ed b7       	in	r30, 0x3d	; 61
 520:	fe b7       	in	r31, 0x3e	; 62
 522:	31 96       	adiw	r30, 0x01	; 1
 524:	ad b7       	in	r26, 0x3d	; 61
 526:	be b7       	in	r27, 0x3e	; 62
 528:	11 96       	adiw	r26, 0x01	; 1
 52a:	1c 92       	st	X, r1
 52c:	11 82       	std	Z+1, r1	; 0x01
 52e:	08 e9       	ldi	r16, 0x98	; 152
 530:	10 e0       	ldi	r17, 0x00	; 0
 532:	13 83       	std	Z+3, r17	; 0x03
 534:	02 83       	std	Z+2, r16	; 0x02
 536:	80 e6       	ldi	r24, 0x60	; 96
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	95 83       	std	Z+5, r25	; 0x05
 53c:	84 83       	std	Z+4, r24	; 0x04
 53e:	0e 94 bb 01 	call	0x376	; 0x376 <showLine>
	showLine(0,1,lcd_buffer,"Program: OK!");
 542:	ed b7       	in	r30, 0x3d	; 61
 544:	fe b7       	in	r31, 0x3e	; 62
 546:	31 96       	adiw	r30, 0x01	; 1
 548:	ad b7       	in	r26, 0x3d	; 61
 54a:	be b7       	in	r27, 0x3e	; 62
 54c:	11 96       	adiw	r26, 0x01	; 1
 54e:	1c 92       	st	X, r1
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	81 83       	std	Z+1, r24	; 0x01
 554:	13 83       	std	Z+3, r17	; 0x03
 556:	02 83       	std	Z+2, r16	; 0x02
 558:	81 e7       	ldi	r24, 0x71	; 113
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	95 83       	std	Z+5, r25	; 0x05
 55e:	84 83       	std	Z+4, r24	; 0x04
 560:	0e 94 bb 01 	call	0x376	; 0x376 <showLine>
	showLine(0,2,lcd_buffer,"Verify: OK!");
 564:	ed b7       	in	r30, 0x3d	; 61
 566:	fe b7       	in	r31, 0x3e	; 62
 568:	31 96       	adiw	r30, 0x01	; 1
 56a:	ad b7       	in	r26, 0x3d	; 61
 56c:	be b7       	in	r27, 0x3e	; 62
 56e:	11 96       	adiw	r26, 0x01	; 1
 570:	1c 92       	st	X, r1
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	81 83       	std	Z+1, r24	; 0x01
 576:	13 83       	std	Z+3, r17	; 0x03
 578:	02 83       	std	Z+2, r16	; 0x02
 57a:	8e e7       	ldi	r24, 0x7E	; 126
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	95 83       	std	Z+5, r25	; 0x05
 580:	84 83       	std	Z+4, r24	; 0x04
 582:	0e 94 bb 01 	call	0x376	; 0x376 <showLine>
	showLine(0,3,lcd_buffer,"Output:");
 586:	ed b7       	in	r30, 0x3d	; 61
 588:	fe b7       	in	r31, 0x3e	; 62
 58a:	31 96       	adiw	r30, 0x01	; 1
 58c:	ad b7       	in	r26, 0x3d	; 61
 58e:	be b7       	in	r27, 0x3e	; 62
 590:	11 96       	adiw	r26, 0x01	; 1
 592:	1c 92       	st	X, r1
 594:	83 e0       	ldi	r24, 0x03	; 3
 596:	81 83       	std	Z+1, r24	; 0x01
 598:	13 83       	std	Z+3, r17	; 0x03
 59a:	02 83       	std	Z+2, r16	; 0x02
 59c:	8a e8       	ldi	r24, 0x8A	; 138
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	95 83       	std	Z+5, r25	; 0x05
 5a2:	84 83       	std	Z+4, r24	; 0x04
 5a4:	0e 94 bb 01 	call	0x376	; 0x376 <showLine>
	refreshLCD(lcd_buffer); /*刷新LCD*/
 5a8:	8d b7       	in	r24, 0x3d	; 61
 5aa:	9e b7       	in	r25, 0x3e	; 62
 5ac:	06 96       	adiw	r24, 0x06	; 6
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	f8 94       	cli
 5b2:	9e bf       	out	0x3e, r25	; 62
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	8d bf       	out	0x3d, r24	; 61
 5b8:	c8 01       	movw	r24, r16
 5ba:	0e 94 af 00 	call	0x15e	; 0x15e <refreshLCD>
 5be:	75 01       	movw	r14, r10
	for(num=0;num<255;num++)
	{
		showLine(8,3,lcd_buffer,"0x%x2",tmp[num]);
 5c0:	a8 e0       	ldi	r26, 0x08	; 8
 5c2:	5a 2e       	mov	r5, r26
 5c4:	f3 e0       	ldi	r31, 0x03	; 3
 5c6:	cf 2e       	mov	r12, r31
 5c8:	d0 2e       	mov	r13, r16
 5ca:	01 2f       	mov	r16, r17
 5cc:	e2 e9       	ldi	r30, 0x92	; 146
 5ce:	6e 2e       	mov	r6, r30
 5d0:	e0 e0       	ldi	r30, 0x00	; 0
 5d2:	7e 2e       	mov	r7, r30
 5d4:	78 eb       	ldi	r23, 0xB8	; 184
 5d6:	87 2e       	mov	r8, r23
 5d8:	91 2c       	mov	r9, r1
	showLine(0,0,lcd_buffer,"AT45DBXX Example");
	showLine(0,1,lcd_buffer,"Program: OK!");
	showLine(0,2,lcd_buffer,"Verify: OK!");
	showLine(0,3,lcd_buffer,"Output:");
	refreshLCD(lcd_buffer); /*刷新LCD*/
	for(num=0;num<255;num++)
 5da:	a1 2c       	mov	r10, r1
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	b6 2e       	mov	r11, r22
 5e0:	ac 0e       	add	r10, r28
 5e2:	bd 1e       	adc	r11, r29
	{
		showLine(8,3,lcd_buffer,"0x%x2",tmp[num]);
 5e4:	ad b7       	in	r26, 0x3d	; 61
 5e6:	be b7       	in	r27, 0x3e	; 62
 5e8:	18 97       	sbiw	r26, 0x08	; 8
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	f8 94       	cli
 5ee:	be bf       	out	0x3e, r27	; 62
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	ad bf       	out	0x3d, r26	; 61
 5f4:	ed b7       	in	r30, 0x3d	; 61
 5f6:	fe b7       	in	r31, 0x3e	; 62
 5f8:	31 96       	adiw	r30, 0x01	; 1
 5fa:	11 96       	adiw	r26, 0x01	; 1
 5fc:	5c 92       	st	X, r5
 5fe:	c1 82       	std	Z+1, r12	; 0x01
 600:	d2 82       	std	Z+2, r13	; 0x02
 602:	03 83       	std	Z+3, r16	; 0x03
 604:	75 82       	std	Z+5, r7	; 0x05
 606:	64 82       	std	Z+4, r6	; 0x04
 608:	d7 01       	movw	r26, r14
 60a:	8c 91       	ld	r24, X
 60c:	86 83       	std	Z+6, r24	; 0x06
 60e:	17 82       	std	Z+7, r1	; 0x07
 610:	0e 94 bb 01 	call	0x376	; 0x376 <showLine>
		refreshLCD(lcd_buffer); /*刷新LCD*/
 614:	8d b7       	in	r24, 0x3d	; 61
 616:	9e b7       	in	r25, 0x3e	; 62
 618:	08 96       	adiw	r24, 0x08	; 8
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	f8 94       	cli
 61e:	9e bf       	out	0x3e, r25	; 62
 620:	0f be       	out	0x3f, r0	; 63
 622:	8d bf       	out	0x3d, r24	; 61
 624:	8d 2d       	mov	r24, r13
 626:	90 2f       	mov	r25, r16
 628:	0e 94 af 00 	call	0x15e	; 0x15e <refreshLCD>
 62c:	80 e1       	ldi	r24, 0x10	; 16
 62e:	97 e2       	ldi	r25, 0x27	; 39
 630:	f4 01       	movw	r30, r8
 632:	31 97       	sbiw	r30, 0x01	; 1
 634:	f1 f7       	brne	.-4      	; 0x632 <main+0x1b6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 636:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 638:	d9 f7       	brne	.-10     	; 0x630 <main+0x1b4>
 63a:	08 94       	sec
 63c:	e1 1c       	adc	r14, r1
 63e:	f1 1c       	adc	r15, r1
	showLine(0,0,lcd_buffer,"AT45DBXX Example");
	showLine(0,1,lcd_buffer,"Program: OK!");
	showLine(0,2,lcd_buffer,"Verify: OK!");
	showLine(0,3,lcd_buffer,"Output:");
	refreshLCD(lcd_buffer); /*刷新LCD*/
	for(num=0;num<255;num++)
 640:	ea 14       	cp	r14, r10
 642:	fb 04       	cpc	r15, r11
 644:	79 f6       	brne	.-98     	; 0x5e4 <main+0x168>
 646:	ff cf       	rjmp	.-2      	; 0x646 <main+0x1ca>

00000648 <__udivmodhi4>:
 648:	aa 1b       	sub	r26, r26
 64a:	bb 1b       	sub	r27, r27
 64c:	51 e1       	ldi	r21, 0x11	; 17
 64e:	07 c0       	rjmp	.+14     	; 0x65e <__udivmodhi4_ep>

00000650 <__udivmodhi4_loop>:
 650:	aa 1f       	adc	r26, r26
 652:	bb 1f       	adc	r27, r27
 654:	a6 17       	cp	r26, r22
 656:	b7 07       	cpc	r27, r23
 658:	10 f0       	brcs	.+4      	; 0x65e <__udivmodhi4_ep>
 65a:	a6 1b       	sub	r26, r22
 65c:	b7 0b       	sbc	r27, r23

0000065e <__udivmodhi4_ep>:
 65e:	88 1f       	adc	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	5a 95       	dec	r21
 664:	a9 f7       	brne	.-22     	; 0x650 <__udivmodhi4_loop>
 666:	80 95       	com	r24
 668:	90 95       	com	r25
 66a:	bc 01       	movw	r22, r24
 66c:	cd 01       	movw	r24, r26
 66e:	08 95       	ret

00000670 <memset>:
 670:	dc 01       	movw	r26, r24
 672:	01 c0       	rjmp	.+2      	; 0x676 <memset+0x6>
 674:	6d 93       	st	X+, r22
 676:	41 50       	subi	r20, 0x01	; 1
 678:	50 40       	sbci	r21, 0x00	; 0
 67a:	e0 f7       	brcc	.-8      	; 0x674 <memset+0x4>
 67c:	08 95       	ret

0000067e <_exit>:
 67e:	f8 94       	cli

00000680 <__stop_program>:
 680:	ff cf       	rjmp	.-2      	; 0x680 <__stop_program>
