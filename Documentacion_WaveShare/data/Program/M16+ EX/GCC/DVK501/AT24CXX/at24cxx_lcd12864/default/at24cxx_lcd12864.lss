
at24cxx_lcd12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000824  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000824  000008b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  0080009a  0080009a  000008f2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000183  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cd  00000000  00000000  00000a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023f  00000000  00000000  00001262  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ad  00000000  00000000  000014a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000293  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000060a  00000000  00000000  00002153  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3d       	cpi	r26, 0xDA	; 218
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 23 03 	call	0x646	; 0x646 <main>
  8a:	0c 94 10 04 	jmp	0x820	; 0x820 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <twi_init>:
	TWBR = 0X0F;		//设置TWI波特率  
	TWSR &= 0XFC;		//设置TWI预分频 为 1

/*Hardware Environment：DVK501 && M16+ EX*/
#elif defined(_DVK501_M16_EX_)
	TWBR = 0X0F;		//设置TWI波特率  
  92:	8f e0       	ldi	r24, 0x0F	; 15
  94:	80 b9       	out	0x00, r24	; 0
	TWSR &= 0XFC;		//设置TWI预分频 为 1
  96:	81 b1       	in	r24, 0x01	; 1
  98:	8c 7f       	andi	r24, 0xFC	; 252
  9a:	81 b9       	out	0x01, r24	; 1
	TWSR &= 0XFC;		//设置TWI预分频 为 1
	
#else
  #warning "iic interface undefined."
#endif
}
  9c:	08 95       	ret

0000009e <I2C_Start>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Start()					
{
	I2CStart();						
  9e:	84 ea       	ldi	r24, 0xA4	; 164
  a0:	86 bf       	out	0x36, r24	; 54
	I2CWaitAck();
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <I2C_Start+0x4>
	if( I2CChkAck()!=I2C_START ) 
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	88 7f       	andi	r24, 0xF8	; 248
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	09 f4       	brne	.+2      	; 0xb4 <I2C_Start+0x16>
  b2:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
  b4:	89 2f       	mov	r24, r25
  b6:	08 95       	ret

000000b8 <I2C_Restart>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Restart()					
{
	I2CStart();						
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	86 bf       	out	0x36, r24	; 54
	I2CWaitAck();
  bc:	06 b6       	in	r0, 0x36	; 54
  be:	07 fe       	sbrs	r0, 7
  c0:	fd cf       	rjmp	.-6      	; 0xbc <I2C_Restart+0x4>
	if( I2CChkAck()!=I2C_RESTART ) 
  c2:	81 b1       	in	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	88 7f       	andi	r24, 0xF8	; 248
  c8:	80 31       	cpi	r24, 0x10	; 16
  ca:	09 f4       	brne	.+2      	; 0xce <I2C_Restart+0x16>
  cc:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
  ce:	89 2f       	mov	r24, r25
  d0:	08 95       	ret

000000d2 <I2C_SendWrDAdr>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr(uint8_t wrDAdr)	
{
	I2CSendByte(wrDAdr);			//设置 器件写地址
  d2:	83 b9       	out	0x03, r24	; 3
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	86 bf       	out	0x36, r24	; 54
	I2CWaitAck();
  d8:	06 b6       	in	r0, 0x36	; 54
  da:	07 fe       	sbrs	r0, 7
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <I2C_SendWrDAdr+0x6>
	if( I2CChkAck()!=I2C_MT_SLA_ACK )
  de:	81 b1       	in	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	88 7f       	andi	r24, 0xF8	; 248
  e4:	88 31       	cpi	r24, 0x18	; 24
  e6:	09 f4       	brne	.+2      	; 0xea <I2C_SendWrDAdr+0x18>
  e8:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
  ea:	89 2f       	mov	r24, r25
  ec:	08 95       	ret

000000ee <I2C_SendWrDAdr_>:
提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr_(uint16_t wrDAdr)	
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	if( (wrDAdr&0xF000) == 0xF000 )	//判断是否为 10位 器件地址
  f4:	80 70       	andi	r24, 0x00	; 0
  f6:	90 7f       	andi	r25, 0xF0	; 240
  f8:	80 50       	subi	r24, 0x00	; 0
  fa:	90 4f       	sbci	r25, 0xF0	; 240
  fc:	29 f4       	brne	.+10     	; 0x108 <I2C_SendWrDAdr_+0x1a>
		if( I2C_SendWrDAdr( (uint8_t)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_SendWrDAdr>
 104:	88 23       	and	r24, r24
 106:	29 f0       	breq	.+10     	; 0x112 <I2C_SendWrDAdr_+0x24>
			return I2C_ERR;
	if( I2C_SendWrDAdr( (uint8_t)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
 108:	8c 2f       	mov	r24, r28
 10a:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_SendWrDAdr>
 10e:	81 11       	cpse	r24, r1
 110:	81 e0       	ldi	r24, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <I2C_SendRdDAdr>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendRdDAdr(uint8_t rdDAdr)	
{
	I2CSendByte(rdDAdr);			//设置 器件读地址
 118:	83 b9       	out	0x03, r24	; 3
 11a:	84 e8       	ldi	r24, 0x84	; 132
 11c:	86 bf       	out	0x36, r24	; 54
	I2CWaitAck();
 11e:	06 b6       	in	r0, 0x36	; 54
 120:	07 fe       	sbrs	r0, 7
 122:	fd cf       	rjmp	.-6      	; 0x11e <I2C_SendRdDAdr+0x6>
	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
 124:	81 b1       	in	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	88 7f       	andi	r24, 0xF8	; 248
 12a:	80 34       	cpi	r24, 0x40	; 64
 12c:	09 f4       	brne	.+2      	; 0x130 <I2C_SendRdDAdr+0x18>
 12e:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;	
}
 130:	89 2f       	mov	r24, r25
 132:	08 95       	ret

00000134 <I2C_SendRdDAdr_>:
uint8_t I2C_SendRdDAdr_(uint8_t rdDAdr)	
{
	if( (rdDAdr&0xF000) == 0xF000)	//判断是否为 10位 器件地址
		if( I2C_SendWrDAdr( (uint8_t)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
			return I2C_ERR;
	if( I2C_SendWrDAdr( (uint8_t)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
 134:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_SendWrDAdr>
 138:	81 11       	cpse	r24, r1
 13a:	81 e0       	ldi	r24, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 13c:	08 95       	ret

0000013e <I2C_SendDat>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendDat(uint8_t configDat)	
{
	I2CSendByte(configDat);			
 13e:	83 b9       	out	0x03, r24	; 3
 140:	84 e8       	ldi	r24, 0x84	; 132
 142:	86 bf       	out	0x36, r24	; 54
	I2CWaitAck();
 144:	06 b6       	in	r0, 0x36	; 54
 146:	07 fe       	sbrs	r0, 7
 148:	fd cf       	rjmp	.-6      	; 0x144 <I2C_SendDat+0x6>
	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 14a:	81 b1       	in	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	88 7f       	andi	r24, 0xF8	; 248
 150:	88 32       	cpi	r24, 0x28	; 40
 152:	09 f4       	brne	.+2      	; 0x156 <I2C_SendDat+0x18>
 154:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;	
}
 156:	89 2f       	mov	r24, r25
 158:	08 95       	ret

0000015a <I2C_RcvNAckDat>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvNAckDat(uint8_t *pRdDat)	
{
 15a:	fc 01       	movw	r30, r24
	I2CRcvNckByte();
 15c:	84 e8       	ldi	r24, 0x84	; 132
 15e:	86 bf       	out	0x36, r24	; 54
	I2CWaitAck();
 160:	06 b6       	in	r0, 0x36	; 54
 162:	07 fe       	sbrs	r0, 7
 164:	fd cf       	rjmp	.-6      	; 0x160 <I2C_RcvNAckDat+0x6>
	if( I2CChkAck()!=I2C_MR_DATA_NACK )
 166:	81 b1       	in	r24, 0x01	; 1
 168:	88 7f       	andi	r24, 0xF8	; 248
 16a:	88 35       	cpi	r24, 0x58	; 88
 16c:	11 f0       	breq	.+4      	; 0x172 <I2C_RcvNAckDat+0x18>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret
		return I2C_ERR;
	*pRdDat=TWDR;
 172:	83 b1       	in	r24, 0x03	; 3
 174:	80 83       	st	Z, r24
 176:	81 e0       	ldi	r24, 0x01	; 1
	return I2C_CRR;
}
 178:	08 95       	ret

0000017a <I2C_RcvAckDat>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvAckDat(uint8_t *pRdDat)	
{
 17a:	fc 01       	movw	r30, r24
	I2CRcvAckByte();					
 17c:	84 ec       	ldi	r24, 0xC4	; 196
 17e:	86 bf       	out	0x36, r24	; 54
	I2CWaitAck();
 180:	06 b6       	in	r0, 0x36	; 54
 182:	07 fe       	sbrs	r0, 7
 184:	fd cf       	rjmp	.-6      	; 0x180 <I2C_RcvAckDat+0x6>
	if( I2CChkAck()!=I2C_MR_DATA_ACK )
 186:	81 b1       	in	r24, 0x01	; 1
 188:	88 7f       	andi	r24, 0xF8	; 248
 18a:	80 35       	cpi	r24, 0x50	; 80
 18c:	11 f0       	breq	.+4      	; 0x192 <I2C_RcvAckDat+0x18>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret
		return I2C_ERR;
	*pRdDat=TWDR;
 192:	83 b1       	in	r24, 0x03	; 3
 194:	80 83       	st	Z, r24
 196:	81 e0       	ldi	r24, 0x01	; 1
	return I2C_CRR;
}
 198:	08 95       	ret

0000019a <I2C_Write>:
		 wordAdr: word address 字地址
		 dat: data 数据
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Write(uint16_t wrDAdr,uint8_t wordAdr,uint8_t dat)
{
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	ec 01       	movw	r28, r24
 1a4:	16 2f       	mov	r17, r22
 1a6:	04 2f       	mov	r16, r20
	if( I2C_Start()==I2C_ERR )
 1a8:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_Start>
 1ac:	88 23       	and	r24, r24
 1ae:	99 f0       	breq	.+38     	; 0x1d6 <I2C_Write+0x3c>
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 1b0:	ce 01       	movw	r24, r28
 1b2:	0e 94 77 00 	call	0xee	; 0xee <I2C_SendWrDAdr_>
 1b6:	88 23       	and	r24, r24
 1b8:	71 f0       	breq	.+28     	; 0x1d6 <I2C_Write+0x3c>
		return I2C_ERR;

	if( I2C_SendDat(wordAdr)==I2C_ERR )
 1ba:	81 2f       	mov	r24, r17
 1bc:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_SendDat>
 1c0:	88 23       	and	r24, r24
 1c2:	49 f0       	breq	.+18     	; 0x1d6 <I2C_Write+0x3c>
		return I2C_ERR;

	if( I2C_SendDat(dat)==I2C_ERR )
 1c4:	80 2f       	mov	r24, r16
 1c6:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_SendDat>
 1ca:	88 23       	and	r24, r24
 1cc:	21 f0       	breq	.+8      	; 0x1d6 <I2C_Write+0x3c>
		return I2C_ERR;

	I2C_Stop();
 1ce:	84 e9       	ldi	r24, 0x94	; 148
 1d0:	86 bf       	out	0x36, r24	; 54
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <I2C_Write+0x3e>

	return I2C_CRR;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	08 95       	ret

000001e2 <I2C_Read>:
		 *pRdDat: p->read data 读取数据指针
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Read(uint16_t wrDAdr,uint8_t wordAdr,
			  uint8_t rdDAdr,uint8_t *pRdDat)
{
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ec 01       	movw	r28, r24
 1f0:	f6 2e       	mov	r15, r22
 1f2:	e4 2e       	mov	r14, r20
 1f4:	89 01       	movw	r16, r18
	if( I2C_Start()==I2C_ERR )
 1f6:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_Start>
 1fa:	88 23       	and	r24, r24
 1fc:	e1 f0       	breq	.+56     	; 0x236 <I2C_Read+0x54>
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 77 00 	call	0xee	; 0xee <I2C_SendWrDAdr_>
 204:	88 23       	and	r24, r24
 206:	b9 f0       	breq	.+46     	; 0x236 <I2C_Read+0x54>
		return I2C_ERR;

	if( I2C_SendDat(wordAdr)==I2C_ERR )
 208:	8f 2d       	mov	r24, r15
 20a:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_SendDat>
 20e:	88 23       	and	r24, r24
 210:	91 f0       	breq	.+36     	; 0x236 <I2C_Read+0x54>
		return I2C_ERR;

	if( I2C_Restart()==I2C_ERR )
 212:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Restart>
 216:	88 23       	and	r24, r24
 218:	71 f0       	breq	.+28     	; 0x236 <I2C_Read+0x54>
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
 21a:	8e 2d       	mov	r24, r14
 21c:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_SendRdDAdr>
 220:	88 23       	and	r24, r24
 222:	49 f0       	breq	.+18     	; 0x236 <I2C_Read+0x54>
		return I2C_ERR;

	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
 224:	c8 01       	movw	r24, r16
 226:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_RcvNAckDat>
 22a:	88 23       	and	r24, r24
 22c:	21 f0       	breq	.+8      	; 0x236 <I2C_Read+0x54>
		return I2C_ERR;

	I2C_Stop();
 22e:	84 e9       	ldi	r24, 0x94	; 148
 230:	86 bf       	out	0x36, r24	; 54
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	01 c0       	rjmp	.+2      	; 0x238 <I2C_Read+0x56>

	return I2C_CRR;
 236:	80 e0       	ldi	r24, 0x00	; 0
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	ff 90       	pop	r15
 242:	ef 90       	pop	r14
 244:	08 95       	ret

00000246 <I2C_Read_>:
		 num: number 读取数据个数
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Read_(uint16_t wrDAdr,uint8_t wordAdr,
			   uint8_t rdDAdr,uint8_t *pRdDat,uint8_t num)
{
 246:	cf 92       	push	r12
 248:	df 92       	push	r13
 24a:	ff 92       	push	r15
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	ec 01       	movw	r28, r24
 256:	16 2f       	mov	r17, r22
 258:	f4 2e       	mov	r15, r20
 25a:	69 01       	movw	r12, r18
 	uint8_t i;
	
	if( I2C_Start()==I2C_ERR )
 25c:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_Start>
 260:	88 23       	and	r24, r24
 262:	79 f1       	breq	.+94     	; 0x2c2 <I2C_Read_+0x7c>
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 264:	ce 01       	movw	r24, r28
 266:	0e 94 77 00 	call	0xee	; 0xee <I2C_SendWrDAdr_>
 26a:	88 23       	and	r24, r24
 26c:	51 f1       	breq	.+84     	; 0x2c2 <I2C_Read_+0x7c>
		return I2C_ERR;

	if( I2C_SendDat(wordAdr)==I2C_ERR )
 26e:	81 2f       	mov	r24, r17
 270:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_SendDat>
 274:	88 23       	and	r24, r24
 276:	29 f1       	breq	.+74     	; 0x2c2 <I2C_Read_+0x7c>
		return I2C_ERR;

	if( I2C_Restart()==I2C_ERR )
 278:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Restart>
 27c:	88 23       	and	r24, r24
 27e:	09 f1       	breq	.+66     	; 0x2c2 <I2C_Read_+0x7c>
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
 280:	8f 2d       	mov	r24, r15
 282:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_SendRdDAdr>
 286:	88 23       	and	r24, r24
 288:	e1 f0       	breq	.+56     	; 0x2c2 <I2C_Read_+0x7c>
 28a:	ff 24       	eor	r15, r15
		return I2C_ERR;

	for(i=0;i<num-1;i++)
 28c:	10 e0       	ldi	r17, 0x00	; 0
 28e:	01 50       	subi	r16, 0x01	; 1
 290:	10 40       	sbci	r17, 0x00	; 0
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <I2C_Read_+0x5a>
		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
 294:	c9 01       	movw	r24, r18
 296:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_RcvAckDat>
 29a:	88 23       	and	r24, r24
 29c:	91 f0       	breq	.+36     	; 0x2c2 <I2C_Read_+0x7c>
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
		return I2C_ERR;

	for(i=0;i<num-1;i++)
 29e:	f3 94       	inc	r15
 2a0:	8f 2d       	mov	r24, r15
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	96 01       	movw	r18, r12
 2a6:	28 0f       	add	r18, r24
 2a8:	39 1f       	adc	r19, r25
 2aa:	80 17       	cp	r24, r16
 2ac:	91 07       	cpc	r25, r17
 2ae:	94 f3       	brlt	.-28     	; 0x294 <I2C_Read_+0x4e>
		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
			return I2C_ERR;
	
	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
 2b0:	c9 01       	movw	r24, r18
 2b2:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_RcvNAckDat>
 2b6:	88 23       	and	r24, r24
 2b8:	21 f0       	breq	.+8      	; 0x2c2 <I2C_Read_+0x7c>
			return I2C_ERR;

	I2C_Stop();
 2ba:	84 e9       	ldi	r24, 0x94	; 148
 2bc:	86 bf       	out	0x36, r24	; 54
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <I2C_Read_+0x7e>
	
	return I2C_CRR;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	df 90       	pop	r13
 2d0:	cf 90       	pop	r12
 2d2:	08 95       	ret

000002d4 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2d4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2d6:	77 9b       	sbis	0x0e, 7	; 14
 2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <spiSendChar+0x2>
}
 2da:	08 95       	ret

000002dc <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 2dc:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2de:	88 ef       	ldi	r24, 0xF8	; 248
 2e0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2e2:	77 9b       	sbis	0x0e, 7	; 14
 2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 2e6:	89 2f       	mov	r24, r25
 2e8:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2ea:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 2ec:	77 9b       	sbis	0x0e, 7	; 14
 2ee:	fe cf       	rjmp	.-4      	; 0x2ec <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 2f0:	92 95       	swap	r25
 2f2:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 2f4:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 2f6:	77 9b       	sbis	0x0e, 7	; 14
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2fa:	88 eb       	ldi	r24, 0xB8	; 184
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 300:	08 95       	ret

00000302 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 302:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 304:	8a ef       	ldi	r24, 0xFA	; 250
 306:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 308:	77 9b       	sbis	0x0e, 7	; 14
 30a:	fe cf       	rjmp	.-4      	; 0x308 <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 30c:	89 2f       	mov	r24, r25
 30e:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 310:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 312:	77 9b       	sbis	0x0e, 7	; 14
 314:	fe cf       	rjmp	.-4      	; 0x312 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 316:	92 95       	swap	r25
 318:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 31a:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 31c:	77 9b       	sbis	0x0e, 7	; 14
 31e:	fe cf       	rjmp	.-4      	; 0x31c <sendDataST7920+0x1a>
 320:	88 eb       	ldi	r24, 0xB8	; 184
 322:	8a 95       	dec	r24
 324:	f1 f7       	brne	.-4      	; 0x322 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 326:	08 95       	ret

00000328 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 328:	cf 92       	push	r12
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	6c 01       	movw	r12, r24
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <sendCodeST7920>
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	d0 e0       	ldi	r29, 0x00	; 0
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 344:	f6 01       	movw	r30, r12
 346:	ec 0f       	add	r30, r28
 348:	fd 1f       	adc	r31, r29
 34a:	80 81       	ld	r24, Z
 34c:	0e 94 81 01 	call	0x302	; 0x302 <sendDataST7920>
 350:	21 96       	adiw	r28, 0x01	; 1
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 352:	c0 31       	cpi	r28, 0x10	; 16
 354:	d1 05       	cpc	r29, r1
 356:	b1 f7       	brne	.-20     	; 0x344 <refreshLCD+0x1c>
 358:	76 01       	movw	r14, r12
 35a:	e6 01       	movw	r28, r12
 35c:	00 e2       	ldi	r16, 0x20	; 32
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 35e:	88 a1       	ldd	r24, Y+32	; 0x20
 360:	0e 94 81 01 	call	0x302	; 0x302 <sendDataST7920>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 364:	0f 5f       	subi	r16, 0xFF	; 255
 366:	21 96       	adiw	r28, 0x01	; 1
 368:	00 33       	cpi	r16, 0x30	; 48
 36a:	c9 f7       	brne	.-14     	; 0x35e <refreshLCD+0x36>
 36c:	10 e1       	ldi	r17, 0x10	; 16
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 36e:	f7 01       	movw	r30, r14
 370:	80 89       	ldd	r24, Z+16	; 0x10
 372:	0e 94 81 01 	call	0x302	; 0x302 <sendDataST7920>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 376:	1f 5f       	subi	r17, 0xFF	; 255
 378:	08 94       	sec
 37a:	e1 1c       	adc	r14, r1
 37c:	f1 1c       	adc	r15, r1
 37e:	10 32       	cpi	r17, 0x20	; 32
 380:	b1 f7       	brne	.-20     	; 0x36e <refreshLCD+0x46>
 382:	e6 01       	movw	r28, r12
 384:	e0 96       	adiw	r28, 0x30	; 48
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 386:	89 91       	ld	r24, Y+
 388:	0e 94 81 01 	call	0x302	; 0x302 <sendDataST7920>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 38c:	0f 5f       	subi	r16, 0xFF	; 255
 38e:	00 34       	cpi	r16, 0x40	; 64
 390:	d1 f7       	brne	.-12     	; 0x386 <refreshLCD+0x5e>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	08 95       	ret

000003a4 <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 3a4:	1f 93       	push	r17
 3a6:	fc 01       	movw	r30, r24
 3a8:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 3aa:	10 e3       	ldi	r17, 0x30	; 48
 3ac:	43 c0       	rjmp	.+134    	; 0x434 <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 3ae:	43 30       	cpi	r20, 0x03	; 3
 3b0:	21 f1       	breq	.+72     	; 0x3fa <decToAscii+0x56>
 3b2:	44 30       	cpi	r20, 0x04	; 4
 3b4:	28 f4       	brcc	.+10     	; 0x3c0 <decToAscii+0x1c>
 3b6:	41 30       	cpi	r20, 0x01	; 1
 3b8:	b1 f1       	breq	.+108    	; 0x426 <decToAscii+0x82>
 3ba:	42 30       	cpi	r20, 0x02	; 2
 3bc:	c1 f5       	brne	.+112    	; 0x42e <decToAscii+0x8a>
 3be:	28 c0       	rjmp	.+80     	; 0x410 <decToAscii+0x6c>
 3c0:	44 30       	cpi	r20, 0x04	; 4
 3c2:	69 f0       	breq	.+26     	; 0x3de <decToAscii+0x3a>
 3c4:	45 30       	cpi	r20, 0x05	; 5
 3c6:	99 f5       	brne	.+102    	; 0x42e <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 3c8:	c9 01       	movw	r24, r18
 3ca:	60 e1       	ldi	r22, 0x10	; 16
 3cc:	77 e2       	ldi	r23, 0x27	; 39
 3ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__udivmodhi4>
 3d2:	60 5d       	subi	r22, 0xD0	; 208
 3d4:	60 83       	st	Z, r22
				dec%=10000;
 3d6:	c9 01       	movw	r24, r18
 3d8:	60 e1       	ldi	r22, 0x10	; 16
 3da:	77 e2       	ldi	r23, 0x27	; 39
 3dc:	0a c0       	rjmp	.+20     	; 0x3f2 <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 3de:	c9 01       	movw	r24, r18
 3e0:	68 ee       	ldi	r22, 0xE8	; 232
 3e2:	73 e0       	ldi	r23, 0x03	; 3
 3e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__udivmodhi4>
 3e8:	60 5d       	subi	r22, 0xD0	; 208
 3ea:	60 83       	st	Z, r22
				dec%=1000;
 3ec:	c9 01       	movw	r24, r18
 3ee:	68 ee       	ldi	r22, 0xE8	; 232
 3f0:	73 e0       	ldi	r23, 0x03	; 3
 3f2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__udivmodhi4>
 3f6:	9c 01       	movw	r18, r24
 3f8:	1b c0       	rjmp	.+54     	; 0x430 <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 3fa:	c9 01       	movw	r24, r18
 3fc:	64 e6       	ldi	r22, 0x64	; 100
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__udivmodhi4>
 404:	60 5d       	subi	r22, 0xD0	; 208
 406:	60 83       	st	Z, r22
				dec%=100;
 408:	c9 01       	movw	r24, r18
 40a:	64 e6       	ldi	r22, 0x64	; 100
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	f1 cf       	rjmp	.-30     	; 0x3f2 <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 410:	c9 01       	movw	r24, r18
 412:	6a e0       	ldi	r22, 0x0A	; 10
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__udivmodhi4>
 41a:	60 5d       	subi	r22, 0xD0	; 208
 41c:	60 83       	st	Z, r22
				dec%=10;
 41e:	c9 01       	movw	r24, r18
 420:	6a e0       	ldi	r22, 0x0A	; 10
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	e6 cf       	rjmp	.-52     	; 0x3f2 <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 426:	20 5d       	subi	r18, 0xD0	; 208
 428:	20 83       	st	Z, r18
 42a:	20 53       	subi	r18, 0x30	; 48
 42c:	01 c0       	rjmp	.+2      	; 0x430 <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 42e:	10 83       	st	Z, r17
		}
		width--;
 430:	41 50       	subi	r20, 0x01	; 1
		str++;
 432:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 434:	44 23       	and	r20, r20
 436:	09 f0       	breq	.+2      	; 0x43a <decToAscii+0x96>
 438:	ba cf       	rjmp	.-140    	; 0x3ae <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 43a:	1f 91       	pop	r17
 43c:	08 95       	ret

0000043e <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 450:	eb 01       	movw	r28, r22
 452:	cd 2f       	mov	r28, r29
 454:	dd 27       	eor	r29, r29
 456:	c2 95       	swap	r28
 458:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 45a:	27 e3       	ldi	r18, 0x37	; 55
 45c:	d2 2e       	mov	r13, r18
 45e:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 460:	90 e3       	ldi	r25, 0x30	; 48
 462:	e9 2e       	mov	r14, r25
 464:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 466:	a7 2f       	mov	r26, r23
 468:	bb 27       	eor	r27, r27
 46a:	af 70       	andi	r26, 0x0F	; 15
 46c:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 46e:	17 e3       	ldi	r17, 0x37	; 55
 470:	f1 2e       	mov	r15, r17
 472:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 474:	0a 2f       	mov	r16, r26
 476:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 478:	9b 01       	movw	r18, r22
 47a:	54 e0       	ldi	r21, 0x04	; 4
 47c:	36 95       	lsr	r19
 47e:	27 95       	ror	r18
 480:	5a 95       	dec	r21
 482:	e1 f7       	brne	.-8      	; 0x47c <__stack+0x1d>
 484:	2f 70       	andi	r18, 0x0F	; 15
 486:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 488:	82 2f       	mov	r24, r18
 48a:	12 2f       	mov	r17, r18
 48c:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 48e:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 490:	90 e3       	ldi	r25, 0x30	; 48
 492:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 494:	6f 70       	andi	r22, 0x0F	; 15
 496:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 498:	56 2f       	mov	r21, r22
 49a:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 49c:	96 2f       	mov	r25, r22
 49e:	99 5c       	subi	r25, 0xC9	; 201
 4a0:	2a c0       	rjmp	.+84     	; 0x4f6 <__stack+0x97>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 4a2:	42 30       	cpi	r20, 0x02	; 2
 4a4:	b9 f0       	breq	.+46     	; 0x4d4 <__stack+0x75>
 4a6:	43 30       	cpi	r20, 0x03	; 3
 4a8:	18 f4       	brcc	.+6      	; 0x4b0 <__stack+0x51>
 4aa:	41 30       	cpi	r20, 0x01	; 1
 4ac:	09 f5       	brne	.+66     	; 0x4f0 <__stack+0x91>
 4ae:	19 c0       	rjmp	.+50     	; 0x4e2 <__stack+0x83>
 4b0:	43 30       	cpi	r20, 0x03	; 3
 4b2:	49 f0       	breq	.+18     	; 0x4c6 <__stack+0x67>
 4b4:	44 30       	cpi	r20, 0x04	; 4
 4b6:	e1 f4       	brne	.+56     	; 0x4f0 <__stack+0x91>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 4b8:	ca 30       	cpi	r28, 0x0A	; 10
 4ba:	d1 05       	cpc	r29, r1
 4bc:	10 f0       	brcs	.+4      	; 0x4c2 <__stack+0x63>
 4be:	d0 82       	st	Z, r13
 4c0:	18 c0       	rjmp	.+48     	; 0x4f2 <__stack+0x93>
				else *str = tmp+'0';
 4c2:	e0 82       	st	Z, r14
 4c4:	16 c0       	rjmp	.+44     	; 0x4f2 <__stack+0x93>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 4c6:	aa 30       	cpi	r26, 0x0A	; 10
 4c8:	b1 05       	cpc	r27, r1
 4ca:	10 f0       	brcs	.+4      	; 0x4d0 <__stack+0x71>
 4cc:	f0 82       	st	Z, r15
 4ce:	11 c0       	rjmp	.+34     	; 0x4f2 <__stack+0x93>
				else *str = tmp+'0';
 4d0:	00 83       	st	Z, r16
 4d2:	0f c0       	rjmp	.+30     	; 0x4f2 <__stack+0x93>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 4d4:	2a 30       	cpi	r18, 0x0A	; 10
 4d6:	31 05       	cpc	r19, r1
 4d8:	10 f0       	brcs	.+4      	; 0x4de <__stack+0x7f>
 4da:	10 83       	st	Z, r17
 4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <__stack+0x93>
				else *str = tmp+'0';
 4de:	80 83       	st	Z, r24
 4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <__stack+0x93>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 4e2:	6a 30       	cpi	r22, 0x0A	; 10
 4e4:	71 05       	cpc	r23, r1
 4e6:	10 f0       	brcs	.+4      	; 0x4ec <__stack+0x8d>
 4e8:	90 83       	st	Z, r25
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <__stack+0x93>
				else *str = tmp+'0';
 4ec:	50 83       	st	Z, r21
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <__stack+0x93>
				break;
			}
			default: *str = '0';
 4f0:	c0 82       	st	Z, r12
		}
		width--;
 4f2:	41 50       	subi	r20, 0x01	; 1
		str++;
 4f4:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 4f6:	44 23       	and	r20, r20
 4f8:	a1 f6       	brne	.-88     	; 0x4a2 <__stack+0x43>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	08 95       	ret

0000050c <st7920LcdInit>:

/*Hardware Environment：DVK501 && M16+ EX*/
#elif defined(_DVK501_M16_EX_)
void st7920LcdInit(void)
{
DDRB|=0xE0;
 50c:	87 b3       	in	r24, 0x17	; 23
 50e:	80 6e       	ori	r24, 0xE0	; 224
 510:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 512:	80 e5       	ldi	r24, 0x50	; 80
 514:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	8e b9       	out	0x0e, r24	; 14
sendCodeST7920(0x0C);//整体显示
 51a:	8c e0       	ldi	r24, 0x0C	; 12
 51c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <sendCodeST7920>
sendCodeST7920(0x01);//清屏
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	0e 94 6e 01 	call	0x2dc	; 0x2dc <sendCodeST7920>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 526:	86 e6       	ldi	r24, 0x66	; 102
 528:	9e e0       	ldi	r25, 0x0E	; 14
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <st7920LcdInit+0x1e>
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 52e:	8a e9       	ldi	r24, 0x9A	; 154
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	60 e2       	ldi	r22, 0x20	; 32
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	40 e4       	ldi	r20, 0x40	; 64
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	0e 94 09 04 	call	0x812	; 0x812 <memset>
}
 53e:	08 95       	ret

00000540 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 540:	af 92       	push	r10
 542:	bf 92       	push	r11
 544:	cf 92       	push	r12
 546:	df 92       	push	r13
 548:	ef 92       	push	r14
 54a:	ff 92       	push	r15
 54c:	0f 93       	push	r16
 54e:	df 93       	push	r29
 550:	cf 93       	push	r28
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	0d 85       	ldd	r16, Y+13	; 0x0d
 558:	ae 84       	ldd	r10, Y+14	; 0x0e
 55a:	bf 84       	ldd	r11, Y+15	; 0x0f
 55c:	e8 88       	ldd	r14, Y+16	; 0x10
 55e:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 560:	02 95       	swap	r16
 562:	00 7f       	andi	r16, 0xF0	; 240
 564:	8c 85       	ldd	r24, Y+12	; 0x0c
 566:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 568:	de 01       	movw	r26, r28
 56a:	52 96       	adiw	r26, 0x12	; 18
 56c:	5d c0       	rjmp	.+186    	; 0x628 <showLine+0xe8>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 56e:	01 34       	cpi	r16, 0x41	; 65
 570:	08 f0       	brcs	.+2      	; 0x574 <showLine+0x34>
 572:	5f c0       	rjmp	.+190    	; 0x632 <showLine+0xf2>

		if(*str == '\\')
 574:	8c 35       	cpi	r24, 0x5C	; 92
 576:	51 f4       	brne	.+20     	; 0x58c <showLine+0x4c>
		{
			str++;
 578:	08 94       	sec
 57a:	e1 1c       	adc	r14, r1
 57c:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 57e:	95 01       	movw	r18, r10
 580:	20 0f       	add	r18, r16
 582:	31 1d       	adc	r19, r1
 584:	f7 01       	movw	r30, r14
 586:	80 81       	ld	r24, Z
 588:	f9 01       	movw	r30, r18
 58a:	49 c0       	rjmp	.+146    	; 0x61e <showLine+0xde>
		}
		else if(*str == '%')
 58c:	85 32       	cpi	r24, 0x25	; 37
 58e:	09 f0       	breq	.+2      	; 0x592 <showLine+0x52>
 590:	43 c0       	rjmp	.+134    	; 0x618 <showLine+0xd8>
		{
			str++;
 592:	08 94       	sec
 594:	e1 1c       	adc	r14, r1
 596:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 598:	f7 01       	movw	r30, r14
 59a:	80 81       	ld	r24, Z
 59c:	84 36       	cpi	r24, 0x64	; 100
 59e:	11 f0       	breq	.+4      	; 0x5a4 <showLine+0x64>
 5a0:	84 34       	cpi	r24, 0x44	; 68
 5a2:	99 f4       	brne	.+38     	; 0x5ca <showLine+0x8a>
			{
				str++;
 5a4:	08 94       	sec
 5a6:	e1 1c       	adc	r14, r1
 5a8:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 5aa:	52 e0       	ldi	r21, 0x02	; 2
 5ac:	c5 2e       	mov	r12, r21
 5ae:	d1 2c       	mov	r13, r1
 5b0:	ca 0e       	add	r12, r26
 5b2:	db 1e       	adc	r13, r27
 5b4:	6d 91       	ld	r22, X+
 5b6:	7c 91       	ld	r23, X
 5b8:	f7 01       	movw	r30, r14
 5ba:	40 81       	ld	r20, Z
 5bc:	40 53       	subi	r20, 0x30	; 48
 5be:	c5 01       	movw	r24, r10
 5c0:	80 0f       	add	r24, r16
 5c2:	91 1d       	adc	r25, r1
 5c4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <decToAscii>
 5c8:	21 c0       	rjmp	.+66     	; 0x60c <showLine+0xcc>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 5ca:	83 36       	cpi	r24, 0x63	; 99
 5cc:	11 f0       	breq	.+4      	; 0x5d2 <showLine+0x92>
 5ce:	83 34       	cpi	r24, 0x43	; 67
 5d0:	39 f4       	brne	.+14     	; 0x5e0 <showLine+0xa0>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 5d2:	f5 01       	movw	r30, r10
 5d4:	e0 0f       	add	r30, r16
 5d6:	f1 1d       	adc	r31, r1
 5d8:	8c 91       	ld	r24, X
 5da:	80 83       	st	Z, r24
 5dc:	12 96       	adiw	r26, 0x02	; 2
 5de:	20 c0       	rjmp	.+64     	; 0x620 <showLine+0xe0>
			}
			else if(*str=='x'||*str=='X')
 5e0:	88 37       	cpi	r24, 0x78	; 120
 5e2:	11 f0       	breq	.+4      	; 0x5e8 <showLine+0xa8>
 5e4:	88 35       	cpi	r24, 0x58	; 88
 5e6:	e1 f4       	brne	.+56     	; 0x620 <showLine+0xe0>
			{
				str++;
 5e8:	08 94       	sec
 5ea:	e1 1c       	adc	r14, r1
 5ec:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 5ee:	42 e0       	ldi	r20, 0x02	; 2
 5f0:	c4 2e       	mov	r12, r20
 5f2:	d1 2c       	mov	r13, r1
 5f4:	ca 0e       	add	r12, r26
 5f6:	db 1e       	adc	r13, r27
 5f8:	6d 91       	ld	r22, X+
 5fa:	7c 91       	ld	r23, X
 5fc:	f7 01       	movw	r30, r14
 5fe:	40 81       	ld	r20, Z
 600:	40 53       	subi	r20, 0x30	; 48
 602:	c5 01       	movw	r24, r10
 604:	80 0f       	add	r24, r16
 606:	91 1d       	adc	r25, r1
 608:	0e 94 1f 02 	call	0x43e	; 0x43e <hexToAscii>
				coordinate+=(*str-'0'-1);
 60c:	01 53       	subi	r16, 0x31	; 49
 60e:	f7 01       	movw	r30, r14
 610:	80 81       	ld	r24, Z
 612:	08 0f       	add	r16, r24
 614:	d6 01       	movw	r26, r12
 616:	04 c0       	rjmp	.+8      	; 0x620 <showLine+0xe0>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 618:	f5 01       	movw	r30, r10
 61a:	e0 0f       	add	r30, r16
 61c:	f1 1d       	adc	r31, r1
 61e:	80 83       	st	Z, r24
		}
		str++;
 620:	08 94       	sec
 622:	e1 1c       	adc	r14, r1
 624:	f1 1c       	adc	r15, r1
		coordinate++;
 626:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 628:	f7 01       	movw	r30, r14
 62a:	80 81       	ld	r24, Z
 62c:	88 23       	and	r24, r24
 62e:	09 f0       	breq	.+2      	; 0x632 <showLine+0xf2>
 630:	9e cf       	rjmp	.-196    	; 0x56e <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 632:	cf 91       	pop	r28
 634:	df 91       	pop	r29
 636:	0f 91       	pop	r16
 638:	ff 90       	pop	r15
 63a:	ef 90       	pop	r14
 63c:	df 90       	pop	r13
 63e:	cf 90       	pop	r12
 640:	bf 90       	pop	r11
 642:	af 90       	pop	r10
 644:	08 95       	ret

00000646 <main>:
#include <ws_at24cxx_port.h>
#include <ws_lcd_ST7920_port.h>


int main(void)
{
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	df 93       	push	r29
 64e:	cf 93       	push	r28
 650:	0f 92       	push	r0
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
	uint8_t adr,WrDat,t;	
	uint8_t *pRdDat=&t;	//随便给"*pRdDat"一个具体地址，以免内存发生错误

	st7920LcdInit(); /*LCD初始化*/
 656:	0e 94 86 02 	call	0x50c	; 0x50c <st7920LcdInit>
	showLine(0,0,lcd_buffer,"AT24CXX Example:");
 65a:	00 d0       	rcall	.+0      	; 0x65c <main+0x16>
 65c:	00 d0       	rcall	.+0      	; 0x65e <main+0x18>
 65e:	00 d0       	rcall	.+0      	; 0x660 <main+0x1a>
 660:	ed b7       	in	r30, 0x3d	; 61
 662:	fe b7       	in	r31, 0x3e	; 62
 664:	31 96       	adiw	r30, 0x01	; 1
 666:	ad b7       	in	r26, 0x3d	; 61
 668:	be b7       	in	r27, 0x3e	; 62
 66a:	11 96       	adiw	r26, 0x01	; 1
 66c:	1c 92       	st	X, r1
 66e:	11 82       	std	Z+1, r1	; 0x01
 670:	0a e9       	ldi	r16, 0x9A	; 154
 672:	10 e0       	ldi	r17, 0x00	; 0
 674:	13 83       	std	Z+3, r17	; 0x03
 676:	02 83       	std	Z+2, r16	; 0x02
 678:	80 e6       	ldi	r24, 0x60	; 96
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	95 83       	std	Z+5, r25	; 0x05
 67e:	84 83       	std	Z+4, r24	; 0x04
 680:	0e 94 a0 02 	call	0x540	; 0x540 <showLine>
	showLine(0,1,lcd_buffer,"Program and");
 684:	ed b7       	in	r30, 0x3d	; 61
 686:	fe b7       	in	r31, 0x3e	; 62
 688:	31 96       	adiw	r30, 0x01	; 1
 68a:	ad b7       	in	r26, 0x3d	; 61
 68c:	be b7       	in	r27, 0x3e	; 62
 68e:	11 96       	adiw	r26, 0x01	; 1
 690:	1c 92       	st	X, r1
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	81 83       	std	Z+1, r24	; 0x01
 696:	13 83       	std	Z+3, r17	; 0x03
 698:	02 83       	std	Z+2, r16	; 0x02
 69a:	81 e7       	ldi	r24, 0x71	; 113
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	95 83       	std	Z+5, r25	; 0x05
 6a0:	84 83       	std	Z+4, r24	; 0x04
 6a2:	0e 94 a0 02 	call	0x540	; 0x540 <showLine>
	showLine(0,2,lcd_buffer,"Verify");
 6a6:	ed b7       	in	r30, 0x3d	; 61
 6a8:	fe b7       	in	r31, 0x3e	; 62
 6aa:	31 96       	adiw	r30, 0x01	; 1
 6ac:	ad b7       	in	r26, 0x3d	; 61
 6ae:	be b7       	in	r27, 0x3e	; 62
 6b0:	11 96       	adiw	r26, 0x01	; 1
 6b2:	1c 92       	st	X, r1
 6b4:	82 e0       	ldi	r24, 0x02	; 2
 6b6:	81 83       	std	Z+1, r24	; 0x01
 6b8:	13 83       	std	Z+3, r17	; 0x03
 6ba:	02 83       	std	Z+2, r16	; 0x02
 6bc:	8d e7       	ldi	r24, 0x7D	; 125
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	95 83       	std	Z+5, r25	; 0x05
 6c2:	84 83       	std	Z+4, r24	; 0x04
 6c4:	0e 94 a0 02 	call	0x540	; 0x540 <showLine>
	showLine(0,3,lcd_buffer,"Results:");
 6c8:	ed b7       	in	r30, 0x3d	; 61
 6ca:	fe b7       	in	r31, 0x3e	; 62
 6cc:	31 96       	adiw	r30, 0x01	; 1
 6ce:	ad b7       	in	r26, 0x3d	; 61
 6d0:	be b7       	in	r27, 0x3e	; 62
 6d2:	11 96       	adiw	r26, 0x01	; 1
 6d4:	1c 92       	st	X, r1
 6d6:	63 e0       	ldi	r22, 0x03	; 3
 6d8:	f6 2e       	mov	r15, r22
 6da:	f1 82       	std	Z+1, r15	; 0x01
 6dc:	13 83       	std	Z+3, r17	; 0x03
 6de:	02 83       	std	Z+2, r16	; 0x02
 6e0:	84 e8       	ldi	r24, 0x84	; 132
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	95 83       	std	Z+5, r25	; 0x05
 6e6:	84 83       	std	Z+4, r24	; 0x04
 6e8:	0e 94 a0 02 	call	0x540	; 0x540 <showLine>
	refreshLCD(lcd_buffer); /*刷新LCD*/
 6ec:	8d b7       	in	r24, 0x3d	; 61
 6ee:	9e b7       	in	r25, 0x3e	; 62
 6f0:	06 96       	adiw	r24, 0x06	; 6
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	9e bf       	out	0x3e, r25	; 62
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	8d bf       	out	0x3d, r24	; 61
 6fc:	c8 01       	movw	r24, r16
 6fe:	0e 94 94 01 	call	0x328	; 0x328 <refreshLCD>
	TWBR = 0X0F;		//设置TWI波特率  
	TWSR &= 0XFC;		//设置TWI预分频 为 1

/*Hardware Environment：DVK501 && M16+ EX*/
#elif defined(_DVK501_M16_EX_)
	TWBR = 0X0F;		//设置TWI波特率  
 702:	8f e0       	ldi	r24, 0x0F	; 15
 704:	80 b9       	out	0x00, r24	; 0
	TWSR &= 0XFC;		//设置TWI预分频 为 1
 706:	81 b1       	in	r24, 0x01	; 1
 708:	8c 7f       	andi	r24, 0xFC	; 252
 70a:	81 b9       	out	0x01, r24	; 1
	adr=0x00;
	WrDat='P';
	twi_init();		
	if( I2C_Write(AT24C_WR_ADDR,adr,WrDat)!=I2C_ERR )	//AT24CXX写成功？
 70c:	80 ea       	ldi	r24, 0xA0	; 160
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	40 e5       	ldi	r20, 0x50	; 80
 714:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Write>
 718:	88 23       	and	r24, r24
 71a:	09 f4       	brne	.+2      	; 0x71e <main+0xd8>
 71c:	45 c0       	rjmp	.+138    	; 0x7a8 <main+0x162>
 71e:	84 ef       	ldi	r24, 0xF4	; 244
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	28 eb       	ldi	r18, 0xB8	; 184
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	f9 01       	movw	r30, r18
 728:	31 97       	sbiw	r30, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <main+0xe2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 72c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 72e:	d9 f7       	brne	.-10     	; 0x726 <main+0xe0>
	{
		_delay_ms(50);	//等待EERPOM写完
		if( I2C_Read(AT24C_WR_ADDR,adr,AT24C_RD_ADDR,pRdDat)!=I2C_ERR )	//AT24CXX读成功？
 730:	80 ea       	ldi	r24, 0xA0	; 160
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	41 ea       	ldi	r20, 0xA1	; 161
 738:	9e 01       	movw	r18, r28
 73a:	2f 5f       	subi	r18, 0xFF	; 255
 73c:	3f 4f       	sbci	r19, 0xFF	; 255
 73e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <I2C_Read>
 742:	2a e9       	ldi	r18, 0x9A	; 154
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	88 23       	and	r24, r24
 748:	f9 f0       	breq	.+62     	; 0x788 <main+0x142>
			showLine(9,3,lcd_buffer,"%cass",*pRdDat);
 74a:	ad b7       	in	r26, 0x3d	; 61
 74c:	be b7       	in	r27, 0x3e	; 62
 74e:	18 97       	sbiw	r26, 0x08	; 8
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	f8 94       	cli
 754:	be bf       	out	0x3e, r27	; 62
 756:	0f be       	out	0x3f, r0	; 63
 758:	ad bf       	out	0x3d, r26	; 61
 75a:	ed b7       	in	r30, 0x3d	; 61
 75c:	fe b7       	in	r31, 0x3e	; 62
 75e:	31 96       	adiw	r30, 0x01	; 1
 760:	89 e0       	ldi	r24, 0x09	; 9
 762:	11 96       	adiw	r26, 0x01	; 1
 764:	8c 93       	st	X, r24
 766:	83 e0       	ldi	r24, 0x03	; 3
 768:	81 83       	std	Z+1, r24	; 0x01
 76a:	33 83       	std	Z+3, r19	; 0x03
 76c:	22 83       	std	Z+2, r18	; 0x02
 76e:	8d e8       	ldi	r24, 0x8D	; 141
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	95 83       	std	Z+5, r25	; 0x05
 774:	84 83       	std	Z+4, r24	; 0x04
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	86 83       	std	Z+6, r24	; 0x06
 77a:	17 82       	std	Z+7, r1	; 0x07
 77c:	0e 94 a0 02 	call	0x540	; 0x540 <showLine>
 780:	8d b7       	in	r24, 0x3d	; 61
 782:	9e b7       	in	r25, 0x3e	; 62
 784:	08 96       	adiw	r24, 0x08	; 8
 786:	27 c0       	rjmp	.+78     	; 0x7d6 <main+0x190>
		else
			showLine(9,3,lcd_buffer,"Error");	//读取错误，反馈错误信号
 788:	00 d0       	rcall	.+0      	; 0x78a <main+0x144>
 78a:	00 d0       	rcall	.+0      	; 0x78c <main+0x146>
 78c:	00 d0       	rcall	.+0      	; 0x78e <main+0x148>
 78e:	ed b7       	in	r30, 0x3d	; 61
 790:	fe b7       	in	r31, 0x3e	; 62
 792:	31 96       	adiw	r30, 0x01	; 1
 794:	89 e0       	ldi	r24, 0x09	; 9
 796:	ad b7       	in	r26, 0x3d	; 61
 798:	be b7       	in	r27, 0x3e	; 62
 79a:	11 96       	adiw	r26, 0x01	; 1
 79c:	8c 93       	st	X, r24
 79e:	83 e0       	ldi	r24, 0x03	; 3
 7a0:	81 83       	std	Z+1, r24	; 0x01
 7a2:	33 83       	std	Z+3, r19	; 0x03
 7a4:	22 83       	std	Z+2, r18	; 0x02
 7a6:	0e c0       	rjmp	.+28     	; 0x7c4 <main+0x17e>
	}	
	else
		showLine(9,3,lcd_buffer,"Error");	//写入错误，反馈错误信号
 7a8:	00 d0       	rcall	.+0      	; 0x7aa <main+0x164>
 7aa:	00 d0       	rcall	.+0      	; 0x7ac <main+0x166>
 7ac:	00 d0       	rcall	.+0      	; 0x7ae <main+0x168>
 7ae:	ed b7       	in	r30, 0x3d	; 61
 7b0:	fe b7       	in	r31, 0x3e	; 62
 7b2:	31 96       	adiw	r30, 0x01	; 1
 7b4:	89 e0       	ldi	r24, 0x09	; 9
 7b6:	ad b7       	in	r26, 0x3d	; 61
 7b8:	be b7       	in	r27, 0x3e	; 62
 7ba:	11 96       	adiw	r26, 0x01	; 1
 7bc:	8c 93       	st	X, r24
 7be:	f1 82       	std	Z+1, r15	; 0x01
 7c0:	13 83       	std	Z+3, r17	; 0x03
 7c2:	02 83       	std	Z+2, r16	; 0x02
 7c4:	83 e9       	ldi	r24, 0x93	; 147
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	95 83       	std	Z+5, r25	; 0x05
 7ca:	84 83       	std	Z+4, r24	; 0x04
 7cc:	0e 94 a0 02 	call	0x540	; 0x540 <showLine>
 7d0:	8d b7       	in	r24, 0x3d	; 61
 7d2:	9e b7       	in	r25, 0x3e	; 62
 7d4:	06 96       	adiw	r24, 0x06	; 6
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	9e bf       	out	0x3e, r25	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	8d bf       	out	0x3d, r24	; 61

	refreshLCD(lcd_buffer); /*刷新LCD*/
 7e0:	8a e9       	ldi	r24, 0x9A	; 154
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 94 01 	call	0x328	; 0x328 <refreshLCD>
 7e8:	ff cf       	rjmp	.-2      	; 0x7e8 <main+0x1a2>

000007ea <__udivmodhi4>:
 7ea:	aa 1b       	sub	r26, r26
 7ec:	bb 1b       	sub	r27, r27
 7ee:	51 e1       	ldi	r21, 0x11	; 17
 7f0:	07 c0       	rjmp	.+14     	; 0x800 <__udivmodhi4_ep>

000007f2 <__udivmodhi4_loop>:
 7f2:	aa 1f       	adc	r26, r26
 7f4:	bb 1f       	adc	r27, r27
 7f6:	a6 17       	cp	r26, r22
 7f8:	b7 07       	cpc	r27, r23
 7fa:	10 f0       	brcs	.+4      	; 0x800 <__udivmodhi4_ep>
 7fc:	a6 1b       	sub	r26, r22
 7fe:	b7 0b       	sbc	r27, r23

00000800 <__udivmodhi4_ep>:
 800:	88 1f       	adc	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	5a 95       	dec	r21
 806:	a9 f7       	brne	.-22     	; 0x7f2 <__udivmodhi4_loop>
 808:	80 95       	com	r24
 80a:	90 95       	com	r25
 80c:	bc 01       	movw	r22, r24
 80e:	cd 01       	movw	r24, r26
 810:	08 95       	ret

00000812 <memset>:
 812:	dc 01       	movw	r26, r24
 814:	01 c0       	rjmp	.+2      	; 0x818 <memset+0x6>
 816:	6d 93       	st	X+, r22
 818:	41 50       	subi	r20, 0x01	; 1
 81a:	50 40       	sbci	r21, 0x00	; 0
 81c:	e0 f7       	brcc	.-8      	; 0x816 <memset+0x4>
 81e:	08 95       	ret

00000820 <_exit>:
 820:	f8 94       	cli

00000822 <__stop_program>:
 822:	ff cf       	rjmp	.-2      	; 0x822 <__stop_program>
