
USART_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000005cc  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  0080008c  0080008c  0000068c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e5  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000661  00000000  00000000  00000791  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000243  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000755  00000000  00000000  00001035  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ef  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b7  00000000  00000000  00001a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001e12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3c       	cpi	r26, 0xCC	; 204
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 24 02 	call	0x448	; 0x448 <main>
  8a:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usartInit>:
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSRA=0x00;
  92:	1b b8       	out	0x0b, r1	; 11
UCSRB=0x18;
  94:	88 e1       	ldi	r24, 0x18	; 24
  96:	8a b9       	out	0x0a, r24	; 10
UCSRC=0x86;
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32
UBRRH=0x00;
  9c:	10 bc       	out	0x20, r1	; 32
UBRRL=0x2F;
  9e:	8f e2       	ldi	r24, 0x2F	; 47
  a0:	89 b9       	out	0x09, r24	; 9
}
  a2:	08 95       	ret

000000a4 <putUsart0>:


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
    while(!(WS_UCSR0A & 0x20));
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <putUsart0>
    WS_UDR0 = c;
  a8:	8c b9       	out	0x0c, r24	; 12
}
  aa:	08 95       	ret

000000ac <getUsart0>:
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  ac:	5f 9b       	sbis	0x0b, 7	; 11
  ae:	07 c0       	rjmp	.+14     	; 0xbe <getUsart0+0x12>
    status = WS_UCSR0A;
  b0:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
  b2:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  b4:	8c 71       	andi	r24, 0x1C	; 28
  b6:	19 f4       	brne	.+6      	; 0xbe <getUsart0+0x12>
    return res;
  b8:	29 2f       	mov	r18, r25
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <getUsart0+0x16>
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	3f ef       	ldi	r19, 0xFF	; 255
}
  c2:	c9 01       	movw	r24, r18
  c4:	08 95       	ret

000000c6 <waitUsart0>:
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <waitUsart0>
    status = WS_UCSR0A;
  ca:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
  cc:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
  ce:	8c 71       	andi	r24, 0x1C	; 28
  d0:	d1 f7       	brne	.-12     	; 0xc6 <waitUsart0>
uint8_t waitUsart0(void)
{
    uint16_t c;
    while((c=getUsart0())==0xFFFF);
    return (uint8_t)c;
}
  d2:	89 2f       	mov	r24, r25
  d4:	08 95       	ret

000000d6 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  d6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  d8:	77 9b       	sbis	0x0e, 7	; 14
  da:	fe cf       	rjmp	.-4      	; 0xd8 <spiSendChar+0x2>
}
  dc:	08 95       	ret

000000de <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
  de:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  e0:	88 ef       	ldi	r24, 0xF8	; 248
  e2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  e4:	77 9b       	sbis	0x0e, 7	; 14
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
  e8:	89 2f       	mov	r24, r25
  ea:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  ec:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  ee:	77 9b       	sbis	0x0e, 7	; 14
  f0:	fe cf       	rjmp	.-4      	; 0xee <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
  f2:	92 95       	swap	r25
  f4:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  f6:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
  f8:	77 9b       	sbis	0x0e, 7	; 14
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  fc:	88 eb       	ldi	r24, 0xB8	; 184
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 102:	08 95       	ret

00000104 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 104:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 10a:	77 9b       	sbis	0x0e, 7	; 14
 10c:	fe cf       	rjmp	.-4      	; 0x10a <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 10e:	89 2f       	mov	r24, r25
 110:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 112:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 114:	77 9b       	sbis	0x0e, 7	; 14
 116:	fe cf       	rjmp	.-4      	; 0x114 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 118:	92 95       	swap	r25
 11a:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 11c:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 11e:	77 9b       	sbis	0x0e, 7	; 14
 120:	fe cf       	rjmp	.-4      	; 0x11e <sendDataST7920+0x1a>
 122:	88 eb       	ldi	r24, 0xB8	; 184
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 128:	08 95       	ret

0000012a <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	6c 01       	movw	r12, r24
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 6f 00 	call	0xde	; 0xde <sendCodeST7920>
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d0 e0       	ldi	r29, 0x00	; 0
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 146:	f6 01       	movw	r30, r12
 148:	ec 0f       	add	r30, r28
 14a:	fd 1f       	adc	r31, r29
 14c:	80 81       	ld	r24, Z
 14e:	0e 94 82 00 	call	0x104	; 0x104 <sendDataST7920>
 152:	21 96       	adiw	r28, 0x01	; 1
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 154:	c0 31       	cpi	r28, 0x10	; 16
 156:	d1 05       	cpc	r29, r1
 158:	b1 f7       	brne	.-20     	; 0x146 <refreshLCD+0x1c>
 15a:	76 01       	movw	r14, r12
 15c:	e6 01       	movw	r28, r12
 15e:	00 e2       	ldi	r16, 0x20	; 32
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 160:	88 a1       	ldd	r24, Y+32	; 0x20
 162:	0e 94 82 00 	call	0x104	; 0x104 <sendDataST7920>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 166:	0f 5f       	subi	r16, 0xFF	; 255
 168:	21 96       	adiw	r28, 0x01	; 1
 16a:	00 33       	cpi	r16, 0x30	; 48
 16c:	c9 f7       	brne	.-14     	; 0x160 <refreshLCD+0x36>
 16e:	10 e1       	ldi	r17, 0x10	; 16
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 170:	f7 01       	movw	r30, r14
 172:	80 89       	ldd	r24, Z+16	; 0x10
 174:	0e 94 82 00 	call	0x104	; 0x104 <sendDataST7920>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 178:	1f 5f       	subi	r17, 0xFF	; 255
 17a:	08 94       	sec
 17c:	e1 1c       	adc	r14, r1
 17e:	f1 1c       	adc	r15, r1
 180:	10 32       	cpi	r17, 0x20	; 32
 182:	b1 f7       	brne	.-20     	; 0x170 <refreshLCD+0x46>
 184:	e6 01       	movw	r28, r12
 186:	e0 96       	adiw	r28, 0x30	; 48
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 188:	89 91       	ld	r24, Y+
 18a:	0e 94 82 00 	call	0x104	; 0x104 <sendDataST7920>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 18e:	0f 5f       	subi	r16, 0xFF	; 255
 190:	00 34       	cpi	r16, 0x40	; 64
 192:	d1 f7       	brne	.-12     	; 0x188 <refreshLCD+0x5e>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	08 95       	ret

000001a6 <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 1a6:	1f 93       	push	r17
 1a8:	fc 01       	movw	r30, r24
 1aa:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 1ac:	10 e3       	ldi	r17, 0x30	; 48
 1ae:	43 c0       	rjmp	.+134    	; 0x236 <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 1b0:	43 30       	cpi	r20, 0x03	; 3
 1b2:	21 f1       	breq	.+72     	; 0x1fc <decToAscii+0x56>
 1b4:	44 30       	cpi	r20, 0x04	; 4
 1b6:	28 f4       	brcc	.+10     	; 0x1c2 <decToAscii+0x1c>
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	b1 f1       	breq	.+108    	; 0x228 <decToAscii+0x82>
 1bc:	42 30       	cpi	r20, 0x02	; 2
 1be:	c1 f5       	brne	.+112    	; 0x230 <decToAscii+0x8a>
 1c0:	28 c0       	rjmp	.+80     	; 0x212 <decToAscii+0x6c>
 1c2:	44 30       	cpi	r20, 0x04	; 4
 1c4:	69 f0       	breq	.+26     	; 0x1e0 <decToAscii+0x3a>
 1c6:	45 30       	cpi	r20, 0x05	; 5
 1c8:	99 f5       	brne	.+102    	; 0x230 <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 1ca:	c9 01       	movw	r24, r18
 1cc:	60 e1       	ldi	r22, 0x10	; 16
 1ce:	77 e2       	ldi	r23, 0x27	; 39
 1d0:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodhi4>
 1d4:	60 5d       	subi	r22, 0xD0	; 208
 1d6:	60 83       	st	Z, r22
				dec%=10000;
 1d8:	c9 01       	movw	r24, r18
 1da:	60 e1       	ldi	r22, 0x10	; 16
 1dc:	77 e2       	ldi	r23, 0x27	; 39
 1de:	0a c0       	rjmp	.+20     	; 0x1f4 <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 1e0:	c9 01       	movw	r24, r18
 1e2:	68 ee       	ldi	r22, 0xE8	; 232
 1e4:	73 e0       	ldi	r23, 0x03	; 3
 1e6:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodhi4>
 1ea:	60 5d       	subi	r22, 0xD0	; 208
 1ec:	60 83       	st	Z, r22
				dec%=1000;
 1ee:	c9 01       	movw	r24, r18
 1f0:	68 ee       	ldi	r22, 0xE8	; 232
 1f2:	73 e0       	ldi	r23, 0x03	; 3
 1f4:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodhi4>
 1f8:	9c 01       	movw	r18, r24
 1fa:	1b c0       	rjmp	.+54     	; 0x232 <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 1fc:	c9 01       	movw	r24, r18
 1fe:	64 e6       	ldi	r22, 0x64	; 100
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodhi4>
 206:	60 5d       	subi	r22, 0xD0	; 208
 208:	60 83       	st	Z, r22
				dec%=100;
 20a:	c9 01       	movw	r24, r18
 20c:	64 e6       	ldi	r22, 0x64	; 100
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	f1 cf       	rjmp	.-30     	; 0x1f4 <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 212:	c9 01       	movw	r24, r18
 214:	6a e0       	ldi	r22, 0x0A	; 10
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodhi4>
 21c:	60 5d       	subi	r22, 0xD0	; 208
 21e:	60 83       	st	Z, r22
				dec%=10;
 220:	c9 01       	movw	r24, r18
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	e6 cf       	rjmp	.-52     	; 0x1f4 <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 228:	20 5d       	subi	r18, 0xD0	; 208
 22a:	20 83       	st	Z, r18
 22c:	20 53       	subi	r18, 0x30	; 48
 22e:	01 c0       	rjmp	.+2      	; 0x232 <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 230:	10 83       	st	Z, r17
		}
		width--;
 232:	41 50       	subi	r20, 0x01	; 1
		str++;
 234:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 236:	44 23       	and	r20, r20
 238:	09 f0       	breq	.+2      	; 0x23c <decToAscii+0x96>
 23a:	ba cf       	rjmp	.-140    	; 0x1b0 <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 252:	eb 01       	movw	r28, r22
 254:	cd 2f       	mov	r28, r29
 256:	dd 27       	eor	r29, r29
 258:	c2 95       	swap	r28
 25a:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 25c:	27 e3       	ldi	r18, 0x37	; 55
 25e:	d2 2e       	mov	r13, r18
 260:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 262:	90 e3       	ldi	r25, 0x30	; 48
 264:	e9 2e       	mov	r14, r25
 266:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 268:	a7 2f       	mov	r26, r23
 26a:	bb 27       	eor	r27, r27
 26c:	af 70       	andi	r26, 0x0F	; 15
 26e:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 270:	17 e3       	ldi	r17, 0x37	; 55
 272:	f1 2e       	mov	r15, r17
 274:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 276:	0a 2f       	mov	r16, r26
 278:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 27a:	9b 01       	movw	r18, r22
 27c:	54 e0       	ldi	r21, 0x04	; 4
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	5a 95       	dec	r21
 284:	e1 f7       	brne	.-8      	; 0x27e <hexToAscii+0x3e>
 286:	2f 70       	andi	r18, 0x0F	; 15
 288:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 28a:	82 2f       	mov	r24, r18
 28c:	12 2f       	mov	r17, r18
 28e:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 290:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 292:	90 e3       	ldi	r25, 0x30	; 48
 294:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 296:	6f 70       	andi	r22, 0x0F	; 15
 298:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 29a:	56 2f       	mov	r21, r22
 29c:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 29e:	96 2f       	mov	r25, r22
 2a0:	99 5c       	subi	r25, 0xC9	; 201
 2a2:	2a c0       	rjmp	.+84     	; 0x2f8 <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 2a4:	42 30       	cpi	r20, 0x02	; 2
 2a6:	b9 f0       	breq	.+46     	; 0x2d6 <hexToAscii+0x96>
 2a8:	43 30       	cpi	r20, 0x03	; 3
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <hexToAscii+0x72>
 2ac:	41 30       	cpi	r20, 0x01	; 1
 2ae:	09 f5       	brne	.+66     	; 0x2f2 <hexToAscii+0xb2>
 2b0:	19 c0       	rjmp	.+50     	; 0x2e4 <hexToAscii+0xa4>
 2b2:	43 30       	cpi	r20, 0x03	; 3
 2b4:	49 f0       	breq	.+18     	; 0x2c8 <hexToAscii+0x88>
 2b6:	44 30       	cpi	r20, 0x04	; 4
 2b8:	e1 f4       	brne	.+56     	; 0x2f2 <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 2ba:	ca 30       	cpi	r28, 0x0A	; 10
 2bc:	d1 05       	cpc	r29, r1
 2be:	10 f0       	brcs	.+4      	; 0x2c4 <hexToAscii+0x84>
 2c0:	d0 82       	st	Z, r13
 2c2:	18 c0       	rjmp	.+48     	; 0x2f4 <hexToAscii+0xb4>
				else *str = tmp+'0';
 2c4:	e0 82       	st	Z, r14
 2c6:	16 c0       	rjmp	.+44     	; 0x2f4 <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2c8:	aa 30       	cpi	r26, 0x0A	; 10
 2ca:	b1 05       	cpc	r27, r1
 2cc:	10 f0       	brcs	.+4      	; 0x2d2 <hexToAscii+0x92>
 2ce:	f0 82       	st	Z, r15
 2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <hexToAscii+0xb4>
				else *str = tmp+'0';
 2d2:	00 83       	st	Z, r16
 2d4:	0f c0       	rjmp	.+30     	; 0x2f4 <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2d6:	2a 30       	cpi	r18, 0x0A	; 10
 2d8:	31 05       	cpc	r19, r1
 2da:	10 f0       	brcs	.+4      	; 0x2e0 <hexToAscii+0xa0>
 2dc:	10 83       	st	Z, r17
 2de:	0a c0       	rjmp	.+20     	; 0x2f4 <hexToAscii+0xb4>
				else *str = tmp+'0';
 2e0:	80 83       	st	Z, r24
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2e4:	6a 30       	cpi	r22, 0x0A	; 10
 2e6:	71 05       	cpc	r23, r1
 2e8:	10 f0       	brcs	.+4      	; 0x2ee <hexToAscii+0xae>
 2ea:	90 83       	st	Z, r25
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <hexToAscii+0xb4>
				else *str = tmp+'0';
 2ee:	50 83       	st	Z, r21
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 2f2:	c0 82       	st	Z, r12
		}
		width--;
 2f4:	41 50       	subi	r20, 0x01	; 1
		str++;
 2f6:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 2f8:	44 23       	and	r20, r20
 2fa:	a1 f6       	brne	.-88     	; 0x2a4 <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	df 90       	pop	r13
 30a:	cf 90       	pop	r12
 30c:	08 95       	ret

0000030e <st7920LcdInit>:

/*Hardware Environment：DVK501 && M16+ EX*/
#elif defined(_DVK501_M16_EX_)
void st7920LcdInit(void)
{
DDRB|=0xE0;
 30e:	87 b3       	in	r24, 0x17	; 23
 310:	80 6e       	ori	r24, 0xE0	; 224
 312:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 314:	80 e5       	ldi	r24, 0x50	; 80
 316:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	8e b9       	out	0x0e, r24	; 14
sendCodeST7920(0x0C);//整体显示
 31c:	8c e0       	ldi	r24, 0x0C	; 12
 31e:	0e 94 6f 00 	call	0xde	; 0xde <sendCodeST7920>
sendCodeST7920(0x01);//清屏
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 6f 00 	call	0xde	; 0xde <sendCodeST7920>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 328:	86 e6       	ldi	r24, 0x66	; 102
 32a:	9e e0       	ldi	r25, 0x0E	; 14
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <st7920LcdInit+0x1e>
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 330:	8c e8       	ldi	r24, 0x8C	; 140
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	60 e2       	ldi	r22, 0x20	; 32
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	40 e4       	ldi	r20, 0x40	; 64
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <memset>
}
 340:	08 95       	ret

00000342 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 342:	af 92       	push	r10
 344:	bf 92       	push	r11
 346:	cf 92       	push	r12
 348:	df 92       	push	r13
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	df 93       	push	r29
 352:	cf 93       	push	r28
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	0d 85       	ldd	r16, Y+13	; 0x0d
 35a:	ae 84       	ldd	r10, Y+14	; 0x0e
 35c:	bf 84       	ldd	r11, Y+15	; 0x0f
 35e:	e8 88       	ldd	r14, Y+16	; 0x10
 360:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 362:	02 95       	swap	r16
 364:	00 7f       	andi	r16, 0xF0	; 240
 366:	8c 85       	ldd	r24, Y+12	; 0x0c
 368:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 36a:	de 01       	movw	r26, r28
 36c:	52 96       	adiw	r26, 0x12	; 18
 36e:	5d c0       	rjmp	.+186    	; 0x42a <showLine+0xe8>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 370:	01 34       	cpi	r16, 0x41	; 65
 372:	08 f0       	brcs	.+2      	; 0x376 <showLine+0x34>
 374:	5f c0       	rjmp	.+190    	; 0x434 <showLine+0xf2>

		if(*str == '\\')
 376:	8c 35       	cpi	r24, 0x5C	; 92
 378:	51 f4       	brne	.+20     	; 0x38e <showLine+0x4c>
		{
			str++;
 37a:	08 94       	sec
 37c:	e1 1c       	adc	r14, r1
 37e:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 380:	95 01       	movw	r18, r10
 382:	20 0f       	add	r18, r16
 384:	31 1d       	adc	r19, r1
 386:	f7 01       	movw	r30, r14
 388:	80 81       	ld	r24, Z
 38a:	f9 01       	movw	r30, r18
 38c:	49 c0       	rjmp	.+146    	; 0x420 <showLine+0xde>
		}
		else if(*str == '%')
 38e:	85 32       	cpi	r24, 0x25	; 37
 390:	09 f0       	breq	.+2      	; 0x394 <showLine+0x52>
 392:	43 c0       	rjmp	.+134    	; 0x41a <showLine+0xd8>
		{
			str++;
 394:	08 94       	sec
 396:	e1 1c       	adc	r14, r1
 398:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 39a:	f7 01       	movw	r30, r14
 39c:	80 81       	ld	r24, Z
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <showLine+0x64>
 3a2:	84 34       	cpi	r24, 0x44	; 68
 3a4:	99 f4       	brne	.+38     	; 0x3cc <showLine+0x8a>
			{
				str++;
 3a6:	08 94       	sec
 3a8:	e1 1c       	adc	r14, r1
 3aa:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3ac:	52 e0       	ldi	r21, 0x02	; 2
 3ae:	c5 2e       	mov	r12, r21
 3b0:	d1 2c       	mov	r13, r1
 3b2:	ca 0e       	add	r12, r26
 3b4:	db 1e       	adc	r13, r27
 3b6:	6d 91       	ld	r22, X+
 3b8:	7c 91       	ld	r23, X
 3ba:	f7 01       	movw	r30, r14
 3bc:	40 81       	ld	r20, Z
 3be:	40 53       	subi	r20, 0x30	; 48
 3c0:	c5 01       	movw	r24, r10
 3c2:	80 0f       	add	r24, r16
 3c4:	91 1d       	adc	r25, r1
 3c6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <decToAscii>
 3ca:	21 c0       	rjmp	.+66     	; 0x40e <showLine+0xcc>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 3cc:	83 36       	cpi	r24, 0x63	; 99
 3ce:	11 f0       	breq	.+4      	; 0x3d4 <showLine+0x92>
 3d0:	83 34       	cpi	r24, 0x43	; 67
 3d2:	39 f4       	brne	.+14     	; 0x3e2 <showLine+0xa0>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 3d4:	f5 01       	movw	r30, r10
 3d6:	e0 0f       	add	r30, r16
 3d8:	f1 1d       	adc	r31, r1
 3da:	8c 91       	ld	r24, X
 3dc:	80 83       	st	Z, r24
 3de:	12 96       	adiw	r26, 0x02	; 2
 3e0:	20 c0       	rjmp	.+64     	; 0x422 <showLine+0xe0>
			}
			else if(*str=='x'||*str=='X')
 3e2:	88 37       	cpi	r24, 0x78	; 120
 3e4:	11 f0       	breq	.+4      	; 0x3ea <showLine+0xa8>
 3e6:	88 35       	cpi	r24, 0x58	; 88
 3e8:	e1 f4       	brne	.+56     	; 0x422 <showLine+0xe0>
			{
				str++;
 3ea:	08 94       	sec
 3ec:	e1 1c       	adc	r14, r1
 3ee:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3f0:	42 e0       	ldi	r20, 0x02	; 2
 3f2:	c4 2e       	mov	r12, r20
 3f4:	d1 2c       	mov	r13, r1
 3f6:	ca 0e       	add	r12, r26
 3f8:	db 1e       	adc	r13, r27
 3fa:	6d 91       	ld	r22, X+
 3fc:	7c 91       	ld	r23, X
 3fe:	f7 01       	movw	r30, r14
 400:	40 81       	ld	r20, Z
 402:	40 53       	subi	r20, 0x30	; 48
 404:	c5 01       	movw	r24, r10
 406:	80 0f       	add	r24, r16
 408:	91 1d       	adc	r25, r1
 40a:	0e 94 20 01 	call	0x240	; 0x240 <hexToAscii>
				coordinate+=(*str-'0'-1);
 40e:	01 53       	subi	r16, 0x31	; 49
 410:	f7 01       	movw	r30, r14
 412:	80 81       	ld	r24, Z
 414:	08 0f       	add	r16, r24
 416:	d6 01       	movw	r26, r12
 418:	04 c0       	rjmp	.+8      	; 0x422 <showLine+0xe0>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 41a:	f5 01       	movw	r30, r10
 41c:	e0 0f       	add	r30, r16
 41e:	f1 1d       	adc	r31, r1
 420:	80 83       	st	Z, r24
		}
		str++;
 422:	08 94       	sec
 424:	e1 1c       	adc	r14, r1
 426:	f1 1c       	adc	r15, r1
		coordinate++;
 428:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 42a:	f7 01       	movw	r30, r14
 42c:	80 81       	ld	r24, Z
 42e:	88 23       	and	r24, r24
 430:	09 f0       	breq	.+2      	; 0x434 <showLine+0xf2>
 432:	9e cf       	rjmp	.-196    	; 0x370 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 434:	cf 91       	pop	r28
 436:	df 91       	pop	r29
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	bf 90       	pop	r11
 444:	af 90       	pop	r10
 446:	08 95       	ret

00000448 <main>:
#include <util/delay.h>
#include <ws_usart_port.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 448:	8f 92       	push	r8
 44a:	9f 92       	push	r9
 44c:	af 92       	push	r10
 44e:	bf 92       	push	r11
 450:	cf 92       	push	r12
 452:	df 92       	push	r13
 454:	ef 92       	push	r14
 456:	ff 92       	push	r15
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600
UCSRA=0x00;
 460:	1b b8       	out	0x0b, r1	; 11
UCSRB=0x18;
 462:	88 e1       	ldi	r24, 0x18	; 24
 464:	8a b9       	out	0x0a, r24	; 10
UCSRC=0x86;
 466:	86 e8       	ldi	r24, 0x86	; 134
 468:	80 bd       	out	0x20, r24	; 32
UBRRH=0x00;
 46a:	10 bc       	out	0x20, r1	; 32
UBRRL=0x2F;
 46c:	8f e2       	ldi	r24, 0x2F	; 47
 46e:	89 b9       	out	0x09, r24	; 9
	uint8_t tmp=0;
	usartInit();
	st7920LcdInit(); /*LCD初始化*/
 470:	0e 94 87 01 	call	0x30e	; 0x30e <st7920LcdInit>
	showLine(0,0,lcd_buffer,"MAX3232 Example");
 474:	00 d0       	rcall	.+0      	; 0x476 <__stack+0x17>
 476:	00 d0       	rcall	.+0      	; 0x478 <__stack+0x19>
 478:	00 d0       	rcall	.+0      	; 0x47a <__stack+0x1b>
 47a:	ed b7       	in	r30, 0x3d	; 61
 47c:	fe b7       	in	r31, 0x3e	; 62
 47e:	31 96       	adiw	r30, 0x01	; 1
 480:	ad b7       	in	r26, 0x3d	; 61
 482:	be b7       	in	r27, 0x3e	; 62
 484:	11 96       	adiw	r26, 0x01	; 1
 486:	1c 92       	st	X, r1
 488:	11 82       	std	Z+1, r1	; 0x01
 48a:	0c e8       	ldi	r16, 0x8C	; 140
 48c:	10 e0       	ldi	r17, 0x00	; 0
 48e:	13 83       	std	Z+3, r17	; 0x03
 490:	02 83       	std	Z+2, r16	; 0x02
 492:	80 e6       	ldi	r24, 0x60	; 96
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	95 83       	std	Z+5, r25	; 0x05
 498:	84 83       	std	Z+4, r24	; 0x04
 49a:	0e 94 a1 01 	call	0x342	; 0x342 <showLine>
	showLine(0,1,lcd_buffer,"USART TX<->RX");
 49e:	ed b7       	in	r30, 0x3d	; 61
 4a0:	fe b7       	in	r31, 0x3e	; 62
 4a2:	31 96       	adiw	r30, 0x01	; 1
 4a4:	ad b7       	in	r26, 0x3d	; 61
 4a6:	be b7       	in	r27, 0x3e	; 62
 4a8:	11 96       	adiw	r26, 0x01	; 1
 4aa:	1c 92       	st	X, r1
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	81 83       	std	Z+1, r24	; 0x01
 4b0:	13 83       	std	Z+3, r17	; 0x03
 4b2:	02 83       	std	Z+2, r16	; 0x02
 4b4:	80 e7       	ldi	r24, 0x70	; 112
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	95 83       	std	Z+5, r25	; 0x05
 4ba:	84 83       	std	Z+4, r24	; 0x04
 4bc:	0e 94 a1 01 	call	0x342	; 0x342 <showLine>
	showLine(0,2,lcd_buffer,"Data：");
 4c0:	ed b7       	in	r30, 0x3d	; 61
 4c2:	fe b7       	in	r31, 0x3e	; 62
 4c4:	31 96       	adiw	r30, 0x01	; 1
 4c6:	ad b7       	in	r26, 0x3d	; 61
 4c8:	be b7       	in	r27, 0x3e	; 62
 4ca:	11 96       	adiw	r26, 0x01	; 1
 4cc:	1c 92       	st	X, r1
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	81 83       	std	Z+1, r24	; 0x01
 4d2:	13 83       	std	Z+3, r17	; 0x03
 4d4:	02 83       	std	Z+2, r16	; 0x02
 4d6:	8e e7       	ldi	r24, 0x7E	; 126
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	95 83       	std	Z+5, r25	; 0x05
 4dc:	84 83       	std	Z+4, r24	; 0x04
 4de:	0e 94 a1 01 	call	0x342	; 0x342 <showLine>
	refreshLCD(lcd_buffer); /*刷新LCD*/
 4e2:	2d b7       	in	r18, 0x3d	; 61
 4e4:	3e b7       	in	r19, 0x3e	; 62
 4e6:	2a 5f       	subi	r18, 0xFA	; 250
 4e8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	3e bf       	out	0x3e, r19	; 62
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	2d bf       	out	0x3d, r18	; 61
 4f4:	c8 01       	movw	r24, r16
 4f6:	0e 94 95 00 	call	0x12a	; 0x12a <refreshLCD>
 4fa:	ff 24       	eor	r15, r15
 4fc:	a1 2c       	mov	r10, r1
 4fe:	f8 e4       	ldi	r31, 0x48	; 72
 500:	bf 2e       	mov	r11, r31
	while(1)
	{
		putUsart0(tmp);
		_delay_ms(10);
		showLine(6,2,lcd_buffer,"0x%x2",(uint8_t)getUsart0());
 502:	e6 e0       	ldi	r30, 0x06	; 6
 504:	8e 2e       	mov	r8, r30
 506:	72 e0       	ldi	r23, 0x02	; 2
 508:	97 2e       	mov	r9, r23
 50a:	e0 2e       	mov	r14, r16
 50c:	01 2f       	mov	r16, r17
 50e:	65 e8       	ldi	r22, 0x85	; 133
 510:	c6 2e       	mov	r12, r22
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	d6 2e       	mov	r13, r22
 516:	c8 eb       	ldi	r28, 0xB8	; 184
 518:	d0 e0       	ldi	r29, 0x00	; 0


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
    while(!(WS_UCSR0A & 0x20));
 51a:	5d 9b       	sbis	0x0b, 5	; 11
 51c:	fe cf       	rjmp	.-4      	; 0x51a <__stack+0xbb>
    WS_UDR0 = c;
 51e:	fc b8       	out	0x0c, r15	; 12
 520:	c5 01       	movw	r24, r10
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <__stack+0xc3>
}
//从RS232接收一个字节
uint16_t getUsart0(void)
{
    uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 526:	5f 9b       	sbis	0x0b, 7	; 11
 528:	06 c0       	rjmp	.+12     	; 0x536 <__stack+0xd7>
    status = WS_UCSR0A;
 52a:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
 52c:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 52e:	8c 71       	andi	r24, 0x1C	; 28
 530:	11 f4       	brne	.+4      	; 0x536 <__stack+0xd7>
    return res;
 532:	89 2f       	mov	r24, r25
 534:	02 c0       	rjmp	.+4      	; 0x53a <__stack+0xdb>
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	9f ef       	ldi	r25, 0xFF	; 255
 53a:	ad b7       	in	r26, 0x3d	; 61
 53c:	be b7       	in	r27, 0x3e	; 62
 53e:	18 97       	sbiw	r26, 0x08	; 8
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	be bf       	out	0x3e, r27	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	ad bf       	out	0x3d, r26	; 61
 54a:	ed b7       	in	r30, 0x3d	; 61
 54c:	fe b7       	in	r31, 0x3e	; 62
 54e:	31 96       	adiw	r30, 0x01	; 1
 550:	11 96       	adiw	r26, 0x01	; 1
 552:	8c 92       	st	X, r8
 554:	91 82       	std	Z+1, r9	; 0x01
 556:	e2 82       	std	Z+2, r14	; 0x02
 558:	03 83       	std	Z+3, r16	; 0x03
 55a:	d5 82       	std	Z+5, r13	; 0x05
 55c:	c4 82       	std	Z+4, r12	; 0x04
 55e:	86 83       	std	Z+6, r24	; 0x06
 560:	17 82       	std	Z+7, r1	; 0x07
 562:	0e 94 a1 01 	call	0x342	; 0x342 <showLine>
		refreshLCD(lcd_buffer); /*刷新LCD*/
 566:	2d b7       	in	r18, 0x3d	; 61
 568:	3e b7       	in	r19, 0x3e	; 62
 56a:	28 5f       	subi	r18, 0xF8	; 248
 56c:	3f 4f       	sbci	r19, 0xFF	; 255
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	3e bf       	out	0x3e, r19	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	2d bf       	out	0x3d, r18	; 61
 578:	8e 2d       	mov	r24, r14
 57a:	90 2f       	mov	r25, r16
 57c:	0e 94 95 00 	call	0x12a	; 0x12a <refreshLCD>
 580:	80 e1       	ldi	r24, 0x10	; 16
 582:	97 e2       	ldi	r25, 0x27	; 39
 584:	fe 01       	movw	r30, r28
 586:	31 97       	sbiw	r30, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <__stack+0x127>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 58a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 58c:	d9 f7       	brne	.-10     	; 0x584 <__stack+0x125>
		tmp++;
 58e:	f3 94       	inc	r15
 590:	c4 cf       	rjmp	.-120    	; 0x51a <__stack+0xbb>

00000592 <__udivmodhi4>:
 592:	aa 1b       	sub	r26, r26
 594:	bb 1b       	sub	r27, r27
 596:	51 e1       	ldi	r21, 0x11	; 17
 598:	07 c0       	rjmp	.+14     	; 0x5a8 <__udivmodhi4_ep>

0000059a <__udivmodhi4_loop>:
 59a:	aa 1f       	adc	r26, r26
 59c:	bb 1f       	adc	r27, r27
 59e:	a6 17       	cp	r26, r22
 5a0:	b7 07       	cpc	r27, r23
 5a2:	10 f0       	brcs	.+4      	; 0x5a8 <__udivmodhi4_ep>
 5a4:	a6 1b       	sub	r26, r22
 5a6:	b7 0b       	sbc	r27, r23

000005a8 <__udivmodhi4_ep>:
 5a8:	88 1f       	adc	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	5a 95       	dec	r21
 5ae:	a9 f7       	brne	.-22     	; 0x59a <__udivmodhi4_loop>
 5b0:	80 95       	com	r24
 5b2:	90 95       	com	r25
 5b4:	bc 01       	movw	r22, r24
 5b6:	cd 01       	movw	r24, r26
 5b8:	08 95       	ret

000005ba <memset>:
 5ba:	dc 01       	movw	r26, r24
 5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <memset+0x6>
 5be:	6d 93       	st	X+, r22
 5c0:	41 50       	subi	r20, 0x01	; 1
 5c2:	50 40       	sbci	r21, 0x00	; 0
 5c4:	e0 f7       	brcc	.-8      	; 0x5be <memset+0x4>
 5c6:	08 95       	ret

000005c8 <_exit>:
 5c8:	f8 94       	cli

000005ca <__stop_program>:
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <__stop_program>
