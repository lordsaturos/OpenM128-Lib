
DS18B20_LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  0000061a  000006ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800096  00800096  000006e4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f7  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000734  00000000  00000000  000007fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000202  00000000  00000000  00000f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ec  00000000  00000000  00001131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000206  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040f  00000000  00000000  00001c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00002025  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3d       	cpi	r26, 0xD6	; 214
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  8a:	0c 94 0b 03 	jmp	0x616	; 0x616 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <resetOnewire>:
#define _WS_ONEWIRE_H_
#include <util/delay.h>
//-----复位-----
void resetOnewire(void) 
{
	OUT_DQ();
  92:	ba 9a       	sbi	0x17, 2	; 23
    CLR_DQ();
  94:	c2 98       	cbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  96:	86 e6       	ldi	r24, 0x66	; 102
  98:	95 e0       	ldi	r25, 0x05	; 5
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <resetOnewire+0x8>
    _delay_us(750);
    SET_DQ();
  9e:	c2 9a       	sbi	0x18, 2	; 24
	IN_DQ(); 
  a0:	ba 98       	cbi	0x17, 2	; 23
	while(GET_DQ());
  a2:	b2 99       	sbic	0x16, 2	; 22
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <resetOnewire+0x10>
	while(!(GET_DQ()));
  a6:	b2 9b       	sbis	0x16, 2	; 22
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <resetOnewire+0x14>
	OUT_DQ();
  aa:	ba 9a       	sbi	0x17, 2	; 23
}
  ac:	08 95       	ret

000000ae <rOnewire>:

//-----读数据-----
uint8_t rOnewire(void)
{
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	20 e0       	ldi	r18, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  b2:	5c e0       	ldi	r21, 0x0C	; 12
    uint8_t data=0,i=0;
    for(i=0;i<8;i++)
    {
		data=data>>1;
  b4:	44 e2       	ldi	r20, 0x24	; 36
  b6:	33 e9       	ldi	r19, 0x93	; 147
  b8:	86 95       	lsr	r24
		OUT_DQ();
  ba:	ba 9a       	sbi	0x17, 2	; 23
        CLR_DQ();
  bc:	c2 98       	cbi	0x18, 2	; 24
  be:	95 2f       	mov	r25, r21
  c0:	9a 95       	dec	r25
  c2:	f1 f7       	brne	.-4      	; 0xc0 <rOnewire+0x12>
        _delay_us(5);
		SET_DQ();
  c4:	c2 9a       	sbi	0x18, 2	; 24
  c6:	94 2f       	mov	r25, r20
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <rOnewire+0x1a>
		_delay_us(15);
		IN_DQ();
  cc:	ba 98       	cbi	0x17, 2	; 23
        if(GET_DQ()) data|=0x80;
  ce:	b2 9b       	sbis	0x16, 2	; 22
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <rOnewire+0x28>
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	02 c0       	rjmp	.+4      	; 0xda <rOnewire+0x2c>
        else while(!(GET_DQ()));
  d6:	b2 9b       	sbis	0x16, 2	; 22
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <rOnewire+0x28>
  da:	93 2f       	mov	r25, r19
  dc:	9a 95       	dec	r25
  de:	f1 f7       	brne	.-4      	; 0xdc <rOnewire+0x2e>
		_delay_us(60);
		SET_DQ();
  e0:	c2 9a       	sbi	0x18, 2	; 24

//-----读数据-----
uint8_t rOnewire(void)
{
    uint8_t data=0,i=0;
    for(i=0;i<8;i++)
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	28 30       	cpi	r18, 0x08	; 8
  e6:	41 f7       	brne	.-48     	; 0xb8 <rOnewire+0xa>
        else while(!(GET_DQ()));
		_delay_us(60);
		SET_DQ();
	}
	return(data);
}
  e8:	08 95       	ret

000000ea <wOnewire>:
//-----写数据-----
void wOnewire(uint8_t data)
{
    uint8_t i=0;
	OUT_DQ();
  ea:	ba 9a       	sbi	0x17, 2	; 23
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	5d ed       	ldi	r21, 0xDD	; 221
    for(i=0;i<8;i++)
    {
        if(data&0x01)
  f0:	3c e0       	ldi	r19, 0x0C	; 12
  f2:	40 ed       	ldi	r20, 0xD0	; 208
  f4:	80 ff       	sbrs	r24, 0
  f6:	07 c0       	rjmp	.+14     	; 0x106 <wOnewire+0x1c>
		{
            CLR_DQ();
  f8:	c2 98       	cbi	0x18, 2	; 24
  fa:	93 2f       	mov	r25, r19
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <wOnewire+0x12>
            _delay_us(5);
            SET_DQ();
 100:	c2 9a       	sbi	0x18, 2	; 24
 102:	94 2f       	mov	r25, r20
 104:	06 c0       	rjmp	.+12     	; 0x112 <wOnewire+0x28>
            _delay_us(85); //65
		}
   	 	else
   	 	{
       		CLR_DQ(); 
 106:	c2 98       	cbi	0x18, 2	; 24
 108:	95 2f       	mov	r25, r21
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <wOnewire+0x20>
        	_delay_us(90);  //65
        	SET_DQ();
 10e:	c2 9a       	sbi	0x18, 2	; 24
 110:	93 2f       	mov	r25, r19
 112:	9a 95       	dec	r25
 114:	f1 f7       	brne	.-4      	; 0x112 <wOnewire+0x28>
//-----写数据-----
void wOnewire(uint8_t data)
{
    uint8_t i=0;
	OUT_DQ();
    for(i=0;i<8;i++)
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	28 30       	cpi	r18, 0x08	; 8
 11a:	11 f0       	breq	.+4      	; 0x120 <wOnewire+0x36>
       		CLR_DQ(); 
        	_delay_us(90);  //65
        	SET_DQ();
        	_delay_us(5);
    	}
    	data=data>>1;
 11c:	86 95       	lsr	r24
 11e:	ea cf       	rjmp	.-44     	; 0xf4 <wOnewire+0xa>
 120:	08 95       	ret

00000122 <convertDs18b20>:
#include <ws_onewire_port.h>

//-----DS18B20转换温度-----
void convertDs18b20(void) 
{ 
    resetOnewire(); 
 122:	0e 94 49 00 	call	0x92	; 0x92 <resetOnewire>
    wOnewire(0xcc); 
 126:	8c ec       	ldi	r24, 0xCC	; 204
 128:	0e 94 75 00 	call	0xea	; 0xea <wOnewire>
    wOnewire(0x44); 
 12c:	84 e4       	ldi	r24, 0x44	; 68
 12e:	0e 94 75 00 	call	0xea	; 0xea <wOnewire>
} 
 132:	08 95       	ret

00000134 <readTemp>:
//------------DS18BB0读温度----------
uint8_t readTemp(void) 
{ 
 134:	1f 93       	push	r17
	uint8_t temp1,temp2;
	convertDs18b20();
 136:	0e 94 91 00 	call	0x122	; 0x122 <convertDs18b20>
    resetOnewire(); 
 13a:	0e 94 49 00 	call	0x92	; 0x92 <resetOnewire>
    wOnewire(0xcc); 
 13e:	8c ec       	ldi	r24, 0xCC	; 204
 140:	0e 94 75 00 	call	0xea	; 0xea <wOnewire>
    wOnewire(0xbe); 	
 144:	8e eb       	ldi	r24, 0xBE	; 190
 146:	0e 94 75 00 	call	0xea	; 0xea <wOnewire>
    temp1=rOnewire(); 
 14a:	0e 94 57 00 	call	0xae	; 0xae <rOnewire>
 14e:	18 2f       	mov	r17, r24
    temp2=rOnewire(); 
 150:	0e 94 57 00 	call	0xae	; 0xae <rOnewire>
	temp2=temp2<<4;
 154:	82 95       	swap	r24
 156:	80 7f       	andi	r24, 0xF0	; 240
 158:	12 95       	swap	r17
 15a:	1f 70       	andi	r17, 0x0F	; 15
 15c:	18 2b       	or	r17, r24
	temp1=temp1>>4;
	temp2|=temp1;

	return (temp2&0x7F);
}
 15e:	81 2f       	mov	r24, r17
 160:	8f 77       	andi	r24, 0x7F	; 127
 162:	1f 91       	pop	r17
 164:	08 95       	ret

00000166 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 166:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 168:	77 9b       	sbis	0x0e, 7	; 14
 16a:	fe cf       	rjmp	.-4      	; 0x168 <spiSendChar+0x2>
}
 16c:	08 95       	ret

0000016e <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
 16e:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 170:	88 ef       	ldi	r24, 0xF8	; 248
 172:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 174:	77 9b       	sbis	0x0e, 7	; 14
 176:	fe cf       	rjmp	.-4      	; 0x174 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
 178:	89 2f       	mov	r24, r25
 17a:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 17c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 17e:	77 9b       	sbis	0x0e, 7	; 14
 180:	fe cf       	rjmp	.-4      	; 0x17e <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
 182:	92 95       	swap	r25
 184:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 186:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 188:	77 9b       	sbis	0x0e, 7	; 14
 18a:	fe cf       	rjmp	.-4      	; 0x188 <sendCodeST7920+0x1a>
 18c:	88 eb       	ldi	r24, 0xB8	; 184
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 192:	08 95       	ret

00000194 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 194:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 196:	8a ef       	ldi	r24, 0xFA	; 250
 198:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 19a:	77 9b       	sbis	0x0e, 7	; 14
 19c:	fe cf       	rjmp	.-4      	; 0x19a <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 19e:	89 2f       	mov	r24, r25
 1a0:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1a2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 1a4:	77 9b       	sbis	0x0e, 7	; 14
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 1a8:	92 95       	swap	r25
 1aa:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 1ac:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 1ae:	77 9b       	sbis	0x0e, 7	; 14
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <sendDataST7920+0x1a>
 1b2:	88 eb       	ldi	r24, 0xB8	; 184
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 1b8:	08 95       	ret

000001ba <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	6c 01       	movw	r12, r24
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 b7 00 	call	0x16e	; 0x16e <sendCodeST7920>
 1d2:	c0 e0       	ldi	r28, 0x00	; 0
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1d6:	f6 01       	movw	r30, r12
 1d8:	ec 0f       	add	r30, r28
 1da:	fd 1f       	adc	r31, r29
 1dc:	80 81       	ld	r24, Z
 1de:	0e 94 ca 00 	call	0x194	; 0x194 <sendDataST7920>
 1e2:	21 96       	adiw	r28, 0x01	; 1
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 1e4:	c0 31       	cpi	r28, 0x10	; 16
 1e6:	d1 05       	cpc	r29, r1
 1e8:	b1 f7       	brne	.-20     	; 0x1d6 <refreshLCD+0x1c>
 1ea:	76 01       	movw	r14, r12
 1ec:	e6 01       	movw	r28, r12
 1ee:	00 e2       	ldi	r16, 0x20	; 32
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 1f0:	88 a1       	ldd	r24, Y+32	; 0x20
 1f2:	0e 94 ca 00 	call	0x194	; 0x194 <sendDataST7920>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 1f6:	0f 5f       	subi	r16, 0xFF	; 255
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	00 33       	cpi	r16, 0x30	; 48
 1fc:	c9 f7       	brne	.-14     	; 0x1f0 <refreshLCD+0x36>
 1fe:	10 e1       	ldi	r17, 0x10	; 16
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 200:	f7 01       	movw	r30, r14
 202:	80 89       	ldd	r24, Z+16	; 0x10
 204:	0e 94 ca 00 	call	0x194	; 0x194 <sendDataST7920>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 208:	1f 5f       	subi	r17, 0xFF	; 255
 20a:	08 94       	sec
 20c:	e1 1c       	adc	r14, r1
 20e:	f1 1c       	adc	r15, r1
 210:	10 32       	cpi	r17, 0x20	; 32
 212:	b1 f7       	brne	.-20     	; 0x200 <refreshLCD+0x46>
 214:	e6 01       	movw	r28, r12
 216:	e0 96       	adiw	r28, 0x30	; 48
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 218:	89 91       	ld	r24, Y+
 21a:	0e 94 ca 00 	call	0x194	; 0x194 <sendDataST7920>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 21e:	0f 5f       	subi	r16, 0xFF	; 255
 220:	00 34       	cpi	r16, 0x40	; 64
 222:	d1 f7       	brne	.-12     	; 0x218 <refreshLCD+0x5e>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	df 90       	pop	r13
 232:	cf 90       	pop	r12
 234:	08 95       	ret

00000236 <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 236:	1f 93       	push	r17
 238:	fc 01       	movw	r30, r24
 23a:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 23c:	10 e3       	ldi	r17, 0x30	; 48
 23e:	43 c0       	rjmp	.+134    	; 0x2c6 <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 240:	43 30       	cpi	r20, 0x03	; 3
 242:	21 f1       	breq	.+72     	; 0x28c <decToAscii+0x56>
 244:	44 30       	cpi	r20, 0x04	; 4
 246:	28 f4       	brcc	.+10     	; 0x252 <decToAscii+0x1c>
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	b1 f1       	breq	.+108    	; 0x2b8 <decToAscii+0x82>
 24c:	42 30       	cpi	r20, 0x02	; 2
 24e:	c1 f5       	brne	.+112    	; 0x2c0 <decToAscii+0x8a>
 250:	28 c0       	rjmp	.+80     	; 0x2a2 <decToAscii+0x6c>
 252:	44 30       	cpi	r20, 0x04	; 4
 254:	69 f0       	breq	.+26     	; 0x270 <decToAscii+0x3a>
 256:	45 30       	cpi	r20, 0x05	; 5
 258:	99 f5       	brne	.+102    	; 0x2c0 <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 25a:	c9 01       	movw	r24, r18
 25c:	60 e1       	ldi	r22, 0x10	; 16
 25e:	77 e2       	ldi	r23, 0x27	; 39
 260:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__udivmodhi4>
 264:	60 5d       	subi	r22, 0xD0	; 208
 266:	60 83       	st	Z, r22
				dec%=10000;
 268:	c9 01       	movw	r24, r18
 26a:	60 e1       	ldi	r22, 0x10	; 16
 26c:	77 e2       	ldi	r23, 0x27	; 39
 26e:	0a c0       	rjmp	.+20     	; 0x284 <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 270:	c9 01       	movw	r24, r18
 272:	68 ee       	ldi	r22, 0xE8	; 232
 274:	73 e0       	ldi	r23, 0x03	; 3
 276:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__udivmodhi4>
 27a:	60 5d       	subi	r22, 0xD0	; 208
 27c:	60 83       	st	Z, r22
				dec%=1000;
 27e:	c9 01       	movw	r24, r18
 280:	68 ee       	ldi	r22, 0xE8	; 232
 282:	73 e0       	ldi	r23, 0x03	; 3
 284:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__udivmodhi4>
 288:	9c 01       	movw	r18, r24
 28a:	1b c0       	rjmp	.+54     	; 0x2c2 <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 28c:	c9 01       	movw	r24, r18
 28e:	64 e6       	ldi	r22, 0x64	; 100
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__udivmodhi4>
 296:	60 5d       	subi	r22, 0xD0	; 208
 298:	60 83       	st	Z, r22
				dec%=100;
 29a:	c9 01       	movw	r24, r18
 29c:	64 e6       	ldi	r22, 0x64	; 100
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	f1 cf       	rjmp	.-30     	; 0x284 <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 2a2:	c9 01       	movw	r24, r18
 2a4:	6a e0       	ldi	r22, 0x0A	; 10
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__udivmodhi4>
 2ac:	60 5d       	subi	r22, 0xD0	; 208
 2ae:	60 83       	st	Z, r22
				dec%=10;
 2b0:	c9 01       	movw	r24, r18
 2b2:	6a e0       	ldi	r22, 0x0A	; 10
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	e6 cf       	rjmp	.-52     	; 0x284 <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 2b8:	20 5d       	subi	r18, 0xD0	; 208
 2ba:	20 83       	st	Z, r18
 2bc:	20 53       	subi	r18, 0x30	; 48
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 2c0:	10 83       	st	Z, r17
		}
		width--;
 2c2:	41 50       	subi	r20, 0x01	; 1
		str++;
 2c4:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 2c6:	44 23       	and	r20, r20
 2c8:	09 f0       	breq	.+2      	; 0x2cc <decToAscii+0x96>
 2ca:	ba cf       	rjmp	.-140    	; 0x240 <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 2cc:	1f 91       	pop	r17
 2ce:	08 95       	ret

000002d0 <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 2e2:	eb 01       	movw	r28, r22
 2e4:	cd 2f       	mov	r28, r29
 2e6:	dd 27       	eor	r29, r29
 2e8:	c2 95       	swap	r28
 2ea:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 2ec:	27 e3       	ldi	r18, 0x37	; 55
 2ee:	d2 2e       	mov	r13, r18
 2f0:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 2f2:	90 e3       	ldi	r25, 0x30	; 48
 2f4:	e9 2e       	mov	r14, r25
 2f6:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 2f8:	a7 2f       	mov	r26, r23
 2fa:	bb 27       	eor	r27, r27
 2fc:	af 70       	andi	r26, 0x0F	; 15
 2fe:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 300:	17 e3       	ldi	r17, 0x37	; 55
 302:	f1 2e       	mov	r15, r17
 304:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 306:	0a 2f       	mov	r16, r26
 308:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 30a:	9b 01       	movw	r18, r22
 30c:	54 e0       	ldi	r21, 0x04	; 4
 30e:	36 95       	lsr	r19
 310:	27 95       	ror	r18
 312:	5a 95       	dec	r21
 314:	e1 f7       	brne	.-8      	; 0x30e <hexToAscii+0x3e>
 316:	2f 70       	andi	r18, 0x0F	; 15
 318:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 31a:	82 2f       	mov	r24, r18
 31c:	12 2f       	mov	r17, r18
 31e:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 320:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 322:	90 e3       	ldi	r25, 0x30	; 48
 324:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 326:	6f 70       	andi	r22, 0x0F	; 15
 328:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 32a:	56 2f       	mov	r21, r22
 32c:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 32e:	96 2f       	mov	r25, r22
 330:	99 5c       	subi	r25, 0xC9	; 201
 332:	2a c0       	rjmp	.+84     	; 0x388 <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 334:	42 30       	cpi	r20, 0x02	; 2
 336:	b9 f0       	breq	.+46     	; 0x366 <hexToAscii+0x96>
 338:	43 30       	cpi	r20, 0x03	; 3
 33a:	18 f4       	brcc	.+6      	; 0x342 <hexToAscii+0x72>
 33c:	41 30       	cpi	r20, 0x01	; 1
 33e:	09 f5       	brne	.+66     	; 0x382 <hexToAscii+0xb2>
 340:	19 c0       	rjmp	.+50     	; 0x374 <hexToAscii+0xa4>
 342:	43 30       	cpi	r20, 0x03	; 3
 344:	49 f0       	breq	.+18     	; 0x358 <hexToAscii+0x88>
 346:	44 30       	cpi	r20, 0x04	; 4
 348:	e1 f4       	brne	.+56     	; 0x382 <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 34a:	ca 30       	cpi	r28, 0x0A	; 10
 34c:	d1 05       	cpc	r29, r1
 34e:	10 f0       	brcs	.+4      	; 0x354 <hexToAscii+0x84>
 350:	d0 82       	st	Z, r13
 352:	18 c0       	rjmp	.+48     	; 0x384 <hexToAscii+0xb4>
				else *str = tmp+'0';
 354:	e0 82       	st	Z, r14
 356:	16 c0       	rjmp	.+44     	; 0x384 <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 358:	aa 30       	cpi	r26, 0x0A	; 10
 35a:	b1 05       	cpc	r27, r1
 35c:	10 f0       	brcs	.+4      	; 0x362 <hexToAscii+0x92>
 35e:	f0 82       	st	Z, r15
 360:	11 c0       	rjmp	.+34     	; 0x384 <hexToAscii+0xb4>
				else *str = tmp+'0';
 362:	00 83       	st	Z, r16
 364:	0f c0       	rjmp	.+30     	; 0x384 <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 366:	2a 30       	cpi	r18, 0x0A	; 10
 368:	31 05       	cpc	r19, r1
 36a:	10 f0       	brcs	.+4      	; 0x370 <hexToAscii+0xa0>
 36c:	10 83       	st	Z, r17
 36e:	0a c0       	rjmp	.+20     	; 0x384 <hexToAscii+0xb4>
				else *str = tmp+'0';
 370:	80 83       	st	Z, r24
 372:	08 c0       	rjmp	.+16     	; 0x384 <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 374:	6a 30       	cpi	r22, 0x0A	; 10
 376:	71 05       	cpc	r23, r1
 378:	10 f0       	brcs	.+4      	; 0x37e <hexToAscii+0xae>
 37a:	90 83       	st	Z, r25
 37c:	03 c0       	rjmp	.+6      	; 0x384 <hexToAscii+0xb4>
				else *str = tmp+'0';
 37e:	50 83       	st	Z, r21
 380:	01 c0       	rjmp	.+2      	; 0x384 <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 382:	c0 82       	st	Z, r12
		}
		width--;
 384:	41 50       	subi	r20, 0x01	; 1
		str++;
 386:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 388:	44 23       	and	r20, r20
 38a:	a1 f6       	brne	.-88     	; 0x334 <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	08 95       	ret

0000039e <st7920LcdInit>:

/*Hardware Environment：DVK501 && M16+ EX*/
#elif defined(_DVK501_M16_EX_)
void st7920LcdInit(void)
{
DDRB|=0xE0;
 39e:	87 b3       	in	r24, 0x17	; 23
 3a0:	80 6e       	ori	r24, 0xE0	; 224
 3a2:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 3a4:	80 e5       	ldi	r24, 0x50	; 80
 3a6:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	8e b9       	out	0x0e, r24	; 14
sendCodeST7920(0x0C);//整体显示
 3ac:	8c e0       	ldi	r24, 0x0C	; 12
 3ae:	0e 94 b7 00 	call	0x16e	; 0x16e <sendCodeST7920>
sendCodeST7920(0x01);//清屏
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 b7 00 	call	0x16e	; 0x16e <sendCodeST7920>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3b8:	86 e6       	ldi	r24, 0x66	; 102
 3ba:	9e e0       	ldi	r25, 0x0E	; 14
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <st7920LcdInit+0x1e>
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 3c0:	86 e9       	ldi	r24, 0x96	; 150
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	60 e2       	ldi	r22, 0x20	; 32
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	40 e4       	ldi	r20, 0x40	; 64
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	0e 94 04 03 	call	0x608	; 0x608 <memset>
}
 3d0:	08 95       	ret

000003d2 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 3d2:	af 92       	push	r10
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	df 93       	push	r29
 3e2:	cf 93       	push	r28
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	0d 85       	ldd	r16, Y+13	; 0x0d
 3ea:	ae 84       	ldd	r10, Y+14	; 0x0e
 3ec:	bf 84       	ldd	r11, Y+15	; 0x0f
 3ee:	e8 88       	ldd	r14, Y+16	; 0x10
 3f0:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 3f2:	02 95       	swap	r16
 3f4:	00 7f       	andi	r16, 0xF0	; 240
 3f6:	8c 85       	ldd	r24, Y+12	; 0x0c
 3f8:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 3fa:	de 01       	movw	r26, r28
 3fc:	52 96       	adiw	r26, 0x12	; 18
 3fe:	5d c0       	rjmp	.+186    	; 0x4ba <__stack+0x5b>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 400:	01 34       	cpi	r16, 0x41	; 65
 402:	08 f0       	brcs	.+2      	; 0x406 <showLine+0x34>
 404:	5f c0       	rjmp	.+190    	; 0x4c4 <__stack+0x65>

		if(*str == '\\')
 406:	8c 35       	cpi	r24, 0x5C	; 92
 408:	51 f4       	brne	.+20     	; 0x41e <showLine+0x4c>
		{
			str++;
 40a:	08 94       	sec
 40c:	e1 1c       	adc	r14, r1
 40e:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 410:	95 01       	movw	r18, r10
 412:	20 0f       	add	r18, r16
 414:	31 1d       	adc	r19, r1
 416:	f7 01       	movw	r30, r14
 418:	80 81       	ld	r24, Z
 41a:	f9 01       	movw	r30, r18
 41c:	49 c0       	rjmp	.+146    	; 0x4b0 <__stack+0x51>
		}
		else if(*str == '%')
 41e:	85 32       	cpi	r24, 0x25	; 37
 420:	09 f0       	breq	.+2      	; 0x424 <showLine+0x52>
 422:	43 c0       	rjmp	.+134    	; 0x4aa <__stack+0x4b>
		{
			str++;
 424:	08 94       	sec
 426:	e1 1c       	adc	r14, r1
 428:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 42a:	f7 01       	movw	r30, r14
 42c:	80 81       	ld	r24, Z
 42e:	84 36       	cpi	r24, 0x64	; 100
 430:	11 f0       	breq	.+4      	; 0x436 <showLine+0x64>
 432:	84 34       	cpi	r24, 0x44	; 68
 434:	99 f4       	brne	.+38     	; 0x45c <showLine+0x8a>
			{
				str++;
 436:	08 94       	sec
 438:	e1 1c       	adc	r14, r1
 43a:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 43c:	52 e0       	ldi	r21, 0x02	; 2
 43e:	c5 2e       	mov	r12, r21
 440:	d1 2c       	mov	r13, r1
 442:	ca 0e       	add	r12, r26
 444:	db 1e       	adc	r13, r27
 446:	6d 91       	ld	r22, X+
 448:	7c 91       	ld	r23, X
 44a:	f7 01       	movw	r30, r14
 44c:	40 81       	ld	r20, Z
 44e:	40 53       	subi	r20, 0x30	; 48
 450:	c5 01       	movw	r24, r10
 452:	80 0f       	add	r24, r16
 454:	91 1d       	adc	r25, r1
 456:	0e 94 1b 01 	call	0x236	; 0x236 <decToAscii>
 45a:	21 c0       	rjmp	.+66     	; 0x49e <__stack+0x3f>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 45c:	83 36       	cpi	r24, 0x63	; 99
 45e:	11 f0       	breq	.+4      	; 0x464 <__stack+0x5>
 460:	83 34       	cpi	r24, 0x43	; 67
 462:	39 f4       	brne	.+14     	; 0x472 <__stack+0x13>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 464:	f5 01       	movw	r30, r10
 466:	e0 0f       	add	r30, r16
 468:	f1 1d       	adc	r31, r1
 46a:	8c 91       	ld	r24, X
 46c:	80 83       	st	Z, r24
 46e:	12 96       	adiw	r26, 0x02	; 2
 470:	20 c0       	rjmp	.+64     	; 0x4b2 <__stack+0x53>
			}
			else if(*str=='x'||*str=='X')
 472:	88 37       	cpi	r24, 0x78	; 120
 474:	11 f0       	breq	.+4      	; 0x47a <__stack+0x1b>
 476:	88 35       	cpi	r24, 0x58	; 88
 478:	e1 f4       	brne	.+56     	; 0x4b2 <__stack+0x53>
			{
				str++;
 47a:	08 94       	sec
 47c:	e1 1c       	adc	r14, r1
 47e:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 480:	42 e0       	ldi	r20, 0x02	; 2
 482:	c4 2e       	mov	r12, r20
 484:	d1 2c       	mov	r13, r1
 486:	ca 0e       	add	r12, r26
 488:	db 1e       	adc	r13, r27
 48a:	6d 91       	ld	r22, X+
 48c:	7c 91       	ld	r23, X
 48e:	f7 01       	movw	r30, r14
 490:	40 81       	ld	r20, Z
 492:	40 53       	subi	r20, 0x30	; 48
 494:	c5 01       	movw	r24, r10
 496:	80 0f       	add	r24, r16
 498:	91 1d       	adc	r25, r1
 49a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <hexToAscii>
				coordinate+=(*str-'0'-1);
 49e:	01 53       	subi	r16, 0x31	; 49
 4a0:	f7 01       	movw	r30, r14
 4a2:	80 81       	ld	r24, Z
 4a4:	08 0f       	add	r16, r24
 4a6:	d6 01       	movw	r26, r12
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__stack+0x53>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 4aa:	f5 01       	movw	r30, r10
 4ac:	e0 0f       	add	r30, r16
 4ae:	f1 1d       	adc	r31, r1
 4b0:	80 83       	st	Z, r24
		}
		str++;
 4b2:	08 94       	sec
 4b4:	e1 1c       	adc	r14, r1
 4b6:	f1 1c       	adc	r15, r1
		coordinate++;
 4b8:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 4ba:	f7 01       	movw	r30, r14
 4bc:	80 81       	ld	r24, Z
 4be:	88 23       	and	r24, r24
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__stack+0x65>
 4c2:	9e cf       	rjmp	.-196    	; 0x400 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 4c4:	cf 91       	pop	r28
 4c6:	df 91       	pop	r29
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	df 90       	pop	r13
 4d0:	cf 90       	pop	r12
 4d2:	bf 90       	pop	r11
 4d4:	af 90       	pop	r10
 4d6:	08 95       	ret

000004d8 <main>:
#include <util/delay.h>
#include <ws_ds18b20.h>
#include <ws_lcd_ST7920_port.h>

int main(void)
{
 4d8:	bf 92       	push	r11
 4da:	cf 92       	push	r12
 4dc:	df 92       	push	r13
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
	st7920LcdInit(); /*LCD初始化*/
 4ea:	0e 94 cf 01 	call	0x39e	; 0x39e <st7920LcdInit>
	showLine(0,0,lcd_buffer,"DS18B20");
 4ee:	00 d0       	rcall	.+0      	; 0x4f0 <main+0x18>
 4f0:	00 d0       	rcall	.+0      	; 0x4f2 <main+0x1a>
 4f2:	00 d0       	rcall	.+0      	; 0x4f4 <main+0x1c>
 4f4:	ed b7       	in	r30, 0x3d	; 61
 4f6:	fe b7       	in	r31, 0x3e	; 62
 4f8:	31 96       	adiw	r30, 0x01	; 1
 4fa:	ad b7       	in	r26, 0x3d	; 61
 4fc:	be b7       	in	r27, 0x3e	; 62
 4fe:	11 96       	adiw	r26, 0x01	; 1
 500:	1c 92       	st	X, r1
 502:	11 82       	std	Z+1, r1	; 0x01
 504:	06 e9       	ldi	r16, 0x96	; 150
 506:	10 e0       	ldi	r17, 0x00	; 0
 508:	13 83       	std	Z+3, r17	; 0x03
 50a:	02 83       	std	Z+2, r16	; 0x02
 50c:	80 e6       	ldi	r24, 0x60	; 96
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	95 83       	std	Z+5, r25	; 0x05
 512:	84 83       	std	Z+4, r24	; 0x04
 514:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <showLine>
	showLine(0,1,lcd_buffer,"Temperature Measure Experiment");
 518:	ed b7       	in	r30, 0x3d	; 61
 51a:	fe b7       	in	r31, 0x3e	; 62
 51c:	31 96       	adiw	r30, 0x01	; 1
 51e:	ad b7       	in	r26, 0x3d	; 61
 520:	be b7       	in	r27, 0x3e	; 62
 522:	11 96       	adiw	r26, 0x01	; 1
 524:	1c 92       	st	X, r1
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	81 83       	std	Z+1, r24	; 0x01
 52a:	13 83       	std	Z+3, r17	; 0x03
 52c:	02 83       	std	Z+2, r16	; 0x02
 52e:	88 e6       	ldi	r24, 0x68	; 104
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	95 83       	std	Z+5, r25	; 0x05
 534:	84 83       	std	Z+4, r24	; 0x04
 536:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <showLine>
	showLine(0,3,lcd_buffer,"TEMP：  ℃");
 53a:	ed b7       	in	r30, 0x3d	; 61
 53c:	fe b7       	in	r31, 0x3e	; 62
 53e:	31 96       	adiw	r30, 0x01	; 1
 540:	ad b7       	in	r26, 0x3d	; 61
 542:	be b7       	in	r27, 0x3e	; 62
 544:	11 96       	adiw	r26, 0x01	; 1
 546:	1c 92       	st	X, r1
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	81 83       	std	Z+1, r24	; 0x01
 54c:	13 83       	std	Z+3, r17	; 0x03
 54e:	02 83       	std	Z+2, r16	; 0x02
 550:	87 e8       	ldi	r24, 0x87	; 135
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	95 83       	std	Z+5, r25	; 0x05
 556:	84 83       	std	Z+4, r24	; 0x04
 558:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <showLine>
 55c:	2d b7       	in	r18, 0x3d	; 61
 55e:	3e b7       	in	r19, 0x3e	; 62
 560:	2a 5f       	subi	r18, 0xFA	; 250
 562:	3f 4f       	sbci	r19, 0xFF	; 255
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	f8 94       	cli
 568:	3e bf       	out	0x3e, r19	; 62
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	2d bf       	out	0x3d, r18	; 61
	while(1)
	{
		showLine(6,3,lcd_buffer,"%d2",readTemp());
 56e:	e6 e0       	ldi	r30, 0x06	; 6
 570:	be 2e       	mov	r11, r30
 572:	73 e0       	ldi	r23, 0x03	; 3
 574:	e7 2e       	mov	r14, r23
 576:	f0 2e       	mov	r15, r16
 578:	01 2f       	mov	r16, r17
 57a:	62 e9       	ldi	r22, 0x92	; 146
 57c:	c6 2e       	mov	r12, r22
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	d6 2e       	mov	r13, r22
 582:	c8 eb       	ldi	r28, 0xB8	; 184
 584:	d0 e0       	ldi	r29, 0x00	; 0
 586:	0e 94 9a 00 	call	0x134	; 0x134 <readTemp>
 58a:	ad b7       	in	r26, 0x3d	; 61
 58c:	be b7       	in	r27, 0x3e	; 62
 58e:	18 97       	sbiw	r26, 0x08	; 8
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	be bf       	out	0x3e, r27	; 62
 596:	0f be       	out	0x3f, r0	; 63
 598:	ad bf       	out	0x3d, r26	; 61
 59a:	ed b7       	in	r30, 0x3d	; 61
 59c:	fe b7       	in	r31, 0x3e	; 62
 59e:	31 96       	adiw	r30, 0x01	; 1
 5a0:	11 96       	adiw	r26, 0x01	; 1
 5a2:	bc 92       	st	X, r11
 5a4:	e1 82       	std	Z+1, r14	; 0x01
 5a6:	f2 82       	std	Z+2, r15	; 0x02
 5a8:	03 83       	std	Z+3, r16	; 0x03
 5aa:	d5 82       	std	Z+5, r13	; 0x05
 5ac:	c4 82       	std	Z+4, r12	; 0x04
 5ae:	86 83       	std	Z+6, r24	; 0x06
 5b0:	17 82       	std	Z+7, r1	; 0x07
 5b2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <showLine>
		refreshLCD(lcd_buffer); /*刷新LCD*/
 5b6:	2d b7       	in	r18, 0x3d	; 61
 5b8:	3e b7       	in	r19, 0x3e	; 62
 5ba:	28 5f       	subi	r18, 0xF8	; 248
 5bc:	3f 4f       	sbci	r19, 0xFF	; 255
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	3e bf       	out	0x3e, r19	; 62
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	2d bf       	out	0x3d, r18	; 61
 5c8:	8f 2d       	mov	r24, r15
 5ca:	90 2f       	mov	r25, r16
 5cc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <refreshLCD>
 5d0:	80 e1       	ldi	r24, 0x10	; 16
 5d2:	97 e2       	ldi	r25, 0x27	; 39
 5d4:	fe 01       	movw	r30, r28
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <main+0xfe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5dc:	d9 f7       	brne	.-10     	; 0x5d4 <main+0xfc>
 5de:	d3 cf       	rjmp	.-90     	; 0x586 <main+0xae>

000005e0 <__udivmodhi4>:
 5e0:	aa 1b       	sub	r26, r26
 5e2:	bb 1b       	sub	r27, r27
 5e4:	51 e1       	ldi	r21, 0x11	; 17
 5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <__udivmodhi4_ep>

000005e8 <__udivmodhi4_loop>:
 5e8:	aa 1f       	adc	r26, r26
 5ea:	bb 1f       	adc	r27, r27
 5ec:	a6 17       	cp	r26, r22
 5ee:	b7 07       	cpc	r27, r23
 5f0:	10 f0       	brcs	.+4      	; 0x5f6 <__udivmodhi4_ep>
 5f2:	a6 1b       	sub	r26, r22
 5f4:	b7 0b       	sbc	r27, r23

000005f6 <__udivmodhi4_ep>:
 5f6:	88 1f       	adc	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	5a 95       	dec	r21
 5fc:	a9 f7       	brne	.-22     	; 0x5e8 <__udivmodhi4_loop>
 5fe:	80 95       	com	r24
 600:	90 95       	com	r25
 602:	bc 01       	movw	r22, r24
 604:	cd 01       	movw	r24, r26
 606:	08 95       	ret

00000608 <memset>:
 608:	dc 01       	movw	r26, r24
 60a:	01 c0       	rjmp	.+2      	; 0x60e <memset+0x6>
 60c:	6d 93       	st	X+, r22
 60e:	41 50       	subi	r20, 0x01	; 1
 610:	50 40       	sbci	r21, 0x00	; 0
 612:	e0 f7       	brcc	.-8      	; 0x60c <memset+0x4>
 614:	08 95       	ret

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
