
74HC165-74HC164.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000574  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000574  00000608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  008000a0  008000a0  00000648  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e8  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000055a  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021a  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b7  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  0000157c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cc  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e8  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3e       	cpi	r26, 0xE0	; 224
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 24 02 	call	0x448	; 0x448 <main>
  8a:	0c 94 b8 02 	jmp	0x570	; 0x570 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <hc164SetDat>:
#ifndef _WS_74HC164_H_
#define _WS_74HC164_H_
#include <stdint.h>

void hc164SetDat(uint8_t dat)
{
  92:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
	{
		HC164_CLR_CLK;
  94:	c0 98       	cbi	0x18, 0	; 24
		if(dat&0x80)
  96:	87 ff       	sbrs	r24, 7
  98:	02 c0       	rjmp	.+4      	; 0x9e <hc164SetDat+0xc>
			HC164_SET_DATA;
  9a:	c1 9a       	sbi	0x18, 1	; 24
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <hc164SetDat+0xe>
		else
			HC164_CLR_DATA;
  9e:	c1 98       	cbi	0x18, 1	; 24
		HC164_SET_CLK;
  a0:	c0 9a       	sbi	0x18, 0	; 24
#include <stdint.h>

void hc164SetDat(uint8_t dat)
{
	uint8_t i;
	for(i=0;i<8;i++)
  a2:	9f 5f       	subi	r25, 0xFF	; 255
  a4:	98 30       	cpi	r25, 0x08	; 8
  a6:	11 f0       	breq	.+4      	; 0xac <hc164SetDat+0x1a>
		if(dat&0x80)
			HC164_SET_DATA;
		else
			HC164_CLR_DATA;
		HC164_SET_CLK;
		dat = dat<<1;
  a8:	88 0f       	add	r24, r24
  aa:	f4 cf       	rjmp	.-24     	; 0x94 <hc164SetDat+0x2>
  ac:	08 95       	ret

000000ae <hc164Init>:
	}
}

void hc164Init(void)
{
	HC164_OUT_DATA;
  ae:	b9 9a       	sbi	0x17, 1	; 23
	HC164_OUT_CLK;
  b0:	b8 9a       	sbi	0x17, 0	; 23
}
  b2:	08 95       	ret

000000b4 <hc165GetDat>:
#include <stdint.h>

uint8_t hc165GetDat()
{
	uint8_t i,dat=0;
	HC165_CLR_PL;
  b4:	a9 98       	cbi	0x15, 1	; 21
	HC165_SET_PL;
  b6:	a9 9a       	sbi	0x15, 1	; 21
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0;i<8;i++)
	{
		HC165_CLR_TXD;
  bc:	91 98       	cbi	0x12, 1	; 18
		dat = dat<<1;
  be:	88 0f       	add	r24, r24
		if(HC165_GET_RXD)
  c0:	80 99       	sbic	0x10, 0	; 16
			dat |= 0x01;
  c2:	81 60       	ori	r24, 0x01	; 1
		HC165_SET_TXD;
  c4:	91 9a       	sbi	0x12, 1	; 18
uint8_t hc165GetDat()
{
	uint8_t i,dat=0;
	HC165_CLR_PL;
	HC165_SET_PL;
	for(i=0;i<8;i++)
  c6:	9f 5f       	subi	r25, 0xFF	; 255
  c8:	98 30       	cpi	r25, 0x08	; 8
  ca:	c1 f7       	brne	.-16     	; 0xbc <hc165GetDat+0x8>
		if(HC165_GET_RXD)
			dat |= 0x01;
		HC165_SET_TXD;
	}
	return dat;
}
  cc:	08 95       	ret

000000ce <hc165Init>:

void hc165Init(void)
{
	HC165_OUT_PL;
  ce:	a1 9a       	sbi	0x14, 1	; 20
	HC165_OUT_TXD;
  d0:	89 9a       	sbi	0x11, 1	; 17
	HC165_IN_RXD;
  d2:	88 98       	cbi	0x11, 0	; 17
}
  d4:	08 95       	ret

000000d6 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  d6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  d8:	77 9b       	sbis	0x0e, 7	; 14
  da:	fe cf       	rjmp	.-4      	; 0xd8 <spiSendChar+0x2>
}
  dc:	08 95       	ret

000000de <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
  de:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  e0:	88 ef       	ldi	r24, 0xF8	; 248
  e2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  e4:	77 9b       	sbis	0x0e, 7	; 14
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
  e8:	89 2f       	mov	r24, r25
  ea:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  ec:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  ee:	77 9b       	sbis	0x0e, 7	; 14
  f0:	fe cf       	rjmp	.-4      	; 0xee <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
  f2:	92 95       	swap	r25
  f4:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  f6:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
  f8:	77 9b       	sbis	0x0e, 7	; 14
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  fc:	88 eb       	ldi	r24, 0xB8	; 184
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
 102:	08 95       	ret

00000104 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
 104:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 10a:	77 9b       	sbis	0x0e, 7	; 14
 10c:	fe cf       	rjmp	.-4      	; 0x10a <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 10e:	89 2f       	mov	r24, r25
 110:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 112:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 114:	77 9b       	sbis	0x0e, 7	; 14
 116:	fe cf       	rjmp	.-4      	; 0x114 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 118:	92 95       	swap	r25
 11a:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 11c:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 11e:	77 9b       	sbis	0x0e, 7	; 14
 120:	fe cf       	rjmp	.-4      	; 0x11e <sendDataST7920+0x1a>
 122:	88 eb       	ldi	r24, 0xB8	; 184
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 128:	08 95       	ret

0000012a <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	6c 01       	movw	r12, r24
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 6f 00 	call	0xde	; 0xde <sendCodeST7920>
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d0 e0       	ldi	r29, 0x00	; 0
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 146:	f6 01       	movw	r30, r12
 148:	ec 0f       	add	r30, r28
 14a:	fd 1f       	adc	r31, r29
 14c:	80 81       	ld	r24, Z
 14e:	0e 94 82 00 	call	0x104	; 0x104 <sendDataST7920>
 152:	21 96       	adiw	r28, 0x01	; 1
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 154:	c0 31       	cpi	r28, 0x10	; 16
 156:	d1 05       	cpc	r29, r1
 158:	b1 f7       	brne	.-20     	; 0x146 <refreshLCD+0x1c>
 15a:	76 01       	movw	r14, r12
 15c:	e6 01       	movw	r28, r12
 15e:	00 e2       	ldi	r16, 0x20	; 32
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 160:	88 a1       	ldd	r24, Y+32	; 0x20
 162:	0e 94 82 00 	call	0x104	; 0x104 <sendDataST7920>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 166:	0f 5f       	subi	r16, 0xFF	; 255
 168:	21 96       	adiw	r28, 0x01	; 1
 16a:	00 33       	cpi	r16, 0x30	; 48
 16c:	c9 f7       	brne	.-14     	; 0x160 <refreshLCD+0x36>
 16e:	10 e1       	ldi	r17, 0x10	; 16
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 170:	f7 01       	movw	r30, r14
 172:	80 89       	ldd	r24, Z+16	; 0x10
 174:	0e 94 82 00 	call	0x104	; 0x104 <sendDataST7920>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 178:	1f 5f       	subi	r17, 0xFF	; 255
 17a:	08 94       	sec
 17c:	e1 1c       	adc	r14, r1
 17e:	f1 1c       	adc	r15, r1
 180:	10 32       	cpi	r17, 0x20	; 32
 182:	b1 f7       	brne	.-20     	; 0x170 <refreshLCD+0x46>
 184:	e6 01       	movw	r28, r12
 186:	e0 96       	adiw	r28, 0x30	; 48
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 188:	89 91       	ld	r24, Y+
 18a:	0e 94 82 00 	call	0x104	; 0x104 <sendDataST7920>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 18e:	0f 5f       	subi	r16, 0xFF	; 255
 190:	00 34       	cpi	r16, 0x40	; 64
 192:	d1 f7       	brne	.-12     	; 0x188 <refreshLCD+0x5e>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	08 95       	ret

000001a6 <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 1a6:	1f 93       	push	r17
 1a8:	fc 01       	movw	r30, r24
 1aa:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 1ac:	10 e3       	ldi	r17, 0x30	; 48
 1ae:	43 c0       	rjmp	.+134    	; 0x236 <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 1b0:	43 30       	cpi	r20, 0x03	; 3
 1b2:	21 f1       	breq	.+72     	; 0x1fc <decToAscii+0x56>
 1b4:	44 30       	cpi	r20, 0x04	; 4
 1b6:	28 f4       	brcc	.+10     	; 0x1c2 <decToAscii+0x1c>
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	b1 f1       	breq	.+108    	; 0x228 <decToAscii+0x82>
 1bc:	42 30       	cpi	r20, 0x02	; 2
 1be:	c1 f5       	brne	.+112    	; 0x230 <decToAscii+0x8a>
 1c0:	28 c0       	rjmp	.+80     	; 0x212 <decToAscii+0x6c>
 1c2:	44 30       	cpi	r20, 0x04	; 4
 1c4:	69 f0       	breq	.+26     	; 0x1e0 <decToAscii+0x3a>
 1c6:	45 30       	cpi	r20, 0x05	; 5
 1c8:	99 f5       	brne	.+102    	; 0x230 <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 1ca:	c9 01       	movw	r24, r18
 1cc:	60 e1       	ldi	r22, 0x10	; 16
 1ce:	77 e2       	ldi	r23, 0x27	; 39
 1d0:	0e 94 9d 02 	call	0x53a	; 0x53a <__udivmodhi4>
 1d4:	60 5d       	subi	r22, 0xD0	; 208
 1d6:	60 83       	st	Z, r22
				dec%=10000;
 1d8:	c9 01       	movw	r24, r18
 1da:	60 e1       	ldi	r22, 0x10	; 16
 1dc:	77 e2       	ldi	r23, 0x27	; 39
 1de:	0a c0       	rjmp	.+20     	; 0x1f4 <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 1e0:	c9 01       	movw	r24, r18
 1e2:	68 ee       	ldi	r22, 0xE8	; 232
 1e4:	73 e0       	ldi	r23, 0x03	; 3
 1e6:	0e 94 9d 02 	call	0x53a	; 0x53a <__udivmodhi4>
 1ea:	60 5d       	subi	r22, 0xD0	; 208
 1ec:	60 83       	st	Z, r22
				dec%=1000;
 1ee:	c9 01       	movw	r24, r18
 1f0:	68 ee       	ldi	r22, 0xE8	; 232
 1f2:	73 e0       	ldi	r23, 0x03	; 3
 1f4:	0e 94 9d 02 	call	0x53a	; 0x53a <__udivmodhi4>
 1f8:	9c 01       	movw	r18, r24
 1fa:	1b c0       	rjmp	.+54     	; 0x232 <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 1fc:	c9 01       	movw	r24, r18
 1fe:	64 e6       	ldi	r22, 0x64	; 100
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	0e 94 9d 02 	call	0x53a	; 0x53a <__udivmodhi4>
 206:	60 5d       	subi	r22, 0xD0	; 208
 208:	60 83       	st	Z, r22
				dec%=100;
 20a:	c9 01       	movw	r24, r18
 20c:	64 e6       	ldi	r22, 0x64	; 100
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	f1 cf       	rjmp	.-30     	; 0x1f4 <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 212:	c9 01       	movw	r24, r18
 214:	6a e0       	ldi	r22, 0x0A	; 10
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	0e 94 9d 02 	call	0x53a	; 0x53a <__udivmodhi4>
 21c:	60 5d       	subi	r22, 0xD0	; 208
 21e:	60 83       	st	Z, r22
				dec%=10;
 220:	c9 01       	movw	r24, r18
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	e6 cf       	rjmp	.-52     	; 0x1f4 <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 228:	20 5d       	subi	r18, 0xD0	; 208
 22a:	20 83       	st	Z, r18
 22c:	20 53       	subi	r18, 0x30	; 48
 22e:	01 c0       	rjmp	.+2      	; 0x232 <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 230:	10 83       	st	Z, r17
		}
		width--;
 232:	41 50       	subi	r20, 0x01	; 1
		str++;
 234:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 236:	44 23       	and	r20, r20
 238:	09 f0       	breq	.+2      	; 0x23c <decToAscii+0x96>
 23a:	ba cf       	rjmp	.-140    	; 0x1b0 <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 252:	eb 01       	movw	r28, r22
 254:	cd 2f       	mov	r28, r29
 256:	dd 27       	eor	r29, r29
 258:	c2 95       	swap	r28
 25a:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 25c:	27 e3       	ldi	r18, 0x37	; 55
 25e:	d2 2e       	mov	r13, r18
 260:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 262:	90 e3       	ldi	r25, 0x30	; 48
 264:	e9 2e       	mov	r14, r25
 266:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 268:	a7 2f       	mov	r26, r23
 26a:	bb 27       	eor	r27, r27
 26c:	af 70       	andi	r26, 0x0F	; 15
 26e:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 270:	17 e3       	ldi	r17, 0x37	; 55
 272:	f1 2e       	mov	r15, r17
 274:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 276:	0a 2f       	mov	r16, r26
 278:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 27a:	9b 01       	movw	r18, r22
 27c:	54 e0       	ldi	r21, 0x04	; 4
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	5a 95       	dec	r21
 284:	e1 f7       	brne	.-8      	; 0x27e <hexToAscii+0x3e>
 286:	2f 70       	andi	r18, 0x0F	; 15
 288:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 28a:	82 2f       	mov	r24, r18
 28c:	12 2f       	mov	r17, r18
 28e:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 290:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 292:	90 e3       	ldi	r25, 0x30	; 48
 294:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 296:	6f 70       	andi	r22, 0x0F	; 15
 298:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 29a:	56 2f       	mov	r21, r22
 29c:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 29e:	96 2f       	mov	r25, r22
 2a0:	99 5c       	subi	r25, 0xC9	; 201
 2a2:	2a c0       	rjmp	.+84     	; 0x2f8 <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 2a4:	42 30       	cpi	r20, 0x02	; 2
 2a6:	b9 f0       	breq	.+46     	; 0x2d6 <hexToAscii+0x96>
 2a8:	43 30       	cpi	r20, 0x03	; 3
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <hexToAscii+0x72>
 2ac:	41 30       	cpi	r20, 0x01	; 1
 2ae:	09 f5       	brne	.+66     	; 0x2f2 <hexToAscii+0xb2>
 2b0:	19 c0       	rjmp	.+50     	; 0x2e4 <hexToAscii+0xa4>
 2b2:	43 30       	cpi	r20, 0x03	; 3
 2b4:	49 f0       	breq	.+18     	; 0x2c8 <hexToAscii+0x88>
 2b6:	44 30       	cpi	r20, 0x04	; 4
 2b8:	e1 f4       	brne	.+56     	; 0x2f2 <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 2ba:	ca 30       	cpi	r28, 0x0A	; 10
 2bc:	d1 05       	cpc	r29, r1
 2be:	10 f0       	brcs	.+4      	; 0x2c4 <hexToAscii+0x84>
 2c0:	d0 82       	st	Z, r13
 2c2:	18 c0       	rjmp	.+48     	; 0x2f4 <hexToAscii+0xb4>
				else *str = tmp+'0';
 2c4:	e0 82       	st	Z, r14
 2c6:	16 c0       	rjmp	.+44     	; 0x2f4 <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2c8:	aa 30       	cpi	r26, 0x0A	; 10
 2ca:	b1 05       	cpc	r27, r1
 2cc:	10 f0       	brcs	.+4      	; 0x2d2 <hexToAscii+0x92>
 2ce:	f0 82       	st	Z, r15
 2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <hexToAscii+0xb4>
				else *str = tmp+'0';
 2d2:	00 83       	st	Z, r16
 2d4:	0f c0       	rjmp	.+30     	; 0x2f4 <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2d6:	2a 30       	cpi	r18, 0x0A	; 10
 2d8:	31 05       	cpc	r19, r1
 2da:	10 f0       	brcs	.+4      	; 0x2e0 <hexToAscii+0xa0>
 2dc:	10 83       	st	Z, r17
 2de:	0a c0       	rjmp	.+20     	; 0x2f4 <hexToAscii+0xb4>
				else *str = tmp+'0';
 2e0:	80 83       	st	Z, r24
 2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2e4:	6a 30       	cpi	r22, 0x0A	; 10
 2e6:	71 05       	cpc	r23, r1
 2e8:	10 f0       	brcs	.+4      	; 0x2ee <hexToAscii+0xae>
 2ea:	90 83       	st	Z, r25
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <hexToAscii+0xb4>
				else *str = tmp+'0';
 2ee:	50 83       	st	Z, r21
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 2f2:	c0 82       	st	Z, r12
		}
		width--;
 2f4:	41 50       	subi	r20, 0x01	; 1
		str++;
 2f6:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 2f8:	44 23       	and	r20, r20
 2fa:	a1 f6       	brne	.-88     	; 0x2a4 <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	df 90       	pop	r13
 30a:	cf 90       	pop	r12
 30c:	08 95       	ret

0000030e <st7920LcdInit>:

/*Hardware Environment：DVK501 && M16+ EX*/
#elif defined(_DVK501_M16_EX_)
void st7920LcdInit(void)
{
DDRB|=0xE0;
 30e:	87 b3       	in	r24, 0x17	; 23
 310:	80 6e       	ori	r24, 0xE0	; 224
 312:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 314:	80 e5       	ldi	r24, 0x50	; 80
 316:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	8e b9       	out	0x0e, r24	; 14
sendCodeST7920(0x0C);//整体显示
 31c:	8c e0       	ldi	r24, 0x0C	; 12
 31e:	0e 94 6f 00 	call	0xde	; 0xde <sendCodeST7920>
sendCodeST7920(0x01);//清屏
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 6f 00 	call	0xde	; 0xde <sendCodeST7920>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 328:	86 e6       	ldi	r24, 0x66	; 102
 32a:	9e e0       	ldi	r25, 0x0E	; 14
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <st7920LcdInit+0x1e>
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 330:	80 ea       	ldi	r24, 0xA0	; 160
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	60 e2       	ldi	r22, 0x20	; 32
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	40 e4       	ldi	r20, 0x40	; 64
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	0e 94 b1 02 	call	0x562	; 0x562 <memset>
}
 340:	08 95       	ret

00000342 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 342:	af 92       	push	r10
 344:	bf 92       	push	r11
 346:	cf 92       	push	r12
 348:	df 92       	push	r13
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	df 93       	push	r29
 352:	cf 93       	push	r28
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	0d 85       	ldd	r16, Y+13	; 0x0d
 35a:	ae 84       	ldd	r10, Y+14	; 0x0e
 35c:	bf 84       	ldd	r11, Y+15	; 0x0f
 35e:	e8 88       	ldd	r14, Y+16	; 0x10
 360:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 362:	02 95       	swap	r16
 364:	00 7f       	andi	r16, 0xF0	; 240
 366:	8c 85       	ldd	r24, Y+12	; 0x0c
 368:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 36a:	de 01       	movw	r26, r28
 36c:	52 96       	adiw	r26, 0x12	; 18
 36e:	5d c0       	rjmp	.+186    	; 0x42a <showLine+0xe8>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 370:	01 34       	cpi	r16, 0x41	; 65
 372:	08 f0       	brcs	.+2      	; 0x376 <showLine+0x34>
 374:	5f c0       	rjmp	.+190    	; 0x434 <showLine+0xf2>

		if(*str == '\\')
 376:	8c 35       	cpi	r24, 0x5C	; 92
 378:	51 f4       	brne	.+20     	; 0x38e <showLine+0x4c>
		{
			str++;
 37a:	08 94       	sec
 37c:	e1 1c       	adc	r14, r1
 37e:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 380:	95 01       	movw	r18, r10
 382:	20 0f       	add	r18, r16
 384:	31 1d       	adc	r19, r1
 386:	f7 01       	movw	r30, r14
 388:	80 81       	ld	r24, Z
 38a:	f9 01       	movw	r30, r18
 38c:	49 c0       	rjmp	.+146    	; 0x420 <showLine+0xde>
		}
		else if(*str == '%')
 38e:	85 32       	cpi	r24, 0x25	; 37
 390:	09 f0       	breq	.+2      	; 0x394 <showLine+0x52>
 392:	43 c0       	rjmp	.+134    	; 0x41a <showLine+0xd8>
		{
			str++;
 394:	08 94       	sec
 396:	e1 1c       	adc	r14, r1
 398:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 39a:	f7 01       	movw	r30, r14
 39c:	80 81       	ld	r24, Z
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <showLine+0x64>
 3a2:	84 34       	cpi	r24, 0x44	; 68
 3a4:	99 f4       	brne	.+38     	; 0x3cc <showLine+0x8a>
			{
				str++;
 3a6:	08 94       	sec
 3a8:	e1 1c       	adc	r14, r1
 3aa:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3ac:	52 e0       	ldi	r21, 0x02	; 2
 3ae:	c5 2e       	mov	r12, r21
 3b0:	d1 2c       	mov	r13, r1
 3b2:	ca 0e       	add	r12, r26
 3b4:	db 1e       	adc	r13, r27
 3b6:	6d 91       	ld	r22, X+
 3b8:	7c 91       	ld	r23, X
 3ba:	f7 01       	movw	r30, r14
 3bc:	40 81       	ld	r20, Z
 3be:	40 53       	subi	r20, 0x30	; 48
 3c0:	c5 01       	movw	r24, r10
 3c2:	80 0f       	add	r24, r16
 3c4:	91 1d       	adc	r25, r1
 3c6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <decToAscii>
 3ca:	21 c0       	rjmp	.+66     	; 0x40e <showLine+0xcc>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 3cc:	83 36       	cpi	r24, 0x63	; 99
 3ce:	11 f0       	breq	.+4      	; 0x3d4 <showLine+0x92>
 3d0:	83 34       	cpi	r24, 0x43	; 67
 3d2:	39 f4       	brne	.+14     	; 0x3e2 <showLine+0xa0>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 3d4:	f5 01       	movw	r30, r10
 3d6:	e0 0f       	add	r30, r16
 3d8:	f1 1d       	adc	r31, r1
 3da:	8c 91       	ld	r24, X
 3dc:	80 83       	st	Z, r24
 3de:	12 96       	adiw	r26, 0x02	; 2
 3e0:	20 c0       	rjmp	.+64     	; 0x422 <showLine+0xe0>
			}
			else if(*str=='x'||*str=='X')
 3e2:	88 37       	cpi	r24, 0x78	; 120
 3e4:	11 f0       	breq	.+4      	; 0x3ea <showLine+0xa8>
 3e6:	88 35       	cpi	r24, 0x58	; 88
 3e8:	e1 f4       	brne	.+56     	; 0x422 <showLine+0xe0>
			{
				str++;
 3ea:	08 94       	sec
 3ec:	e1 1c       	adc	r14, r1
 3ee:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3f0:	42 e0       	ldi	r20, 0x02	; 2
 3f2:	c4 2e       	mov	r12, r20
 3f4:	d1 2c       	mov	r13, r1
 3f6:	ca 0e       	add	r12, r26
 3f8:	db 1e       	adc	r13, r27
 3fa:	6d 91       	ld	r22, X+
 3fc:	7c 91       	ld	r23, X
 3fe:	f7 01       	movw	r30, r14
 400:	40 81       	ld	r20, Z
 402:	40 53       	subi	r20, 0x30	; 48
 404:	c5 01       	movw	r24, r10
 406:	80 0f       	add	r24, r16
 408:	91 1d       	adc	r25, r1
 40a:	0e 94 20 01 	call	0x240	; 0x240 <hexToAscii>
				coordinate+=(*str-'0'-1);
 40e:	01 53       	subi	r16, 0x31	; 49
 410:	f7 01       	movw	r30, r14
 412:	80 81       	ld	r24, Z
 414:	08 0f       	add	r16, r24
 416:	d6 01       	movw	r26, r12
 418:	04 c0       	rjmp	.+8      	; 0x422 <showLine+0xe0>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 41a:	f5 01       	movw	r30, r10
 41c:	e0 0f       	add	r30, r16
 41e:	f1 1d       	adc	r31, r1
 420:	80 83       	st	Z, r24
		}
		str++;
 422:	08 94       	sec
 424:	e1 1c       	adc	r14, r1
 426:	f1 1c       	adc	r15, r1
		coordinate++;
 428:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 42a:	f7 01       	movw	r30, r14
 42c:	80 81       	ld	r24, Z
 42e:	88 23       	and	r24, r24
 430:	09 f0       	breq	.+2      	; 0x434 <showLine+0xf2>
 432:	9e cf       	rjmp	.-196    	; 0x370 <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 434:	cf 91       	pop	r28
 436:	df 91       	pop	r29
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	bf 90       	pop	r11
 444:	af 90       	pop	r10
 446:	08 95       	ret

00000448 <main>:
#include <ws_74hc165_port.h>
#include <ws_lcd_ST7920_port.h>
#include <util/delay.h>

int main(void)
{
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
	}
}

void hc164Init(void)
{
	HC164_OUT_DATA;
 450:	b9 9a       	sbi	0x17, 1	; 23
	HC164_OUT_CLK;
 452:	b8 9a       	sbi	0x17, 0	; 23
	uint8_t tmp = 10;

	hc164Init();	 //74HC164初始化
	hc165Init();	 //74HC165初始化
 454:	0e 94 67 00 	call	0xce	; 0xce <hc165Init>
	st7920LcdInit(); //LCD初始化
 458:	0e 94 87 01 	call	0x30e	; 0x30e <st7920LcdInit>

	hc164SetDat(tmp);
 45c:	8a e0       	ldi	r24, 0x0A	; 10
 45e:	0e 94 49 00 	call	0x92	; 0x92 <hc164SetDat>
	tmp = hc165GetDat();
 462:	0e 94 5a 00 	call	0xb4	; 0xb4 <hc165GetDat>
 466:	e8 2e       	mov	r14, r24

	showLine(0,0,lcd_buffer,"74HC164--74HC165");
 468:	00 d0       	rcall	.+0      	; 0x46a <__stack+0xb>
 46a:	00 d0       	rcall	.+0      	; 0x46c <__stack+0xd>
 46c:	00 d0       	rcall	.+0      	; 0x46e <__stack+0xf>
 46e:	ed b7       	in	r30, 0x3d	; 61
 470:	fe b7       	in	r31, 0x3e	; 62
 472:	31 96       	adiw	r30, 0x01	; 1
 474:	ad b7       	in	r26, 0x3d	; 61
 476:	be b7       	in	r27, 0x3e	; 62
 478:	11 96       	adiw	r26, 0x01	; 1
 47a:	1c 92       	st	X, r1
 47c:	11 82       	std	Z+1, r1	; 0x01
 47e:	00 ea       	ldi	r16, 0xA0	; 160
 480:	10 e0       	ldi	r17, 0x00	; 0
 482:	13 83       	std	Z+3, r17	; 0x03
 484:	02 83       	std	Z+2, r16	; 0x02
 486:	80 e6       	ldi	r24, 0x60	; 96
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	95 83       	std	Z+5, r25	; 0x05
 48c:	84 83       	std	Z+4, r24	; 0x04
 48e:	0e 94 a1 01 	call	0x342	; 0x342 <showLine>
	showLine(0,1,lcd_buffer,"Serial→Parallel");
 492:	ed b7       	in	r30, 0x3d	; 61
 494:	fe b7       	in	r31, 0x3e	; 62
 496:	31 96       	adiw	r30, 0x01	; 1
 498:	ad b7       	in	r26, 0x3d	; 61
 49a:	be b7       	in	r27, 0x3e	; 62
 49c:	11 96       	adiw	r26, 0x01	; 1
 49e:	1c 92       	st	X, r1
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	81 83       	std	Z+1, r24	; 0x01
 4a4:	13 83       	std	Z+3, r17	; 0x03
 4a6:	02 83       	std	Z+2, r16	; 0x02
 4a8:	81 e7       	ldi	r24, 0x71	; 113
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	95 83       	std	Z+5, r25	; 0x05
 4ae:	84 83       	std	Z+4, r24	; 0x04
 4b0:	0e 94 a1 01 	call	0x342	; 0x342 <showLine>
	showLine(0,2,lcd_buffer,"Parallel→Serial");
 4b4:	ed b7       	in	r30, 0x3d	; 61
 4b6:	fe b7       	in	r31, 0x3e	; 62
 4b8:	31 96       	adiw	r30, 0x01	; 1
 4ba:	ad b7       	in	r26, 0x3d	; 61
 4bc:	be b7       	in	r27, 0x3e	; 62
 4be:	11 96       	adiw	r26, 0x01	; 1
 4c0:	1c 92       	st	X, r1
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	81 83       	std	Z+1, r24	; 0x01
 4c6:	13 83       	std	Z+3, r17	; 0x03
 4c8:	02 83       	std	Z+2, r16	; 0x02
 4ca:	82 e8       	ldi	r24, 0x82	; 130
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	95 83       	std	Z+5, r25	; 0x05
 4d0:	84 83       	std	Z+4, r24	; 0x04
 4d2:	0e 94 a1 01 	call	0x342	; 0x342 <showLine>
	showLine(0,3,lcd_buffer,"Data: ");
 4d6:	ed b7       	in	r30, 0x3d	; 61
 4d8:	fe b7       	in	r31, 0x3e	; 62
 4da:	31 96       	adiw	r30, 0x01	; 1
 4dc:	ad b7       	in	r26, 0x3d	; 61
 4de:	be b7       	in	r27, 0x3e	; 62
 4e0:	11 96       	adiw	r26, 0x01	; 1
 4e2:	1c 92       	st	X, r1
 4e4:	63 e0       	ldi	r22, 0x03	; 3
 4e6:	f6 2e       	mov	r15, r22
 4e8:	f1 82       	std	Z+1, r15	; 0x01
 4ea:	13 83       	std	Z+3, r17	; 0x03
 4ec:	02 83       	std	Z+2, r16	; 0x02
 4ee:	83 e9       	ldi	r24, 0x93	; 147
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	95 83       	std	Z+5, r25	; 0x05
 4f4:	84 83       	std	Z+4, r24	; 0x04
 4f6:	0e 94 a1 01 	call	0x342	; 0x342 <showLine>
	showLine(5,3,lcd_buffer,"0x%x2",tmp);
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <__stack+0x9d>
 4fc:	ed b7       	in	r30, 0x3d	; 61
 4fe:	fe b7       	in	r31, 0x3e	; 62
 500:	31 96       	adiw	r30, 0x01	; 1
 502:	85 e0       	ldi	r24, 0x05	; 5
 504:	ad b7       	in	r26, 0x3d	; 61
 506:	be b7       	in	r27, 0x3e	; 62
 508:	11 96       	adiw	r26, 0x01	; 1
 50a:	8c 93       	st	X, r24
 50c:	f1 82       	std	Z+1, r15	; 0x01
 50e:	13 83       	std	Z+3, r17	; 0x03
 510:	02 83       	std	Z+2, r16	; 0x02
 512:	8a e9       	ldi	r24, 0x9A	; 154
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	95 83       	std	Z+5, r25	; 0x05
 518:	84 83       	std	Z+4, r24	; 0x04
 51a:	e6 82       	std	Z+6, r14	; 0x06
 51c:	17 82       	std	Z+7, r1	; 0x07
 51e:	0e 94 a1 01 	call	0x342	; 0x342 <showLine>
	refreshLCD(lcd_buffer); //刷新LCD
 522:	8d b7       	in	r24, 0x3d	; 61
 524:	9e b7       	in	r25, 0x3e	; 62
 526:	08 96       	adiw	r24, 0x08	; 8
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	9e bf       	out	0x3e, r25	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	8d bf       	out	0x3d, r24	; 61
 532:	c8 01       	movw	r24, r16
 534:	0e 94 95 00 	call	0x12a	; 0x12a <refreshLCD>
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stack+0xd9>

0000053a <__udivmodhi4>:
 53a:	aa 1b       	sub	r26, r26
 53c:	bb 1b       	sub	r27, r27
 53e:	51 e1       	ldi	r21, 0x11	; 17
 540:	07 c0       	rjmp	.+14     	; 0x550 <__udivmodhi4_ep>

00000542 <__udivmodhi4_loop>:
 542:	aa 1f       	adc	r26, r26
 544:	bb 1f       	adc	r27, r27
 546:	a6 17       	cp	r26, r22
 548:	b7 07       	cpc	r27, r23
 54a:	10 f0       	brcs	.+4      	; 0x550 <__udivmodhi4_ep>
 54c:	a6 1b       	sub	r26, r22
 54e:	b7 0b       	sbc	r27, r23

00000550 <__udivmodhi4_ep>:
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	5a 95       	dec	r21
 556:	a9 f7       	brne	.-22     	; 0x542 <__udivmodhi4_loop>
 558:	80 95       	com	r24
 55a:	90 95       	com	r25
 55c:	bc 01       	movw	r22, r24
 55e:	cd 01       	movw	r24, r26
 560:	08 95       	ret

00000562 <memset>:
 562:	dc 01       	movw	r26, r24
 564:	01 c0       	rjmp	.+2      	; 0x568 <memset+0x6>
 566:	6d 93       	st	X+, r22
 568:	41 50       	subi	r20, 0x01	; 1
 56a:	50 40       	sbci	r21, 0x00	; 0
 56c:	e0 f7       	brcc	.-8      	; 0x566 <memset+0x4>
 56e:	08 95       	ret

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>
