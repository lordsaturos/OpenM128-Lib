
LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  0080007e  0080007e  0000055e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ac  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a6  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a1  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000579  00000000  00000000  00000c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ab  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e8  00000000  00000000  00001437  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3b       	cpi	r26, 0xBE	; 190
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 02 02 	call	0x404	; 0x404 <main>
  8a:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  92:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  94:	77 9b       	sbis	0x0e, 7	; 14
  96:	fe cf       	rjmp	.-4      	; 0x94 <spiSendChar+0x2>
}
  98:	08 95       	ret

0000009a <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
  9a:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  9c:	88 ef       	ldi	r24, 0xF8	; 248
  9e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  a0:	77 9b       	sbis	0x0e, 7	; 14
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
  a4:	89 2f       	mov	r24, r25
  a6:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  a8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  aa:	77 9b       	sbis	0x0e, 7	; 14
  ac:	fe cf       	rjmp	.-4      	; 0xaa <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
  ae:	92 95       	swap	r25
  b0:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  b2:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
  b4:	77 9b       	sbis	0x0e, 7	; 14
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  b8:	88 eb       	ldi	r24, 0xB8	; 184
  ba:	8a 95       	dec	r24
  bc:	f1 f7       	brne	.-4      	; 0xba <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
  be:	08 95       	ret

000000c0 <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
  c0:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  c2:	8a ef       	ldi	r24, 0xFA	; 250
  c4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  c6:	77 9b       	sbis	0x0e, 7	; 14
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
  ca:	89 2f       	mov	r24, r25
  cc:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  ce:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
  d4:	92 95       	swap	r25
  d6:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  d8:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
  da:	77 9b       	sbis	0x0e, 7	; 14
  dc:	fe cf       	rjmp	.-4      	; 0xda <sendDataST7920+0x1a>
  de:	88 eb       	ldi	r24, 0xB8	; 184
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
  e4:	08 95       	ret

000000e6 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
  e6:	cf 92       	push	r12
  e8:	df 92       	push	r13
  ea:	ef 92       	push	r14
  ec:	ff 92       	push	r15
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	6c 01       	movw	r12, r24
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 4d 00 	call	0x9a	; 0x9a <sendCodeST7920>
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 102:	f6 01       	movw	r30, r12
 104:	ec 0f       	add	r30, r28
 106:	fd 1f       	adc	r31, r29
 108:	80 81       	ld	r24, Z
 10a:	0e 94 60 00 	call	0xc0	; 0xc0 <sendDataST7920>
 10e:	21 96       	adiw	r28, 0x01	; 1
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 110:	c0 31       	cpi	r28, 0x10	; 16
 112:	d1 05       	cpc	r29, r1
 114:	b1 f7       	brne	.-20     	; 0x102 <refreshLCD+0x1c>
 116:	76 01       	movw	r14, r12
 118:	e6 01       	movw	r28, r12
 11a:	00 e2       	ldi	r16, 0x20	; 32
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 11c:	88 a1       	ldd	r24, Y+32	; 0x20
 11e:	0e 94 60 00 	call	0xc0	; 0xc0 <sendDataST7920>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 122:	0f 5f       	subi	r16, 0xFF	; 255
 124:	21 96       	adiw	r28, 0x01	; 1
 126:	00 33       	cpi	r16, 0x30	; 48
 128:	c9 f7       	brne	.-14     	; 0x11c <refreshLCD+0x36>
 12a:	10 e1       	ldi	r17, 0x10	; 16
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 12c:	f7 01       	movw	r30, r14
 12e:	80 89       	ldd	r24, Z+16	; 0x10
 130:	0e 94 60 00 	call	0xc0	; 0xc0 <sendDataST7920>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 134:	1f 5f       	subi	r17, 0xFF	; 255
 136:	08 94       	sec
 138:	e1 1c       	adc	r14, r1
 13a:	f1 1c       	adc	r15, r1
 13c:	10 32       	cpi	r17, 0x20	; 32
 13e:	b1 f7       	brne	.-20     	; 0x12c <refreshLCD+0x46>
 140:	e6 01       	movw	r28, r12
 142:	e0 96       	adiw	r28, 0x30	; 48
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 144:	89 91       	ld	r24, Y+
 146:	0e 94 60 00 	call	0xc0	; 0xc0 <sendDataST7920>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 14a:	0f 5f       	subi	r16, 0xFF	; 255
 14c:	00 34       	cpi	r16, 0x40	; 64
 14e:	d1 f7       	brne	.-12     	; 0x144 <refreshLCD+0x5e>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	ff 90       	pop	r15
 15a:	ef 90       	pop	r14
 15c:	df 90       	pop	r13
 15e:	cf 90       	pop	r12
 160:	08 95       	ret

00000162 <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 162:	1f 93       	push	r17
 164:	fc 01       	movw	r30, r24
 166:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 168:	10 e3       	ldi	r17, 0x30	; 48
 16a:	43 c0       	rjmp	.+134    	; 0x1f2 <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 16c:	43 30       	cpi	r20, 0x03	; 3
 16e:	21 f1       	breq	.+72     	; 0x1b8 <decToAscii+0x56>
 170:	44 30       	cpi	r20, 0x04	; 4
 172:	28 f4       	brcc	.+10     	; 0x17e <decToAscii+0x1c>
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	b1 f1       	breq	.+108    	; 0x1e4 <decToAscii+0x82>
 178:	42 30       	cpi	r20, 0x02	; 2
 17a:	c1 f5       	brne	.+112    	; 0x1ec <decToAscii+0x8a>
 17c:	28 c0       	rjmp	.+80     	; 0x1ce <decToAscii+0x6c>
 17e:	44 30       	cpi	r20, 0x04	; 4
 180:	69 f0       	breq	.+26     	; 0x19c <decToAscii+0x3a>
 182:	45 30       	cpi	r20, 0x05	; 5
 184:	99 f5       	brne	.+102    	; 0x1ec <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 186:	c9 01       	movw	r24, r18
 188:	60 e1       	ldi	r22, 0x10	; 16
 18a:	77 e2       	ldi	r23, 0x27	; 39
 18c:	0e 94 39 02 	call	0x472	; 0x472 <__udivmodhi4>
 190:	60 5d       	subi	r22, 0xD0	; 208
 192:	60 83       	st	Z, r22
				dec%=10000;
 194:	c9 01       	movw	r24, r18
 196:	60 e1       	ldi	r22, 0x10	; 16
 198:	77 e2       	ldi	r23, 0x27	; 39
 19a:	0a c0       	rjmp	.+20     	; 0x1b0 <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 19c:	c9 01       	movw	r24, r18
 19e:	68 ee       	ldi	r22, 0xE8	; 232
 1a0:	73 e0       	ldi	r23, 0x03	; 3
 1a2:	0e 94 39 02 	call	0x472	; 0x472 <__udivmodhi4>
 1a6:	60 5d       	subi	r22, 0xD0	; 208
 1a8:	60 83       	st	Z, r22
				dec%=1000;
 1aa:	c9 01       	movw	r24, r18
 1ac:	68 ee       	ldi	r22, 0xE8	; 232
 1ae:	73 e0       	ldi	r23, 0x03	; 3
 1b0:	0e 94 39 02 	call	0x472	; 0x472 <__udivmodhi4>
 1b4:	9c 01       	movw	r18, r24
 1b6:	1b c0       	rjmp	.+54     	; 0x1ee <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 1b8:	c9 01       	movw	r24, r18
 1ba:	64 e6       	ldi	r22, 0x64	; 100
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	0e 94 39 02 	call	0x472	; 0x472 <__udivmodhi4>
 1c2:	60 5d       	subi	r22, 0xD0	; 208
 1c4:	60 83       	st	Z, r22
				dec%=100;
 1c6:	c9 01       	movw	r24, r18
 1c8:	64 e6       	ldi	r22, 0x64	; 100
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	f1 cf       	rjmp	.-30     	; 0x1b0 <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 1ce:	c9 01       	movw	r24, r18
 1d0:	6a e0       	ldi	r22, 0x0A	; 10
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	0e 94 39 02 	call	0x472	; 0x472 <__udivmodhi4>
 1d8:	60 5d       	subi	r22, 0xD0	; 208
 1da:	60 83       	st	Z, r22
				dec%=10;
 1dc:	c9 01       	movw	r24, r18
 1de:	6a e0       	ldi	r22, 0x0A	; 10
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	e6 cf       	rjmp	.-52     	; 0x1b0 <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 1e4:	20 5d       	subi	r18, 0xD0	; 208
 1e6:	20 83       	st	Z, r18
 1e8:	20 53       	subi	r18, 0x30	; 48
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 1ec:	10 83       	st	Z, r17
		}
		width--;
 1ee:	41 50       	subi	r20, 0x01	; 1
		str++;
 1f0:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 1f2:	44 23       	and	r20, r20
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <decToAscii+0x96>
 1f6:	ba cf       	rjmp	.-140    	; 0x16c <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 1f8:	1f 91       	pop	r17
 1fa:	08 95       	ret

000001fc <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 1fc:	cf 92       	push	r12
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 20e:	eb 01       	movw	r28, r22
 210:	cd 2f       	mov	r28, r29
 212:	dd 27       	eor	r29, r29
 214:	c2 95       	swap	r28
 216:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 218:	27 e3       	ldi	r18, 0x37	; 55
 21a:	d2 2e       	mov	r13, r18
 21c:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 21e:	90 e3       	ldi	r25, 0x30	; 48
 220:	e9 2e       	mov	r14, r25
 222:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 224:	a7 2f       	mov	r26, r23
 226:	bb 27       	eor	r27, r27
 228:	af 70       	andi	r26, 0x0F	; 15
 22a:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 22c:	17 e3       	ldi	r17, 0x37	; 55
 22e:	f1 2e       	mov	r15, r17
 230:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 232:	0a 2f       	mov	r16, r26
 234:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 236:	9b 01       	movw	r18, r22
 238:	54 e0       	ldi	r21, 0x04	; 4
 23a:	36 95       	lsr	r19
 23c:	27 95       	ror	r18
 23e:	5a 95       	dec	r21
 240:	e1 f7       	brne	.-8      	; 0x23a <hexToAscii+0x3e>
 242:	2f 70       	andi	r18, 0x0F	; 15
 244:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 246:	82 2f       	mov	r24, r18
 248:	12 2f       	mov	r17, r18
 24a:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 24c:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 24e:	90 e3       	ldi	r25, 0x30	; 48
 250:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 252:	6f 70       	andi	r22, 0x0F	; 15
 254:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 256:	56 2f       	mov	r21, r22
 258:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 25a:	96 2f       	mov	r25, r22
 25c:	99 5c       	subi	r25, 0xC9	; 201
 25e:	2a c0       	rjmp	.+84     	; 0x2b4 <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 260:	42 30       	cpi	r20, 0x02	; 2
 262:	b9 f0       	breq	.+46     	; 0x292 <hexToAscii+0x96>
 264:	43 30       	cpi	r20, 0x03	; 3
 266:	18 f4       	brcc	.+6      	; 0x26e <hexToAscii+0x72>
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	09 f5       	brne	.+66     	; 0x2ae <hexToAscii+0xb2>
 26c:	19 c0       	rjmp	.+50     	; 0x2a0 <hexToAscii+0xa4>
 26e:	43 30       	cpi	r20, 0x03	; 3
 270:	49 f0       	breq	.+18     	; 0x284 <hexToAscii+0x88>
 272:	44 30       	cpi	r20, 0x04	; 4
 274:	e1 f4       	brne	.+56     	; 0x2ae <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 276:	ca 30       	cpi	r28, 0x0A	; 10
 278:	d1 05       	cpc	r29, r1
 27a:	10 f0       	brcs	.+4      	; 0x280 <hexToAscii+0x84>
 27c:	d0 82       	st	Z, r13
 27e:	18 c0       	rjmp	.+48     	; 0x2b0 <hexToAscii+0xb4>
				else *str = tmp+'0';
 280:	e0 82       	st	Z, r14
 282:	16 c0       	rjmp	.+44     	; 0x2b0 <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 284:	aa 30       	cpi	r26, 0x0A	; 10
 286:	b1 05       	cpc	r27, r1
 288:	10 f0       	brcs	.+4      	; 0x28e <hexToAscii+0x92>
 28a:	f0 82       	st	Z, r15
 28c:	11 c0       	rjmp	.+34     	; 0x2b0 <hexToAscii+0xb4>
				else *str = tmp+'0';
 28e:	00 83       	st	Z, r16
 290:	0f c0       	rjmp	.+30     	; 0x2b0 <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 292:	2a 30       	cpi	r18, 0x0A	; 10
 294:	31 05       	cpc	r19, r1
 296:	10 f0       	brcs	.+4      	; 0x29c <hexToAscii+0xa0>
 298:	10 83       	st	Z, r17
 29a:	0a c0       	rjmp	.+20     	; 0x2b0 <hexToAscii+0xb4>
				else *str = tmp+'0';
 29c:	80 83       	st	Z, r24
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2a0:	6a 30       	cpi	r22, 0x0A	; 10
 2a2:	71 05       	cpc	r23, r1
 2a4:	10 f0       	brcs	.+4      	; 0x2aa <hexToAscii+0xae>
 2a6:	90 83       	st	Z, r25
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <hexToAscii+0xb4>
				else *str = tmp+'0';
 2aa:	50 83       	st	Z, r21
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 2ae:	c0 82       	st	Z, r12
		}
		width--;
 2b0:	41 50       	subi	r20, 0x01	; 1
		str++;
 2b2:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 2b4:	44 23       	and	r20, r20
 2b6:	a1 f6       	brne	.-88     	; 0x260 <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	cf 90       	pop	r12
 2c8:	08 95       	ret

000002ca <st7920LcdInit>:

/*Hardware Environment：DVK501 && M16+ EX*/
#elif defined(_DVK501_M16_EX_)
void st7920LcdInit(void)
{
DDRB|=0xE0;
 2ca:	87 b3       	in	r24, 0x17	; 23
 2cc:	80 6e       	ori	r24, 0xE0	; 224
 2ce:	87 bb       	out	0x17, r24	; 23
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 2d0:	80 e5       	ldi	r24, 0x50	; 80
 2d2:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	8e b9       	out	0x0e, r24	; 14
sendCodeST7920(0x0C);//整体显示
 2d8:	8c e0       	ldi	r24, 0x0C	; 12
 2da:	0e 94 4d 00 	call	0x9a	; 0x9a <sendCodeST7920>
sendCodeST7920(0x01);//清屏
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 4d 00 	call	0x9a	; 0x9a <sendCodeST7920>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e4:	86 e6       	ldi	r24, 0x66	; 102
 2e6:	9e e0       	ldi	r25, 0x0E	; 14
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <st7920LcdInit+0x1e>
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 2ec:	8e e7       	ldi	r24, 0x7E	; 126
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	60 e2       	ldi	r22, 0x20	; 32
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	40 e4       	ldi	r20, 0x40	; 64
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	0e 94 4d 02 	call	0x49a	; 0x49a <memset>
}
 2fc:	08 95       	ret

000002fe <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 2fe:	af 92       	push	r10
 300:	bf 92       	push	r11
 302:	cf 92       	push	r12
 304:	df 92       	push	r13
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	df 93       	push	r29
 30e:	cf 93       	push	r28
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	0d 85       	ldd	r16, Y+13	; 0x0d
 316:	ae 84       	ldd	r10, Y+14	; 0x0e
 318:	bf 84       	ldd	r11, Y+15	; 0x0f
 31a:	e8 88       	ldd	r14, Y+16	; 0x10
 31c:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 31e:	02 95       	swap	r16
 320:	00 7f       	andi	r16, 0xF0	; 240
 322:	8c 85       	ldd	r24, Y+12	; 0x0c
 324:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 326:	de 01       	movw	r26, r28
 328:	52 96       	adiw	r26, 0x12	; 18
 32a:	5d c0       	rjmp	.+186    	; 0x3e6 <showLine+0xe8>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 32c:	01 34       	cpi	r16, 0x41	; 65
 32e:	08 f0       	brcs	.+2      	; 0x332 <showLine+0x34>
 330:	5f c0       	rjmp	.+190    	; 0x3f0 <showLine+0xf2>

		if(*str == '\\')
 332:	8c 35       	cpi	r24, 0x5C	; 92
 334:	51 f4       	brne	.+20     	; 0x34a <showLine+0x4c>
		{
			str++;
 336:	08 94       	sec
 338:	e1 1c       	adc	r14, r1
 33a:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 33c:	95 01       	movw	r18, r10
 33e:	20 0f       	add	r18, r16
 340:	31 1d       	adc	r19, r1
 342:	f7 01       	movw	r30, r14
 344:	80 81       	ld	r24, Z
 346:	f9 01       	movw	r30, r18
 348:	49 c0       	rjmp	.+146    	; 0x3dc <showLine+0xde>
		}
		else if(*str == '%')
 34a:	85 32       	cpi	r24, 0x25	; 37
 34c:	09 f0       	breq	.+2      	; 0x350 <showLine+0x52>
 34e:	43 c0       	rjmp	.+134    	; 0x3d6 <showLine+0xd8>
		{
			str++;
 350:	08 94       	sec
 352:	e1 1c       	adc	r14, r1
 354:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 356:	f7 01       	movw	r30, r14
 358:	80 81       	ld	r24, Z
 35a:	84 36       	cpi	r24, 0x64	; 100
 35c:	11 f0       	breq	.+4      	; 0x362 <showLine+0x64>
 35e:	84 34       	cpi	r24, 0x44	; 68
 360:	99 f4       	brne	.+38     	; 0x388 <showLine+0x8a>
			{
				str++;
 362:	08 94       	sec
 364:	e1 1c       	adc	r14, r1
 366:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 368:	52 e0       	ldi	r21, 0x02	; 2
 36a:	c5 2e       	mov	r12, r21
 36c:	d1 2c       	mov	r13, r1
 36e:	ca 0e       	add	r12, r26
 370:	db 1e       	adc	r13, r27
 372:	6d 91       	ld	r22, X+
 374:	7c 91       	ld	r23, X
 376:	f7 01       	movw	r30, r14
 378:	40 81       	ld	r20, Z
 37a:	40 53       	subi	r20, 0x30	; 48
 37c:	c5 01       	movw	r24, r10
 37e:	80 0f       	add	r24, r16
 380:	91 1d       	adc	r25, r1
 382:	0e 94 b1 00 	call	0x162	; 0x162 <decToAscii>
 386:	21 c0       	rjmp	.+66     	; 0x3ca <showLine+0xcc>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 388:	83 36       	cpi	r24, 0x63	; 99
 38a:	11 f0       	breq	.+4      	; 0x390 <showLine+0x92>
 38c:	83 34       	cpi	r24, 0x43	; 67
 38e:	39 f4       	brne	.+14     	; 0x39e <showLine+0xa0>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 390:	f5 01       	movw	r30, r10
 392:	e0 0f       	add	r30, r16
 394:	f1 1d       	adc	r31, r1
 396:	8c 91       	ld	r24, X
 398:	80 83       	st	Z, r24
 39a:	12 96       	adiw	r26, 0x02	; 2
 39c:	20 c0       	rjmp	.+64     	; 0x3de <showLine+0xe0>
			}
			else if(*str=='x'||*str=='X')
 39e:	88 37       	cpi	r24, 0x78	; 120
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <showLine+0xa8>
 3a2:	88 35       	cpi	r24, 0x58	; 88
 3a4:	e1 f4       	brne	.+56     	; 0x3de <showLine+0xe0>
			{
				str++;
 3a6:	08 94       	sec
 3a8:	e1 1c       	adc	r14, r1
 3aa:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3ac:	42 e0       	ldi	r20, 0x02	; 2
 3ae:	c4 2e       	mov	r12, r20
 3b0:	d1 2c       	mov	r13, r1
 3b2:	ca 0e       	add	r12, r26
 3b4:	db 1e       	adc	r13, r27
 3b6:	6d 91       	ld	r22, X+
 3b8:	7c 91       	ld	r23, X
 3ba:	f7 01       	movw	r30, r14
 3bc:	40 81       	ld	r20, Z
 3be:	40 53       	subi	r20, 0x30	; 48
 3c0:	c5 01       	movw	r24, r10
 3c2:	80 0f       	add	r24, r16
 3c4:	91 1d       	adc	r25, r1
 3c6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <hexToAscii>
				coordinate+=(*str-'0'-1);
 3ca:	01 53       	subi	r16, 0x31	; 49
 3cc:	f7 01       	movw	r30, r14
 3ce:	80 81       	ld	r24, Z
 3d0:	08 0f       	add	r16, r24
 3d2:	d6 01       	movw	r26, r12
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <showLine+0xe0>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 3d6:	f5 01       	movw	r30, r10
 3d8:	e0 0f       	add	r30, r16
 3da:	f1 1d       	adc	r31, r1
 3dc:	80 83       	st	Z, r24
		}
		str++;
 3de:	08 94       	sec
 3e0:	e1 1c       	adc	r14, r1
 3e2:	f1 1c       	adc	r15, r1
		coordinate++;
 3e4:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 3e6:	f7 01       	movw	r30, r14
 3e8:	80 81       	ld	r24, Z
 3ea:	88 23       	and	r24, r24
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <showLine+0xf2>
 3ee:	9e cf       	rjmp	.-196    	; 0x32c <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 3f0:	cf 91       	pop	r28
 3f2:	df 91       	pop	r29
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	df 90       	pop	r13
 3fc:	cf 90       	pop	r12
 3fe:	bf 90       	pop	r11
 400:	af 90       	pop	r10
 402:	08 95       	ret

00000404 <main>:

#define _DVK501_M16_EX_ 1
#include <avr/io.h>
#include <ws_lcd_ST7920_port.h>
int main(void)
{
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
	st7920LcdInit(); /*LCD初始化*/
 408:	0e 94 65 01 	call	0x2ca	; 0x2ca <st7920LcdInit>
	showLine(0,0,lcd_buffer,"LCD12864 Example");
 40c:	00 d0       	rcall	.+0      	; 0x40e <main+0xa>
 40e:	00 d0       	rcall	.+0      	; 0x410 <main+0xc>
 410:	00 d0       	rcall	.+0      	; 0x412 <main+0xe>
 412:	ed b7       	in	r30, 0x3d	; 61
 414:	fe b7       	in	r31, 0x3e	; 62
 416:	31 96       	adiw	r30, 0x01	; 1
 418:	ad b7       	in	r26, 0x3d	; 61
 41a:	be b7       	in	r27, 0x3e	; 62
 41c:	11 96       	adiw	r26, 0x01	; 1
 41e:	1c 92       	st	X, r1
 420:	11 82       	std	Z+1, r1	; 0x01
 422:	0e e7       	ldi	r16, 0x7E	; 126
 424:	10 e0       	ldi	r17, 0x00	; 0
 426:	13 83       	std	Z+3, r17	; 0x03
 428:	02 83       	std	Z+2, r16	; 0x02
 42a:	80 e6       	ldi	r24, 0x60	; 96
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	95 83       	std	Z+5, r25	; 0x05
 430:	84 83       	std	Z+4, r24	; 0x04
 432:	0e 94 7f 01 	call	0x2fe	; 0x2fe <showLine>
	showLine(2,1,lcd_buffer,"SZ WaveShare");
 436:	ed b7       	in	r30, 0x3d	; 61
 438:	fe b7       	in	r31, 0x3e	; 62
 43a:	31 96       	adiw	r30, 0x01	; 1
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	ad b7       	in	r26, 0x3d	; 61
 440:	be b7       	in	r27, 0x3e	; 62
 442:	11 96       	adiw	r26, 0x01	; 1
 444:	8c 93       	st	X, r24
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	81 83       	std	Z+1, r24	; 0x01
 44a:	13 83       	std	Z+3, r17	; 0x03
 44c:	02 83       	std	Z+2, r16	; 0x02
 44e:	81 e7       	ldi	r24, 0x71	; 113
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	95 83       	std	Z+5, r25	; 0x05
 454:	84 83       	std	Z+4, r24	; 0x04
 456:	0e 94 7f 01 	call	0x2fe	; 0x2fe <showLine>
	refreshLCD(lcd_buffer); /*刷新LCD*/
 45a:	8d b7       	in	r24, 0x3d	; 61
 45c:	9e b7       	in	r25, 0x3e	; 62
 45e:	06 96       	adiw	r24, 0x06	; 6
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	9e bf       	out	0x3e, r25	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	8d bf       	out	0x3d, r24	; 61
 46a:	c8 01       	movw	r24, r16
 46c:	0e 94 73 00 	call	0xe6	; 0xe6 <refreshLCD>
 470:	ff cf       	rjmp	.-2      	; 0x470 <__stack+0x11>

00000472 <__udivmodhi4>:
 472:	aa 1b       	sub	r26, r26
 474:	bb 1b       	sub	r27, r27
 476:	51 e1       	ldi	r21, 0x11	; 17
 478:	07 c0       	rjmp	.+14     	; 0x488 <__udivmodhi4_ep>

0000047a <__udivmodhi4_loop>:
 47a:	aa 1f       	adc	r26, r26
 47c:	bb 1f       	adc	r27, r27
 47e:	a6 17       	cp	r26, r22
 480:	b7 07       	cpc	r27, r23
 482:	10 f0       	brcs	.+4      	; 0x488 <__udivmodhi4_ep>
 484:	a6 1b       	sub	r26, r22
 486:	b7 0b       	sbc	r27, r23

00000488 <__udivmodhi4_ep>:
 488:	88 1f       	adc	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	5a 95       	dec	r21
 48e:	a9 f7       	brne	.-22     	; 0x47a <__udivmodhi4_loop>
 490:	80 95       	com	r24
 492:	90 95       	com	r25
 494:	bc 01       	movw	r22, r24
 496:	cd 01       	movw	r24, r26
 498:	08 95       	ret

0000049a <memset>:
 49a:	dc 01       	movw	r26, r24
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <memset+0x6>
 49e:	6d 93       	st	X+, r22
 4a0:	41 50       	subi	r20, 0x01	; 1
 4a2:	50 40       	sbci	r21, 0x00	; 0
 4a4:	e0 f7       	brcc	.-8      	; 0x49e <memset+0x4>
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
