
WDT_EXAMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000029  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002a0  00000000  00000000  000001b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000104  00000000  00000000  00000457  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000021d  00000000  00000000  0000055b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000dd  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c0  00000000  00000000  00000885  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000945  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 75 00 	call	0xea	; 0xea <main>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <showReset>:
#include <util/delay.h>
#include <avr/wdt.h> 

void showReset(void)
{
	DDRB=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB=0x55;
  70:	85 e5       	ldi	r24, 0x55	; 85
  72:	88 bb       	out	0x18, r24	; 24
  74:	88 eb       	ldi	r24, 0xB8	; 184
  76:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	28 eb       	ldi	r18, 0xB8	; 184
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	31 97       	sbiw	r30, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <showReset+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  84:	d9 f7       	brne	.-10     	; 0x7c <showReset+0x10>
	_delay_ms(300);
	PORTB=~PORTB;
  86:	88 b3       	in	r24, 0x18	; 24
  88:	80 95       	com	r24
  8a:	88 bb       	out	0x18, r24	; 24
  8c:	88 eb       	ldi	r24, 0xB8	; 184
  8e:	9b e0       	ldi	r25, 0x0B	; 11
  90:	28 eb       	ldi	r18, 0xB8	; 184
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <showReset+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9c:	d9 f7       	brne	.-10     	; 0x94 <showReset+0x28>
	_delay_ms(300);
	PORTB=~PORTB;
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	80 95       	com	r24
  a2:	88 bb       	out	0x18, r24	; 24
  a4:	88 eb       	ldi	r24, 0xB8	; 184
  a6:	9b e0       	ldi	r25, 0x0B	; 11
  a8:	28 eb       	ldi	r18, 0xB8	; 184
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <showReset+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b4:	d9 f7       	brne	.-10     	; 0xac <showReset+0x40>
	_delay_ms(300);
	PORTB=~PORTB;
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	80 95       	com	r24
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	88 eb       	ldi	r24, 0xB8	; 184
  be:	9b e0       	ldi	r25, 0x0B	; 11
  c0:	28 eb       	ldi	r18, 0xB8	; 184
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <showReset+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  cc:	d9 f7       	brne	.-10     	; 0xc4 <showReset+0x58>
	_delay_ms(300);
	PORTB=~PORTB;
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 95       	com	r24
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	88 eb       	ldi	r24, 0xB8	; 184
  d6:	9b e0       	ldi	r25, 0x0B	; 11
  d8:	28 eb       	ldi	r18, 0xB8	; 184
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	f9 01       	movw	r30, r18
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <showReset+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e4:	d9 f7       	brne	.-10     	; 0xdc <showReset+0x70>
	_delay_ms(300);
	PORTB=0x00;
  e6:	18 ba       	out	0x18, r1	; 24
}
  e8:	08 95       	ret

000000ea <main>:

int main(void)
{
	showReset();	//将PB口接到LED上
  ea:	0e 94 36 00 	call	0x6c	; 0x6c <showReset>
	wdt_enable(WDTO_500MS); //500MS只是一个大概值，具体时间请查看datasheet
  ee:	2d e0       	ldi	r18, 0x0D	; 13
  f0:	88 e1       	ldi	r24, 0x18	; 24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	a8 95       	wdr
  fa:	81 bd       	out	0x21, r24	; 33
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	21 bd       	out	0x21, r18	; 33
 100:	28 eb       	ldi	r18, 0xB8	; 184
 102:	30 e0       	ldi	r19, 0x00	; 0
	while(1)
	{
		wdt_reset();
 104:	a8 95       	wdr
 106:	8c ea       	ldi	r24, 0xAC	; 172
 108:	9d e0       	ldi	r25, 0x0D	; 13
 10a:	f9 01       	movw	r30, r18
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <main+0x20>
 114:	f7 cf       	rjmp	.-18     	; 0x104 <main+0x1a>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
